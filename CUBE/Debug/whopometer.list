
whopometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009664  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08009778  08009778  0000a778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c10  08009c10  0000b358  2**0
                  CONTENTS
  4 .ARM          00000008  08009c10  08009c10  0000ac10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c18  08009c18  0000b358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c18  08009c18  0000ac18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c1c  08009c1c  0000ac1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  08009c20  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018e8  20000358  08009f78  0000b358  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c40  08009f78  0000bc40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b358  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f724  00000000  00000000  0000b381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051f3  00000000  00000000  0002aaa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000c7c0  00000000  00000000  0002fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013d0  00000000  00000000  0003c458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000168e  00000000  00000000  0003d828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c3b3  00000000  00000000  0003eeb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000226f0  00000000  00000000  0005b269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e302  00000000  00000000  0007d959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010bc5b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000047d0  00000000  00000000  0010bca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00110470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800975c 	.word	0x0800975c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800975c 	.word	0x0800975c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <h3lis331dl_read_reg>:
  *
  */
int32_t __weak h3lis331dl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8000e0c:	b410      	push	{r4}
  int32_t ret;

  if (ctx == NULL) return -1;
 8000e0e:	b120      	cbz	r0, 8000e1a <h3lis331dl_read_reg+0xe>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000e10:	6844      	ldr	r4, [r0, #4]
 8000e12:	68c0      	ldr	r0, [r0, #12]
 8000e14:	46a4      	mov	ip, r4

  return ret;
}
 8000e16:	bc10      	pop	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000e18:	4760      	bx	ip
}
 8000e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1e:	bc10      	pop	{r4}
 8000e20:	4770      	bx	lr

08000e22 <h3lis331dl_write_reg>:
  *
  */
int32_t __weak h3lis331dl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8000e22:	b410      	push	{r4}
  int32_t ret;

  if (ctx == NULL) return -1;
 8000e24:	b120      	cbz	r0, 8000e30 <h3lis331dl_write_reg+0xe>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000e26:	6804      	ldr	r4, [r0, #0]
 8000e28:	68c0      	ldr	r0, [r0, #12]
 8000e2a:	46a4      	mov	ip, r4

  return ret;
}
 8000e2c:	bc10      	pop	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000e2e:	4760      	bx	ip
}
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	bc10      	pop	{r4}
 8000e36:	4770      	bx	lr

08000e38 <h3lis331dl_from_fs100_to_mg>:
  * @{
  *
  */

float_t h3lis331dl_from_fs100_to_mg(int16_t lsb)
{
 8000e38:	b508      	push	{r3, lr}
  return ((float_t)lsb * 3.0625f);
 8000e3a:	f7ff ff93 	bl	8000d64 <__aeabi_i2f>
 8000e3e:	4902      	ldr	r1, [pc, #8]	@ (8000e48 <h3lis331dl_from_fs100_to_mg+0x10>)
 8000e40:	f7ff f98e 	bl	8000160 <__aeabi_fmul>
}
 8000e44:	bd08      	pop	{r3, pc}
 8000e46:	bf00      	nop
 8000e48:	40440000 	.word	0x40440000

08000e4c <h3lis331dl_data_rate_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_data_rate_set(const stmdev_ctx_t *ctx,
                                 h3lis331dl_dr_t val)
{
 8000e4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  h3lis331dl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG1,
 8000e4e:	2301      	movs	r3, #1
{
 8000e50:	460c      	mov	r4, r1
  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG1,
 8000e52:	aa01      	add	r2, sp, #4
 8000e54:	2120      	movs	r1, #32
{
 8000e56:	4605      	mov	r5, r0
  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG1,
 8000e58:	f7ff ffd8 	bl	8000e0c <h3lis331dl_read_reg>
                            (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8000e5c:	b988      	cbnz	r0, 8000e82 <h3lis331dl_data_rate_set+0x36>
  {
    ctrl_reg1.pm = (uint8_t)val & 0x07U;
    ctrl_reg1.dr = ((uint8_t)val & 0x30U) >> 4;
 8000e5e:	f3c4 1301 	ubfx	r3, r4, #4, #2
 8000e62:	0164      	lsls	r4, r4, #5
 8000e64:	ea44 04c3 	orr.w	r4, r4, r3, lsl #3
 8000e68:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG1,
 8000e6c:	2120      	movs	r1, #32
    ctrl_reg1.dr = ((uint8_t)val & 0x30U) >> 4;
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	431c      	orrs	r4, r3
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG1,
 8000e74:	4628      	mov	r0, r5
 8000e76:	2301      	movs	r3, #1
 8000e78:	aa01      	add	r2, sp, #4
    ctrl_reg1.dr = ((uint8_t)val & 0x30U) >> 4;
 8000e7a:	f88d 4004 	strb.w	r4, [sp, #4]
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG1,
 8000e7e:	f7ff ffd0 	bl	8000e22 <h3lis331dl_write_reg>
                               (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
}
 8000e82:	b003      	add	sp, #12
 8000e84:	bd30      	pop	{r4, r5, pc}

08000e86 <h3lis331dl_full_scale_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_full_scale_set(const stmdev_ctx_t *ctx,
                                  h3lis331dl_fs_t val)
{
 8000e86:	b537      	push	{r0, r1, r2, r4, r5, lr}
  h3lis331dl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000e88:	2301      	movs	r3, #1
{
 8000e8a:	460d      	mov	r5, r1
  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000e8c:	aa01      	add	r2, sp, #4
 8000e8e:	2123      	movs	r1, #35	@ 0x23
{
 8000e90:	4604      	mov	r4, r0
  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000e92:	f7ff ffbb 	bl	8000e0c <h3lis331dl_read_reg>
                            (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8000e96:	b958      	cbnz	r0, 8000eb0 <h3lis331dl_full_scale_set+0x2a>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8000e98:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000e9c:	2123      	movs	r1, #35	@ 0x23
    ctrl_reg4.fs = (uint8_t)val;
 8000e9e:	f365 1305 	bfi	r3, r5, #4, #2
 8000ea2:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	aa01      	add	r2, sp, #4
 8000eac:	f7ff ffb9 	bl	8000e22 <h3lis331dl_write_reg>
                               (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
}
 8000eb0:	b003      	add	sp, #12
 8000eb2:	bd30      	pop	{r4, r5, pc}

08000eb4 <h3lis331dl_block_data_update_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_block_data_update_set(const stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8000eb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  h3lis331dl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000eb6:	2301      	movs	r3, #1
{
 8000eb8:	460d      	mov	r5, r1
  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000eba:	aa01      	add	r2, sp, #4
 8000ebc:	2123      	movs	r1, #35	@ 0x23
{
 8000ebe:	4604      	mov	r4, r0
  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000ec0:	f7ff ffa4 	bl	8000e0c <h3lis331dl_read_reg>
                            (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8000ec4:	b958      	cbnz	r0, 8000ede <h3lis331dl_block_data_update_set+0x2a>
  {
    ctrl_reg4.bdu = val;
 8000ec6:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000eca:	2123      	movs	r1, #35	@ 0x23
    ctrl_reg4.bdu = val;
 8000ecc:	f365 13c7 	bfi	r3, r5, #7, #1
 8000ed0:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	aa01      	add	r2, sp, #4
 8000eda:	f7ff ffa2 	bl	8000e22 <h3lis331dl_write_reg>
                               (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
}
 8000ede:	b003      	add	sp, #12
 8000ee0:	bd30      	pop	{r4, r5, pc}

08000ee2 <h3lis331dl_status_reg_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_status_reg_get(const stmdev_ctx_t *ctx,
                                  h3lis331dl_status_reg_t *val)
{
 8000ee2:	b508      	push	{r3, lr}
 8000ee4:	460a      	mov	r2, r1
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_STATUS_REG,
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	2127      	movs	r1, #39	@ 0x27
 8000eea:	f7ff ff8f 	bl	8000e0c <h3lis331dl_read_reg>
                            (uint8_t *) val, 1);

  return ret;
}
 8000eee:	bd08      	pop	{r3, pc}

08000ef0 <h3lis331dl_acceleration_raw_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_acceleration_raw_get(const stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8000ef0:	b513      	push	{r0, r1, r4, lr}
 8000ef2:	460c      	mov	r4, r1
  uint8_t buff[6];
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_OUT_X_L, buff, 6);
 8000ef4:	466a      	mov	r2, sp
 8000ef6:	2306      	movs	r3, #6
 8000ef8:	2128      	movs	r1, #40	@ 0x28
 8000efa:	f7ff ff87 	bl	8000e0c <h3lis331dl_read_reg>
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000efe:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8000f02:	f89d 3000 	ldrb.w	r3, [sp]
 8000f06:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000f0a:	8023      	strh	r3, [r4, #0]
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8000f0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8000f10:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8000f14:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000f18:	8063      	strh	r3, [r4, #2]
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8000f1a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8000f1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f22:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8000f26:	80a3      	strh	r3, [r4, #4]

  return ret;
}
 8000f28:	b002      	add	sp, #8
 8000f2a:	bd10      	pop	{r4, pc}

08000f2c <h3lis331dl_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000f2c:	b508      	push	{r3, lr}
 8000f2e:	460a      	mov	r2, r1
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_WHO_AM_I, buff, 1);
 8000f30:	2301      	movs	r3, #1
 8000f32:	210f      	movs	r1, #15
 8000f34:	f7ff ff6a 	bl	8000e0c <h3lis331dl_read_reg>

  return ret;
}
 8000f38:	bd08      	pop	{r3, pc}

08000f3a <h3lis331dl_hp_path_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_hp_path_set(const stmdev_ctx_t *ctx,
                               h3lis331dl_hpen_t val)
{
 8000f3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  h3lis331dl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG2,
 8000f3c:	2301      	movs	r3, #1
{
 8000f3e:	460c      	mov	r4, r1
  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG2,
 8000f40:	aa01      	add	r2, sp, #4
 8000f42:	2121      	movs	r1, #33	@ 0x21
{
 8000f44:	4605      	mov	r5, r0
  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG2,
 8000f46:	f7ff ff61 	bl	8000e0c <h3lis331dl_read_reg>
                            (uint8_t *)&ctrl_reg2, 1);

  if (ret == 0)
 8000f4a:	b978      	cbnz	r0, 8000f6c <h3lis331dl_hp_path_set+0x32>
  {
    ctrl_reg2.hpen = (uint8_t)val & 0x03U;
 8000f4c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8000f50:	00a4      	lsls	r4, r4, #2
 8000f52:	f023 031c 	bic.w	r3, r3, #28
 8000f56:	f004 041c 	and.w	r4, r4, #28
 8000f5a:	431c      	orrs	r4, r3
    ctrl_reg2.fds = ((uint8_t)val & 0x04U) >> 2;
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG2,
 8000f5c:	2121      	movs	r1, #33	@ 0x21
 8000f5e:	2301      	movs	r3, #1
 8000f60:	4628      	mov	r0, r5
 8000f62:	aa01      	add	r2, sp, #4
    ctrl_reg2.hpen = (uint8_t)val & 0x03U;
 8000f64:	f88d 4004 	strb.w	r4, [sp, #4]
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG2,
 8000f68:	f7ff ff5b 	bl	8000e22 <h3lis331dl_write_reg>
                               (uint8_t *)&ctrl_reg2, 1);
  }

  return ret;
}
 8000f6c:	b003      	add	sp, #12
 8000f6e:	bd30      	pop	{r4, r5, pc}

08000f70 <platform_delay>:
	return 0;
}

/** Optional (may be required by driver) **/
static void platform_delay(uint32_t millisec){
	HAL_Delay(millisec);
 8000f70:	f000 be92 	b.w	8001c98 <HAL_Delay>

08000f74 <platform_read>:
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len){
 8000f74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Read(handle, H3LIS331DL_I2C_ADD_L, reg,
 8000f76:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8000f7a:	9200      	str	r2, [sp, #0]
 8000f7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000f80:	f041 0280 	orr.w	r2, r1, #128	@ 0x80
 8000f84:	2301      	movs	r3, #1
 8000f86:	2131      	movs	r1, #49	@ 0x31
 8000f88:	f001 fb12 	bl	80025b0 <HAL_I2C_Mem_Read>
}
 8000f8c:	2000      	movs	r0, #0
 8000f8e:	b004      	add	sp, #16
 8000f90:	bd10      	pop	{r4, pc}

08000f92 <platform_write>:
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len){
 8000f92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	HAL_I2C_Mem_Write(handle, H3LIS331DL_I2C_ADD_L, reg,
 8000f94:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8000f98:	9200      	str	r2, [sp, #0]
 8000f9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8000f9e:	f041 0280 	orr.w	r2, r1, #128	@ 0x80
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	2131      	movs	r1, #49	@ 0x31
 8000fa6:	f001 fa73 	bl	8002490 <HAL_I2C_Mem_Write>
}
 8000faa:	2000      	movs	r0, #0
 8000fac:	b004      	add	sp, #16
 8000fae:	bd10      	pop	{r4, pc}

08000fb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fb0:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb2:	2410      	movs	r4, #16
{
 8000fb4:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fb6:	4622      	mov	r2, r4
 8000fb8:	2100      	movs	r1, #0
 8000fba:	a80d      	add	r0, sp, #52	@ 0x34
 8000fbc:	f006 fafd 	bl	80075ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc0:	2214      	movs	r2, #20
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	eb0d 0002 	add.w	r0, sp, r2
 8000fc8:	f006 faf7 	bl	80075ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fcc:	4622      	mov	r2, r4
 8000fce:	2100      	movs	r1, #0
 8000fd0:	a801      	add	r0, sp, #4
 8000fd2:	f006 faf2 	bl	80075ba <memset>
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fd6:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fdc:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000fde:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fe2:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe6:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000fea:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fee:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000ff0:	910c      	str	r1, [sp, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff2:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ff4:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff6:	f002 fac3 	bl	8003580 <HAL_RCC_OscConfig>
 8000ffa:	b108      	cbz	r0, 8001000 <SystemClock_Config+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ffc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ffe:	e7fe      	b.n	8000ffe <SystemClock_Config+0x4e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001000:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001002:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001006:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100c:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001010:	4629      	mov	r1, r5
 8001012:	a805      	add	r0, sp, #20
 8001014:	f002 fc7c 	bl	8003910 <HAL_RCC_ClockConfig>
 8001018:	b108      	cbz	r0, 800101e <SystemClock_Config+0x6e>
 800101a:	b672      	cpsid	i
  while (1)
 800101c:	e7fe      	b.n	800101c <SystemClock_Config+0x6c>
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800101e:	9004      	str	r0, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001020:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001022:	9401      	str	r4, [sp, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	f002 fd20 	bl	8003a68 <HAL_RCCEx_PeriphCLKConfig>
 8001028:	b108      	cbz	r0, 800102e <SystemClock_Config+0x7e>
 800102a:	b672      	cpsid	i
  while (1)
 800102c:	e7fe      	b.n	800102c <SystemClock_Config+0x7c>
}
 800102e:	b015      	add	sp, #84	@ 0x54
 8001030:	bd30      	pop	{r4, r5, pc}
 8001032:	0000      	movs	r0, r0
 8001034:	0000      	movs	r0, r0
	...

08001038 <main>:
{
 8001038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	2410      	movs	r4, #16
{
 800103e:	b0a9      	sub	sp, #164	@ 0xa4
  HAL_Init();
 8001040:	f000 fe06 	bl	8001c50 <HAL_Init>
  SystemClock_Config();
 8001044:	f7ff ffb4 	bl	8000fb0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	4622      	mov	r2, r4
 800104a:	2100      	movs	r1, #0
 800104c:	a80f      	add	r0, sp, #60	@ 0x3c
 800104e:	f006 fab4 	bl	80075ba <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001052:	4b89      	ldr	r3, [pc, #548]	@ (8001278 <main+0x240>)
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001054:	4621      	mov	r1, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001058:	4888      	ldr	r0, [pc, #544]	@ (800127c <main+0x244>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800105a:	f042 0220 	orr.w	r2, r2, #32
 800105e:	619a      	str	r2, [r3, #24]
 8001060:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2600      	movs	r6, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001064:	f002 0220 	and.w	r2, r2, #32
 8001068:	9208      	str	r2, [sp, #32]
 800106a:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	f042 0204 	orr.w	r2, r2, #4
 8001074:	619a      	str	r2, [r3, #24]
 8001076:	699a      	ldr	r2, [r3, #24]
 8001078:	f002 0204 	and.w	r2, r2, #4
 800107c:	9209      	str	r2, [sp, #36]	@ 0x24
 800107e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001080:	699a      	ldr	r2, [r3, #24]
 8001082:	f042 0208 	orr.w	r2, r2, #8
 8001086:	619a      	str	r2, [r3, #24]
 8001088:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	930a      	str	r3, [sp, #40]	@ 0x28
 8001092:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001094:	f000 ff4e 	bl	8001f34 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	2302      	movs	r3, #2
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800109a:	4878      	ldr	r0, [pc, #480]	@ (800127c <main+0x244>)
 800109c:	a90f      	add	r1, sp, #60	@ 0x3c
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800109e:	940f      	str	r4, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	9312      	str	r3, [sp, #72]	@ 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	e9cd 5610 	strd	r5, r6, [sp, #64]	@ 0x40
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f000 fe6d 	bl	8001d84 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80010aa:	2314      	movs	r3, #20
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	4874      	ldr	r0, [pc, #464]	@ (8001280 <main+0x248>)
 80010ae:	a90f      	add	r1, sp, #60	@ 0x3c
  hi2c1.Instance = I2C1;
 80010b0:	4c74      	ldr	r4, [pc, #464]	@ (8001284 <main+0x24c>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b2:	e9cd 360f 	strd	r3, r6, [sp, #60]	@ 0x3c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	9611      	str	r6, [sp, #68]	@ 0x44
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b8:	f000 fe64 	bl	8001d84 <HAL_GPIO_Init>
  hi2c1.Init.ClockSpeed = 100000;
 80010bc:	4a72      	ldr	r2, [pc, #456]	@ (8001288 <main+0x250>)
 80010be:	4b73      	ldr	r3, [pc, #460]	@ (800128c <main+0x254>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c0:	4620      	mov	r0, r4
  hi2c1.Init.ClockSpeed = 100000;
 80010c2:	e9c4 2300 	strd	r2, r3, [r4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80010ca:	e9c4 6602 	strd	r6, r6, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ce:	e9c4 3604 	strd	r3, r6, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d2:	e9c4 6606 	strd	r6, r6, [r4, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d6:	6226      	str	r6, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d8:	f001 f932 	bl	8002340 <HAL_I2C_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	b108      	cbz	r0, 80010e4 <main+0xac>
 80010e0:	b672      	cpsid	i
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <main+0xaa>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010e4:	f44f 7982 	mov.w	r9, #260	@ 0x104
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010e8:	f44f 7800 	mov.w	r8, #512	@ 0x200
 80010ec:	2730      	movs	r7, #48	@ 0x30
  hspi1.Init.CRCPolynomial = 10;
 80010ee:	260a      	movs	r6, #10
  hspi1.Instance = SPI1;
 80010f0:	4867      	ldr	r0, [pc, #412]	@ (8001290 <main+0x258>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010f2:	4a68      	ldr	r2, [pc, #416]	@ (8001294 <main+0x25c>)
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f4:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fc:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001100:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001102:	e9c0 2900 	strd	r2, r9, [r0]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001106:	e9c0 8706 	strd	r8, r7, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800110a:	62c6      	str	r6, [r0, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800110c:	f002 fd9e 	bl	8003c4c <HAL_SPI_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	b108      	cbz	r0, 8001118 <main+0xe0>
 8001114:	b672      	cpsid	i
  while (1)
 8001116:	e7fe      	b.n	8001116 <main+0xde>
  hspi2.Instance = SPI2;
 8001118:	485f      	ldr	r0, [pc, #380]	@ (8001298 <main+0x260>)
 800111a:	4a60      	ldr	r2, [pc, #384]	@ (800129c <main+0x264>)
  hspi2.Init.CRCPolynomial = 10;
 800111c:	e9c0 360a 	strd	r3, r6, [r0, #40]	@ 0x28
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001120:	e9c0 2900 	strd	r2, r9, [r0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001124:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001128:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800112c:	e9c0 8706 	strd	r8, r7, [r0, #24]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001130:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001134:	f002 fd8a 	bl	8003c4c <HAL_SPI_Init>
 8001138:	4606      	mov	r6, r0
 800113a:	b108      	cbz	r0, 8001140 <main+0x108>
 800113c:	b672      	cpsid	i
  while (1)
 800113e:	e7fe      	b.n	800113e <main+0x106>
  MX_FATFS_Init();
 8001140:	f003 fcc4 	bl	8004acc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001144:	f005 fae4 	bl	8006710 <MX_USB_DEVICE_Init>
  HAL_Delay(100);
 8001148:	2064      	movs	r0, #100	@ 0x64
 800114a:	f000 fda5 	bl	8001c98 <HAL_Delay>
  HAL_Delay(1000);
 800114e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001152:	f000 fda1 	bl	8001c98 <HAL_Delay>
  dev_ctx.write_reg = platform_write;
 8001156:	4b52      	ldr	r3, [pc, #328]	@ (80012a0 <main+0x268>)
  h3lis331dl_device_id_get(&dev_ctx, &whoamI);
 8001158:	a80b      	add	r0, sp, #44	@ 0x2c
  dev_ctx.write_reg = platform_write;
 800115a:	930b      	str	r3, [sp, #44]	@ 0x2c
  dev_ctx.read_reg = platform_read;
 800115c:	4b51      	ldr	r3, [pc, #324]	@ (80012a4 <main+0x26c>)
 800115e:	930c      	str	r3, [sp, #48]	@ 0x30
  dev_ctx.mdelay = platform_delay;
 8001160:	4b51      	ldr	r3, [pc, #324]	@ (80012a8 <main+0x270>)
  dev_ctx.handle = &SENSOR_BUS;
 8001162:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  whoamI = 0;
 8001166:	4c51      	ldr	r4, [pc, #324]	@ (80012ac <main+0x274>)
  h3lis331dl_device_id_get(&dev_ctx, &whoamI);
 8001168:	4621      	mov	r1, r4
  whoamI = 0;
 800116a:	7026      	strb	r6, [r4, #0]
  h3lis331dl_device_id_get(&dev_ctx, &whoamI);
 800116c:	f7ff fede 	bl	8000f2c <h3lis331dl_device_id_get>
  if ( whoamI != H3LIS331DL_ID ){
 8001170:	7823      	ldrb	r3, [r4, #0]
 8001172:	2b32      	cmp	r3, #50	@ 0x32
 8001174:	d000      	beq.n	8001178 <main+0x140>
 	 while(1){
 8001176:	e7fe      	b.n	8001176 <main+0x13e>
  h3lis331dl_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8001178:	4629      	mov	r1, r5
 800117a:	a80b      	add	r0, sp, #44	@ 0x2c
 800117c:	f7ff fe9a 	bl	8000eb4 <h3lis331dl_block_data_update_set>
  h3lis331dl_full_scale_set(&dev_ctx, H3LIS331DL_100g);
 8001180:	4631      	mov	r1, r6
 8001182:	a80b      	add	r0, sp, #44	@ 0x2c
 8001184:	f7ff fe7f 	bl	8000e86 <h3lis331dl_full_scale_set>
  h3lis331dl_hp_path_set(&dev_ctx, H3LIS331DL_HP_DISABLE);
 8001188:	4631      	mov	r1, r6
      sprintf(acm, "%.3f, %.3f, %.3f, %.3f\n", 0.001*HAL_GetTick(),acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 800118a:	a739      	add	r7, pc, #228	@ (adr r7, 8001270 <main+0x238>)
 800118c:	e9d7 6700 	ldrd	r6, r7, [r7]
  h3lis331dl_hp_path_set(&dev_ctx, H3LIS331DL_HP_DISABLE);
 8001190:	a80b      	add	r0, sp, #44	@ 0x2c
 8001192:	f7ff fed2 	bl	8000f3a <h3lis331dl_hp_path_set>
  h3lis331dl_data_rate_set(&dev_ctx, H3LIS331DL_ODR_400Hz);
 8001196:	2121      	movs	r1, #33	@ 0x21
 8001198:	a80b      	add	r0, sp, #44	@ 0x2c
 800119a:	f7ff fe57 	bl	8000e4c <h3lis331dl_data_rate_set>
  fresult = f_mount(&fs, "/", 1); //Mount the file system
 800119e:	462a      	mov	r2, r5
 80011a0:	4943      	ldr	r1, [pc, #268]	@ (80012b0 <main+0x278>)
 80011a2:	4844      	ldr	r0, [pc, #272]	@ (80012b4 <main+0x27c>)
 80011a4:	f004 fff6 	bl	8006194 <f_mount>
 80011a8:	f8df a10c 	ldr.w	sl, [pc, #268]	@ 80012b8 <main+0x280>
  fresult = f_open(&fil, "whop.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80011ac:	2213      	movs	r2, #19
 80011ae:	4943      	ldr	r1, [pc, #268]	@ (80012bc <main+0x284>)
  fresult = f_mount(&fs, "/", 1); //Mount the file system
 80011b0:	f88a 0000 	strb.w	r0, [sl]
  fresult = f_open(&fil, "whop.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80011b4:	4842      	ldr	r0, [pc, #264]	@ (80012c0 <main+0x288>)
 80011b6:	f005 f819 	bl	80061ec <f_open>
  f_puts("T, X, Y, Z\n", &fil);
 80011ba:	4941      	ldr	r1, [pc, #260]	@ (80012c0 <main+0x288>)
  fresult = f_open(&fil, "whop.csv", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 80011bc:	f88a 0000 	strb.w	r0, [sl]
  f_puts("T, X, Y, Z\n", &fil);
 80011c0:	4840      	ldr	r0, [pc, #256]	@ (80012c4 <main+0x28c>)
 80011c2:	f005 fa5d 	bl	8006680 <f_puts>
  while (HAL_GetTick()<=180*1000.0) {
 80011c6:	f8df b100 	ldr.w	fp, [pc, #256]	@ 80012c8 <main+0x290>
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80011ca:	4d40      	ldr	r5, [pc, #256]	@ (80012cc <main+0x294>)
  while (HAL_GetTick()<=180*1000.0) {
 80011cc:	f000 fd5e 	bl	8001c8c <HAL_GetTick>
 80011d0:	4558      	cmp	r0, fp
 80011d2:	d908      	bls.n	80011e6 <main+0x1ae>
fresult = f_close(&fil);
 80011d4:	483a      	ldr	r0, [pc, #232]	@ (80012c0 <main+0x288>)
 80011d6:	f005 fa42 	bl	800665e <f_close>
 80011da:	f88a 0000 	strb.w	r0, [sl]
}
 80011de:	2000      	movs	r0, #0
 80011e0:	b029      	add	sp, #164	@ 0xa4
 80011e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    h3lis331dl_status_reg_get(&dev_ctx, &reg.status_reg);
 80011e6:	a907      	add	r1, sp, #28
 80011e8:	a80b      	add	r0, sp, #44	@ 0x2c
 80011ea:	f7ff fe7a 	bl	8000ee2 <h3lis331dl_status_reg_get>
    if (reg.status_reg.zyxda) {
 80011ee:	f89d 301c 	ldrb.w	r3, [sp, #28]
 80011f2:	071b      	lsls	r3, r3, #28
 80011f4:	d5ea      	bpl.n	80011cc <main+0x194>
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80011f6:	2300      	movs	r3, #0
      h3lis331dl_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 80011f8:	4934      	ldr	r1, [pc, #208]	@ (80012cc <main+0x294>)
 80011fa:	a80b      	add	r0, sp, #44	@ 0x2c
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80011fc:	602b      	str	r3, [r5, #0]
 80011fe:	80ab      	strh	r3, [r5, #4]
      h3lis331dl_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001200:	f7ff fe76 	bl	8000ef0 <h3lis331dl_acceleration_raw_get>
      acceleration_mg[0] = h3lis331dl_from_fs100_to_mg(
 8001204:	f9b5 0000 	ldrsh.w	r0, [r5]
 8001208:	f7ff fe16 	bl	8000e38 <h3lis331dl_from_fs100_to_mg>
 800120c:	4c30      	ldr	r4, [pc, #192]	@ (80012d0 <main+0x298>)
 800120e:	6020      	str	r0, [r4, #0]
      acceleration_mg[1] = h3lis331dl_from_fs100_to_mg(
 8001210:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 8001214:	f7ff fe10 	bl	8000e38 <h3lis331dl_from_fs100_to_mg>
 8001218:	6060      	str	r0, [r4, #4]
      acceleration_mg[2] = h3lis331dl_from_fs100_to_mg(
 800121a:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 800121e:	f7ff fe0b 	bl	8000e38 <h3lis331dl_from_fs100_to_mg>
 8001222:	60a0      	str	r0, [r4, #8]
      sprintf(acm, "%.3f, %.3f, %.3f, %.3f\n", 0.001*HAL_GetTick(),acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001224:	f000 fd32 	bl	8001c8c <HAL_GetTick>
 8001228:	f7ff f990 	bl	800054c <__aeabi_ui2d>
 800122c:	4632      	mov	r2, r6
 800122e:	463b      	mov	r3, r7
 8001230:	f7ff fa06 	bl	8000640 <__aeabi_dmul>
 8001234:	4680      	mov	r8, r0
 8001236:	68a0      	ldr	r0, [r4, #8]
 8001238:	4689      	mov	r9, r1
 800123a:	f7ff f9a9 	bl	8000590 <__aeabi_f2d>
 800123e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8001242:	6860      	ldr	r0, [r4, #4]
 8001244:	f7ff f9a4 	bl	8000590 <__aeabi_f2d>
 8001248:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800124c:	6820      	ldr	r0, [r4, #0]
 800124e:	f7ff f99f 	bl	8000590 <__aeabi_f2d>
 8001252:	4642      	mov	r2, r8
 8001254:	e9cd 0100 	strd	r0, r1, [sp]
 8001258:	464b      	mov	r3, r9
 800125a:	491e      	ldr	r1, [pc, #120]	@ (80012d4 <main+0x29c>)
 800125c:	a80f      	add	r0, sp, #60	@ 0x3c
 800125e:	f006 f949 	bl	80074f4 <siprintf>
      f_puts(acm, &fil);
 8001262:	4917      	ldr	r1, [pc, #92]	@ (80012c0 <main+0x288>)
 8001264:	a80f      	add	r0, sp, #60	@ 0x3c
 8001266:	f005 fa0b 	bl	8006680 <f_puts>
 800126a:	e7af      	b.n	80011cc <main+0x194>
 800126c:	f3af 8000 	nop.w
 8001270:	d2f1a9fc 	.word	0xd2f1a9fc
 8001274:	3f50624d 	.word	0x3f50624d
 8001278:	40021000 	.word	0x40021000
 800127c:	40010800 	.word	0x40010800
 8001280:	40010c00 	.word	0x40010c00
 8001284:	20000884 	.word	0x20000884
 8001288:	40005400 	.word	0x40005400
 800128c:	000186a0 	.word	0x000186a0
 8001290:	2000082c 	.word	0x2000082c
 8001294:	40013000 	.word	0x40013000
 8001298:	200007d4 	.word	0x200007d4
 800129c:	40003800 	.word	0x40003800
 80012a0:	08000f93 	.word	0x08000f93
 80012a4:	08000f75 	.word	0x08000f75
 80012a8:	08000f71 	.word	0x08000f71
 80012ac:	200008d8 	.word	0x200008d8
 80012b0:	08009778 	.word	0x08009778
 80012b4:	200005a4 	.word	0x200005a4
 80012b8:	20000374 	.word	0x20000374
 80012bc:	0800977a 	.word	0x0800977a
 80012c0:	20000378 	.word	0x20000378
 80012c4:	08009783 	.word	0x08009783
 80012c8:	0002bf20 	.word	0x0002bf20
 80012cc:	200008e8 	.word	0x200008e8
 80012d0:	200008dc 	.word	0x200008dc
 80012d4:	0800978f 	.word	0x0800978f

080012d8 <Error_Handler>:
 80012d8:	b672      	cpsid	i
  while (1)
 80012da:	e7fe      	b.n	80012da <Error_Handler+0x2>

080012dc <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <HAL_MspInit+0x3c>)
{
 80012de:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80012e0:	699a      	ldr	r2, [r3, #24]
 80012e2:	f042 0201 	orr.w	r2, r2, #1
 80012e6:	619a      	str	r2, [r3, #24]
 80012e8:	699a      	ldr	r2, [r3, #24]
 80012ea:	f002 0201 	and.w	r2, r2, #1
 80012ee:	9200      	str	r2, [sp, #0]
 80012f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	69da      	ldr	r2, [r3, #28]
 80012f4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012f8:	61da      	str	r2, [r3, #28]
 80012fa:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80012fc:	4a07      	ldr	r2, [pc, #28]	@ (800131c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001306:	6853      	ldr	r3, [r2, #4]
 8001308:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800130c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001310:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001312:	b002      	add	sp, #8
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000
 800131c:	40010000 	.word	0x40010000

08001320 <HAL_I2C_MspInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	2210      	movs	r2, #16
{
 8001322:	b510      	push	{r4, lr}
 8001324:	4604      	mov	r4, r0
 8001326:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	eb0d 0002 	add.w	r0, sp, r2
 800132c:	2100      	movs	r1, #0
 800132e:	f006 f944 	bl	80075ba <memset>
  if(hi2c->Instance==I2C1)
 8001332:	6823      	ldr	r3, [r4, #0]
 8001334:	4a21      	ldr	r2, [pc, #132]	@ (80013bc <HAL_I2C_MspInit+0x9c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d11e      	bne.n	8001378 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	4c21      	ldr	r4, [pc, #132]	@ (80013c0 <HAL_I2C_MspInit+0xa0>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133c:	21c0      	movs	r1, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	4820      	ldr	r0, [pc, #128]	@ (80013c4 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	f043 0308 	orr.w	r3, r3, #8
 8001346:	61a3      	str	r3, [r4, #24]
 8001348:	69a3      	ldr	r3, [r4, #24]
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001352:	2312      	movs	r3, #18
 8001354:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001358:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800135c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800135e:	f000 fd11 	bl	8001d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001362:	69e3      	ldr	r3, [r4, #28]
 8001364:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001368:	61e3      	str	r3, [r4, #28]
 800136a:	69e3      	ldr	r3, [r4, #28]
 800136c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001374:	b008      	add	sp, #32
 8001376:	bd10      	pop	{r4, pc}
  else if(hi2c->Instance==I2C2)
 8001378:	4a13      	ldr	r2, [pc, #76]	@ (80013c8 <HAL_I2C_MspInit+0xa8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d1fa      	bne.n	8001374 <HAL_I2C_MspInit+0x54>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137e:	4c10      	ldr	r4, [pc, #64]	@ (80013c0 <HAL_I2C_MspInit+0xa0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001380:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001384:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	480f      	ldr	r0, [pc, #60]	@ (80013c4 <HAL_I2C_MspInit+0xa4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	61a3      	str	r3, [r4, #24]
 800138e:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	9302      	str	r3, [sp, #8]
 8001398:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139a:	2312      	movs	r3, #18
 800139c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a0:	2303      	movs	r3, #3
 80013a2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a4:	f000 fcee 	bl	8001d84 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013a8:	69e3      	ldr	r3, [r4, #28]
 80013aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80013ae:	61e3      	str	r3, [r4, #28]
 80013b0:	69e3      	ldr	r3, [r4, #28]
 80013b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013b6:	9303      	str	r3, [sp, #12]
 80013b8:	9b03      	ldr	r3, [sp, #12]
}
 80013ba:	e7db      	b.n	8001374 <HAL_I2C_MspInit+0x54>
 80013bc:	40005400 	.word	0x40005400
 80013c0:	40021000 	.word	0x40021000
 80013c4:	40010c00 	.word	0x40010c00
 80013c8:	40005800 	.word	0x40005800

080013cc <HAL_SPI_MspInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	2210      	movs	r2, #16
{
 80013ce:	b510      	push	{r4, lr}
 80013d0:	4604      	mov	r4, r0
 80013d2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	eb0d 0002 	add.w	r0, sp, r2
 80013d8:	2100      	movs	r1, #0
 80013da:	f006 f8ee 	bl	80075ba <memset>
  if(hspi->Instance==SPI1)
 80013de:	6823      	ldr	r3, [r4, #0]
 80013e0:	4a2a      	ldr	r2, [pc, #168]	@ (800148c <HAL_SPI_MspInit+0xc0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d127      	bne.n	8001436 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001490 <HAL_SPI_MspInit+0xc4>)
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ea:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80013f2:	619a      	str	r2, [r3, #24]
 80013f4:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f6:	2440      	movs	r4, #64	@ 0x40
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013f8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80013fc:	9200      	str	r2, [sp, #0]
 80013fe:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001400:	699a      	ldr	r2, [r3, #24]
 8001402:	f042 0204 	orr.w	r2, r2, #4
 8001406:	619a      	str	r2, [r3, #24]
 8001408:	699b      	ldr	r3, [r3, #24]
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001418:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	481e      	ldr	r0, [pc, #120]	@ (8001494 <HAL_SPI_MspInit+0xc8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800141c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141e:	f000 fcb1 	bl	8001d84 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001422:	2300      	movs	r3, #0
 8001424:	e9cd 4304 	strd	r4, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001428:	481a      	ldr	r0, [pc, #104]	@ (8001494 <HAL_SPI_MspInit+0xc8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	a904      	add	r1, sp, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	f000 fca9 	bl	8001d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001432:	b008      	add	sp, #32
 8001434:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8001436:	4a18      	ldr	r2, [pc, #96]	@ (8001498 <HAL_SPI_MspInit+0xcc>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d1fa      	bne.n	8001432 <HAL_SPI_MspInit+0x66>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800143c:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <HAL_SPI_MspInit+0xc4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	4817      	ldr	r0, [pc, #92]	@ (800149c <HAL_SPI_MspInit+0xd0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001440:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001442:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001444:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001448:	61da      	str	r2, [r3, #28]
 800144a:	69da      	ldr	r2, [r3, #28]
 800144c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001450:	9202      	str	r2, [sp, #8]
 8001452:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001454:	699a      	ldr	r2, [r3, #24]
 8001456:	f042 0208 	orr.w	r2, r2, #8
 800145a:	619a      	str	r2, [r3, #24]
 800145c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	9303      	str	r3, [sp, #12]
 8001468:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001470:	2303      	movs	r3, #3
 8001472:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f000 fc86 	bl	8001d84 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800147c:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147e:	4807      	ldr	r0, [pc, #28]	@ (800149c <HAL_SPI_MspInit+0xd0>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001480:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001486:	a904      	add	r1, sp, #16
 8001488:	e7d1      	b.n	800142e <HAL_SPI_MspInit+0x62>
 800148a:	bf00      	nop
 800148c:	40013000 	.word	0x40013000
 8001490:	40021000 	.word	0x40021000
 8001494:	40010800 	.word	0x40010800
 8001498:	40003800 	.word	0x40003800
 800149c:	40010c00 	.word	0x40010c00

080014a0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler>

080014a2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <HardFault_Handler>

080014a4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <MemManage_Handler>

080014a6 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler>

080014a8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler>

080014aa <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014aa:	4770      	bx	lr

080014ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80014ac:	4770      	bx	lr

080014ae <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014b0:	f000 bbe0 	b.w	8001c74 <HAL_IncTick>

080014b4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80014b4:	4801      	ldr	r0, [pc, #4]	@ (80014bc <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 80014b6:	f001 ba4f 	b.w	8002958 <HAL_PCD_IRQHandler>
 80014ba:	bf00      	nop
 80014bc:	2000181c 	.word	0x2000181c

080014c0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80014c0:	2001      	movs	r0, #1
 80014c2:	4770      	bx	lr

080014c4 <_kill>:

int _kill(int pid, int sig)
{
 80014c4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014c6:	f006 f8cb 	bl	8007660 <__errno>
 80014ca:	2316      	movs	r3, #22
 80014cc:	6003      	str	r3, [r0, #0]
  return -1;
}
 80014ce:	f04f 30ff 	mov.w	r0, #4294967295
 80014d2:	bd08      	pop	{r3, pc}

080014d4 <_exit>:

void _exit (int status)
{
 80014d4:	b508      	push	{r3, lr}
  errno = EINVAL;
 80014d6:	f006 f8c3 	bl	8007660 <__errno>
 80014da:	2316      	movs	r3, #22
 80014dc:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80014de:	e7fe      	b.n	80014de <_exit+0xa>

080014e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e0:	b570      	push	{r4, r5, r6, lr}
 80014e2:	460d      	mov	r5, r1
 80014e4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e6:	460e      	mov	r6, r1
 80014e8:	1b73      	subs	r3, r6, r5
 80014ea:	429c      	cmp	r4, r3
 80014ec:	dc01      	bgt.n	80014f2 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80014ee:	4620      	mov	r0, r4
 80014f0:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80014f2:	f3af 8000 	nop.w
 80014f6:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	e7f5      	b.n	80014e8 <_read+0x8>

080014fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014fc:	b570      	push	{r4, r5, r6, lr}
 80014fe:	460d      	mov	r5, r1
 8001500:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001502:	460e      	mov	r6, r1
 8001504:	1b73      	subs	r3, r6, r5
 8001506:	429c      	cmp	r4, r3
 8001508:	dc01      	bgt.n	800150e <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800150a:	4620      	mov	r0, r4
 800150c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800150e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001512:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001516:	e7f5      	b.n	8001504 <_write+0x8>

08001518 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001518:	f04f 30ff 	mov.w	r0, #4294967295
 800151c:	4770      	bx	lr

0800151e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800151e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8001522:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001524:	604b      	str	r3, [r1, #4]
}
 8001526:	4770      	bx	lr

08001528 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001528:	2001      	movs	r0, #1
 800152a:	4770      	bx	lr

0800152c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800152c:	2000      	movs	r0, #0
 800152e:	4770      	bx	lr

08001530 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001530:	4a0b      	ldr	r2, [pc, #44]	@ (8001560 <_sbrk+0x30>)
{
 8001532:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001534:	6811      	ldr	r1, [r2, #0]
{
 8001536:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001538:	b909      	cbnz	r1, 800153e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800153a:	490a      	ldr	r1, [pc, #40]	@ (8001564 <_sbrk+0x34>)
 800153c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153e:	6810      	ldr	r0, [r2, #0]
 8001540:	4909      	ldr	r1, [pc, #36]	@ (8001568 <_sbrk+0x38>)
 8001542:	4c0a      	ldr	r4, [pc, #40]	@ (800156c <_sbrk+0x3c>)
 8001544:	4403      	add	r3, r0
 8001546:	1b09      	subs	r1, r1, r4
 8001548:	428b      	cmp	r3, r1
 800154a:	d906      	bls.n	800155a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800154c:	f006 f888 	bl	8007660 <__errno>
 8001550:	230c      	movs	r3, #12
 8001552:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001554:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001558:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800155a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800155c:	e7fc      	b.n	8001558 <_sbrk+0x28>
 800155e:	bf00      	nop
 8001560:	200008f0 	.word	0x200008f0
 8001564:	20001c40 	.word	0x20001c40
 8001568:	20005000 	.word	0x20005000
 800156c:	00000400 	.word	0x00000400

08001570 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	4770      	bx	lr
	...

08001574 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8001574:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8001576:	2332      	movs	r3, #50	@ 0x32
{
 8001578:	f88d 000f 	strb.w	r0, [sp, #15]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	f10d 0217 	add.w	r2, sp, #23
 8001582:	2301      	movs	r3, #1
 8001584:	f10d 010f 	add.w	r1, sp, #15
 8001588:	4803      	ldr	r0, [pc, #12]	@ (8001598 <xchg_spi+0x24>)
 800158a:	f002 fc67 	bl	8003e5c <HAL_SPI_TransmitReceive>
    return rxDat;
}
 800158e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001592:	b007      	add	sp, #28
 8001594:	f85d fb04 	ldr.w	pc, [sp], #4
 8001598:	2000082c 	.word	0x2000082c

0800159c <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800159c:	b570      	push	{r4, r5, r6, lr}
 800159e:	4605      	mov	r5, r0
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80015a0:	f000 fb74 	bl	8001c8c <HAL_GetTick>
 80015a4:	4606      	mov	r6, r0
	waitSpiTimerTickDelay = (uint32_t)wt;
	do {
		d = xchg_spi(0xFF);
 80015a6:	20ff      	movs	r0, #255	@ 0xff
 80015a8:	f7ff ffe4 	bl	8001574 <xchg_spi>
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80015ac:	28ff      	cmp	r0, #255	@ 0xff
		d = xchg_spi(0xFF);
 80015ae:	4604      	mov	r4, r0
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80015b0:	d004      	beq.n	80015bc <wait_ready+0x20>
 80015b2:	f000 fb6b 	bl	8001c8c <HAL_GetTick>
 80015b6:	1b83      	subs	r3, r0, r6
 80015b8:	42ab      	cmp	r3, r5
 80015ba:	d3f4      	bcc.n	80015a6 <wait_ready+0xa>

	return (d == 0xFF) ? 1 : 0;
}
 80015bc:	f1a4 03ff 	sub.w	r3, r4, #255	@ 0xff
 80015c0:	4258      	negs	r0, r3
 80015c2:	4158      	adcs	r0, r3
 80015c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080015c8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80015c8:	b508      	push	{r3, lr}
	CS_HIGH();		/* Set CS# high */
 80015ca:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <despiselect+0x18>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	2110      	movs	r1, #16
 80015d0:	f000 fcb0 	bl	8001f34 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */

}
 80015d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 80015d8:	20ff      	movs	r0, #255	@ 0xff
 80015da:	f7ff bfcb 	b.w	8001574 <xchg_spi>
 80015de:	bf00      	nop
 80015e0:	40010800 	.word	0x40010800

080015e4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 80015e4:	b510      	push	{r4, lr}
	CS_LOW();		/* Set CS# low */
 80015e6:	2200      	movs	r2, #0
 80015e8:	2110      	movs	r1, #16
 80015ea:	4809      	ldr	r0, [pc, #36]	@ (8001610 <spiselect+0x2c>)
 80015ec:	f000 fca2 	bl	8001f34 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 80015f0:	20ff      	movs	r0, #255	@ 0xff
 80015f2:	f7ff ffbf 	bl	8001574 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 80015f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015fa:	f7ff ffcf 	bl	800159c <wait_ready>
 80015fe:	4604      	mov	r4, r0
 8001600:	b918      	cbnz	r0, 800160a <spiselect+0x26>

	despiselect();
 8001602:	f7ff ffe1 	bl	80015c8 <despiselect>
	return 0;	/* Timeout */
}
 8001606:	4620      	mov	r0, r4
 8001608:	bd10      	pop	{r4, pc}
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800160a:	2401      	movs	r4, #1
 800160c:	e7fb      	b.n	8001606 <spiselect+0x22>
 800160e:	bf00      	nop
 8001610:	40010800 	.word	0x40010800

08001614 <send_cmd>:
)
{
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8001614:	0602      	lsls	r2, r0, #24
{
 8001616:	b538      	push	{r3, r4, r5, lr}
 8001618:	4604      	mov	r4, r0
 800161a:	460d      	mov	r5, r1
	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800161c:	d507      	bpl.n	800162e <send_cmd+0x1a>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
 800161e:	2100      	movs	r1, #0
 8001620:	2037      	movs	r0, #55	@ 0x37
 8001622:	f7ff fff7 	bl	8001614 <send_cmd>
		if (res > 1) return res;
 8001626:	2801      	cmp	r0, #1
 8001628:	d82b      	bhi.n	8001682 <send_cmd+0x6e>
		cmd &= 0x7F;
 800162a:	f004 047f 	and.w	r4, r4, #127	@ 0x7f
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800162e:	2c0c      	cmp	r4, #12
 8001630:	d128      	bne.n	8001684 <send_cmd+0x70>
		despiselect();
		if (!spiselect()) return 0xFF;
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8001632:	f044 0040 	orr.w	r0, r4, #64	@ 0x40
 8001636:	f7ff ff9d 	bl	8001574 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800163a:	0e28      	lsrs	r0, r5, #24
 800163c:	f7ff ff9a 	bl	8001574 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8001640:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8001644:	f7ff ff96 	bl	8001574 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8001648:	f3c5 2007 	ubfx	r0, r5, #8, #8
 800164c:	f7ff ff92 	bl	8001574 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8001650:	b2e8      	uxtb	r0, r5
 8001652:	f7ff ff8f 	bl	8001574 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8001656:	b1ec      	cbz	r4, 8001694 <send_cmd+0x80>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8001658:	2c08      	cmp	r4, #8
 800165a:	bf14      	ite	ne
 800165c:	2001      	movne	r0, #1
 800165e:	2087      	moveq	r0, #135	@ 0x87
	xchg_spi(n);
 8001660:	f7ff ff88 	bl	8001574 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8001664:	2c0c      	cmp	r4, #12
 8001666:	d102      	bne.n	800166e <send_cmd+0x5a>
 8001668:	20ff      	movs	r0, #255	@ 0xff
 800166a:	f7ff ff83 	bl	8001574 <xchg_spi>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800166e:	240a      	movs	r4, #10
	n = 10;								/* Wait for response (10 bytes max) */
	do {
		res = xchg_spi(0xFF);
 8001670:	20ff      	movs	r0, #255	@ 0xff
 8001672:	f7ff ff7f 	bl	8001574 <xchg_spi>
	} while ((res & 0x80) && --n);
 8001676:	0603      	lsls	r3, r0, #24
 8001678:	d503      	bpl.n	8001682 <send_cmd+0x6e>
 800167a:	3c01      	subs	r4, #1
 800167c:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8001680:	d1f6      	bne.n	8001670 <send_cmd+0x5c>

	return res;							/* Return received response */
}
 8001682:	bd38      	pop	{r3, r4, r5, pc}
		despiselect();
 8001684:	f7ff ffa0 	bl	80015c8 <despiselect>
		if (!spiselect()) return 0xFF;
 8001688:	f7ff ffac 	bl	80015e4 <spiselect>
 800168c:	2800      	cmp	r0, #0
 800168e:	d1d0      	bne.n	8001632 <send_cmd+0x1e>
 8001690:	20ff      	movs	r0, #255	@ 0xff
 8001692:	e7f6      	b.n	8001682 <send_cmd+0x6e>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8001694:	2095      	movs	r0, #149	@ 0x95
 8001696:	e7e3      	b.n	8001660 <send_cmd+0x4c>

08001698 <xmit_datablock>:
{
 8001698:	b538      	push	{r3, r4, r5, lr}
 800169a:	4605      	mov	r5, r0
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800169c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
{
 80016a0:	460c      	mov	r4, r1
	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80016a2:	f7ff ff7b 	bl	800159c <wait_ready>
 80016a6:	b1d0      	cbz	r0, 80016de <xmit_datablock+0x46>
	xchg_spi(token);					/* Send token */
 80016a8:	4620      	mov	r0, r4
 80016aa:	f7ff ff63 	bl	8001574 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80016ae:	2cfd      	cmp	r4, #253	@ 0xfd
 80016b0:	d016      	beq.n	80016e0 <xmit_datablock+0x48>
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
 80016b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016ba:	4629      	mov	r1, r5
 80016bc:	4809      	ldr	r0, [pc, #36]	@ (80016e4 <xmit_datablock+0x4c>)
 80016be:	f002 fb1d 	bl	8003cfc <HAL_SPI_Transmit>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80016c2:	20ff      	movs	r0, #255	@ 0xff
 80016c4:	f7ff ff56 	bl	8001574 <xchg_spi>
 80016c8:	20ff      	movs	r0, #255	@ 0xff
 80016ca:	f7ff ff53 	bl	8001574 <xchg_spi>
		resp = xchg_spi(0xFF);				/* Receive data resp */
 80016ce:	20ff      	movs	r0, #255	@ 0xff
 80016d0:	f7ff ff50 	bl	8001574 <xchg_spi>
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80016d4:	f000 001f 	and.w	r0, r0, #31
 80016d8:	1f43      	subs	r3, r0, #5
 80016da:	4258      	negs	r0, r3
 80016dc:	4158      	adcs	r0, r3
}
 80016de:	bd38      	pop	{r3, r4, r5, pc}
	return 1;
 80016e0:	2001      	movs	r0, #1
 80016e2:	e7fc      	b.n	80016de <xmit_datablock+0x46>
 80016e4:	2000082c 	.word	0x2000082c

080016e8 <SPI_Timer_On>:
void SPI_Timer_On(uint32_t waitTicks) {
 80016e8:	b510      	push	{r4, lr}
 80016ea:	4604      	mov	r4, r0
    spiTimerTickStart = HAL_GetTick();
 80016ec:	f000 face 	bl	8001c8c <HAL_GetTick>
 80016f0:	4b02      	ldr	r3, [pc, #8]	@ (80016fc <SPI_Timer_On+0x14>)
 80016f2:	6018      	str	r0, [r3, #0]
    spiTimerTickDelay = waitTicks;
 80016f4:	4b02      	ldr	r3, [pc, #8]	@ (8001700 <SPI_Timer_On+0x18>)
 80016f6:	601c      	str	r4, [r3, #0]
}
 80016f8:	bd10      	pop	{r4, pc}
 80016fa:	bf00      	nop
 80016fc:	200008f8 	.word	0x200008f8
 8001700:	200008f4 	.word	0x200008f4

08001704 <SPI_Timer_Status>:
uint8_t SPI_Timer_Status() {
 8001704:	b508      	push	{r3, lr}
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8001706:	f000 fac1 	bl	8001c8c <HAL_GetTick>
 800170a:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <SPI_Timer_Status+0x1c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	1ac0      	subs	r0, r0, r3
 8001710:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <SPI_Timer_Status+0x20>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4298      	cmp	r0, r3
 8001716:	bf2c      	ite	cs
 8001718:	2000      	movcs	r0, #0
 800171a:	2001      	movcc	r0, #1
 800171c:	bd08      	pop	{r3, pc}
 800171e:	bf00      	nop
 8001720:	200008f8 	.word	0x200008f8
 8001724:	200008f4 	.word	0x200008f4

08001728 <rcvr_datablock>:
{
 8001728:	b538      	push	{r3, r4, r5, lr}
 800172a:	4604      	mov	r4, r0
	SPI_Timer_On(200);
 800172c:	20c8      	movs	r0, #200	@ 0xc8
{
 800172e:	460d      	mov	r5, r1
	SPI_Timer_On(200);
 8001730:	f7ff ffda 	bl	80016e8 <SPI_Timer_On>
		token = xchg_spi(0xFF);
 8001734:	20ff      	movs	r0, #255	@ 0xff
 8001736:	f7ff ff1d 	bl	8001574 <xchg_spi>
	} while ((token == 0xFF) && SPI_Timer_Status());
 800173a:	28ff      	cmp	r0, #255	@ 0xff
 800173c:	d105      	bne.n	800174a <rcvr_datablock+0x22>
 800173e:	f7ff ffe1 	bl	8001704 <SPI_Timer_Status>
 8001742:	2800      	cmp	r0, #0
 8001744:	d1f6      	bne.n	8001734 <rcvr_datablock+0xc>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8001746:	2000      	movs	r0, #0
}
 8001748:	bd38      	pop	{r3, r4, r5, pc}
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800174a:	28fe      	cmp	r0, #254	@ 0xfe
 800174c:	d1fb      	bne.n	8001746 <rcvr_datablock+0x1e>
 800174e:	4425      	add	r5, r4
		*(buff+i) = xchg_spi(0xFF);
 8001750:	20ff      	movs	r0, #255	@ 0xff
 8001752:	f7ff ff0f 	bl	8001574 <xchg_spi>
 8001756:	f804 0b01 	strb.w	r0, [r4], #1
	for(UINT i=0; i<btr; i++) {
 800175a:	42ac      	cmp	r4, r5
 800175c:	d1f8      	bne.n	8001750 <rcvr_datablock+0x28>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800175e:	20ff      	movs	r0, #255	@ 0xff
 8001760:	f7ff ff08 	bl	8001574 <xchg_spi>
 8001764:	20ff      	movs	r0, #255	@ 0xff
 8001766:	f7ff ff05 	bl	8001574 <xchg_spi>
 800176a:	2001      	movs	r0, #1
 800176c:	e7ec      	b.n	8001748 <rcvr_datablock+0x20>
	...

08001770 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8001770:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8001774:	2800      	cmp	r0, #0
 8001776:	f040 8098 	bne.w	80018aa <USER_SPI_initialize+0x13a>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800177a:	4d4d      	ldr	r5, [pc, #308]	@ (80018b0 <USER_SPI_initialize+0x140>)
 800177c:	782b      	ldrb	r3, [r5, #0]
 800177e:	079b      	lsls	r3, r3, #30
 8001780:	d504      	bpl.n	800178c <USER_SPI_initialize+0x1c>
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
	} else {			/* Failed */
		Stat = STA_NOINIT;
	}

	return Stat;
 8001782:	7828      	ldrb	r0, [r5, #0]
 8001784:	b2c0      	uxtb	r0, r0
}
 8001786:	b002      	add	sp, #8
 8001788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	FCLK_SLOW();
 800178c:	240a      	movs	r4, #10
 800178e:	4f49      	ldr	r7, [pc, #292]	@ (80018b4 <USER_SPI_initialize+0x144>)
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	6813      	ldr	r3, [r2, #0]
 8001794:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8001798:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800179c:	6013      	str	r3, [r2, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800179e:	20ff      	movs	r0, #255	@ 0xff
 80017a0:	3c01      	subs	r4, #1
 80017a2:	f7ff fee7 	bl	8001574 <xchg_spi>
 80017a6:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 80017aa:	d1f8      	bne.n	800179e <USER_SPI_initialize+0x2e>
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 80017ac:	4621      	mov	r1, r4
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff ff30 	bl	8001614 <send_cmd>
 80017b4:	2801      	cmp	r0, #1
 80017b6:	4606      	mov	r6, r0
 80017b8:	d012      	beq.n	80017e0 <USER_SPI_initialize+0x70>
	ty = 0;
 80017ba:	2400      	movs	r4, #0
	CardType = ty;	/* Card type */
 80017bc:	4b3e      	ldr	r3, [pc, #248]	@ (80018b8 <USER_SPI_initialize+0x148>)
 80017be:	701c      	strb	r4, [r3, #0]
	despiselect();
 80017c0:	f7ff ff02 	bl	80015c8 <despiselect>
	if (ty) {			/* OK */
 80017c4:	2c00      	cmp	r4, #0
 80017c6:	d06e      	beq.n	80018a6 <USER_SPI_initialize+0x136>
		FCLK_FAST();			/* Set fast clock */
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	6813      	ldr	r3, [r2, #0]
 80017cc:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80017d0:	f043 0310 	orr.w	r3, r3, #16
 80017d4:	6013      	str	r3, [r2, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 80017d6:	782b      	ldrb	r3, [r5, #0]
 80017d8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
		Stat = STA_NOINIT;
 80017dc:	702b      	strb	r3, [r5, #0]
 80017de:	e7d0      	b.n	8001782 <USER_SPI_initialize+0x12>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 80017e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017e4:	f7ff ff80 	bl	80016e8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 80017e8:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80017ec:	2008      	movs	r0, #8
 80017ee:	f7ff ff11 	bl	8001614 <send_cmd>
 80017f2:	2801      	cmp	r0, #1
 80017f4:	d139      	bne.n	800186a <USER_SPI_initialize+0xfa>
 80017f6:	ae01      	add	r6, sp, #4
 80017f8:	46b0      	mov	r8, r6
 80017fa:	2404      	movs	r4, #4
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80017fc:	20ff      	movs	r0, #255	@ 0xff
 80017fe:	f7ff feb9 	bl	8001574 <xchg_spi>
 8001802:	3c01      	subs	r4, #1
 8001804:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8001808:	f808 0b01 	strb.w	r0, [r8], #1
 800180c:	d1f6      	bne.n	80017fc <USER_SPI_initialize+0x8c>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800180e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d1d1      	bne.n	80017ba <USER_SPI_initialize+0x4a>
 8001816:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800181a:	2baa      	cmp	r3, #170	@ 0xaa
 800181c:	d1cd      	bne.n	80017ba <USER_SPI_initialize+0x4a>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800181e:	f7ff ff71 	bl	8001704 <SPI_Timer_Status>
 8001822:	b130      	cbz	r0, 8001832 <USER_SPI_initialize+0xc2>
 8001824:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001828:	20a9      	movs	r0, #169	@ 0xa9
 800182a:	f7ff fef3 	bl	8001614 <send_cmd>
 800182e:	2800      	cmp	r0, #0
 8001830:	d1f5      	bne.n	800181e <USER_SPI_initialize+0xae>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8001832:	f7ff ff67 	bl	8001704 <SPI_Timer_Status>
 8001836:	2800      	cmp	r0, #0
 8001838:	d0bf      	beq.n	80017ba <USER_SPI_initialize+0x4a>
 800183a:	2100      	movs	r1, #0
 800183c:	203a      	movs	r0, #58	@ 0x3a
 800183e:	f7ff fee9 	bl	8001614 <send_cmd>
 8001842:	2800      	cmp	r0, #0
 8001844:	d1b9      	bne.n	80017ba <USER_SPI_initialize+0x4a>
 8001846:	2404      	movs	r4, #4
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8001848:	20ff      	movs	r0, #255	@ 0xff
 800184a:	f7ff fe93 	bl	8001574 <xchg_spi>
 800184e:	3c01      	subs	r4, #1
 8001850:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 8001854:	f806 0b01 	strb.w	r0, [r6], #1
 8001858:	d1f6      	bne.n	8001848 <USER_SPI_initialize+0xd8>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800185a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800185e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8001862:	bf0c      	ite	eq
 8001864:	2404      	moveq	r4, #4
 8001866:	240c      	movne	r4, #12
 8001868:	e7a8      	b.n	80017bc <USER_SPI_initialize+0x4c>
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800186a:	4621      	mov	r1, r4
 800186c:	20a9      	movs	r0, #169	@ 0xa9
 800186e:	f7ff fed1 	bl	8001614 <send_cmd>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8001872:	2801      	cmp	r0, #1
 8001874:	bf8e      	itee	hi
 8001876:	2401      	movhi	r4, #1
 8001878:	2402      	movls	r4, #2
 800187a:	26a9      	movls	r6, #169	@ 0xa9
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800187c:	f7ff ff42 	bl	8001704 <SPI_Timer_Status>
 8001880:	b128      	cbz	r0, 800188e <USER_SPI_initialize+0x11e>
 8001882:	2100      	movs	r1, #0
 8001884:	4630      	mov	r0, r6
 8001886:	f7ff fec5 	bl	8001614 <send_cmd>
 800188a:	2800      	cmp	r0, #0
 800188c:	d1f6      	bne.n	800187c <USER_SPI_initialize+0x10c>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800188e:	f7ff ff39 	bl	8001704 <SPI_Timer_Status>
 8001892:	2800      	cmp	r0, #0
 8001894:	d091      	beq.n	80017ba <USER_SPI_initialize+0x4a>
 8001896:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800189a:	2010      	movs	r0, #16
 800189c:	f7ff feba 	bl	8001614 <send_cmd>
 80018a0:	2800      	cmp	r0, #0
 80018a2:	d18a      	bne.n	80017ba <USER_SPI_initialize+0x4a>
 80018a4:	e78a      	b.n	80017bc <USER_SPI_initialize+0x4c>
		Stat = STA_NOINIT;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e798      	b.n	80017dc <USER_SPI_initialize+0x6c>
	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80018aa:	2001      	movs	r0, #1
 80018ac:	e76b      	b.n	8001786 <USER_SPI_initialize+0x16>
 80018ae:	bf00      	nop
 80018b0:	20000004 	.word	0x20000004
 80018b4:	2000082c 	.word	0x2000082c
 80018b8:	200008fc 	.word	0x200008fc

080018bc <USER_SPI_status>:

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80018bc:	b918      	cbnz	r0, 80018c6 <USER_SPI_status+0xa>

	return Stat;	/* Return disk status */
 80018be:	4b03      	ldr	r3, [pc, #12]	@ (80018cc <USER_SPI_status+0x10>)
 80018c0:	7818      	ldrb	r0, [r3, #0]
 80018c2:	b2c0      	uxtb	r0, r0
 80018c4:	4770      	bx	lr
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80018c6:	2001      	movs	r0, #1
}
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	20000004 	.word	0x20000004

080018d0 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	460d      	mov	r5, r1
 80018d4:	461c      	mov	r4, r3
 80018d6:	4611      	mov	r1, r2
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80018d8:	bb88      	cbnz	r0, 800193e <USER_SPI_read+0x6e>
 80018da:	b383      	cbz	r3, 800193e <USER_SPI_read+0x6e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80018dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <USER_SPI_read+0x78>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	07da      	lsls	r2, r3, #31
 80018e2:	d42e      	bmi.n	8001942 <USER_SPI_read+0x72>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 80018e4:	4b19      	ldr	r3, [pc, #100]	@ (800194c <USER_SPI_read+0x7c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	071b      	lsls	r3, r3, #28
 80018ea:	bf58      	it	pl
 80018ec:	0249      	lslpl	r1, r1, #9

	if (count == 1) {	/* Single sector read */
 80018ee:	2c01      	cmp	r4, #1
 80018f0:	d111      	bne.n	8001916 <USER_SPI_read+0x46>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 80018f2:	2011      	movs	r0, #17
 80018f4:	f7ff fe8e 	bl	8001614 <send_cmd>
 80018f8:	b938      	cbnz	r0, 800190a <USER_SPI_read+0x3a>
			&& rcvr_datablock(buff, 512)) {
 80018fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018fe:	4628      	mov	r0, r5
 8001900:	f7ff ff12 	bl	8001728 <rcvr_datablock>
 8001904:	fab0 f480 	clz	r4, r0
 8001908:	0964      	lsrs	r4, r4, #5
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	despiselect();
 800190a:	f7ff fe5d 	bl	80015c8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800190e:	1e20      	subs	r0, r4, #0
 8001910:	bf18      	it	ne
 8001912:	2001      	movne	r0, #1
}
 8001914:	bd38      	pop	{r3, r4, r5, pc}
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8001916:	2012      	movs	r0, #18
 8001918:	f7ff fe7c 	bl	8001614 <send_cmd>
 800191c:	2800      	cmp	r0, #0
 800191e:	d1f4      	bne.n	800190a <USER_SPI_read+0x3a>
				if (!rcvr_datablock(buff, 512)) break;
 8001920:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001924:	4628      	mov	r0, r5
 8001926:	f7ff feff 	bl	8001728 <rcvr_datablock>
 800192a:	b118      	cbz	r0, 8001934 <USER_SPI_read+0x64>
			} while (--count);
 800192c:	3c01      	subs	r4, #1
				buff += 512;
 800192e:	f505 7500 	add.w	r5, r5, #512	@ 0x200
			} while (--count);
 8001932:	d1f5      	bne.n	8001920 <USER_SPI_read+0x50>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8001934:	2100      	movs	r1, #0
 8001936:	200c      	movs	r0, #12
 8001938:	f7ff fe6c 	bl	8001614 <send_cmd>
 800193c:	e7e5      	b.n	800190a <USER_SPI_read+0x3a>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800193e:	2004      	movs	r0, #4
 8001940:	e7e8      	b.n	8001914 <USER_SPI_read+0x44>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8001942:	2003      	movs	r0, #3
 8001944:	e7e6      	b.n	8001914 <USER_SPI_read+0x44>
 8001946:	bf00      	nop
 8001948:	20000004 	.word	0x20000004
 800194c:	200008fc 	.word	0x200008fc

08001950 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8001950:	b570      	push	{r4, r5, r6, lr}
 8001952:	460e      	mov	r6, r1
 8001954:	4615      	mov	r5, r2
 8001956:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8001958:	2800      	cmp	r0, #0
 800195a:	d13f      	bne.n	80019dc <USER_SPI_write+0x8c>
 800195c:	2b00      	cmp	r3, #0
 800195e:	d03d      	beq.n	80019dc <USER_SPI_write+0x8c>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8001960:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <USER_SPI_write+0x98>)
 8001962:	781a      	ldrb	r2, [r3, #0]
 8001964:	07d0      	lsls	r0, r2, #31
 8001966:	d43b      	bmi.n	80019e0 <USER_SPI_write+0x90>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	0759      	lsls	r1, r3, #29
 800196c:	d43a      	bmi.n	80019e4 <USER_SPI_write+0x94>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800196e:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <USER_SPI_write+0x9c>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	071a      	lsls	r2, r3, #28
 8001974:	bf58      	it	pl
 8001976:	026d      	lslpl	r5, r5, #9

	if (count == 1) {	/* Single sector write */
 8001978:	2c01      	cmp	r4, #1
 800197a:	d111      	bne.n	80019a0 <USER_SPI_write+0x50>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800197c:	4629      	mov	r1, r5
 800197e:	2018      	movs	r0, #24
 8001980:	f7ff fe48 	bl	8001614 <send_cmd>
 8001984:	bb40      	cbnz	r0, 80019d8 <USER_SPI_write+0x88>
			&& xmit_datablock(buff, 0xFE)) {
 8001986:	21fe      	movs	r1, #254	@ 0xfe
 8001988:	4630      	mov	r0, r6
 800198a:	f7ff fe85 	bl	8001698 <xmit_datablock>
 800198e:	fab0 f480 	clz	r4, r0
 8001992:	0964      	lsrs	r4, r4, #5
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
		}
	}
	despiselect();
 8001994:	f7ff fe18 	bl	80015c8 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8001998:	1e20      	subs	r0, r4, #0
 800199a:	bf18      	it	ne
 800199c:	2001      	movne	r0, #1
}
 800199e:	bd70      	pop	{r4, r5, r6, pc}
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 80019a0:	f013 0f06 	tst.w	r3, #6
 80019a4:	d003      	beq.n	80019ae <USER_SPI_write+0x5e>
 80019a6:	4621      	mov	r1, r4
 80019a8:	2097      	movs	r0, #151	@ 0x97
 80019aa:	f7ff fe33 	bl	8001614 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 80019ae:	4629      	mov	r1, r5
 80019b0:	2019      	movs	r0, #25
 80019b2:	f7ff fe2f 	bl	8001614 <send_cmd>
 80019b6:	2800      	cmp	r0, #0
 80019b8:	d1ec      	bne.n	8001994 <USER_SPI_write+0x44>
				if (!xmit_datablock(buff, 0xFC)) break;
 80019ba:	21fc      	movs	r1, #252	@ 0xfc
 80019bc:	4630      	mov	r0, r6
 80019be:	f7ff fe6b 	bl	8001698 <xmit_datablock>
 80019c2:	b118      	cbz	r0, 80019cc <USER_SPI_write+0x7c>
			} while (--count);
 80019c4:	3c01      	subs	r4, #1
				buff += 512;
 80019c6:	f506 7600 	add.w	r6, r6, #512	@ 0x200
			} while (--count);
 80019ca:	d1f6      	bne.n	80019ba <USER_SPI_write+0x6a>
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 80019cc:	21fd      	movs	r1, #253	@ 0xfd
 80019ce:	2000      	movs	r0, #0
 80019d0:	f7ff fe62 	bl	8001698 <xmit_datablock>
 80019d4:	2800      	cmp	r0, #0
 80019d6:	d1dd      	bne.n	8001994 <USER_SPI_write+0x44>
{
 80019d8:	2401      	movs	r4, #1
 80019da:	e7db      	b.n	8001994 <USER_SPI_write+0x44>
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80019dc:	2004      	movs	r0, #4
 80019de:	e7de      	b.n	800199e <USER_SPI_write+0x4e>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80019e0:	2003      	movs	r0, #3
 80019e2:	e7dc      	b.n	800199e <USER_SPI_write+0x4e>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80019e4:	2002      	movs	r0, #2
 80019e6:	e7da      	b.n	800199e <USER_SPI_write+0x4e>
 80019e8:	20000004 	.word	0x20000004
 80019ec:	200008fc 	.word	0x200008fc

080019f0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80019f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80019f2:	4615      	mov	r5, r2
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80019f4:	2800      	cmp	r0, #0
 80019f6:	f040 80d8 	bne.w	8001baa <USER_SPI_ioctl+0x1ba>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80019fa:	4b6e      	ldr	r3, [pc, #440]	@ (8001bb4 <USER_SPI_ioctl+0x1c4>)
 80019fc:	781c      	ldrb	r4, [r3, #0]
 80019fe:	f014 0401 	ands.w	r4, r4, #1
 8001a02:	f040 80d4 	bne.w	8001bae <USER_SPI_ioctl+0x1be>

	res = RES_ERROR;

	switch (cmd) {
 8001a06:	2904      	cmp	r1, #4
 8001a08:	f200 80cd 	bhi.w	8001ba6 <USER_SPI_ioctl+0x1b6>
 8001a0c:	e8df f001 	tbb	[pc, r1]
 8001a10:	4acb0903 	.word	0x4acb0903
 8001a14:	93          	.byte	0x93
 8001a15:	00          	.byte	0x00
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8001a16:	f7ff fde5 	bl	80015e4 <spiselect>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
		if (!(CardType & CT_BLOCK)) {
			st *= 512; ed *= 512;
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8001a1a:	fab0 f480 	clz	r4, r0
 8001a1e:	0964      	lsrs	r4, r4, #5
 8001a20:	e005      	b.n	8001a2e <USER_SPI_ioctl+0x3e>
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8001a22:	2100      	movs	r1, #0
 8001a24:	2009      	movs	r0, #9
 8001a26:	f7ff fdf5 	bl	8001614 <send_cmd>
 8001a2a:	b128      	cbz	r0, 8001a38 <USER_SPI_ioctl+0x48>
	res = RES_ERROR;
 8001a2c:	2401      	movs	r4, #1

	default:
		res = RES_PARERR;
	}

	despiselect();
 8001a2e:	f7ff fdcb 	bl	80015c8 <despiselect>

	return res;
}
 8001a32:	4620      	mov	r0, r4
 8001a34:	b004      	add	sp, #16
 8001a36:	bd70      	pop	{r4, r5, r6, pc}
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8001a38:	2110      	movs	r1, #16
 8001a3a:	4668      	mov	r0, sp
 8001a3c:	f7ff fe74 	bl	8001728 <rcvr_datablock>
 8001a40:	2800      	cmp	r0, #0
 8001a42:	d0f3      	beq.n	8001a2c <USER_SPI_ioctl+0x3c>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8001a44:	f89d 2000 	ldrb.w	r2, [sp]
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8001a48:	f89d 3007 	ldrb.w	r3, [sp, #7]
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8001a4c:	0992      	lsrs	r2, r2, #6
 8001a4e:	2a01      	cmp	r2, #1
 8001a50:	d10b      	bne.n	8001a6a <USER_SPI_ioctl+0x7a>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8001a52:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8001a56:	041b      	lsls	r3, r3, #16
 8001a58:	ba52      	rev16	r2, r2
 8001a5a:	b292      	uxth	r2, r2
 8001a5c:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8001a60:	4413      	add	r3, r2
 8001a62:	3301      	adds	r3, #1
				*(DWORD*)buff = csize << 10;
 8001a64:	029b      	lsls	r3, r3, #10
				*(DWORD*)buff = csize << (n - 9);
 8001a66:	602b      	str	r3, [r5, #0]
 8001a68:	e7e1      	b.n	8001a2e <USER_SPI_ioctl+0x3e>
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8001a6a:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	eb03 1392 	add.w	r3, r3, r2, lsr #6
 8001a74:	f89d 2006 	ldrb.w	r2, [sp, #6]
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a78:	f89d 100a 	ldrb.w	r1, [sp, #10]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8001a7c:	0292      	lsls	r2, r2, #10
 8001a7e:	f402 6240 	and.w	r2, r2, #3072	@ 0xc00
 8001a82:	4413      	add	r3, r2
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a84:	f89d 2005 	ldrb.w	r2, [sp, #5]
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8001a88:	3301      	adds	r3, #1
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a8a:	f002 020f 	and.w	r2, r2, #15
 8001a8e:	eb02 12d1 	add.w	r2, r2, r1, lsr #7
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8001a92:	f89d 1009 	ldrb.w	r1, [sp, #9]
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001a96:	0049      	lsls	r1, r1, #1
 8001a98:	f001 0106 	and.w	r1, r1, #6
				*(DWORD*)buff = csize << (n - 9);
 8001a9c:	440a      	add	r2, r1
 8001a9e:	3a07      	subs	r2, #7
 8001aa0:	4093      	lsls	r3, r2
 8001aa2:	e7e0      	b.n	8001a66 <USER_SPI_ioctl+0x76>
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8001aa4:	4e44      	ldr	r6, [pc, #272]	@ (8001bb8 <USER_SPI_ioctl+0x1c8>)
 8001aa6:	7831      	ldrb	r1, [r6, #0]
 8001aa8:	f011 0104 	ands.w	r1, r1, #4
 8001aac:	d01b      	beq.n	8001ae6 <USER_SPI_ioctl+0xf6>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8001aae:	2100      	movs	r1, #0
 8001ab0:	208d      	movs	r0, #141	@ 0x8d
 8001ab2:	f7ff fdaf 	bl	8001614 <send_cmd>
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	d1b8      	bne.n	8001a2c <USER_SPI_ioctl+0x3c>
				xchg_spi(0xFF);
 8001aba:	20ff      	movs	r0, #255	@ 0xff
 8001abc:	f7ff fd5a 	bl	8001574 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8001ac0:	2110      	movs	r1, #16
 8001ac2:	4668      	mov	r0, sp
 8001ac4:	f7ff fe30 	bl	8001728 <rcvr_datablock>
 8001ac8:	2800      	cmp	r0, #0
 8001aca:	d0af      	beq.n	8001a2c <USER_SPI_ioctl+0x3c>
 8001acc:	2630      	movs	r6, #48	@ 0x30
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8001ace:	20ff      	movs	r0, #255	@ 0xff
 8001ad0:	3e01      	subs	r6, #1
 8001ad2:	f7ff fd4f 	bl	8001574 <xchg_spi>
 8001ad6:	f016 06ff 	ands.w	r6, r6, #255	@ 0xff
 8001ada:	d1f8      	bne.n	8001ace <USER_SPI_ioctl+0xde>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8001adc:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8001ae0:	2310      	movs	r3, #16
 8001ae2:	0912      	lsrs	r2, r2, #4
 8001ae4:	e7dc      	b.n	8001aa0 <USER_SPI_ioctl+0xb0>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8001ae6:	2009      	movs	r0, #9
 8001ae8:	f7ff fd94 	bl	8001614 <send_cmd>
 8001aec:	2800      	cmp	r0, #0
 8001aee:	d19d      	bne.n	8001a2c <USER_SPI_ioctl+0x3c>
 8001af0:	2110      	movs	r1, #16
 8001af2:	4668      	mov	r0, sp
 8001af4:	f7ff fe18 	bl	8001728 <rcvr_datablock>
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d097      	beq.n	8001a2c <USER_SPI_ioctl+0x3c>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8001afc:	7832      	ldrb	r2, [r6, #0]
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8001afe:	f89d 300a 	ldrb.w	r3, [sp, #10]
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8001b02:	0792      	lsls	r2, r2, #30
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8001b04:	f89d 100b 	ldrb.w	r1, [sp, #11]
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8001b08:	d50a      	bpl.n	8001b20 <USER_SPI_ioctl+0x130>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8001b0a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001b14:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
 8001b18:	0992      	lsrs	r2, r2, #6
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	3a01      	subs	r2, #1
 8001b1e:	e7bf      	b.n	8001aa0 <USER_SPI_ioctl+0xb0>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8001b20:	00ca      	lsls	r2, r1, #3
 8001b22:	f002 0218 	and.w	r2, r2, #24
 8001b26:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8001b2a:	eb02 1251 	add.w	r2, r2, r1, lsr #5
 8001b2e:	3301      	adds	r3, #1
 8001b30:	fb02 3303 	mla	r3, r2, r3, r3
 8001b34:	e797      	b.n	8001a66 <USER_SPI_ioctl+0x76>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8001b36:	4e20      	ldr	r6, [pc, #128]	@ (8001bb8 <USER_SPI_ioctl+0x1c8>)
 8001b38:	7833      	ldrb	r3, [r6, #0]
 8001b3a:	f013 0f06 	tst.w	r3, #6
 8001b3e:	f43f af75 	beq.w	8001a2c <USER_SPI_ioctl+0x3c>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8001b42:	466a      	mov	r2, sp
 8001b44:	210b      	movs	r1, #11
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7ff ff52 	bl	80019f0 <USER_SPI_ioctl>
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	f47f af6d 	bne.w	8001a2c <USER_SPI_ioctl+0x3c>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8001b52:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8001b56:	f89d 2000 	ldrb.w	r2, [sp]
 8001b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b5e:	ea53 1392 	orrs.w	r3, r3, r2, lsr #6
 8001b62:	f43f af63 	beq.w	8001a2c <USER_SPI_ioctl+0x3c>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8001b66:	e9d5 1400 	ldrd	r1, r4, [r5]
		if (!(CardType & CT_BLOCK)) {
 8001b6a:	7833      	ldrb	r3, [r6, #0]
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8001b6c:	2020      	movs	r0, #32
		if (!(CardType & CT_BLOCK)) {
 8001b6e:	071b      	lsls	r3, r3, #28
			st *= 512; ed *= 512;
 8001b70:	bf5c      	itt	pl
 8001b72:	0249      	lslpl	r1, r1, #9
 8001b74:	0264      	lslpl	r4, r4, #9
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8001b76:	f7ff fd4d 	bl	8001614 <send_cmd>
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	f47f af56 	bne.w	8001a2c <USER_SPI_ioctl+0x3c>
 8001b80:	4621      	mov	r1, r4
 8001b82:	2021      	movs	r0, #33	@ 0x21
 8001b84:	f7ff fd46 	bl	8001614 <send_cmd>
 8001b88:	4601      	mov	r1, r0
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	f47f af4e 	bne.w	8001a2c <USER_SPI_ioctl+0x3c>
 8001b90:	2026      	movs	r0, #38	@ 0x26
 8001b92:	f7ff fd3f 	bl	8001614 <send_cmd>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	f47f af48 	bne.w	8001a2c <USER_SPI_ioctl+0x3c>
 8001b9c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8001ba0:	f7ff fcfc 	bl	800159c <wait_ready>
 8001ba4:	e739      	b.n	8001a1a <USER_SPI_ioctl+0x2a>
	switch (cmd) {
 8001ba6:	2404      	movs	r4, #4
 8001ba8:	e741      	b.n	8001a2e <USER_SPI_ioctl+0x3e>
	if (drv) return RES_PARERR;					/* Check parameter */
 8001baa:	2404      	movs	r4, #4
 8001bac:	e741      	b.n	8001a32 <USER_SPI_ioctl+0x42>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8001bae:	2403      	movs	r4, #3
 8001bb0:	e73f      	b.n	8001a32 <USER_SPI_ioctl+0x42>
 8001bb2:	bf00      	nop
 8001bb4:	20000004 	.word	0x20000004
 8001bb8:	200008fc 	.word	0x200008fc

08001bbc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bbc:	f7ff fcd8 	bl	8001570 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc0:	480b      	ldr	r0, [pc, #44]	@ (8001bf0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001bc2:	490c      	ldr	r1, [pc, #48]	@ (8001bf4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001bc4:	4a0c      	ldr	r2, [pc, #48]	@ (8001bf8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc8:	e002      	b.n	8001bd0 <LoopCopyDataInit>

08001bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bce:	3304      	adds	r3, #4

08001bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd4:	d3f9      	bcc.n	8001bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd6:	4a09      	ldr	r2, [pc, #36]	@ (8001bfc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bd8:	4c09      	ldr	r4, [pc, #36]	@ (8001c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bdc:	e001      	b.n	8001be2 <LoopFillZerobss>

08001bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be0:	3204      	adds	r2, #4

08001be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be4:	d3fb      	bcc.n	8001bde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001be6:	f005 fd41 	bl	800766c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bea:	f7ff fa25 	bl	8001038 <main>
  bx lr
 8001bee:	4770      	bx	lr
  ldr r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf4:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8001bf8:	08009c20 	.word	0x08009c20
  ldr r2, =_sbss
 8001bfc:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8001c00:	20001c40 	.word	0x20001c40

08001c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC1_2_IRQHandler>
	...

08001c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c08:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <HAL_InitTick+0x3c>)
{
 8001c0c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c0e:	781a      	ldrb	r2, [r3, #0]
 8001c10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c14:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c18:	4a0b      	ldr	r2, [pc, #44]	@ (8001c48 <HAL_InitTick+0x40>)
 8001c1a:	6810      	ldr	r0, [r2, #0]
 8001c1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c20:	f000 f89c 	bl	8001d5c <HAL_SYSTICK_Config>
 8001c24:	4604      	mov	r4, r0
 8001c26:	b958      	cbnz	r0, 8001c40 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c28:	2d0f      	cmp	r5, #15
 8001c2a:	d809      	bhi.n	8001c40 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295
 8001c34:	f000 f854 	bl	8001ce0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c38:	4620      	mov	r0, r4
 8001c3a:	4b04      	ldr	r3, [pc, #16]	@ (8001c4c <HAL_InitTick+0x44>)
 8001c3c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001c3e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001c40:	2001      	movs	r0, #1
 8001c42:	e7fc      	b.n	8001c3e <HAL_InitTick+0x36>
 8001c44:	20000005 	.word	0x20000005
 8001c48:	20000000 	.word	0x20000000
 8001c4c:	20000008 	.word	0x20000008

08001c50 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c50:	4a07      	ldr	r2, [pc, #28]	@ (8001c70 <HAL_Init+0x20>)
{
 8001c52:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c54:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c56:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c58:	f043 0310 	orr.w	r3, r3, #16
 8001c5c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5e:	f000 f82d 	bl	8001cbc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c62:	200f      	movs	r0, #15
 8001c64:	f7ff ffd0 	bl	8001c08 <HAL_InitTick>
  HAL_MspInit();
 8001c68:	f7ff fb38 	bl	80012dc <HAL_MspInit>
}
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	bd08      	pop	{r3, pc}
 8001c70:	40022000 	.word	0x40022000

08001c74 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c74:	4a03      	ldr	r2, [pc, #12]	@ (8001c84 <HAL_IncTick+0x10>)
 8001c76:	4b04      	ldr	r3, [pc, #16]	@ (8001c88 <HAL_IncTick+0x14>)
 8001c78:	6811      	ldr	r1, [r2, #0]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	440b      	add	r3, r1
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000900 	.word	0x20000900
 8001c88:	20000005 	.word	0x20000005

08001c8c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c8c:	4b01      	ldr	r3, [pc, #4]	@ (8001c94 <HAL_GetTick+0x8>)
 8001c8e:	6818      	ldr	r0, [r3, #0]
}
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000900 	.word	0x20000900

08001c98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c98:	b538      	push	{r3, r4, r5, lr}
 8001c9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff fff6 	bl	8001c8c <HAL_GetTick>
 8001ca0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca4:	bf1e      	ittt	ne
 8001ca6:	4b04      	ldrne	r3, [pc, #16]	@ (8001cb8 <HAL_Delay+0x20>)
 8001ca8:	781b      	ldrbne	r3, [r3, #0]
 8001caa:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cac:	f7ff ffee 	bl	8001c8c <HAL_GetTick>
 8001cb0:	1b43      	subs	r3, r0, r5
 8001cb2:	42a3      	cmp	r3, r4
 8001cb4:	d3fa      	bcc.n	8001cac <HAL_Delay+0x14>
  {
  }
}
 8001cb6:	bd38      	pop	{r3, r4, r5, pc}
 8001cb8:	20000005 	.word	0x20000005

08001cbc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4907      	ldr	r1, [pc, #28]	@ (8001cdc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cbe:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cc2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001cca:	0412      	lsls	r2, r2, #16
 8001ccc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001cd8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce0:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce2:	b530      	push	{r4, r5, lr}
 8001ce4:	68dc      	ldr	r4, [r3, #12]
 8001ce6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	bf28      	it	cs
 8001cf4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfc:	bf94      	ite	ls
 8001cfe:	2400      	movls	r4, #0
 8001d00:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d02:	fa05 f303 	lsl.w	r3, r5, r3
 8001d06:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d0a:	40a5      	lsls	r5, r4
 8001d0c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d10:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8001d12:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d18:	bfac      	ite	ge
 8001d1a:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d1e:	4a07      	ldrlt	r2, [pc, #28]	@ (8001d3c <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	bfab      	itete	ge
 8001d28:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d36:	bd30      	pop	{r4, r5, pc}
 8001d38:	e000ed00 	.word	0xe000ed00
 8001d3c:	e000ed14 	.word	0xe000ed14

08001d40 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d40:	2800      	cmp	r0, #0
 8001d42:	db07      	blt.n	8001d54 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d44:	2301      	movs	r3, #1
 8001d46:	0941      	lsrs	r1, r0, #5
 8001d48:	4a03      	ldr	r2, [pc, #12]	@ (8001d58 <HAL_NVIC_EnableIRQ+0x18>)
 8001d4a:	f000 001f 	and.w	r0, r0, #31
 8001d4e:	4083      	lsls	r3, r0
 8001d50:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	e000e100 	.word	0xe000e100

08001d5c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	3801      	subs	r0, #1
 8001d5e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001d62:	d20b      	bcs.n	8001d7c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d68:	21f0      	movs	r1, #240	@ 0xf0
 8001d6a:	4a05      	ldr	r2, [pc, #20]	@ (8001d80 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d72:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d74:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d76:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d78:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001d7c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d88:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8001d8a:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d8c:	f8df c188 	ldr.w	ip, [pc, #392]	@ 8001f18 <HAL_GPIO_Init+0x194>
 8001d90:	4b62      	ldr	r3, [pc, #392]	@ (8001f1c <HAL_GPIO_Init+0x198>)
      switch (GPIO_Init->Mode)
 8001d92:	f8df e18c 	ldr.w	lr, [pc, #396]	@ 8001f20 <HAL_GPIO_Init+0x19c>
 8001d96:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 8001f24 <HAL_GPIO_Init+0x1a0>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9a:	680a      	ldr	r2, [r1, #0]
 8001d9c:	fa32 f506 	lsrs.w	r5, r2, r6
 8001da0:	d102      	bne.n	8001da8 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8001da2:	b003      	add	sp, #12
 8001da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001da8:	2701      	movs	r7, #1
 8001daa:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dac:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 8001db0:	ea37 0202 	bics.w	r2, r7, r2
 8001db4:	d17a      	bne.n	8001eac <HAL_GPIO_Init+0x128>
      switch (GPIO_Init->Mode)
 8001db6:	684a      	ldr	r2, [r1, #4]
 8001db8:	2a03      	cmp	r2, #3
 8001dba:	d807      	bhi.n	8001dcc <HAL_GPIO_Init+0x48>
 8001dbc:	3a01      	subs	r2, #1
 8001dbe:	2a02      	cmp	r2, #2
 8001dc0:	f200 8083 	bhi.w	8001eca <HAL_GPIO_Init+0x146>
 8001dc4:	e8df f002 	tbb	[pc, r2]
 8001dc8:	9792      	.short	0x9792
 8001dca:	9d          	.byte	0x9d
 8001dcb:	00          	.byte	0x00
 8001dcc:	2a12      	cmp	r2, #18
 8001dce:	f000 8095 	beq.w	8001efc <HAL_GPIO_Init+0x178>
 8001dd2:	d86d      	bhi.n	8001eb0 <HAL_GPIO_Init+0x12c>
 8001dd4:	2a11      	cmp	r2, #17
 8001dd6:	f000 808b 	beq.w	8001ef0 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dda:	2dff      	cmp	r5, #255	@ 0xff
 8001ddc:	bf98      	it	ls
 8001dde:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001de0:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001de4:	bf88      	it	hi
 8001de6:	f100 0904 	addhi.w	r9, r0, #4
 8001dea:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dee:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001df2:	bf88      	it	hi
 8001df4:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001df6:	fa0b fa02 	lsl.w	sl, fp, r2
 8001dfa:	ea27 070a 	bic.w	r7, r7, sl
 8001dfe:	fa04 f202 	lsl.w	r2, r4, r2
 8001e02:	4317      	orrs	r7, r2
 8001e04:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e08:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001e0c:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8001e10:	d04c      	beq.n	8001eac <HAL_GPIO_Init+0x128>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e12:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8001e16:	f026 0703 	bic.w	r7, r6, #3
 8001e1a:	f042 0201 	orr.w	r2, r2, #1
 8001e1e:	f8cc 2018 	str.w	r2, [ip, #24]
 8001e22:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8001e26:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8001e2a:	f002 0201 	and.w	r2, r2, #1
 8001e2e:	9201      	str	r2, [sp, #4]
 8001e30:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e34:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e38:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e3a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001e3e:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e40:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001e44:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e48:	4a37      	ldr	r2, [pc, #220]	@ (8001f28 <HAL_GPIO_Init+0x1a4>)
 8001e4a:	4290      	cmp	r0, r2
 8001e4c:	d05d      	beq.n	8001f0a <HAL_GPIO_Init+0x186>
 8001e4e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e52:	4290      	cmp	r0, r2
 8001e54:	d05b      	beq.n	8001f0e <HAL_GPIO_Init+0x18a>
 8001e56:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e5a:	4290      	cmp	r0, r2
 8001e5c:	d059      	beq.n	8001f12 <HAL_GPIO_Init+0x18e>
 8001e5e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001e62:	4290      	cmp	r0, r2
 8001e64:	bf14      	ite	ne
 8001e66:	2204      	movne	r2, #4
 8001e68:	2203      	moveq	r2, #3
 8001e6a:	fa02 f20a 	lsl.w	r2, r2, sl
 8001e6e:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8001e72:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e74:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e76:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e7a:	bf14      	ite	ne
 8001e7c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e7e:	43aa      	biceq	r2, r5
 8001e80:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e82:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e84:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e88:	bf14      	ite	ne
 8001e8a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e8c:	43aa      	biceq	r2, r5
 8001e8e:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8001e90:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e92:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001e96:	bf14      	ite	ne
 8001e98:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e9a:	43aa      	biceq	r2, r5
 8001e9c:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8001e9e:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ea0:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001ea4:	bf14      	ite	ne
 8001ea6:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ea8:	43aa      	biceq	r2, r5
 8001eaa:	601a      	str	r2, [r3, #0]
	position++;
 8001eac:	3601      	adds	r6, #1
 8001eae:	e774      	b.n	8001d9a <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8001eb0:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8001f2c <HAL_GPIO_Init+0x1a8>
 8001eb4:	454a      	cmp	r2, r9
 8001eb6:	d008      	beq.n	8001eca <HAL_GPIO_Init+0x146>
 8001eb8:	d810      	bhi.n	8001edc <HAL_GPIO_Init+0x158>
 8001eba:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8001ebe:	454a      	cmp	r2, r9
 8001ec0:	d003      	beq.n	8001eca <HAL_GPIO_Init+0x146>
 8001ec2:	4572      	cmp	r2, lr
 8001ec4:	d001      	beq.n	8001eca <HAL_GPIO_Init+0x146>
 8001ec6:	4542      	cmp	r2, r8
 8001ec8:	d187      	bne.n	8001dda <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eca:	688a      	ldr	r2, [r1, #8]
 8001ecc:	b1da      	cbz	r2, 8001f06 <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ece:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed0:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 8001ed4:	bf0c      	ite	eq
 8001ed6:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 8001ed8:	6147      	strne	r7, [r0, #20]
 8001eda:	e77e      	b.n	8001dda <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8001edc:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8001f30 <HAL_GPIO_Init+0x1ac>
 8001ee0:	454a      	cmp	r2, r9
 8001ee2:	d0f2      	beq.n	8001eca <HAL_GPIO_Init+0x146>
 8001ee4:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8001ee8:	454a      	cmp	r2, r9
 8001eea:	e7ed      	b.n	8001ec8 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eec:	68cc      	ldr	r4, [r1, #12]
          break;
 8001eee:	e774      	b.n	8001dda <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef0:	68cc      	ldr	r4, [r1, #12]
 8001ef2:	3404      	adds	r4, #4
          break;
 8001ef4:	e771      	b.n	8001dda <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ef6:	68cc      	ldr	r4, [r1, #12]
 8001ef8:	3408      	adds	r4, #8
          break;
 8001efa:	e76e      	b.n	8001dda <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001efc:	68cc      	ldr	r4, [r1, #12]
 8001efe:	340c      	adds	r4, #12
          break;
 8001f00:	e76b      	b.n	8001dda <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8001f02:	2400      	movs	r4, #0
 8001f04:	e769      	b.n	8001dda <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f06:	2404      	movs	r4, #4
 8001f08:	e767      	b.n	8001dda <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	e7ad      	b.n	8001e6a <HAL_GPIO_Init+0xe6>
 8001f0e:	2201      	movs	r2, #1
 8001f10:	e7ab      	b.n	8001e6a <HAL_GPIO_Init+0xe6>
 8001f12:	2202      	movs	r2, #2
 8001f14:	e7a9      	b.n	8001e6a <HAL_GPIO_Init+0xe6>
 8001f16:	bf00      	nop
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40010400 	.word	0x40010400
 8001f20:	10210000 	.word	0x10210000
 8001f24:	10110000 	.word	0x10110000
 8001f28:	40010800 	.word	0x40010800
 8001f2c:	10220000 	.word	0x10220000
 8001f30:	10310000 	.word	0x10310000

08001f34 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f34:	b10a      	cbz	r2, 8001f3a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f36:	6101      	str	r1, [r0, #16]
  }
}
 8001f38:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f3a:	0409      	lsls	r1, r1, #16
 8001f3c:	e7fb      	b.n	8001f36 <HAL_GPIO_WritePin+0x2>

08001f3e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f3e:	6801      	ldr	r1, [r0, #0]
 8001f40:	2200      	movs	r2, #0
 8001f42:	694b      	ldr	r3, [r1, #20]
 8001f44:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8001f48:	d010      	beq.n	8001f6c <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f4a:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8001f4e:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f50:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f52:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f54:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f58:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f5c:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8001f68:	2001      	movs	r0, #1
 8001f6a:	4770      	bx	lr
  }
  return HAL_OK;
 8001f6c:	4618      	mov	r0, r3
}
 8001f6e:	4770      	bx	lr

08001f70 <I2C_WaitOnFlagUntilTimeout>:
{
 8001f70:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8001f74:	4606      	mov	r6, r0
 8001f76:	460f      	mov	r7, r1
 8001f78:	4691      	mov	r9, r2
 8001f7a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f7c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8001f80:	6833      	ldr	r3, [r6, #0]
 8001f82:	f1ba 0f01 	cmp.w	sl, #1
 8001f86:	bf0c      	ite	eq
 8001f88:	695c      	ldreq	r4, [r3, #20]
 8001f8a:	699c      	ldrne	r4, [r3, #24]
 8001f8c:	ea27 0404 	bic.w	r4, r7, r4
 8001f90:	b2a4      	uxth	r4, r4
 8001f92:	fab4 f484 	clz	r4, r4
 8001f96:	0964      	lsrs	r4, r4, #5
 8001f98:	45a1      	cmp	r9, r4
 8001f9a:	d001      	beq.n	8001fa0 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	e025      	b.n	8001fec <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8001fa0:	1c6a      	adds	r2, r5, #1
 8001fa2:	d0ee      	beq.n	8001f82 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa4:	f7ff fe72 	bl	8001c8c <HAL_GetTick>
 8001fa8:	9b08      	ldr	r3, [sp, #32]
 8001faa:	1ac0      	subs	r0, r0, r3
 8001fac:	42a8      	cmp	r0, r5
 8001fae:	d801      	bhi.n	8001fb4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001fb0:	2d00      	cmp	r5, #0
 8001fb2:	d1e5      	bne.n	8001f80 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fb4:	6833      	ldr	r3, [r6, #0]
 8001fb6:	f1ba 0f01 	cmp.w	sl, #1
 8001fba:	bf0c      	ite	eq
 8001fbc:	695b      	ldreq	r3, [r3, #20]
 8001fbe:	699b      	ldrne	r3, [r3, #24]
 8001fc0:	ea27 0303 	bic.w	r3, r7, r3
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	095b      	lsrs	r3, r3, #5
 8001fcc:	4599      	cmp	r9, r3
 8001fce:	d1d7      	bne.n	8001f80 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fd0:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fd2:	2220      	movs	r2, #32
          return HAL_ERROR;
 8001fd4:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fd6:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fd8:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fdc:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fe0:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001fe2:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fe6:	f042 0220 	orr.w	r2, r2, #32
 8001fea:	6432      	str	r2, [r6, #64]	@ 0x40
}
 8001fec:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	460f      	mov	r7, r1
 8001ff8:	4616      	mov	r6, r2
 8001ffa:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ffc:	6825      	ldr	r5, [r4, #0]
 8001ffe:	6968      	ldr	r0, [r5, #20]
 8002000:	ea27 0000 	bic.w	r0, r7, r0
 8002004:	b280      	uxth	r0, r0
 8002006:	b1c0      	cbz	r0, 800203a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002008:	696b      	ldr	r3, [r5, #20]
 800200a:	055a      	lsls	r2, r3, #21
 800200c:	d517      	bpl.n	800203e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800200e:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8002010:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002012:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002016:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002018:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 800201c:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800201e:	2300      	movs	r3, #0
 8002020:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002022:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002026:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800202a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800202c:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002030:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002032:	2300      	movs	r3, #0
      return HAL_ERROR;
 8002034:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8002036:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800203a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800203e:	1c73      	adds	r3, r6, #1
 8002040:	d0dd      	beq.n	8001ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002042:	f7ff fe23 	bl	8001c8c <HAL_GetTick>
 8002046:	eba0 0008 	sub.w	r0, r0, r8
 800204a:	42b0      	cmp	r0, r6
 800204c:	d801      	bhi.n	8002052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 800204e:	2e00      	cmp	r6, #0
 8002050:	d1d4      	bne.n	8001ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	695a      	ldr	r2, [r3, #20]
 8002056:	ea27 0202 	bic.w	r2, r7, r2
 800205a:	b292      	uxth	r2, r2
 800205c:	2a00      	cmp	r2, #0
 800205e:	d0cd      	beq.n	8001ffc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002060:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8002062:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002064:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002066:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800206e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002070:	4313      	orrs	r3, r2
 8002072:	e7dd      	b.n	8002030 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08002074 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002074:	b570      	push	{r4, r5, r6, lr}
 8002076:	4604      	mov	r4, r0
 8002078:	460d      	mov	r5, r1
 800207a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	061b      	lsls	r3, r3, #24
 8002082:	d501      	bpl.n	8002088 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002084:	2000      	movs	r0, #0
 8002086:	e01e      	b.n	80020c6 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002088:	4620      	mov	r0, r4
 800208a:	f7ff ff58 	bl	8001f3e <I2C_IsAcknowledgeFailed>
 800208e:	b9c8      	cbnz	r0, 80020c4 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002090:	1c6a      	adds	r2, r5, #1
 8002092:	d0f3      	beq.n	800207c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002094:	f7ff fdfa 	bl	8001c8c <HAL_GetTick>
 8002098:	1b80      	subs	r0, r0, r6
 800209a:	42a8      	cmp	r0, r5
 800209c:	d801      	bhi.n	80020a2 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800209e:	2d00      	cmp	r5, #0
 80020a0:	d1ec      	bne.n	800207c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020a2:	6823      	ldr	r3, [r4, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 80020aa:	d1e7      	bne.n	800207c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80020ac:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020ae:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020b0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020b4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80020ba:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020be:	f042 0220 	orr.w	r2, r2, #32
 80020c2:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80020c4:	2001      	movs	r0, #1
}
 80020c6:	bd70      	pop	{r4, r5, r6, pc}

080020c8 <I2C_RequestMemoryWrite>:
{
 80020c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020cc:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ce:	6802      	ldr	r2, [r0, #0]
{
 80020d0:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020d2:	6813      	ldr	r3, [r2, #0]
{
 80020d4:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020da:	6013      	str	r3, [r2, #0]
{
 80020dc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 80020e0:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020e2:	463b      	mov	r3, r7
 80020e4:	2200      	movs	r2, #0
 80020e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020ea:	f8cd 8000 	str.w	r8, [sp]
{
 80020ee:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020f0:	f7ff ff3e 	bl	8001f70 <I2C_WaitOnFlagUntilTimeout>
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	b138      	cbz	r0, 8002108 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	05db      	lsls	r3, r3, #23
 80020fc:	d502      	bpl.n	8002104 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002102:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8002104:	2603      	movs	r6, #3
 8002106:	e020      	b.n	800214a <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002108:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 800210c:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800210e:	463a      	mov	r2, r7
 8002110:	4643      	mov	r3, r8
 8002112:	4620      	mov	r0, r4
 8002114:	4918      	ldr	r1, [pc, #96]	@ (8002178 <I2C_RequestMemoryWrite+0xb0>)
 8002116:	f7ff ff6b 	bl	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800211a:	b9a8      	cbnz	r0, 8002148 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	9003      	str	r0, [sp, #12]
 8002120:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002122:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002124:	9203      	str	r2, [sp, #12]
 8002126:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002128:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212a:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800212c:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800212e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002130:	f7ff ffa0 	bl	8002074 <I2C_WaitOnTXEFlagUntilTimeout>
 8002134:	4606      	mov	r6, r0
 8002136:	b160      	cbz	r0, 8002152 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002138:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800213a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213c:	bf01      	itttt	eq
 800213e:	6822      	ldreq	r2, [r4, #0]
 8002140:	6813      	ldreq	r3, [r2, #0]
 8002142:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8002146:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8002148:	2601      	movs	r6, #1
}
 800214a:	4630      	mov	r0, r6
 800214c:	b005      	add	sp, #20
 800214e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002152:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002156:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002158:	d102      	bne.n	8002160 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800215a:	b2ed      	uxtb	r5, r5
 800215c:	611d      	str	r5, [r3, #16]
 800215e:	e7f4      	b.n	800214a <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002160:	0a2a      	lsrs	r2, r5, #8
 8002162:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002164:	4639      	mov	r1, r7
 8002166:	4642      	mov	r2, r8
 8002168:	4620      	mov	r0, r4
 800216a:	f7ff ff83 	bl	8002074 <I2C_WaitOnTXEFlagUntilTimeout>
 800216e:	2800      	cmp	r0, #0
 8002170:	d1e2      	bne.n	8002138 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	e7f1      	b.n	800215a <I2C_RequestMemoryWrite+0x92>
 8002176:	bf00      	nop
 8002178:	00010002 	.word	0x00010002

0800217c <I2C_RequestMemoryRead>:
{
 800217c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002180:	469a      	mov	sl, r3
 8002182:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002186:	6803      	ldr	r3, [r0, #0]
{
 8002188:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218a:	681a      	ldr	r2, [r3, #0]
{
 800218c:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002192:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002194:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002196:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800219a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800219e:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021a0:	463b      	mov	r3, r7
 80021a2:	2200      	movs	r2, #0
 80021a4:	f8cd 8000 	str.w	r8, [sp]
{
 80021a8:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021aa:	f7ff fee1 	bl	8001f70 <I2C_WaitOnFlagUntilTimeout>
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	b148      	cbz	r0, 80021c6 <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021b2:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021b4:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021b6:	bf48      	it	mi
 80021b8:	f44f 7300 	movmi.w	r3, #512	@ 0x200
    return HAL_TIMEOUT;
 80021bc:	f04f 0003 	mov.w	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021c0:	bf48      	it	mi
 80021c2:	6423      	strmi	r3, [r4, #64]	@ 0x40
 80021c4:	e021      	b.n	800220a <I2C_RequestMemoryRead+0x8e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021c6:	fa5f f986 	uxtb.w	r9, r6
 80021ca:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 80021ce:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021d0:	463a      	mov	r2, r7
 80021d2:	4643      	mov	r3, r8
 80021d4:	4620      	mov	r0, r4
 80021d6:	492a      	ldr	r1, [pc, #168]	@ (8002280 <I2C_RequestMemoryRead+0x104>)
 80021d8:	f7ff ff0a 	bl	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021dc:	b9a0      	cbnz	r0, 8002208 <I2C_RequestMemoryRead+0x8c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	9003      	str	r0, [sp, #12]
 80021e2:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021e4:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e6:	9203      	str	r2, [sp, #12]
 80021e8:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ea:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021ec:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ee:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021f0:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021f2:	f7ff ff3f 	bl	8002074 <I2C_WaitOnTXEFlagUntilTimeout>
 80021f6:	b158      	cbz	r0, 8002210 <I2C_RequestMemoryRead+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021fa:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fc:	bf01      	itttt	eq
 80021fe:	6822      	ldreq	r2, [r4, #0]
 8002200:	6813      	ldreq	r3, [r2, #0]
 8002202:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8002206:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8002208:	2001      	movs	r0, #1
}
 800220a:	b004      	add	sp, #16
 800220c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002210:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002216:	d11a      	bne.n	800224e <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002218:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800221a:	4642      	mov	r2, r8
 800221c:	4639      	mov	r1, r7
 800221e:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002220:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002222:	f7ff ff27 	bl	8002074 <I2C_WaitOnTXEFlagUntilTimeout>
 8002226:	4602      	mov	r2, r0
 8002228:	2800      	cmp	r0, #0
 800222a:	d1e5      	bne.n	80021f8 <I2C_RequestMemoryRead+0x7c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800222c:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800222e:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002230:	680b      	ldr	r3, [r1, #0]
 8002232:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002236:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002238:	463b      	mov	r3, r7
 800223a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800223e:	f8cd 8000 	str.w	r8, [sp]
 8002242:	f7ff fe95 	bl	8001f70 <I2C_WaitOnFlagUntilTimeout>
 8002246:	6822      	ldr	r2, [r4, #0]
 8002248:	b160      	cbz	r0, 8002264 <I2C_RequestMemoryRead+0xe8>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800224a:	6813      	ldr	r3, [r2, #0]
 800224c:	e7b2      	b.n	80021b4 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800224e:	0a2a      	lsrs	r2, r5, #8
 8002250:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002252:	4639      	mov	r1, r7
 8002254:	4642      	mov	r2, r8
 8002256:	4620      	mov	r0, r4
 8002258:	f7ff ff0c 	bl	8002074 <I2C_WaitOnTXEFlagUntilTimeout>
 800225c:	2800      	cmp	r0, #0
 800225e:	d1cb      	bne.n	80021f8 <I2C_RequestMemoryRead+0x7c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	e7d9      	b.n	8002218 <I2C_RequestMemoryRead+0x9c>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002264:	f049 0301 	orr.w	r3, r9, #1
 8002268:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800226a:	4620      	mov	r0, r4
 800226c:	4643      	mov	r3, r8
 800226e:	463a      	mov	r2, r7
 8002270:	4903      	ldr	r1, [pc, #12]	@ (8002280 <I2C_RequestMemoryRead+0x104>)
 8002272:	f7ff febd 	bl	8001ff0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002276:	3800      	subs	r0, #0
 8002278:	bf18      	it	ne
 800227a:	2001      	movne	r0, #1
 800227c:	e7c5      	b.n	800220a <I2C_RequestMemoryRead+0x8e>
 800227e:	bf00      	nop
 8002280:	00010002 	.word	0x00010002

08002284 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	4604      	mov	r4, r0
 8002288:	460d      	mov	r5, r1
 800228a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	075b      	lsls	r3, r3, #29
 8002292:	d501      	bpl.n	8002298 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8002294:	2000      	movs	r0, #0
 8002296:	e01e      	b.n	80022d6 <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002298:	4620      	mov	r0, r4
 800229a:	f7ff fe50 	bl	8001f3e <I2C_IsAcknowledgeFailed>
 800229e:	b9c8      	cbnz	r0, 80022d4 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80022a0:	1c6a      	adds	r2, r5, #1
 80022a2:	d0f3      	beq.n	800228c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a4:	f7ff fcf2 	bl	8001c8c <HAL_GetTick>
 80022a8:	1b80      	subs	r0, r0, r6
 80022aa:	42a8      	cmp	r0, r5
 80022ac:	d801      	bhi.n	80022b2 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80022ae:	2d00      	cmp	r5, #0
 80022b0:	d1ec      	bne.n	800228c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f013 0304 	ands.w	r3, r3, #4
 80022ba:	d1e7      	bne.n	800228c <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80022bc:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022be:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022c0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80022ca:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022ce:	f042 0220 	orr.w	r2, r2, #32
 80022d2:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80022d4:	2001      	movs	r0, #1
}
 80022d6:	bd70      	pop	{r4, r5, r6, pc}

080022d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80022d8:	b570      	push	{r4, r5, r6, lr}
 80022da:	4604      	mov	r4, r0
 80022dc:	460d      	mov	r5, r1
 80022de:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022e0:	6821      	ldr	r1, [r4, #0]
 80022e2:	694b      	ldr	r3, [r1, #20]
 80022e4:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 80022e8:	d001      	beq.n	80022ee <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 80022ea:	2000      	movs	r0, #0
 80022ec:	e011      	b.n	8002312 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80022ee:	694a      	ldr	r2, [r1, #20]
 80022f0:	06d2      	lsls	r2, r2, #27
 80022f2:	d50f      	bpl.n	8002314 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022f4:	f06f 0210 	mvn.w	r2, #16
 80022f8:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80022fa:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80022fc:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80022fe:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002302:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002306:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002308:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800230a:	2300      	movs	r3, #0
      return HAL_ERROR;
 800230c:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 800230e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002312:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002314:	f7ff fcba 	bl	8001c8c <HAL_GetTick>
 8002318:	1b80      	subs	r0, r0, r6
 800231a:	42a8      	cmp	r0, r5
 800231c:	d801      	bhi.n	8002322 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800231e:	2d00      	cmp	r5, #0
 8002320:	d1de      	bne.n	80022e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 800232a:	d1d9      	bne.n	80022e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 800232c:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800232e:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002330:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002334:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002338:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800233a:	4313      	orrs	r3, r2
 800233c:	e7e4      	b.n	8002308 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

08002340 <HAL_I2C_Init>:
{
 8002340:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8002342:	4604      	mov	r4, r0
 8002344:	b908      	cbnz	r0, 800234a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8002346:	2001      	movs	r0, #1
}
 8002348:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800234a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800234e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002352:	b91b      	cbnz	r3, 800235c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002354:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002358:	f7fe ffe2 	bl	8001320 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800235c:	2324      	movs	r3, #36	@ 0x24
 800235e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002362:	6823      	ldr	r3, [r4, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	f022 0201 	bic.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002372:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800237a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800237c:	f001 fb64 	bl	8003a48 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002380:	4b3f      	ldr	r3, [pc, #252]	@ (8002480 <HAL_I2C_Init+0x140>)
 8002382:	6865      	ldr	r5, [r4, #4]
 8002384:	429d      	cmp	r5, r3
 8002386:	bf94      	ite	ls
 8002388:	4b3e      	ldrls	r3, [pc, #248]	@ (8002484 <HAL_I2C_Init+0x144>)
 800238a:	4b3f      	ldrhi	r3, [pc, #252]	@ (8002488 <HAL_I2C_Init+0x148>)
 800238c:	4298      	cmp	r0, r3
 800238e:	bf8c      	ite	hi
 8002390:	2300      	movhi	r3, #0
 8002392:	2301      	movls	r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1d6      	bne.n	8002346 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002398:	4e39      	ldr	r6, [pc, #228]	@ (8002480 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 800239a:	4b3c      	ldr	r3, [pc, #240]	@ (800248c <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800239c:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 800239e:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023a2:	bf88      	it	hi
 80023a4:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023a8:	6822      	ldr	r2, [r4, #0]
 80023aa:	6851      	ldr	r1, [r2, #4]
 80023ac:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80023b0:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023b4:	bf82      	ittt	hi
 80023b6:	4373      	mulhi	r3, r6
 80023b8:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 80023bc:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023c0:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023c2:	6a11      	ldr	r1, [r2, #32]
 80023c4:	3301      	adds	r3, #1
 80023c6:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80023ca:	430b      	orrs	r3, r1
 80023cc:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023ce:	69d1      	ldr	r1, [r2, #28]
 80023d0:	1e43      	subs	r3, r0, #1
 80023d2:	482b      	ldr	r0, [pc, #172]	@ (8002480 <HAL_I2C_Init+0x140>)
 80023d4:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 80023d8:	4285      	cmp	r5, r0
 80023da:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80023de:	d832      	bhi.n	8002446 <HAL_I2C_Init+0x106>
 80023e0:	006d      	lsls	r5, r5, #1
 80023e2:	fbb3 f3f5 	udiv	r3, r3, r5
 80023e6:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80023ea:	3301      	adds	r3, #1
 80023ec:	4203      	tst	r3, r0
 80023ee:	d042      	beq.n	8002476 <HAL_I2C_Init+0x136>
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	4319      	orrs	r1, r3
 80023f6:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023f8:	6811      	ldr	r1, [r2, #0]
 80023fa:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80023fe:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8002402:	4303      	orrs	r3, r0
 8002404:	430b      	orrs	r3, r1
 8002406:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002408:	6891      	ldr	r1, [r2, #8]
 800240a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800240e:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8002412:	4303      	orrs	r3, r0
 8002414:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002418:	430b      	orrs	r3, r1
 800241a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800241c:	68d1      	ldr	r1, [r2, #12]
 800241e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002422:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002426:	4303      	orrs	r3, r0
 8002428:	430b      	orrs	r3, r1
 800242a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800242c:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242e:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002436:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002438:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800243a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800243e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002440:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8002444:	e780      	b.n	8002348 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002446:	68a0      	ldr	r0, [r4, #8]
 8002448:	b950      	cbnz	r0, 8002460 <HAL_I2C_Init+0x120>
 800244a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800244e:	fbb3 f3f5 	udiv	r3, r3, r5
 8002452:	3301      	adds	r3, #1
 8002454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002458:	b17b      	cbz	r3, 800247a <HAL_I2C_Init+0x13a>
 800245a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800245e:	e7c9      	b.n	80023f4 <HAL_I2C_Init+0xb4>
 8002460:	2019      	movs	r0, #25
 8002462:	4368      	muls	r0, r5
 8002464:	fbb3 f3f0 	udiv	r3, r3, r0
 8002468:	3301      	adds	r3, #1
 800246a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246e:	b123      	cbz	r3, 800247a <HAL_I2C_Init+0x13a>
 8002470:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002474:	e7be      	b.n	80023f4 <HAL_I2C_Init+0xb4>
 8002476:	2304      	movs	r3, #4
 8002478:	e7bc      	b.n	80023f4 <HAL_I2C_Init+0xb4>
 800247a:	2301      	movs	r3, #1
 800247c:	e7ba      	b.n	80023f4 <HAL_I2C_Init+0xb4>
 800247e:	bf00      	nop
 8002480:	000186a0 	.word	0x000186a0
 8002484:	001e847f 	.word	0x001e847f
 8002488:	003d08ff 	.word	0x003d08ff
 800248c:	000f4240 	.word	0x000f4240

08002490 <HAL_I2C_Mem_Write>:
{
 8002490:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002494:	4604      	mov	r4, r0
 8002496:	4699      	mov	r9, r3
 8002498:	460f      	mov	r7, r1
 800249a:	4690      	mov	r8, r2
 800249c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 800249e:	f7ff fbf5 	bl	8001c8c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a2:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 80024a6:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d003      	beq.n	80024b4 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 80024ac:	2002      	movs	r0, #2
}
 80024ae:	b003      	add	sp, #12
 80024b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024b4:	9000      	str	r0, [sp, #0]
 80024b6:	2319      	movs	r3, #25
 80024b8:	2201      	movs	r2, #1
 80024ba:	4620      	mov	r0, r4
 80024bc:	493a      	ldr	r1, [pc, #232]	@ (80025a8 <HAL_I2C_Mem_Write+0x118>)
 80024be:	f7ff fd57 	bl	8001f70 <I2C_WaitOnFlagUntilTimeout>
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d1f2      	bne.n	80024ac <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80024c6:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d0ee      	beq.n	80024ac <HAL_I2C_Mem_Write+0x1c>
 80024ce:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024d0:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80024d2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024d6:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024d8:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024da:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80024dc:	bf58      	it	pl
 80024de:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024e0:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 80024e2:	bf5c      	itt	pl
 80024e4:	f043 0301 	orrpl.w	r3, r3, #1
 80024e8:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024ea:	6803      	ldr	r3, [r0, #0]
 80024ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80024f0:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024f2:	2321      	movs	r3, #33	@ 0x21
 80024f4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024f8:	2340      	movs	r3, #64	@ 0x40
 80024fa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fe:	2300      	movs	r3, #0
 8002500:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8002502:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002504:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8002506:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002508:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 800250c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800250e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002510:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002512:	4b26      	ldr	r3, [pc, #152]	@ (80025ac <HAL_I2C_Mem_Write+0x11c>)
 8002514:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002516:	464b      	mov	r3, r9
 8002518:	e9cd 6500 	strd	r6, r5, [sp]
 800251c:	f7ff fdd4 	bl	80020c8 <I2C_RequestMemoryWrite>
 8002520:	2800      	cmp	r0, #0
 8002522:	d02a      	beq.n	800257a <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8002524:	2001      	movs	r0, #1
 8002526:	e7c2      	b.n	80024ae <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002528:	f7ff fda4 	bl	8002074 <I2C_WaitOnTXEFlagUntilTimeout>
 800252c:	b140      	cbz	r0, 8002540 <HAL_I2C_Mem_Write+0xb0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002530:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002532:	bf01      	itttt	eq
 8002534:	6822      	ldreq	r2, [r4, #0]
 8002536:	6813      	ldreq	r3, [r2, #0]
 8002538:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800253c:	6013      	streq	r3, [r2, #0]
 800253e:	e7f1      	b.n	8002524 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002540:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002542:	6827      	ldr	r7, [r4, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	f812 1b01 	ldrb.w	r1, [r2], #1
 800254a:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 800254c:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800254e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002550:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002552:	3a01      	subs	r2, #1
 8002554:	b292      	uxth	r2, r2
 8002556:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002558:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 800255a:	1e48      	subs	r0, r1, #1
 800255c:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800255e:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8002560:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002562:	d50a      	bpl.n	800257a <HAL_I2C_Mem_Write+0xea>
 8002564:	b148      	cbz	r0, 800257a <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002566:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8002568:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800256a:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 800256c:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800256e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8002570:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8002572:	3b01      	subs	r3, #1
 8002574:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8002576:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002578:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800257a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800257c:	462a      	mov	r2, r5
 800257e:	4631      	mov	r1, r6
 8002580:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1d0      	bne.n	8002528 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002586:	f7ff fe7d 	bl	8002284 <I2C_WaitOnBTFFlagUntilTimeout>
 800258a:	2800      	cmp	r0, #0
 800258c:	d1cf      	bne.n	800252e <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800258e:	6822      	ldr	r2, [r4, #0]
 8002590:	6813      	ldr	r3, [r2, #0]
 8002592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002596:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002598:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 800259a:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800259e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a2:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 80025a6:	e782      	b.n	80024ae <HAL_I2C_Mem_Write+0x1e>
 80025a8:	00100002 	.word	0x00100002
 80025ac:	ffff0000 	.word	0xffff0000

080025b0 <HAL_I2C_Mem_Read>:
{
 80025b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025b4:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 80025b6:	2300      	movs	r3, #0
{
 80025b8:	4604      	mov	r4, r0
 80025ba:	b089      	sub	sp, #36	@ 0x24
  __IO uint32_t count = 0U;
 80025bc:	9303      	str	r3, [sp, #12]
{
 80025be:	460d      	mov	r5, r1
 80025c0:	4690      	mov	r8, r2
 80025c2:	9f12      	ldr	r7, [sp, #72]	@ 0x48
  uint32_t tickstart = HAL_GetTick();
 80025c4:	f7ff fb62 	bl	8001c8c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c8:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 80025cc:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d004      	beq.n	80025dc <HAL_I2C_Mem_Read+0x2c>
      return HAL_BUSY;
 80025d2:	2502      	movs	r5, #2
}
 80025d4:	4628      	mov	r0, r5
 80025d6:	b009      	add	sp, #36	@ 0x24
 80025d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025dc:	9000      	str	r0, [sp, #0]
 80025de:	2319      	movs	r3, #25
 80025e0:	2201      	movs	r2, #1
 80025e2:	4620      	mov	r0, r4
 80025e4:	4990      	ldr	r1, [pc, #576]	@ (8002828 <HAL_I2C_Mem_Read+0x278>)
 80025e6:	f7ff fcc3 	bl	8001f70 <I2C_WaitOnFlagUntilTimeout>
 80025ea:	2800      	cmp	r0, #0
 80025ec:	d1f1      	bne.n	80025d2 <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 80025ee:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d0ed      	beq.n	80025d2 <HAL_I2C_Mem_Read+0x22>
 80025f6:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025f8:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80025fa:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025fe:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002600:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002602:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8002604:	bf58      	it	pl
 8002606:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002608:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 800260a:	bf5c      	itt	pl
 800260c:	f043 0301 	orrpl.w	r3, r3, #1
 8002610:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002612:	6803      	ldr	r3, [r0, #0]
 8002614:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002618:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800261a:	2322      	movs	r3, #34	@ 0x22
 800261c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002620:	2340      	movs	r3, #64	@ 0x40
 8002622:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002626:	2300      	movs	r3, #0
 8002628:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800262a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800262c:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 800262e:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002630:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8002634:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002636:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002638:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800263a:	4b7c      	ldr	r3, [pc, #496]	@ (800282c <HAL_I2C_Mem_Read+0x27c>)
 800263c:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800263e:	464b      	mov	r3, r9
 8002640:	e9cd 7600 	strd	r7, r6, [sp]
 8002644:	f7ff fd9a 	bl	800217c <I2C_RequestMemoryRead>
 8002648:	4605      	mov	r5, r0
 800264a:	2800      	cmp	r0, #0
 800264c:	f040 80ba 	bne.w	80027c4 <HAL_I2C_Mem_Read+0x214>
    if (hi2c->XferSize == 0U)
 8002650:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002652:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8002654:	b9c2      	cbnz	r2, 8002688 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002656:	9004      	str	r0, [sp, #16]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	9204      	str	r2, [sp, #16]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	9204      	str	r2, [sp, #16]
 8002660:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002668:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800266a:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8002830 <HAL_I2C_Mem_Read+0x280>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800266e:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8002834 <HAL_I2C_Mem_Read+0x284>
    while (hi2c->XferSize > 0U)
 8002672:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	d137      	bne.n	80026e8 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8002678:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800267a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800267e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002682:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8002686:	e7a5      	b.n	80025d4 <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8002688:	2a01      	cmp	r2, #1
 800268a:	d111      	bne.n	80026b0 <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002696:	6823      	ldr	r3, [r4, #0]
 8002698:	9005      	str	r0, [sp, #20]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	9205      	str	r2, [sp, #20]
 800269e:	699a      	ldr	r2, [r3, #24]
 80026a0:	9205      	str	r2, [sp, #20]
 80026a2:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026ac:	b662      	cpsie	i
}
 80026ae:	e7dc      	b.n	800266a <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 80026b0:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026b2:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 80026b4:	d10e      	bne.n	80026d4 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026bc:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	9006      	str	r0, [sp, #24]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	9206      	str	r2, [sp, #24]
 80026c6:	699a      	ldr	r2, [r3, #24]
 80026c8:	9206      	str	r2, [sp, #24]
 80026ca:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d2:	e7ea      	b.n	80026aa <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026d4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80026d8:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026da:	9007      	str	r0, [sp, #28]
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	9207      	str	r2, [sp, #28]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	9307      	str	r3, [sp, #28]
 80026e4:	9b07      	ldr	r3, [sp, #28]
 80026e6:	e7c0      	b.n	800266a <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d878      	bhi.n	80027de <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d115      	bne.n	800271c <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f0:	4632      	mov	r2, r6
 80026f2:	4639      	mov	r1, r7
 80026f4:	4620      	mov	r0, r4
 80026f6:	f7ff fdef 	bl	80022d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026fa:	2800      	cmp	r0, #0
 80026fc:	d162      	bne.n	80027c4 <HAL_I2C_Mem_Read+0x214>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026fe:	6823      	ldr	r3, [r4, #0]
 8002700:	691a      	ldr	r2, [r3, #16]
 8002702:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002704:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002706:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002708:	3301      	adds	r3, #1
 800270a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800270c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800270e:	3b01      	subs	r3, #1
 8002710:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002712:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002714:	3b01      	subs	r3, #1
 8002716:	b29b      	uxth	r3, r3
 8002718:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800271a:	e7aa      	b.n	8002672 <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 800271c:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	463b      	mov	r3, r7
 8002724:	4641      	mov	r1, r8
 8002726:	4620      	mov	r0, r4
 8002728:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 800272a:	d118      	bne.n	800275e <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800272c:	f7ff fc20 	bl	8001f70 <I2C_WaitOnFlagUntilTimeout>
 8002730:	2800      	cmp	r0, #0
 8002732:	d147      	bne.n	80027c4 <HAL_I2C_Mem_Read+0x214>
 8002734:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002736:	6823      	ldr	r3, [r4, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800273e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002744:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002746:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002748:	3301      	adds	r3, #1
 800274a:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800274c:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800274e:	3b01      	subs	r3, #1
 8002750:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002752:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002754:	3b01      	subs	r3, #1
 8002756:	b29b      	uxth	r3, r3
 8002758:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800275a:	b662      	cpsie	i
 800275c:	e7cf      	b.n	80026fe <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800275e:	f7ff fc07 	bl	8001f70 <I2C_WaitOnFlagUntilTimeout>
 8002762:	2800      	cmp	r0, #0
 8002764:	d12e      	bne.n	80027c4 <HAL_I2C_Mem_Read+0x214>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002766:	6822      	ldr	r2, [r4, #0]
 8002768:	6813      	ldr	r3, [r2, #0]
 800276a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800276e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002770:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002772:	f246 11a8 	movw	r1, #25000	@ 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800277c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800277e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002780:	1c53      	adds	r3, r2, #1
 8002782:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002784:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002786:	3b01      	subs	r3, #1
 8002788:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800278a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800278c:	3b01      	subs	r3, #1
 800278e:	b29b      	uxth	r3, r3
 8002790:	8563      	strh	r3, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002792:	f8d9 3000 	ldr.w	r3, [r9]
 8002796:	fbb3 f3f1 	udiv	r3, r3, r1
 800279a:	2123      	movs	r1, #35	@ 0x23
 800279c:	434b      	muls	r3, r1
 800279e:	9303      	str	r3, [sp, #12]
            count--;
 80027a0:	9b03      	ldr	r3, [sp, #12]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 80027a6:	9b03      	ldr	r3, [sp, #12]
 80027a8:	b973      	cbnz	r3, 80027c8 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 80027aa:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 80027ac:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80027ae:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027b6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80027b8:	f042 0220 	orr.w	r2, r2, #32
 80027bc:	6422      	str	r2, [r4, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80027be:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 80027c0:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80027c4:	2501      	movs	r5, #1
 80027c6:	e705      	b.n	80025d4 <HAL_I2C_Mem_Read+0x24>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80027c8:	6823      	ldr	r3, [r4, #0]
 80027ca:	6959      	ldr	r1, [r3, #20]
 80027cc:	0749      	lsls	r1, r1, #29
 80027ce:	d5e7      	bpl.n	80027a0 <HAL_I2C_Mem_Read+0x1f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d0:	6819      	ldr	r1, [r3, #0]
 80027d2:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 80027d6:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	7053      	strb	r3, [r2, #1]
 80027dc:	e7b3      	b.n	8002746 <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027de:	4632      	mov	r2, r6
 80027e0:	4639      	mov	r1, r7
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7ff fd78 	bl	80022d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d1eb      	bne.n	80027c4 <HAL_I2C_Mem_Read+0x214>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ec:	6823      	ldr	r3, [r4, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80027f2:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 80027f4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 80027f6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80027f8:	3a01      	subs	r2, #1
 80027fa:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80027fc:	1c4b      	adds	r3, r1, #1
        hi2c->XferCount--;
 80027fe:	8562      	strh	r2, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002800:	6822      	ldr	r2, [r4, #0]
        hi2c->pBuffPtr++;
 8002802:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8002804:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002806:	6950      	ldr	r0, [r2, #20]
        hi2c->XferSize--;
 8002808:	3b01      	subs	r3, #1
 800280a:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800280c:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 800280e:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002810:	f57f af2f 	bpl.w	8002672 <HAL_I2C_Mem_Read+0xc2>
          if (hi2c->XferSize == 3U)
 8002814:	2b03      	cmp	r3, #3
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002816:	bf02      	ittt	eq
 8002818:	6813      	ldreq	r3, [r2, #0]
 800281a:	f423 6380 	biceq.w	r3, r3, #1024	@ 0x400
 800281e:	6013      	streq	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002820:	6913      	ldr	r3, [r2, #16]
 8002822:	704b      	strb	r3, [r1, #1]
 8002824:	e76f      	b.n	8002706 <HAL_I2C_Mem_Read+0x156>
 8002826:	bf00      	nop
 8002828:	00100002 	.word	0x00100002
 800282c:	ffff0000 	.word	0xffff0000
 8002830:	00010004 	.word	0x00010004
 8002834:	20000000 	.word	0x20000000

08002838 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800283a:	4604      	mov	r4, r0
 800283c:	b1e0      	cbz	r0, 8002878 <HAL_PCD_Init+0x40>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800283e:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8002842:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002846:	b91b      	cbnz	r3, 8002850 <HAL_PCD_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002848:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800284c:	f004 f82c 	bl	80068a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002850:	2303      	movs	r3, #3
 8002852:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8002856:	2300      	movs	r3, #0

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002858:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 800285a:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 800285c:	f855 0b04 	ldr.w	r0, [r5], #4
 8002860:	f001 fc08 	bl	8004074 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002864:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8002868:	6820      	ldr	r0, [r4, #0]
 800286a:	f001 fbf3 	bl	8004054 <USB_CoreInit>
 800286e:	4601      	mov	r1, r0
 8002870:	b128      	cbz	r0, 800287e <HAL_PCD_Init+0x46>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002872:	2302      	movs	r3, #2
 8002874:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 8002878:	2501      	movs	r5, #1
  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800287a:	4628      	mov	r0, r5
 800287c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800287e:	6820      	ldr	r0, [r4, #0]
 8002880:	f001 fc02 	bl	8004088 <USB_SetCurrentMode>
 8002884:	2800      	cmp	r0, #0
 8002886:	d1f4      	bne.n	8002872 <HAL_PCD_Init+0x3a>
 8002888:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 800288a:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800288c:	7926      	ldrb	r6, [r4, #4]
 800288e:	f104 0310 	add.w	r3, r4, #16
 8002892:	b2c1      	uxtb	r1, r0
 8002894:	428e      	cmp	r6, r1
 8002896:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 800289a:	d818      	bhi.n	80028ce <HAL_PCD_Init+0x96>
 800289c:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 800289e:	460a      	mov	r2, r1
 80028a0:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 80028a4:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028a6:	4286      	cmp	r6, r0
 80028a8:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80028ac:	d81b      	bhi.n	80028e6 <HAL_PCD_Init+0xae>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028ae:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80028b2:	6820      	ldr	r0, [r4, #0]
 80028b4:	f001 fbea 	bl	800408c <USB_DevInit>
 80028b8:	4605      	mov	r5, r0
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d1d9      	bne.n	8002872 <HAL_PCD_Init+0x3a>
  hpcd->State = HAL_PCD_STATE_READY;
 80028be:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80028c0:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 80028c2:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 80028c4:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80028c8:	f001 fe96 	bl	80045f8 <USB_DevDisconnect>
  return HAL_OK;
 80028cc:	e7d5      	b.n	800287a <HAL_PCD_Init+0x42>
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028ce:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 80028d2:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 80028d6:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028da:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028de:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e2:	3001      	adds	r0, #1
 80028e4:	e7d5      	b.n	8002892 <HAL_PCD_Init+0x5a>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80028e6:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 80028ea:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 80028ee:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80028f2:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028f6:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fa:	3101      	adds	r1, #1
 80028fc:	e7d2      	b.n	80028a4 <HAL_PCD_Init+0x6c>

080028fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80028fe:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8002900:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 8002904:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002906:	2b01      	cmp	r3, #1
 8002908:	d010      	beq.n	800292c <HAL_PCD_Start+0x2e>
 800290a:	2501      	movs	r5, #1
 800290c:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002910:	6800      	ldr	r0, [r0, #0]
 8002912:	f001 fba6 	bl	8004062 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002916:	4629      	mov	r1, r5
 8002918:	4620      	mov	r0, r4
 800291a:	f004 f8cc 	bl	8006ab6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800291e:	6820      	ldr	r0, [r4, #0]
 8002920:	f001 fe68 	bl	80045f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002924:	2000      	movs	r0, #0
 8002926:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 800292a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 800292c:	2002      	movs	r0, #2
 800292e:	e7fc      	b.n	800292a <HAL_PCD_Start+0x2c>

08002930 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002930:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8002932:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 8002936:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8002938:	2a01      	cmp	r2, #1
 800293a:	d00a      	beq.n	8002952 <HAL_PCD_SetAddress+0x22>
 800293c:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 800293e:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 8002940:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002944:	6800      	ldr	r0, [r0, #0]
 8002946:	f001 fe4f 	bl	80045e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800294a:	2000      	movs	r0, #0
 800294c:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8002950:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002952:	2002      	movs	r0, #2
 8002954:	e7fc      	b.n	8002950 <HAL_PCD_SetAddress+0x20>
	...

08002958 <HAL_PCD_IRQHandler>:
{
 8002958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800295c:	4604      	mov	r4, r0
 800295e:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002960:	6800      	ldr	r0, [r0, #0]
 8002962:	f001 fe4b 	bl	80045fc <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002966:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 800296a:	f000 844f 	beq.w	800320c <HAL_PCD_IRQHandler+0x8b4>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 800296e:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002970:	4ec6      	ldr	r6, [pc, #792]	@ (8002c8c <HAL_PCD_IRQHandler+0x334>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002972:	6820      	ldr	r0, [r4, #0]
 8002974:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8002978:	041f      	lsls	r7, r3, #16
 800297a:	d402      	bmi.n	8002982 <HAL_PCD_IRQHandler+0x2a>
}
 800297c:	b005      	add	sp, #20
 800297e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8002982:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 8002986:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 800298a:	b299      	uxth	r1, r3
    if (epindex == 0U)
 800298c:	f040 80c0 	bne.w	8002b10 <HAL_PCD_IRQHandler+0x1b8>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002990:	f011 0110 	ands.w	r1, r1, #16
 8002994:	d126      	bne.n	80029e4 <HAL_PCD_IRQHandler+0x8c>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002996:	8803      	ldrh	r3, [r0, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	4033      	ands	r3, r6
 800299c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029a0:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029a2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80029a6:	7c22      	ldrb	r2, [r4, #16]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80029ae:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80029b2:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 80029b6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 80029bc:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029be:	62e3      	str	r3, [r4, #44]	@ 0x2c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80029c0:	4620      	mov	r0, r4
        ep->xfer_buff += ep->xfer_count;
 80029c2:	6262      	str	r2, [r4, #36]	@ 0x24
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80029c4:	f003 ff9f 	bl	8006906 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80029c8:	7b63      	ldrb	r3, [r4, #13]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0d1      	beq.n	8002972 <HAL_PCD_IRQHandler+0x1a>
 80029ce:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80029d0:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80029d2:	2a00      	cmp	r2, #0
 80029d4:	d1cd      	bne.n	8002972 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80029d6:	7b63      	ldrb	r3, [r4, #13]
 80029d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029dc:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80029e0:	7362      	strb	r2, [r4, #13]
 80029e2:	e7c6      	b.n	8002972 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029e4:	8807      	ldrh	r7, [r0, #0]
 80029e6:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80029e8:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 80029ec:	d021      	beq.n	8002a32 <HAL_PCD_IRQHandler+0xda>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029ee:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 80029f2:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80029fc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002a00:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a04:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8002a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a0c:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a10:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8002a14:	f002 f83d 	bl	8004a92 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a18:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002a1a:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a1c:	8813      	ldrh	r3, [r2, #0]
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a22:	051b      	lsls	r3, r3, #20
 8002a24:	0d1b      	lsrs	r3, r3, #20
 8002a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a2a:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002a2c:	f003 ff5c 	bl	80068e8 <HAL_PCD_SetupStageCallback>
 8002a30:	e79f      	b.n	8002972 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a32:	0419      	lsls	r1, r3, #16
 8002a34:	d59d      	bpl.n	8002972 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a36:	8803      	ldrh	r3, [r0, #0]
 8002a38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a3c:	051b      	lsls	r3, r3, #20
 8002a3e:	0d1b      	lsrs	r3, r3, #20
 8002a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a44:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a46:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002a4a:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002a54:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002a58:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8002a5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a60:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002a64:	b18b      	cbz	r3, 8002a8a <HAL_PCD_IRQHandler+0x132>
 8002a66:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8002a6a:	b171      	cbz	r1, 8002a8a <HAL_PCD_IRQHandler+0x132>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002a6c:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8002a70:	f002 f80f 	bl	8004a92 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8002a74:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8002a78:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002a7c:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 8002a7e:	4413      	add	r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002a80:	4620      	mov	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8002a82:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002a86:	f003 ff35 	bl	80068f4 <HAL_PCD_DataOutStageCallback>
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002a8a:	6821      	ldr	r1, [r4, #0]
 8002a8c:	880a      	ldrh	r2, [r1, #0]
 8002a8e:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002a90:	0512      	lsls	r2, r2, #20
 8002a92:	f53f af6e 	bmi.w	8002972 <HAL_PCD_IRQHandler+0x1a>
 8002a96:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002a9a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a9e:	f43f af68 	beq.w	8002972 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002aa2:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8002aa6:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 8002aaa:	b292      	uxth	r2, r2
 8002aac:	5a83      	ldrh	r3, [r0, r2]
 8002aae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ab2:	5283      	strh	r3, [r0, r2]
 8002ab4:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 8002ab8:	2b3e      	cmp	r3, #62	@ 0x3e
 8002aba:	d91d      	bls.n	8002af8 <HAL_PCD_IRQHandler+0x1a0>
 8002abc:	095f      	lsrs	r7, r3, #5
 8002abe:	06db      	lsls	r3, r3, #27
 8002ac0:	5a83      	ldrh	r3, [r0, r2]
 8002ac2:	bf08      	it	eq
 8002ac4:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8002ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002ada:	880b      	ldrh	r3, [r1, #0]
 8002adc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002ae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ae4:	041b      	lsls	r3, r3, #16
 8002ae6:	0c1b      	lsrs	r3, r3, #16
 8002ae8:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8002aec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002af4:	800b      	strh	r3, [r1, #0]
 8002af6:	e73c      	b.n	8002972 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002af8:	b90b      	cbnz	r3, 8002afe <HAL_PCD_IRQHandler+0x1a6>
 8002afa:	5a83      	ldrh	r3, [r0, r2]
 8002afc:	e7e7      	b.n	8002ace <HAL_PCD_IRQHandler+0x176>
 8002afe:	085f      	lsrs	r7, r3, #1
 8002b00:	07db      	lsls	r3, r3, #31
 8002b02:	5a83      	ldrh	r3, [r0, r2]
 8002b04:	bf48      	it	mi
 8002b06:	3701      	addmi	r7, #1
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8002b0e:	e7e2      	b.n	8002ad6 <HAL_PCD_IRQHandler+0x17e>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b10:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b14:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002b16:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002b1a:	f140 80f6 	bpl.w	8002d0a <HAL_PCD_IRQHandler+0x3b2>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b1e:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8002b22:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002b26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b2a:	051b      	lsls	r3, r3, #20
 8002b2c:	0d1b      	lsrs	r3, r3, #20
 8002b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b32:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8002b36:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8002b3a:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 8002b3e:	b9bb      	cbnz	r3, 8002b70 <HAL_PCD_IRQHandler+0x218>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002b40:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8002b44:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3306      	adds	r3, #6
 8002b4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002b50:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8002b54:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8002b58:	f1b9 0f00 	cmp.w	r9, #0
 8002b5c:	f000 80ba 	beq.w	8002cd4 <HAL_PCD_IRQHandler+0x37c>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002b60:	464b      	mov	r3, r9
 8002b62:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b66:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8002b6a:	f001 ff92 	bl	8004a92 <USB_ReadPMA>
 8002b6e:	e0b1      	b.n	8002cd4 <HAL_PCD_IRQHandler+0x37c>
          if (ep->type == EP_TYPE_BULK)
 8002b70:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b74:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	f040 8089 	bne.w	8002c90 <HAL_PCD_IRQHandler+0x338>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b7e:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 8002b82:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 8002b86:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b8a:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 8002b8e:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b92:	44d9      	add	r9, fp
 8002b94:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b98:	d03c      	beq.n	8002c14 <HAL_PCD_IRQHandler+0x2bc>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b9a:	f109 0902 	add.w	r9, r9, #2
 8002b9e:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8002ba2:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 8002ba6:	4599      	cmp	r9, r3
 8002ba8:	d913      	bls.n	8002bd2 <HAL_PCD_IRQHandler+0x27a>
 8002baa:	2300      	movs	r3, #0
 8002bac:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002bb0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002bb4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	0c1b      	lsrs	r3, r3, #16
 8002bc0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bcc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002bd0:	e005      	b.n	8002bde <HAL_PCD_IRQHandler+0x286>
      ep->xfer_len -= count;
 8002bd2:	eba3 0309 	sub.w	r3, r3, r9
 8002bd6:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0e8      	beq.n	8002bb0 <HAL_PCD_IRQHandler+0x258>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bde:	f1bc 0f00 	cmp.w	ip, #0
 8002be2:	d00d      	beq.n	8002c00 <HAL_PCD_IRQHandler+0x2a8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002be4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002be8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	0c1b      	lsrs	r3, r3, #16
 8002bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bf8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002bfc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8002c00:	f1b9 0f00 	cmp.w	r9, #0
 8002c04:	d066      	beq.n	8002cd4 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c06:	2128      	movs	r1, #40	@ 0x28
 8002c08:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002c0c:	464b      	mov	r3, r9
 8002c0e:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8002c12:	e7a8      	b.n	8002b66 <HAL_PCD_IRQHandler+0x20e>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c14:	f109 0906 	add.w	r9, r9, #6
 8002c18:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8002c1c:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 8002c20:	4599      	cmp	r9, r3
 8002c22:	d912      	bls.n	8002c4a <HAL_PCD_IRQHandler+0x2f2>
 8002c24:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	0c1b      	lsrs	r3, r3, #16
 8002c38:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002c3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c44:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002c48:	e005      	b.n	8002c56 <HAL_PCD_IRQHandler+0x2fe>
      ep->xfer_len -= count;
 8002c4a:	eba3 0309 	sub.w	r3, r3, r9
 8002c4e:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d0e8      	beq.n	8002c28 <HAL_PCD_IRQHandler+0x2d0>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c56:	f1bc 0f00 	cmp.w	ip, #0
 8002c5a:	d10d      	bne.n	8002c78 <HAL_PCD_IRQHandler+0x320>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c68:	041b      	lsls	r3, r3, #16
 8002c6a:	0c1b      	lsrs	r3, r3, #16
 8002c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002c74:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8002c78:	f1b9 0f00 	cmp.w	r9, #0
 8002c7c:	d02a      	beq.n	8002cd4 <HAL_PCD_IRQHandler+0x37c>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c7e:	2128      	movs	r1, #40	@ 0x28
 8002c80:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002c84:	464b      	mov	r3, r9
 8002c86:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8002c8a:	e76c      	b.n	8002b66 <HAL_PCD_IRQHandler+0x20e>
 8002c8c:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c90:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c9c:	041b      	lsls	r3, r3, #16
 8002c9e:	0c1b      	lsrs	r3, r3, #16
 8002ca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ca4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002ca8:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002cac:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 8002cb0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cba:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002cbe:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002cc0:	d054      	beq.n	8002d6c <HAL_PCD_IRQHandler+0x414>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cc2:	3202      	adds	r2, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8002cca:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8002cce:	f1b9 0f00 	cmp.w	r9, #0
 8002cd2:	d19b      	bne.n	8002c0c <HAL_PCD_IRQHandler+0x2b4>
        ep->xfer_count += count;
 8002cd4:	fb05 f107 	mul.w	r1, r5, r7
 8002cd8:	1863      	adds	r3, r4, r1
 8002cda:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8002cde:	444a      	add	r2, r9
 8002ce0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8002ce4:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8002ce8:	444a      	add	r2, r9
 8002cea:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002cee:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 8002cf2:	b11a      	cbz	r2, 8002cfc <HAL_PCD_IRQHandler+0x3a4>
 8002cf4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8002cf8:	4599      	cmp	r9, r3
 8002cfa:	d241      	bcs.n	8002d80 <HAL_PCD_IRQHandler+0x428>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002cfc:	fb05 4307 	mla	r3, r5, r7, r4
 8002d00:	4620      	mov	r0, r4
 8002d02:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8002d06:	f003 fdf5 	bl	80068f4 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d0a:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d0e:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002d10:	f43f ae2f 	beq.w	8002972 <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d14:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8002d18:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	4033      	ands	r3, r6
 8002d20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d24:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8002d28:	eb04 030c 	add.w	r3, r4, ip
 8002d2c:	7cda      	ldrb	r2, [r3, #19]
 8002d2e:	2a01      	cmp	r2, #1
 8002d30:	d156      	bne.n	8002de0 <HAL_PCD_IRQHandler+0x488>
          ep->xfer_len = 0U;
 8002d32:	2100      	movs	r1, #0
 8002d34:	fb07 5205 	mla	r2, r7, r5, r5
 8002d38:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 8002d3a:	7f1a      	ldrb	r2, [r3, #28]
 8002d3c:	b392      	cbz	r2, 8002da4 <HAL_PCD_IRQHandler+0x44c>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d3e:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d42:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d44:	d036      	beq.n	8002db4 <HAL_PCD_IRQHandler+0x45c>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d46:	bb12      	cbnz	r2, 8002d8e <HAL_PCD_IRQHandler+0x436>
 8002d48:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002d4c:	7c1b      	ldrb	r3, [r3, #16]
 8002d4e:	b292      	uxth	r2, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d56:	4410      	add	r0, r2
 8002d58:	5a1a      	ldrh	r2, [r3, r0]
 8002d5a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002d5e:	521a      	strh	r2, [r3, r0]
 8002d60:	5a1a      	ldrh	r2, [r3, r0]
 8002d62:	b292      	uxth	r2, r2
 8002d64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d68:	521a      	strh	r2, [r3, r0]
 8002d6a:	e01b      	b.n	8002da4 <HAL_PCD_IRQHandler+0x44c>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d6c:	3206      	adds	r2, #6
 8002d6e:	4413      	add	r3, r2
 8002d70:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8002d74:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 8002d78:	f1b9 0f00 	cmp.w	r9, #0
 8002d7c:	d0aa      	beq.n	8002cd4 <HAL_PCD_IRQHandler+0x37c>
 8002d7e:	e781      	b.n	8002c84 <HAL_PCD_IRQHandler+0x32c>
        ep = &hpcd->OUT_ep[epindex];
 8002d80:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002d84:	6820      	ldr	r0, [r4, #0]
 8002d86:	4421      	add	r1, r4
 8002d88:	f001 fc4e 	bl	8004628 <USB_EPStartXfer>
 8002d8c:	e7bd      	b.n	8002d0a <HAL_PCD_IRQHandler+0x3b2>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d8e:	2a01      	cmp	r2, #1
 8002d90:	d108      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x44c>
 8002d92:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002d96:	7c1b      	ldrb	r3, [r3, #16]
 8002d98:	b292      	uxth	r2, r2
 8002d9a:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	4410      	add	r0, r2
 8002da2:	5219      	strh	r1, [r3, r0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002da4:	2328      	movs	r3, #40	@ 0x28
 8002da6:	fb03 4307 	mla	r3, r3, r7, r4
 8002daa:	7c19      	ldrb	r1, [r3, #16]
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002dac:	4620      	mov	r0, r4
 8002dae:	f003 fdaa 	bl	8006906 <HAL_PCD_DataInStageCallback>
 8002db2:	e5de      	b.n	8002972 <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002db4:	b93a      	cbnz	r2, 8002dc6 <HAL_PCD_IRQHandler+0x46e>
 8002db6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002dba:	7c1b      	ldrb	r3, [r3, #16]
 8002dbc:	b292      	uxth	r2, r2
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8002dc4:	e7c7      	b.n	8002d56 <HAL_PCD_IRQHandler+0x3fe>
 8002dc6:	2a01      	cmp	r2, #1
 8002dc8:	d1ec      	bne.n	8002da4 <HAL_PCD_IRQHandler+0x44c>
 8002dca:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002dce:	7c1b      	ldrb	r3, [r3, #16]
 8002dd0:	b292      	uxth	r2, r2
 8002dd2:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	4410      	add	r0, r2
 8002dda:	f823 8000 	strh.w	r8, [r3, r0]
 8002dde:	e7e1      	b.n	8002da4 <HAL_PCD_IRQHandler+0x44c>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002de0:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002de2:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 8002de6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002de8:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8002dec:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002df0:	d11b      	bne.n	8002e2a <HAL_PCD_IRQHandler+0x4d2>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002df2:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 8002df6:	b2bf      	uxth	r7, r7
 8002df8:	4457      	add	r7, sl
 8002dfa:	3702      	adds	r7, #2
 8002dfc:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8002e00:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8002e04:	4297      	cmp	r7, r2
 8002e06:	d302      	bcc.n	8002e0e <HAL_PCD_IRQHandler+0x4b6>
 8002e08:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
 8002e0c:	e7ce      	b.n	8002dac <HAL_PCD_IRQHandler+0x454>
              ep->xfer_len -= TxPctSize;
 8002e0e:	1bd2      	subs	r2, r2, r7
 8002e10:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 8002e12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 8002e14:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 8002e18:	443a      	add	r2, r7
 8002e1a:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8002e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e1e:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 8002e20:	443a      	add	r2, r7
 8002e22:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e24:	f001 fc00 	bl	8004628 <USB_EPStartXfer>
 8002e28:	e5a3      	b.n	8002972 <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e2a:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e2e:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e32:	fa1f fc8c 	uxth.w	ip, ip
 8002e36:	44d4      	add	ip, sl
 8002e38:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002e3c:	f000 80f4 	beq.w	8003028 <HAL_PCD_IRQHandler+0x6d0>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e40:	f10c 0c02 	add.w	ip, ip, #2
 8002e44:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8002e48:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 8002e4c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8002e50:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 8002e52:	bf2c      	ite	cs
 8002e54:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 8002e56:	eba2 020c 	subcc.w	r2, r2, ip
 8002e5a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002e5c:	2a00      	cmp	r2, #0
 8002e5e:	d15b      	bne.n	8002f18 <HAL_PCD_IRQHandler+0x5c0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e60:	2328      	movs	r3, #40	@ 0x28
 8002e62:	fb03 4307 	mla	r3, r3, r7, r4
 8002e66:	7c5b      	ldrb	r3, [r3, #17]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d141      	bne.n	8002ef0 <HAL_PCD_IRQHandler+0x598>
 8002e6c:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002e70:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8002e74:	b292      	uxth	r2, r2
 8002e76:	010b      	lsls	r3, r1, #4
 8002e78:	4494      	add	ip, r2
 8002e7a:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8002e7e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002e82:	f82c 2003 	strh.w	r2, [ip, r3]
 8002e86:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8002e8a:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002e8e:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002e92:	b292      	uxth	r2, r2
 8002e94:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e98:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8002e9c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8002ea0:	b292      	uxth	r2, r2
 8002ea2:	4410      	add	r0, r2
 8002ea4:	5ac2      	ldrh	r2, [r0, r3]
 8002ea6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002eaa:	52c2      	strh	r2, [r0, r3]
 8002eac:	5ac2      	ldrh	r2, [r0, r3]
 8002eae:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002eb2:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002eb6:	b292      	uxth	r2, r2
 8002eb8:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002eba:	4620      	mov	r0, r4
 8002ebc:	f003 fd23 	bl	8006906 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ec0:	f1b8 0f00 	cmp.w	r8, #0
 8002ec4:	f000 80f4 	beq.w	80030b0 <HAL_PCD_IRQHandler+0x758>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002ec8:	2328      	movs	r3, #40	@ 0x28
 8002eca:	fb03 4307 	mla	r3, r3, r7, r4
 8002ece:	6822      	ldr	r2, [r4, #0]
 8002ed0:	7c19      	ldrb	r1, [r3, #16]
 8002ed2:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ede:	041b      	lsls	r3, r3, #16
 8002ee0:	0c1b      	lsrs	r3, r3, #16
 8002ee2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002eea:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8002eee:	e0df      	b.n	80030b0 <HAL_PCD_IRQHandler+0x758>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d1e2      	bne.n	8002eba <HAL_PCD_IRQHandler+0x562>
 8002ef4:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8002ef8:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8002efc:	fa1f fe8e 	uxth.w	lr, lr
 8002f00:	44f4      	add	ip, lr
 8002f02:	010b      	lsls	r3, r1, #4
 8002f04:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f08:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8002f0c:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8002f10:	fa1f fc8c 	uxth.w	ip, ip
 8002f14:	4460      	add	r0, ip
 8002f16:	e7cf      	b.n	8002eb8 <HAL_PCD_IRQHandler+0x560>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002f18:	f1b8 0f00 	cmp.w	r8, #0
 8002f1c:	d00d      	beq.n	8002f3a <HAL_PCD_IRQHandler+0x5e2>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f1e:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 8002f22:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8002f26:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f2a:	0412      	lsls	r2, r2, #16
 8002f2c:	0c12      	lsrs	r2, r2, #16
 8002f2e:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8002f32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f36:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8002f3a:	f04f 0828 	mov.w	r8, #40	@ 0x28
 8002f3e:	fb08 4807 	mla	r8, r8, r7, r4
 8002f42:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8002f46:	2a01      	cmp	r2, #1
 8002f48:	f040 80b2 	bne.w	80030b0 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8002f4c:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 8002f50:	eb02 0e0c 	add.w	lr, r2, ip
 8002f54:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8002f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f5a:	4462      	add	r2, ip
 8002f5c:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f5e:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8002f62:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d335      	bcc.n	8002fd6 <HAL_PCD_IRQHandler+0x67e>
          ep->xfer_len_db -= len;
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f70:	2328      	movs	r3, #40	@ 0x28
 8002f72:	fb03 4307 	mla	r3, r3, r7, r4
 8002f76:	f893 c011 	ldrb.w	ip, [r3, #17]
 8002f7a:	b293      	uxth	r3, r2
 8002f7c:	f1bc 0f00 	cmp.w	ip, #0
 8002f80:	d145      	bne.n	800300e <HAL_PCD_IRQHandler+0x6b6>
 8002f82:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8002f86:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8002f8a:	fa1f f888 	uxth.w	r8, r8
 8002f8e:	44c4      	add	ip, r8
 8002f90:	0109      	lsls	r1, r1, #4
 8002f92:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8002f96:	2a3e      	cmp	r2, #62	@ 0x3e
 8002f98:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8002f9c:	f82c 8001 	strh.w	r8, [ip, r1]
 8002fa0:	d925      	bls.n	8002fee <HAL_PCD_IRQHandler+0x696>
 8002fa2:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8002fa6:	06d2      	lsls	r2, r2, #27
 8002fa8:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8002fac:	bf08      	it	eq
 8002fae:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8002fb2:	b292      	uxth	r2, r2
 8002fb4:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8002fb8:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8002fbc:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8002fc0:	b292      	uxth	r2, r2
 8002fc2:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002fc6:	2228      	movs	r2, #40	@ 0x28
 8002fc8:	fb02 4207 	mla	r2, r2, r7, r4
 8002fcc:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002fce:	4671      	mov	r1, lr
 8002fd0:	f001 fb1a 	bl	8004608 <USB_WritePMA>
 8002fd4:	e06c      	b.n	80030b0 <HAL_PCD_IRQHandler+0x758>
        else if (ep->xfer_len_db == 0U)
 8002fd6:	b91b      	cbnz	r3, 8002fe0 <HAL_PCD_IRQHandler+0x688>
    if (ep->xfer_len > TxPctSize)
 8002fd8:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8002fda:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8002fde:	e7c7      	b.n	8002f70 <HAL_PCD_IRQHandler+0x618>
          ep->xfer_fill_db = 0U;
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 8002fe6:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
 8002fea:	461a      	mov	r2, r3
 8002fec:	e7c0      	b.n	8002f70 <HAL_PCD_IRQHandler+0x618>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002fee:	b912      	cbnz	r2, 8002ff6 <HAL_PCD_IRQHandler+0x69e>
 8002ff0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8002ff4:	e7e0      	b.n	8002fb8 <HAL_PCD_IRQHandler+0x660>
 8002ff6:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8002ffa:	07d2      	lsls	r2, r2, #31
 8002ffc:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003000:	bf48      	it	mi
 8003002:	f108 0801 	addmi.w	r8, r8, #1
 8003006:	b292      	uxth	r2, r2
 8003008:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 800300c:	e7d8      	b.n	8002fc0 <HAL_PCD_IRQHandler+0x668>
 800300e:	f1bc 0f01 	cmp.w	ip, #1
 8003012:	d1d8      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x66e>
 8003014:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8003018:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 800301c:	fa1f fc8c 	uxth.w	ip, ip
 8003020:	4462      	add	r2, ip
 8003022:	0109      	lsls	r1, r1, #4
 8003024:	5253      	strh	r3, [r2, r1]
 8003026:	e7ce      	b.n	8002fc6 <HAL_PCD_IRQHandler+0x66e>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003028:	f10c 0c06 	add.w	ip, ip, #6
 800302c:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 8003030:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 8003034:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8003038:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 800303a:	bf8c      	ite	hi
 800303c:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 800303e:	eba2 020c 	subls.w	r2, r2, ip
 8003042:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 8003044:	2a00      	cmp	r2, #0
 8003046:	d15d      	bne.n	8003104 <HAL_PCD_IRQHandler+0x7ac>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003048:	2328      	movs	r3, #40	@ 0x28
 800304a:	fb03 4307 	mla	r3, r3, r7, r4
 800304e:	7c5b      	ldrb	r3, [r3, #17]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d143      	bne.n	80030dc <HAL_PCD_IRQHandler+0x784>
 8003054:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003058:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 800305c:	b292      	uxth	r2, r2
 800305e:	010b      	lsls	r3, r1, #4
 8003060:	4494      	add	ip, r2
 8003062:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8003066:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800306a:	f82c 2003 	strh.w	r2, [ip, r3]
 800306e:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8003072:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8003076:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800307a:	b292      	uxth	r2, r2
 800307c:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003080:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8003084:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8003088:	b292      	uxth	r2, r2
 800308a:	4410      	add	r0, r2
 800308c:	5ac2      	ldrh	r2, [r0, r3]
 800308e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003092:	52c2      	strh	r2, [r0, r3]
 8003094:	5ac2      	ldrh	r2, [r0, r3]
 8003096:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800309a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800309e:	b292      	uxth	r2, r2
 80030a0:	52c2      	strh	r2, [r0, r3]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030a2:	4620      	mov	r0, r4
 80030a4:	f003 fc2f 	bl	8006906 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030a8:	f1b8 0f00 	cmp.w	r8, #0
 80030ac:	f43f af0c 	beq.w	8002ec8 <HAL_PCD_IRQHandler+0x570>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030b0:	2328      	movs	r3, #40	@ 0x28
 80030b2:	fb03 4307 	mla	r3, r3, r7, r4
 80030b6:	6822      	ldr	r2, [r4, #0]
 80030b8:	7c19      	ldrb	r1, [r3, #16]
 80030ba:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80030be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030c6:	041b      	lsls	r3, r3, #16
 80030c8:	0c1b      	lsrs	r3, r3, #16
 80030ca:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 80030ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030d6:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 80030da:	e44a      	b.n	8002972 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d1e0      	bne.n	80030a2 <HAL_PCD_IRQHandler+0x74a>
 80030e0:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 80030e4:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80030e8:	fa1f fe8e 	uxth.w	lr, lr
 80030ec:	44f4      	add	ip, lr
 80030ee:	010b      	lsls	r3, r1, #4
 80030f0:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030f4:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 80030f8:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 80030fc:	fa1f fc8c 	uxth.w	ip, ip
 8003100:	4460      	add	r0, ip
 8003102:	e7cd      	b.n	80030a0 <HAL_PCD_IRQHandler+0x748>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003104:	f1b8 0f00 	cmp.w	r8, #0
 8003108:	d10d      	bne.n	8003126 <HAL_PCD_IRQHandler+0x7ce>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800310a:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800310e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8003112:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003116:	0412      	lsls	r2, r2, #16
 8003118:	0c12      	lsrs	r2, r2, #16
 800311a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800311e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003122:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8003126:	f04f 0828 	mov.w	r8, #40	@ 0x28
 800312a:	fb08 4807 	mla	r8, r8, r7, r4
 800312e:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 8003132:	2a01      	cmp	r2, #1
 8003134:	d1bc      	bne.n	80030b0 <HAL_PCD_IRQHandler+0x758>
        ep->xfer_buff += TxPctSize;
 8003136:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 800313a:	eb02 0e0c 	add.w	lr, r2, ip
 800313e:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 8003142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003144:	4462      	add	r2, ip
 8003146:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003148:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 800314c:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8003150:	4293      	cmp	r3, r2
 8003152:	d332      	bcc.n	80031ba <HAL_PCD_IRQHandler+0x862>
          ep->xfer_len_db -= len;
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800315a:	2328      	movs	r3, #40	@ 0x28
 800315c:	fb03 4307 	mla	r3, r3, r7, r4
 8003160:	f893 c011 	ldrb.w	ip, [r3, #17]
 8003164:	b293      	uxth	r3, r2
 8003166:	f1bc 0f00 	cmp.w	ip, #0
 800316a:	d142      	bne.n	80031f2 <HAL_PCD_IRQHandler+0x89a>
 800316c:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8003170:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8003174:	fa1f f888 	uxth.w	r8, r8
 8003178:	44c4      	add	ip, r8
 800317a:	0109      	lsls	r1, r1, #4
 800317c:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8003180:	2a3e      	cmp	r2, #62	@ 0x3e
 8003182:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003186:	f82c 8001 	strh.w	r8, [ip, r1]
 800318a:	d922      	bls.n	80031d2 <HAL_PCD_IRQHandler+0x87a>
 800318c:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8003190:	06d2      	lsls	r2, r2, #27
 8003192:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8003196:	bf08      	it	eq
 8003198:	f108 38ff 	addeq.w	r8, r8, #4294967295
 800319c:	b292      	uxth	r2, r2
 800319e:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80031a2:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80031a6:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80031aa:	b292      	uxth	r2, r2
 80031ac:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031b0:	2228      	movs	r2, #40	@ 0x28
 80031b2:	fb02 4207 	mla	r2, r2, r7, r4
 80031b6:	8b52      	ldrh	r2, [r2, #26]
 80031b8:	e709      	b.n	8002fce <HAL_PCD_IRQHandler+0x676>
        else if (ep->xfer_len_db == 0U)
 80031ba:	b91b      	cbnz	r3, 80031c4 <HAL_PCD_IRQHandler+0x86c>
    if (ep->xfer_len >= TxPctSize)
 80031bc:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 80031be:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 80031c2:	e7ca      	b.n	800315a <HAL_PCD_IRQHandler+0x802>
          ep->xfer_len_db = 0U;
 80031c4:	2200      	movs	r2, #0
 80031c6:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 80031ca:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
 80031ce:	461a      	mov	r2, r3
 80031d0:	e7c3      	b.n	800315a <HAL_PCD_IRQHandler+0x802>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031d2:	b912      	cbnz	r2, 80031da <HAL_PCD_IRQHandler+0x882>
 80031d4:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80031d8:	e7e3      	b.n	80031a2 <HAL_PCD_IRQHandler+0x84a>
 80031da:	ea4f 0852 	mov.w	r8, r2, lsr #1
 80031de:	07d2      	lsls	r2, r2, #31
 80031e0:	f83c 2001 	ldrh.w	r2, [ip, r1]
 80031e4:	bf48      	it	mi
 80031e6:	f108 0801 	addmi.w	r8, r8, #1
 80031ea:	b292      	uxth	r2, r2
 80031ec:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 80031f0:	e7db      	b.n	80031aa <HAL_PCD_IRQHandler+0x852>
 80031f2:	f1bc 0f01 	cmp.w	ip, #1
 80031f6:	d1db      	bne.n	80031b0 <HAL_PCD_IRQHandler+0x858>
 80031f8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80031fc:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 8003200:	b292      	uxth	r2, r2
 8003202:	4494      	add	ip, r2
 8003204:	010a      	lsls	r2, r1, #4
 8003206:	f82c 3002 	strh.w	r3, [ip, r2]
 800320a:	e7d1      	b.n	80031b0 <HAL_PCD_IRQHandler+0x858>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800320c:	0546      	lsls	r6, r0, #21
 800320e:	d512      	bpl.n	8003236 <HAL_PCD_IRQHandler+0x8de>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003210:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8003212:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003214:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8003218:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	0c1b      	lsrs	r3, r3, #16
 8003220:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_ResetCallback(hpcd);
 8003224:	f003 fb7b 	bl	800691e <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003228:	4629      	mov	r1, r5
 800322a:	4620      	mov	r0, r4
}
 800322c:	b005      	add	sp, #20
 800322e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003232:	f7ff bb7d 	b.w	8002930 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003236:	0441      	lsls	r1, r0, #17
 8003238:	d50a      	bpl.n	8003250 <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800323a:	6822      	ldr	r2, [r4, #0]
 800323c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8003240:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003244:	041b      	lsls	r3, r3, #16
 8003246:	0c1b      	lsrs	r3, r3, #16
 8003248:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 800324c:	f7ff bb96 	b.w	800297c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003250:	0482      	lsls	r2, r0, #18
 8003252:	d505      	bpl.n	8003260 <HAL_PCD_IRQHandler+0x908>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003254:	6822      	ldr	r2, [r4, #0]
 8003256:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800325a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800325e:	e7f1      	b.n	8003244 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003260:	04c3      	lsls	r3, r0, #19
 8003262:	d519      	bpl.n	8003298 <HAL_PCD_IRQHandler+0x940>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003264:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8003266:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003268:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 800326c:	f023 0304 	bic.w	r3, r3, #4
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	0c1b      	lsrs	r3, r3, #16
 8003274:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003278:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 800327c:	f023 0308 	bic.w	r3, r3, #8
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	0c1b      	lsrs	r3, r3, #16
 8003284:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8003288:	f003 fb6c 	bl	8006964 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800328c:	6822      	ldr	r2, [r4, #0]
 800328e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8003292:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003296:	e7d5      	b.n	8003244 <HAL_PCD_IRQHandler+0x8ec>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003298:	0507      	lsls	r7, r0, #20
 800329a:	d548      	bpl.n	800332e <HAL_PCD_IRQHandler+0x9d6>
 800329c:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	4606      	mov	r6, r0
 80032a2:	4619      	mov	r1, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	f103 0520 	add.w	r5, r3, #32
 80032aa:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 80032ae:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80032b0:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 80032b4:	d1f9      	bne.n	80032aa <HAL_PCD_IRQHandler+0x952>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80032b6:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80032ba:	b292      	uxth	r2, r2
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80032c4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 80032c8:	f022 0201 	bic.w	r2, r2, #1
 80032cc:	0412      	lsls	r2, r2, #16
 80032ce:	0c12      	lsrs	r2, r2, #16
 80032d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80032d4:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80032d8:	0556      	lsls	r6, r2, #21
 80032da:	d5fb      	bpl.n	80032d4 <HAL_PCD_IRQHandler+0x97c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032dc:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 80032e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032e4:	0412      	lsls	r2, r2, #16
 80032e6:	0c12      	lsrs	r2, r2, #16
 80032e8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80032ec:	f830 2b02 	ldrh.w	r2, [r0], #2
 80032f0:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 80032f4:	428d      	cmp	r5, r1
 80032f6:	d1f9      	bne.n	80032ec <HAL_PCD_IRQHandler+0x994>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80032f8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 80032fc:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80032fe:	b292      	uxth	r2, r2
 8003300:	f042 0208 	orr.w	r2, r2, #8
 8003304:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003308:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800330c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003310:	0412      	lsls	r2, r2, #16
 8003312:	0c12      	lsrs	r2, r2, #16
 8003314:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003318:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800331c:	b292      	uxth	r2, r2
 800331e:	f042 0204 	orr.w	r2, r2, #4
 8003322:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8003326:	f003 fb0d 	bl	8006944 <HAL_PCD_SuspendCallback>
    return;
 800332a:	f7ff bb27 	b.w	800297c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800332e:	0582      	lsls	r2, r0, #22
 8003330:	d50d      	bpl.n	800334e <HAL_PCD_IRQHandler+0x9f6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003332:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8003334:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003336:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800333a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800333e:	041b      	lsls	r3, r3, #16
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    HAL_PCD_SOFCallback(hpcd);
 8003346:	f003 fae6 	bl	8006916 <HAL_PCD_SOFCallback>
    return;
 800334a:	f7ff bb17 	b.w	800297c <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800334e:	05c3      	lsls	r3, r0, #23
 8003350:	f57f ab14 	bpl.w	800297c <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003354:	6822      	ldr	r2, [r4, #0]
 8003356:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 800335a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800335e:	e771      	b.n	8003244 <HAL_PCD_IRQHandler+0x8ec>

08003360 <HAL_PCD_EP_Open>:
{
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	2428      	movs	r4, #40	@ 0x28
 8003364:	4605      	mov	r5, r0
 8003366:	f001 0007 	and.w	r0, r1, #7
 800336a:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800336c:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003370:	bf14      	ite	ne
 8003372:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003376:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 800337a:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 800337e:	bf15      	itete	ne
 8003380:	2401      	movne	r4, #1
    ep->is_in = 0U;
 8003382:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 8003384:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 8003386:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800338a:	bf14      	ite	ne
 800338c:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800338e:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 8003390:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8003392:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8003394:	bf08      	it	eq
 8003396:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8003398:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 800339a:	bf08      	it	eq
 800339c:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 800339e:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80033a0:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d009      	beq.n	80033bc <HAL_PCD_EP_Open+0x5c>
 80033a8:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033aa:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 80033ac:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80033b0:	f000 fe7e 	bl	80040b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033b4:	2000      	movs	r0, #0
 80033b6:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80033bc:	2002      	movs	r0, #2
 80033be:	e7fc      	b.n	80033ba <HAL_PCD_EP_Open+0x5a>

080033c0 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 80033c0:	2328      	movs	r3, #40	@ 0x28
 80033c2:	f001 0207 	and.w	r2, r1, #7
 80033c6:	4353      	muls	r3, r2
 80033c8:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 80033cc:	b510      	push	{r4, lr}
 80033ce:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033d0:	bf18      	it	ne
 80033d2:	f103 0110 	addne.w	r1, r3, #16
 80033d6:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033d8:	bf0b      	itete	eq
 80033da:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 80033de:	2301      	movne	r3, #1
    ep->is_in = 0U;
 80033e0:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e2:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033e4:	bf0a      	itet	eq
 80033e6:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 80033e8:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 80033ea:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 80033ee:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80033f0:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d009      	beq.n	800340c <HAL_PCD_EP_Close+0x4c>
 80033f8:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033fa:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80033fc:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003400:	f000 ffb6 	bl	8004370 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003404:	2000      	movs	r0, #0
 8003406:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800340a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800340c:	2002      	movs	r0, #2
 800340e:	e7fc      	b.n	800340a <HAL_PCD_EP_Close+0x4a>

08003410 <HAL_PCD_EP_Receive>:
{
 8003410:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8003412:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 8003414:	2600      	movs	r6, #0
 8003416:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800341a:	434c      	muls	r4, r1
 800341c:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 800341e:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003422:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003426:	4401      	add	r1, r0
  ep->xfer_len = len;
 8003428:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 800342c:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 8003430:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003434:	6800      	ldr	r0, [r0, #0]
 8003436:	f001 f8f7 	bl	8004628 <USB_EPStartXfer>
}
 800343a:	4630      	mov	r0, r6
 800343c:	bd70      	pop	{r4, r5, r6, pc}

0800343e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800343e:	2328      	movs	r3, #40	@ 0x28
 8003440:	f001 0107 	and.w	r1, r1, #7
 8003444:	fb03 0001 	mla	r0, r3, r1, r0
}
 8003448:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 800344c:	4770      	bx	lr

0800344e <HAL_PCD_EP_Transmit>:
{
 800344e:	b570      	push	{r4, r5, r6, lr}
 8003450:	2528      	movs	r5, #40	@ 0x28
 8003452:	f001 0107 	and.w	r1, r1, #7
 8003456:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 8003458:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 800345a:	2600      	movs	r6, #0
  ep->xfer_len = len;
 800345c:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 8003460:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8003462:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003464:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003468:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 800346a:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 800346e:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 8003470:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 8003472:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003474:	6800      	ldr	r0, [r0, #0]
 8003476:	f001 f8d7 	bl	8004628 <USB_EPStartXfer>
}
 800347a:	4630      	mov	r0, r6
 800347c:	bd70      	pop	{r4, r5, r6, pc}

0800347e <HAL_PCD_EP_SetStall>:
{
 800347e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003480:	7903      	ldrb	r3, [r0, #4]
 8003482:	f001 0507 	and.w	r5, r1, #7
 8003486:	42ab      	cmp	r3, r5
{
 8003488:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800348a:	d32a      	bcc.n	80034e2 <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 800348c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8003490:	f04f 0328 	mov.w	r3, #40	@ 0x28
 8003494:	d01c      	beq.n	80034d0 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 8003496:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003498:	436b      	muls	r3, r5
 800349a:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 800349e:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a0:	4401      	add	r1, r0
    ep->is_in = 1U;
 80034a2:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 80034a4:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80034a6:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 80034a8:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 80034aa:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d019      	beq.n	80034e6 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034b2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80034b4:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80034b8:	f001 f82d 	bl	8004516 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034bc:	b925      	cbnz	r5, 80034c8 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80034be:	6820      	ldr	r0, [r4, #0]
 80034c0:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 80034c4:	f001 f89e 	bl	8004604 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 80034ce:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 80034d0:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 80034d2:	434b      	muls	r3, r1
 80034d4:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 80034d8:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80034da:	4401      	add	r1, r0
    ep->is_in = 0U;
 80034dc:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 80034e0:	e7e0      	b.n	80034a4 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 80034e2:	2001      	movs	r0, #1
 80034e4:	e7f3      	b.n	80034ce <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 80034e6:	2002      	movs	r0, #2
 80034e8:	e7f1      	b.n	80034ce <HAL_PCD_EP_SetStall+0x50>

080034ea <HAL_PCD_EP_ClrStall>:
{
 80034ea:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034ec:	7902      	ldrb	r2, [r0, #4]
 80034ee:	f001 030f 	and.w	r3, r1, #15
 80034f2:	429a      	cmp	r2, r3
{
 80034f4:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034f6:	d326      	bcc.n	8003546 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 80034f8:	2328      	movs	r3, #40	@ 0x28
 80034fa:	f001 0207 	and.w	r2, r1, #7
 80034fe:	4353      	muls	r3, r2
 8003500:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003504:	bf14      	ite	ne
 8003506:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800350a:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 800350e:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8003510:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8003514:	bf15      	itete	ne
 8003516:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8003518:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800351a:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800351c:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 800351e:	bf14      	ite	ne
 8003520:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 8003522:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 8003526:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003528:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 800352a:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 800352e:	2b01      	cmp	r3, #1
 8003530:	d00b      	beq.n	800354a <HAL_PCD_EP_ClrStall+0x60>
 8003532:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003534:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8003536:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800353a:	f001 f80c 	bl	8004556 <USB_EPClearStall>
  return HAL_OK;
 800353e:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 8003540:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 8003544:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003546:	2001      	movs	r0, #1
 8003548:	e7fc      	b.n	8003544 <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 800354a:	2002      	movs	r0, #2
 800354c:	e7fa      	b.n	8003544 <HAL_PCD_EP_ClrStall+0x5a>

0800354e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800354e:	b510      	push	{r4, lr}
 8003550:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003552:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003556:	bf1b      	ittet	ne
 8003558:	f001 0107 	andne.w	r1, r1, #7
 800355c:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003560:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003564:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 8003566:	bf08      	it	eq
 8003568:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800356c:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 800356e:	b91a      	cbnz	r2, 8003578 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 8003570:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 8003572:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8003574:	2000      	movs	r0, #0
 8003576:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 8003578:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800357a:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 800357c:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800357e:	e7f9      	b.n	8003574 <HAL_PCDEx_PMAConfig+0x26>

08003580 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003580:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003584:	4605      	mov	r5, r0
 8003586:	b338      	cbz	r0, 80035d8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003588:	6803      	ldr	r3, [r0, #0]
 800358a:	07db      	lsls	r3, r3, #31
 800358c:	d410      	bmi.n	80035b0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358e:	682b      	ldr	r3, [r5, #0]
 8003590:	079f      	lsls	r7, r3, #30
 8003592:	d45e      	bmi.n	8003652 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003594:	682b      	ldr	r3, [r5, #0]
 8003596:	0719      	lsls	r1, r3, #28
 8003598:	f100 8095 	bmi.w	80036c6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359c:	682b      	ldr	r3, [r5, #0]
 800359e:	075a      	lsls	r2, r3, #29
 80035a0:	f100 80c1 	bmi.w	8003726 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035a4:	69eb      	ldr	r3, [r5, #28]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f040 812c 	bne.w	8003804 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80035ac:	2000      	movs	r0, #0
 80035ae:	e029      	b.n	8003604 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80035b0:	4c90      	ldr	r4, [pc, #576]	@ (80037f4 <HAL_RCC_OscConfig+0x274>)
 80035b2:	6863      	ldr	r3, [r4, #4]
 80035b4:	f003 030c 	and.w	r3, r3, #12
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d007      	beq.n	80035cc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80035bc:	6863      	ldr	r3, [r4, #4]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b08      	cmp	r3, #8
 80035c4:	d10a      	bne.n	80035dc <HAL_RCC_OscConfig+0x5c>
 80035c6:	6863      	ldr	r3, [r4, #4]
 80035c8:	03de      	lsls	r6, r3, #15
 80035ca:	d507      	bpl.n	80035dc <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	039c      	lsls	r4, r3, #14
 80035d0:	d5dd      	bpl.n	800358e <HAL_RCC_OscConfig+0xe>
 80035d2:	686b      	ldr	r3, [r5, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1da      	bne.n	800358e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80035d8:	2001      	movs	r0, #1
 80035da:	e013      	b.n	8003604 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035dc:	686b      	ldr	r3, [r5, #4]
 80035de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035e2:	d112      	bne.n	800360a <HAL_RCC_OscConfig+0x8a>
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80035ec:	f7fe fb4e 	bl	8001c8c <HAL_GetTick>
 80035f0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	0398      	lsls	r0, r3, #14
 80035f6:	d4ca      	bmi.n	800358e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe fb48 	bl	8001c8c <HAL_GetTick>
 80035fc:	1b80      	subs	r0, r0, r6
 80035fe:	2864      	cmp	r0, #100	@ 0x64
 8003600:	d9f7      	bls.n	80035f2 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8003602:	2003      	movs	r0, #3
}
 8003604:	b002      	add	sp, #8
 8003606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800360a:	b99b      	cbnz	r3, 8003634 <HAL_RCC_OscConfig+0xb4>
 800360c:	6823      	ldr	r3, [r4, #0]
 800360e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003612:	6023      	str	r3, [r4, #0]
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800361a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800361c:	f7fe fb36 	bl	8001c8c <HAL_GetTick>
 8003620:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003622:	6823      	ldr	r3, [r4, #0]
 8003624:	0399      	lsls	r1, r3, #14
 8003626:	d5b2      	bpl.n	800358e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003628:	f7fe fb30 	bl	8001c8c <HAL_GetTick>
 800362c:	1b80      	subs	r0, r0, r6
 800362e:	2864      	cmp	r0, #100	@ 0x64
 8003630:	d9f7      	bls.n	8003622 <HAL_RCC_OscConfig+0xa2>
 8003632:	e7e6      	b.n	8003602 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003634:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	d103      	bne.n	8003644 <HAL_RCC_OscConfig+0xc4>
 800363c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003640:	6023      	str	r3, [r4, #0]
 8003642:	e7cf      	b.n	80035e4 <HAL_RCC_OscConfig+0x64>
 8003644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003648:	6023      	str	r3, [r4, #0]
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003650:	e7cb      	b.n	80035ea <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003652:	4c68      	ldr	r4, [pc, #416]	@ (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003654:	6863      	ldr	r3, [r4, #4]
 8003656:	f013 0f0c 	tst.w	r3, #12
 800365a:	d007      	beq.n	800366c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800365c:	6863      	ldr	r3, [r4, #4]
 800365e:	f003 030c 	and.w	r3, r3, #12
 8003662:	2b08      	cmp	r3, #8
 8003664:	d110      	bne.n	8003688 <HAL_RCC_OscConfig+0x108>
 8003666:	6863      	ldr	r3, [r4, #4]
 8003668:	03da      	lsls	r2, r3, #15
 800366a:	d40d      	bmi.n	8003688 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800366c:	6823      	ldr	r3, [r4, #0]
 800366e:	079b      	lsls	r3, r3, #30
 8003670:	d502      	bpl.n	8003678 <HAL_RCC_OscConfig+0xf8>
 8003672:	692b      	ldr	r3, [r5, #16]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d1af      	bne.n	80035d8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003678:	6823      	ldr	r3, [r4, #0]
 800367a:	696a      	ldr	r2, [r5, #20]
 800367c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003680:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003684:	6023      	str	r3, [r4, #0]
 8003686:	e785      	b.n	8003594 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003688:	692a      	ldr	r2, [r5, #16]
 800368a:	4b5b      	ldr	r3, [pc, #364]	@ (80037f8 <HAL_RCC_OscConfig+0x278>)
 800368c:	b16a      	cbz	r2, 80036aa <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800368e:	2201      	movs	r2, #1
 8003690:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003692:	f7fe fafb 	bl	8001c8c <HAL_GetTick>
 8003696:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	079f      	lsls	r7, r3, #30
 800369c:	d4ec      	bmi.n	8003678 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800369e:	f7fe faf5 	bl	8001c8c <HAL_GetTick>
 80036a2:	1b80      	subs	r0, r0, r6
 80036a4:	2802      	cmp	r0, #2
 80036a6:	d9f7      	bls.n	8003698 <HAL_RCC_OscConfig+0x118>
 80036a8:	e7ab      	b.n	8003602 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80036aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80036ac:	f7fe faee 	bl	8001c8c <HAL_GetTick>
 80036b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b2:	6823      	ldr	r3, [r4, #0]
 80036b4:	0798      	lsls	r0, r3, #30
 80036b6:	f57f af6d 	bpl.w	8003594 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ba:	f7fe fae7 	bl	8001c8c <HAL_GetTick>
 80036be:	1b80      	subs	r0, r0, r6
 80036c0:	2802      	cmp	r0, #2
 80036c2:	d9f6      	bls.n	80036b2 <HAL_RCC_OscConfig+0x132>
 80036c4:	e79d      	b.n	8003602 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036c6:	69aa      	ldr	r2, [r5, #24]
 80036c8:	4e4a      	ldr	r6, [pc, #296]	@ (80037f4 <HAL_RCC_OscConfig+0x274>)
 80036ca:	4b4b      	ldr	r3, [pc, #300]	@ (80037f8 <HAL_RCC_OscConfig+0x278>)
 80036cc:	b1e2      	cbz	r2, 8003708 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80036ce:	2201      	movs	r2, #1
 80036d0:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80036d4:	f7fe fada 	bl	8001c8c <HAL_GetTick>
 80036d8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80036dc:	079b      	lsls	r3, r3, #30
 80036de:	d50d      	bpl.n	80036fc <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036e0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80036e4:	4b45      	ldr	r3, [pc, #276]	@ (80037fc <HAL_RCC_OscConfig+0x27c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80036ec:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80036ee:	bf00      	nop
  }
  while (Delay --);
 80036f0:	9b01      	ldr	r3, [sp, #4]
 80036f2:	1e5a      	subs	r2, r3, #1
 80036f4:	9201      	str	r2, [sp, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d1f9      	bne.n	80036ee <HAL_RCC_OscConfig+0x16e>
 80036fa:	e74f      	b.n	800359c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fc:	f7fe fac6 	bl	8001c8c <HAL_GetTick>
 8003700:	1b00      	subs	r0, r0, r4
 8003702:	2802      	cmp	r0, #2
 8003704:	d9e9      	bls.n	80036da <HAL_RCC_OscConfig+0x15a>
 8003706:	e77c      	b.n	8003602 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8003708:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800370c:	f7fe fabe 	bl	8001c8c <HAL_GetTick>
 8003710:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003712:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8003714:	079f      	lsls	r7, r3, #30
 8003716:	f57f af41 	bpl.w	800359c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800371a:	f7fe fab7 	bl	8001c8c <HAL_GetTick>
 800371e:	1b00      	subs	r0, r0, r4
 8003720:	2802      	cmp	r0, #2
 8003722:	d9f6      	bls.n	8003712 <HAL_RCC_OscConfig+0x192>
 8003724:	e76d      	b.n	8003602 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003726:	4c33      	ldr	r4, [pc, #204]	@ (80037f4 <HAL_RCC_OscConfig+0x274>)
 8003728:	69e3      	ldr	r3, [r4, #28]
 800372a:	00d8      	lsls	r0, r3, #3
 800372c:	d424      	bmi.n	8003778 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800372e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003730:	69e3      	ldr	r3, [r4, #28]
 8003732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003736:	61e3      	str	r3, [r4, #28]
 8003738:	69e3      	ldr	r3, [r4, #28]
 800373a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003742:	4e2f      	ldr	r6, [pc, #188]	@ (8003800 <HAL_RCC_OscConfig+0x280>)
 8003744:	6833      	ldr	r3, [r6, #0]
 8003746:	05d9      	lsls	r1, r3, #23
 8003748:	d518      	bpl.n	800377c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800374a:	68eb      	ldr	r3, [r5, #12]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d126      	bne.n	800379e <HAL_RCC_OscConfig+0x21e>
 8003750:	6a23      	ldr	r3, [r4, #32]
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8003758:	f7fe fa98 	bl	8001c8c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003760:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003762:	6a23      	ldr	r3, [r4, #32]
 8003764:	079b      	lsls	r3, r3, #30
 8003766:	d53f      	bpl.n	80037e8 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8003768:	2f00      	cmp	r7, #0
 800376a:	f43f af1b 	beq.w	80035a4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800376e:	69e3      	ldr	r3, [r4, #28]
 8003770:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003774:	61e3      	str	r3, [r4, #28]
 8003776:	e715      	b.n	80035a4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003778:	2700      	movs	r7, #0
 800377a:	e7e2      	b.n	8003742 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800377c:	6833      	ldr	r3, [r6, #0]
 800377e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003782:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003784:	f7fe fa82 	bl	8001c8c <HAL_GetTick>
 8003788:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	6833      	ldr	r3, [r6, #0]
 800378c:	05da      	lsls	r2, r3, #23
 800378e:	d4dc      	bmi.n	800374a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003790:	f7fe fa7c 	bl	8001c8c <HAL_GetTick>
 8003794:	eba0 0008 	sub.w	r0, r0, r8
 8003798:	2864      	cmp	r0, #100	@ 0x64
 800379a:	d9f6      	bls.n	800378a <HAL_RCC_OscConfig+0x20a>
 800379c:	e731      	b.n	8003602 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379e:	b9ab      	cbnz	r3, 80037cc <HAL_RCC_OscConfig+0x24c>
 80037a0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a2:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	6223      	str	r3, [r4, #32]
 80037ac:	6a23      	ldr	r3, [r4, #32]
 80037ae:	f023 0304 	bic.w	r3, r3, #4
 80037b2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80037b4:	f7fe fa6a 	bl	8001c8c <HAL_GetTick>
 80037b8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037ba:	6a23      	ldr	r3, [r4, #32]
 80037bc:	0798      	lsls	r0, r3, #30
 80037be:	d5d3      	bpl.n	8003768 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c0:	f7fe fa64 	bl	8001c8c <HAL_GetTick>
 80037c4:	1b80      	subs	r0, r0, r6
 80037c6:	4540      	cmp	r0, r8
 80037c8:	d9f7      	bls.n	80037ba <HAL_RCC_OscConfig+0x23a>
 80037ca:	e71a      	b.n	8003602 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037cc:	2b05      	cmp	r3, #5
 80037ce:	6a23      	ldr	r3, [r4, #32]
 80037d0:	d103      	bne.n	80037da <HAL_RCC_OscConfig+0x25a>
 80037d2:	f043 0304 	orr.w	r3, r3, #4
 80037d6:	6223      	str	r3, [r4, #32]
 80037d8:	e7ba      	b.n	8003750 <HAL_RCC_OscConfig+0x1d0>
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	6223      	str	r3, [r4, #32]
 80037e0:	6a23      	ldr	r3, [r4, #32]
 80037e2:	f023 0304 	bic.w	r3, r3, #4
 80037e6:	e7b6      	b.n	8003756 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e8:	f7fe fa50 	bl	8001c8c <HAL_GetTick>
 80037ec:	1b80      	subs	r0, r0, r6
 80037ee:	4540      	cmp	r0, r8
 80037f0:	d9b7      	bls.n	8003762 <HAL_RCC_OscConfig+0x1e2>
 80037f2:	e706      	b.n	8003602 <HAL_RCC_OscConfig+0x82>
 80037f4:	40021000 	.word	0x40021000
 80037f8:	42420000 	.word	0x42420000
 80037fc:	20000000 	.word	0x20000000
 8003800:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003804:	4c2a      	ldr	r4, [pc, #168]	@ (80038b0 <HAL_RCC_OscConfig+0x330>)
 8003806:	6862      	ldr	r2, [r4, #4]
 8003808:	f002 020c 	and.w	r2, r2, #12
 800380c:	2a08      	cmp	r2, #8
 800380e:	d03e      	beq.n	800388e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003810:	2200      	movs	r2, #0
 8003812:	2b02      	cmp	r3, #2
 8003814:	4b27      	ldr	r3, [pc, #156]	@ (80038b4 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8003816:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003818:	d12c      	bne.n	8003874 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800381a:	f7fe fa37 	bl	8001c8c <HAL_GetTick>
 800381e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003820:	6823      	ldr	r3, [r4, #0]
 8003822:	0199      	lsls	r1, r3, #6
 8003824:	d420      	bmi.n	8003868 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003826:	6a2b      	ldr	r3, [r5, #32]
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800382c:	d105      	bne.n	800383a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800382e:	6862      	ldr	r2, [r4, #4]
 8003830:	68a9      	ldr	r1, [r5, #8]
 8003832:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003836:	430a      	orrs	r2, r1
 8003838:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800383a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 800383c:	6862      	ldr	r2, [r4, #4]
 800383e:	430b      	orrs	r3, r1
 8003840:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8003844:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8003846:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003848:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800384a:	4b1a      	ldr	r3, [pc, #104]	@ (80038b4 <HAL_RCC_OscConfig+0x334>)
 800384c:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800384e:	f7fe fa1d 	bl	8001c8c <HAL_GetTick>
 8003852:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003854:	6823      	ldr	r3, [r4, #0]
 8003856:	019a      	lsls	r2, r3, #6
 8003858:	f53f aea8 	bmi.w	80035ac <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385c:	f7fe fa16 	bl	8001c8c <HAL_GetTick>
 8003860:	1b40      	subs	r0, r0, r5
 8003862:	2802      	cmp	r0, #2
 8003864:	d9f6      	bls.n	8003854 <HAL_RCC_OscConfig+0x2d4>
 8003866:	e6cc      	b.n	8003602 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003868:	f7fe fa10 	bl	8001c8c <HAL_GetTick>
 800386c:	1b80      	subs	r0, r0, r6
 800386e:	2802      	cmp	r0, #2
 8003870:	d9d6      	bls.n	8003820 <HAL_RCC_OscConfig+0x2a0>
 8003872:	e6c6      	b.n	8003602 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8003874:	f7fe fa0a 	bl	8001c8c <HAL_GetTick>
 8003878:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	019b      	lsls	r3, r3, #6
 800387e:	f57f ae95 	bpl.w	80035ac <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003882:	f7fe fa03 	bl	8001c8c <HAL_GetTick>
 8003886:	1b40      	subs	r0, r0, r5
 8003888:	2802      	cmp	r0, #2
 800388a:	d9f6      	bls.n	800387a <HAL_RCC_OscConfig+0x2fa>
 800388c:	e6b9      	b.n	8003602 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800388e:	2b01      	cmp	r3, #1
 8003890:	f43f aea2 	beq.w	80035d8 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8003894:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003896:	6a2b      	ldr	r3, [r5, #32]
 8003898:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 800389c:	429a      	cmp	r2, r3
 800389e:	f47f ae9b 	bne.w	80035d8 <HAL_RCC_OscConfig+0x58>
 80038a2:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038a4:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a8:	1ac0      	subs	r0, r0, r3
 80038aa:	bf18      	it	ne
 80038ac:	2001      	movne	r0, #1
 80038ae:	e6a9      	b.n	8003604 <HAL_RCC_OscConfig+0x84>
 80038b0:	40021000 	.word	0x40021000
 80038b4:	42420000 	.word	0x42420000

080038b8 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80038b8:	4a0f      	ldr	r2, [pc, #60]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x40>)
 80038ba:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80038bc:	f003 010c 	and.w	r1, r3, #12
 80038c0:	2904      	cmp	r1, #4
 80038c2:	d014      	beq.n	80038ee <HAL_RCC_GetSysClockFreq+0x36>
 80038c4:	2908      	cmp	r1, #8
 80038c6:	d114      	bne.n	80038f2 <HAL_RCC_GetSysClockFreq+0x3a>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038c8:	480c      	ldr	r0, [pc, #48]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x44>)
 80038ca:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038ce:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038d0:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038d2:	d509      	bpl.n	80038e8 <HAL_RCC_GetSysClockFreq+0x30>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038d4:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x48>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038d8:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038dc:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038de:	4a09      	ldr	r2, [pc, #36]	@ (8003904 <HAL_RCC_GetSysClockFreq+0x4c>)
 80038e0:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80038e6:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038e8:	4b07      	ldr	r3, [pc, #28]	@ (8003908 <HAL_RCC_GetSysClockFreq+0x50>)
 80038ea:	4358      	muls	r0, r3
 80038ec:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80038ee:	4804      	ldr	r0, [pc, #16]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x48>)
 80038f0:	4770      	bx	lr
  switch (tmpreg & RCC_CFGR_SWS)
 80038f2:	4806      	ldr	r0, [pc, #24]	@ (800390c <HAL_RCC_GetSysClockFreq+0x54>)
}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	080097c1 	.word	0x080097c1
 8003900:	00f42400 	.word	0x00f42400
 8003904:	080097bf 	.word	0x080097bf
 8003908:	003d0900 	.word	0x003d0900
 800390c:	007a1200 	.word	0x007a1200

08003910 <HAL_RCC_ClockConfig>:
{
 8003910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003914:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8003916:	4604      	mov	r4, r0
 8003918:	b910      	cbnz	r0, 8003920 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800391a:	2001      	movs	r0, #1
}
 800391c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003920:	4a44      	ldr	r2, [pc, #272]	@ (8003a34 <HAL_RCC_ClockConfig+0x124>)
 8003922:	6813      	ldr	r3, [r2, #0]
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	428b      	cmp	r3, r1
 800392a:	d328      	bcc.n	800397e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800392c:	6821      	ldr	r1, [r4, #0]
 800392e:	078e      	lsls	r6, r1, #30
 8003930:	d430      	bmi.n	8003994 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003932:	07ca      	lsls	r2, r1, #31
 8003934:	d443      	bmi.n	80039be <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003936:	4a3f      	ldr	r2, [pc, #252]	@ (8003a34 <HAL_RCC_ClockConfig+0x124>)
 8003938:	6813      	ldr	r3, [r2, #0]
 800393a:	f003 0307 	and.w	r3, r3, #7
 800393e:	42ab      	cmp	r3, r5
 8003940:	d865      	bhi.n	8003a0e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003942:	6822      	ldr	r2, [r4, #0]
 8003944:	4d3c      	ldr	r5, [pc, #240]	@ (8003a38 <HAL_RCC_ClockConfig+0x128>)
 8003946:	f012 0f04 	tst.w	r2, #4
 800394a:	d16c      	bne.n	8003a26 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394c:	0713      	lsls	r3, r2, #28
 800394e:	d506      	bpl.n	800395e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003950:	686b      	ldr	r3, [r5, #4]
 8003952:	6922      	ldr	r2, [r4, #16]
 8003954:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003958:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800395c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800395e:	f7ff ffab 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 8003962:	686b      	ldr	r3, [r5, #4]
 8003964:	4a35      	ldr	r2, [pc, #212]	@ (8003a3c <HAL_RCC_ClockConfig+0x12c>)
 8003966:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800396a:	5cd3      	ldrb	r3, [r2, r3]
 800396c:	40d8      	lsrs	r0, r3
 800396e:	4b34      	ldr	r3, [pc, #208]	@ (8003a40 <HAL_RCC_ClockConfig+0x130>)
 8003970:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8003972:	4b34      	ldr	r3, [pc, #208]	@ (8003a44 <HAL_RCC_ClockConfig+0x134>)
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	f7fe f947 	bl	8001c08 <HAL_InitTick>
  return HAL_OK;
 800397a:	2000      	movs	r0, #0
 800397c:	e7ce      	b.n	800391c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397e:	6813      	ldr	r3, [r2, #0]
 8003980:	f023 0307 	bic.w	r3, r3, #7
 8003984:	430b      	orrs	r3, r1
 8003986:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003988:	6813      	ldr	r3, [r2, #0]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	428b      	cmp	r3, r1
 8003990:	d1c3      	bne.n	800391a <HAL_RCC_ClockConfig+0xa>
 8003992:	e7cb      	b.n	800392c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003994:	4b28      	ldr	r3, [pc, #160]	@ (8003a38 <HAL_RCC_ClockConfig+0x128>)
 8003996:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800399a:	bf1e      	ittt	ne
 800399c:	685a      	ldrne	r2, [r3, #4]
 800399e:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 80039a2:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a4:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039a6:	bf42      	ittt	mi
 80039a8:	685a      	ldrmi	r2, [r3, #4]
 80039aa:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 80039ae:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	68a0      	ldr	r0, [r4, #8]
 80039b4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80039b8:	4302      	orrs	r2, r0
 80039ba:	605a      	str	r2, [r3, #4]
 80039bc:	e7b9      	b.n	8003932 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039be:	6862      	ldr	r2, [r4, #4]
 80039c0:	4e1d      	ldr	r6, [pc, #116]	@ (8003a38 <HAL_RCC_ClockConfig+0x128>)
 80039c2:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c4:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c6:	d11a      	bne.n	80039fe <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039c8:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039cc:	d0a5      	beq.n	800391a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ce:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d4:	f023 0303 	bic.w	r3, r3, #3
 80039d8:	4313      	orrs	r3, r2
 80039da:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80039dc:	f7fe f956 	bl	8001c8c <HAL_GetTick>
 80039e0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	6873      	ldr	r3, [r6, #4]
 80039e4:	6862      	ldr	r2, [r4, #4]
 80039e6:	f003 030c 	and.w	r3, r3, #12
 80039ea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80039ee:	d0a2      	beq.n	8003936 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f0:	f7fe f94c 	bl	8001c8c <HAL_GetTick>
 80039f4:	1bc0      	subs	r0, r0, r7
 80039f6:	4540      	cmp	r0, r8
 80039f8:	d9f3      	bls.n	80039e2 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80039fa:	2003      	movs	r0, #3
 80039fc:	e78e      	b.n	800391c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039fe:	2a02      	cmp	r2, #2
 8003a00:	d102      	bne.n	8003a08 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a02:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003a06:	e7e1      	b.n	80039cc <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a08:	f013 0f02 	tst.w	r3, #2
 8003a0c:	e7de      	b.n	80039cc <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	6813      	ldr	r3, [r2, #0]
 8003a10:	f023 0307 	bic.w	r3, r3, #7
 8003a14:	432b      	orrs	r3, r5
 8003a16:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a18:	6813      	ldr	r3, [r2, #0]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	42ab      	cmp	r3, r5
 8003a20:	f47f af7b 	bne.w	800391a <HAL_RCC_ClockConfig+0xa>
 8003a24:	e78d      	b.n	8003942 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a26:	686b      	ldr	r3, [r5, #4]
 8003a28:	68e1      	ldr	r1, [r4, #12]
 8003a2a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	606b      	str	r3, [r5, #4]
 8003a32:	e78b      	b.n	800394c <HAL_RCC_ClockConfig+0x3c>
 8003a34:	40022000 	.word	0x40022000
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	080097af 	.word	0x080097af
 8003a40:	20000000 	.word	0x20000000
 8003a44:	20000008 	.word	0x20000008

08003a48 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a48:	4b04      	ldr	r3, [pc, #16]	@ (8003a5c <HAL_RCC_GetPCLK1Freq+0x14>)
 8003a4a:	4a05      	ldr	r2, [pc, #20]	@ (8003a60 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003a52:	5cd3      	ldrb	r3, [r2, r3]
 8003a54:	4a03      	ldr	r2, [pc, #12]	@ (8003a64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003a56:	6810      	ldr	r0, [r2, #0]
}
 8003a58:	40d8      	lsrs	r0, r3
 8003a5a:	4770      	bx	lr
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	080097a7 	.word	0x080097a7
 8003a64:	20000000 	.word	0x20000000

08003a68 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a68:	6803      	ldr	r3, [r0, #0]
{
 8003a6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003a6e:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a70:	07d8      	lsls	r0, r3, #31
 8003a72:	d521      	bpl.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a74:	4c36      	ldr	r4, [pc, #216]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a76:	69e3      	ldr	r3, [r4, #28]
 8003a78:	00d9      	lsls	r1, r3, #3
 8003a7a:	d42b      	bmi.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8003a7c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a7e:	69e3      	ldr	r3, [r4, #28]
 8003a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a84:	61e3      	str	r3, [r4, #28]
 8003a86:	69e3      	ldr	r3, [r4, #28]
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a90:	4f30      	ldr	r7, [pc, #192]	@ (8003b54 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	05da      	lsls	r2, r3, #23
 8003a96:	d51f      	bpl.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a98:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a9a:	686a      	ldr	r2, [r5, #4]
 8003a9c:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8003aa0:	d12e      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003aa2:	6a23      	ldr	r3, [r4, #32]
 8003aa4:	686a      	ldr	r2, [r5, #4]
 8003aa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003aae:	b11e      	cbz	r6, 8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab0:	69e3      	ldr	r3, [r4, #28]
 8003ab2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab6:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ab8:	682a      	ldr	r2, [r5, #0]
 8003aba:	0791      	lsls	r1, r2, #30
 8003abc:	d506      	bpl.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003abe:	4924      	ldr	r1, [pc, #144]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003ac0:	68a8      	ldr	r0, [r5, #8]
 8003ac2:	684b      	ldr	r3, [r1, #4]
 8003ac4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003ac8:	4303      	orrs	r3, r0
 8003aca:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003acc:	06d3      	lsls	r3, r2, #27
 8003ace:	d436      	bmi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	e012      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8003ad4:	2600      	movs	r6, #0
 8003ad6:	e7db      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ade:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8003ae0:	f7fe f8d4 	bl	8001c8c <HAL_GetTick>
 8003ae4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	05db      	lsls	r3, r3, #23
 8003aea:	d4d5      	bmi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aec:	f7fe f8ce 	bl	8001c8c <HAL_GetTick>
 8003af0:	eba0 0008 	sub.w	r0, r0, r8
 8003af4:	2864      	cmp	r0, #100	@ 0x64
 8003af6:	d9f6      	bls.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8003af8:	2003      	movs	r0, #3
}
 8003afa:	b002      	add	sp, #8
 8003afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b00:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d0cc      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b08:	2001      	movs	r0, #1
 8003b0a:	4a13      	ldr	r2, [pc, #76]	@ (8003b58 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b0c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b0e:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b12:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b14:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b18:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b1a:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8003b1e:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b20:	d5bf      	bpl.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8003b22:	f7fe f8b3 	bl	8001c8c <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b26:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8003b2a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2c:	6a23      	ldr	r3, [r4, #32]
 8003b2e:	0798      	lsls	r0, r3, #30
 8003b30:	d4b7      	bmi.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b32:	f7fe f8ab 	bl	8001c8c <HAL_GetTick>
 8003b36:	1bc0      	subs	r0, r0, r7
 8003b38:	4540      	cmp	r0, r8
 8003b3a:	d9f7      	bls.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8003b3c:	e7dc      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b3e:	4a04      	ldr	r2, [pc, #16]	@ (8003b50 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003b40:	68e9      	ldr	r1, [r5, #12]
 8003b42:	6853      	ldr	r3, [r2, #4]
 8003b44:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003b48:	430b      	orrs	r3, r1
 8003b4a:	6053      	str	r3, [r2, #4]
 8003b4c:	e7c0      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40007000 	.word	0x40007000
 8003b58:	42420000 	.word	0x42420000

08003b5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b5c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b60:	461f      	mov	r7, r3
 8003b62:	4689      	mov	r9, r1
 8003b64:	4690      	mov	r8, r2
 8003b66:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b68:	f7fe f890 	bl	8001c8c <HAL_GetTick>
 8003b6c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8003b6e:	443d      	add	r5, r7
 8003b70:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8003b72:	f7fe f88b 	bl	8001c8c <HAL_GetTick>
 8003b76:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b78:	4b25      	ldr	r3, [pc, #148]	@ (8003c10 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8003b7a:	681e      	ldr	r6, [r3, #0]
 8003b7c:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8003b80:	436e      	muls	r6, r5
 8003b82:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b84:	6822      	ldr	r2, [r4, #0]
 8003b86:	6893      	ldr	r3, [r2, #8]
 8003b88:	ea39 0303 	bics.w	r3, r9, r3
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	4543      	cmp	r3, r8
 8003b94:	d101      	bne.n	8003b9a <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 8003b96:	2000      	movs	r0, #0
 8003b98:	e02e      	b.n	8003bf8 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8003b9a:	1c7b      	adds	r3, r7, #1
 8003b9c:	d0f3      	beq.n	8003b86 <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b9e:	f7fe f875 	bl	8001c8c <HAL_GetTick>
 8003ba2:	eba0 000a 	sub.w	r0, r0, sl
 8003ba6:	42a8      	cmp	r0, r5
 8003ba8:	d329      	bcc.n	8003bfe <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003baa:	6823      	ldr	r3, [r4, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bb2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bb4:	6862      	ldr	r2, [r4, #4]
 8003bb6:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8003bba:	d10a      	bne.n	8003bd2 <SPI_WaitFlagStateUntilTimeout+0x76>
 8003bbc:	68a2      	ldr	r2, [r4, #8]
 8003bbe:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8003bc2:	d002      	beq.n	8003bca <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bc4:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8003bc8:	d103      	bne.n	8003bd2 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bd0:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bd2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003bd4:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8003bd8:	d107      	bne.n	8003bea <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003be8:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003bf0:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8003bf2:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8003bf4:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8003bf8:	b002      	add	sp, #8
 8003bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 8003bfe:	9a01      	ldr	r2, [sp, #4]
      count--;
 8003c00:	9b01      	ldr	r3, [sp, #4]
      if (count == 0U)
 8003c02:	2a00      	cmp	r2, #0
      count--;
 8003c04:	f103 33ff 	add.w	r3, r3, #4294967295
 8003c08:	bf08      	it	eq
 8003c0a:	4615      	moveq	r5, r2
 8003c0c:	9301      	str	r3, [sp, #4]
 8003c0e:	e7b9      	b.n	8003b84 <SPI_WaitFlagStateUntilTimeout+0x28>
 8003c10:	20000000 	.word	0x20000000

08003c14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c16:	460b      	mov	r3, r1
 8003c18:	9200      	str	r2, [sp, #0]
{
 8003c1a:	460d      	mov	r5, r1
 8003c1c:	4616      	mov	r6, r2
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c1e:	2102      	movs	r1, #2
 8003c20:	2201      	movs	r2, #1
{
 8003c22:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003c24:	f7ff ff9a 	bl	8003b5c <SPI_WaitFlagStateUntilTimeout>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	b128      	cbz	r0, 8003c38 <SPI_EndRxTxTransaction+0x24>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c2c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c2e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c30:	f043 0320 	orr.w	r3, r3, #32
 8003c34:	6563      	str	r3, [r4, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c36:	e007      	b.n	8003c48 <SPI_EndRxTxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c38:	462b      	mov	r3, r5
 8003c3a:	2180      	movs	r1, #128	@ 0x80
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	9600      	str	r6, [sp, #0]
 8003c40:	f7ff ff8c 	bl	8003b5c <SPI_WaitFlagStateUntilTimeout>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d1f1      	bne.n	8003c2c <SPI_EndRxTxTransaction+0x18>
  }
  return HAL_OK;
}
 8003c48:	b002      	add	sp, #8
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}

08003c4c <HAL_SPI_Init>:
{
 8003c4c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8003c4e:	4604      	mov	r4, r0
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d051      	beq.n	8003cf8 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c54:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d14a      	bne.n	8003cf0 <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c5a:	6842      	ldr	r2, [r0, #4]
 8003c5c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8003c60:	d000      	beq.n	8003c64 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c62:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c64:	2300      	movs	r3, #0
 8003c66:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c68:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 8003c6c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003c70:	b923      	cbnz	r3, 8003c7c <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8003c72:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003c74:	f884 2050 	strb.w	r2, [r4, #80]	@ 0x50
    HAL_SPI_MspInit(hspi);
 8003c78:	f7fd fba8 	bl	80013cc <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003c7c:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8003c7e:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003c80:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_SPI_DISABLE(hspi);
 8003c84:	6813      	ldr	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c86:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8003c88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c8c:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c8e:	6863      	ldr	r3, [r4, #4]
 8003c90:	f400 4004 	and.w	r0, r0, #33792	@ 0x8400
 8003c94:	f403 7382 	and.w	r3, r3, #260	@ 0x104
 8003c98:	4303      	orrs	r3, r0
 8003c9a:	68e0      	ldr	r0, [r4, #12]
 8003c9c:	69a1      	ldr	r1, [r4, #24]
 8003c9e:	f400 6000 	and.w	r0, r0, #2048	@ 0x800
 8003ca2:	4303      	orrs	r3, r0
 8003ca4:	6920      	ldr	r0, [r4, #16]
 8003ca6:	f000 0002 	and.w	r0, r0, #2
 8003caa:	4303      	orrs	r3, r0
 8003cac:	6960      	ldr	r0, [r4, #20]
 8003cae:	f000 0001 	and.w	r0, r0, #1
 8003cb2:	4303      	orrs	r3, r0
 8003cb4:	f401 7000 	and.w	r0, r1, #512	@ 0x200
 8003cb8:	4303      	orrs	r3, r0
 8003cba:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003cbc:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cbe:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8003cc2:	4303      	orrs	r3, r0
 8003cc4:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003cc6:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cca:	f000 0080 	and.w	r0, r0, #128	@ 0x80
 8003cce:	4303      	orrs	r3, r0
 8003cd0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003cd2:	f400 5000 	and.w	r0, r0, #8192	@ 0x2000
 8003cd6:	4303      	orrs	r3, r0
 8003cd8:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003cda:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003cdc:	69d3      	ldr	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cde:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ce0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ce4:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8003ce6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ce8:	6560      	str	r0, [r4, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cea:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
}
 8003cee:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cf0:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003cf6:	e7b5      	b.n	8003c64 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	e7f8      	b.n	8003cee <HAL_SPI_Init+0xa2>

08003cfc <HAL_SPI_Transmit>:
{
 8003cfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003d00:	4604      	mov	r4, r0
 8003d02:	461f      	mov	r7, r3
 8003d04:	460d      	mov	r5, r1
 8003d06:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8003d08:	f7fd ffc0 	bl	8001c8c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003d0c:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8003d10:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	b2d8      	uxtb	r0, r3
 8003d16:	f040 809f 	bne.w	8003e58 <HAL_SPI_Transmit+0x15c>
  if ((pData == NULL) || (Size == 0U))
 8003d1a:	2d00      	cmp	r5, #0
 8003d1c:	d074      	beq.n	8003e08 <HAL_SPI_Transmit+0x10c>
 8003d1e:	f1b8 0f00 	cmp.w	r8, #0
 8003d22:	d071      	beq.n	8003e08 <HAL_SPI_Transmit+0x10c>
  __HAL_LOCK(hspi);
 8003d24:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	f000 8095 	beq.w	8003e58 <HAL_SPI_Transmit+0x15c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->RxISR       = NULL;
 8003d38:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  hspi->TxXferCount = Size;
 8003d3c:	f8a4 8036 	strh.w	r8, [r4, #54]	@ 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d40:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003d42:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003d44:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d46:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8003d48:	6826      	ldr	r6, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
  __HAL_LOCK(hspi);
 8003d4e:	f884 0050 	strb.w	r0, [r4, #80]	@ 0x50
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003d52:	6325      	str	r5, [r4, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003d54:	f8a4 8034 	strh.w	r8, [r4, #52]	@ 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d58:	d107      	bne.n	8003d6a <HAL_SPI_Transmit+0x6e>
    __HAL_SPI_DISABLE(hspi);
 8003d5a:	6833      	ldr	r3, [r6, #0]
 8003d5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d60:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8003d62:	6833      	ldr	r3, [r6, #0]
 8003d64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d68:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d6a:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d6c:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d6e:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8003d70:	bf5e      	ittt	pl
 8003d72:	6833      	ldrpl	r3, [r6, #0]
 8003d74:	f043 0340 	orrpl.w	r3, r3, #64	@ 0x40
 8003d78:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d7a:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d7e:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d80:	d145      	bne.n	8003e0e <HAL_SPI_Transmit+0x112>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d82:	b113      	cbz	r3, 8003d8a <HAL_SPI_Transmit+0x8e>
 8003d84:	f1b8 0f01 	cmp.w	r8, #1
 8003d88:	d107      	bne.n	8003d9a <HAL_SPI_Transmit+0x9e>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d8a:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003d8e:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d90:	6325      	str	r5, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d92:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003d94:	3b01      	subs	r3, #1
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8003d9a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	b9d3      	cbnz	r3, 8003dd6 <HAL_SPI_Transmit+0xda>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003da0:	464a      	mov	r2, r9
 8003da2:	4639      	mov	r1, r7
 8003da4:	4620      	mov	r0, r4
 8003da6:	f7ff ff35 	bl	8003c14 <SPI_EndRxTxTransaction>
 8003daa:	2800      	cmp	r0, #0
 8003dac:	d151      	bne.n	8003e52 <HAL_SPI_Transmit+0x156>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003dae:	68a3      	ldr	r3, [r4, #8]
 8003db0:	b933      	cbnz	r3, 8003dc0 <HAL_SPI_Transmit+0xc4>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003db2:	9301      	str	r3, [sp, #4]
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	9201      	str	r2, [sp, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8003dc6:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dc8:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8003dca:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dce:	1ac0      	subs	r0, r0, r3
 8003dd0:	bf18      	it	ne
 8003dd2:	2001      	movne	r0, #1
 8003dd4:	e018      	b.n	8003e08 <HAL_SPI_Transmit+0x10c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dd6:	6822      	ldr	r2, [r4, #0]
 8003dd8:	6893      	ldr	r3, [r2, #8]
 8003dda:	0798      	lsls	r0, r3, #30
 8003ddc:	d505      	bpl.n	8003dea <HAL_SPI_Transmit+0xee>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003dde:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003de0:	f833 1b02 	ldrh.w	r1, [r3], #2
 8003de4:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de6:	6323      	str	r3, [r4, #48]	@ 0x30
 8003de8:	e7d3      	b.n	8003d92 <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dea:	f7fd ff4f 	bl	8001c8c <HAL_GetTick>
 8003dee:	eba0 0009 	sub.w	r0, r0, r9
 8003df2:	42b8      	cmp	r0, r7
 8003df4:	d3d1      	bcc.n	8003d9a <HAL_SPI_Transmit+0x9e>
 8003df6:	1c79      	adds	r1, r7, #1
 8003df8:	d0cf      	beq.n	8003d9a <HAL_SPI_Transmit+0x9e>
          hspi->State = HAL_SPI_STATE_READY;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e00:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8003e02:	2003      	movs	r0, #3
          __HAL_UNLOCK(hspi);
 8003e04:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8003e08:	b003      	add	sp, #12
 8003e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e0e:	b113      	cbz	r3, 8003e16 <HAL_SPI_Transmit+0x11a>
 8003e10:	f1b8 0f01 	cmp.w	r8, #1
 8003e14:	d108      	bne.n	8003e28 <HAL_SPI_Transmit+0x12c>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e16:	782b      	ldrb	r3, [r5, #0]
 8003e18:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e1a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e20:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	86e3      	strh	r3, [r4, #54]	@ 0x36
    while (hspi->TxXferCount > 0U)
 8003e28:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0b7      	beq.n	8003da0 <HAL_SPI_Transmit+0xa4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	0792      	lsls	r2, r2, #30
 8003e36:	d503      	bpl.n	8003e40 <HAL_SPI_Transmit+0x144>
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e38:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003e3a:	7812      	ldrb	r2, [r2, #0]
 8003e3c:	731a      	strb	r2, [r3, #12]
 8003e3e:	e7ec      	b.n	8003e1a <HAL_SPI_Transmit+0x11e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e40:	f7fd ff24 	bl	8001c8c <HAL_GetTick>
 8003e44:	eba0 0009 	sub.w	r0, r0, r9
 8003e48:	42b8      	cmp	r0, r7
 8003e4a:	d3ed      	bcc.n	8003e28 <HAL_SPI_Transmit+0x12c>
 8003e4c:	1c7b      	adds	r3, r7, #1
 8003e4e:	d0eb      	beq.n	8003e28 <HAL_SPI_Transmit+0x12c>
 8003e50:	e7d3      	b.n	8003dfa <HAL_SPI_Transmit+0xfe>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e52:	2320      	movs	r3, #32
 8003e54:	6563      	str	r3, [r4, #84]	@ 0x54
 8003e56:	e7aa      	b.n	8003dae <HAL_SPI_Transmit+0xb2>
    return HAL_BUSY;
 8003e58:	2002      	movs	r0, #2
 8003e5a:	e7d5      	b.n	8003e08 <HAL_SPI_Transmit+0x10c>

08003e5c <HAL_SPI_TransmitReceive>:
{
 8003e5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003e60:	4604      	mov	r4, r0
 8003e62:	460d      	mov	r5, r1
 8003e64:	4691      	mov	r9, r2
 8003e66:	461e      	mov	r6, r3
 8003e68:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
  tickstart = HAL_GetTick();
 8003e6c:	f7fd ff0e 	bl	8001c8c <HAL_GetTick>
  tmp_state           = hspi->State;
 8003e70:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  tickstart = HAL_GetTick();
 8003e74:	4607      	mov	r7, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e76:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 8003e78:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8003e7a:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e7c:	d00a      	beq.n	8003e94 <HAL_SPI_TransmitReceive+0x38>
 8003e7e:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8003e82:	f040 80e5 	bne.w	8004050 <HAL_SPI_TransmitReceive+0x1f4>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003e86:	68a3      	ldr	r3, [r4, #8]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f040 80e1 	bne.w	8004050 <HAL_SPI_TransmitReceive+0x1f4>
 8003e8e:	2904      	cmp	r1, #4
 8003e90:	f040 80de 	bne.w	8004050 <HAL_SPI_TransmitReceive+0x1f4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e94:	2d00      	cmp	r5, #0
 8003e96:	d04b      	beq.n	8003f30 <HAL_SPI_TransmitReceive+0xd4>
 8003e98:	f1b9 0f00 	cmp.w	r9, #0
 8003e9c:	d048      	beq.n	8003f30 <HAL_SPI_TransmitReceive+0xd4>
 8003e9e:	2e00      	cmp	r6, #0
 8003ea0:	d046      	beq.n	8003f30 <HAL_SPI_TransmitReceive+0xd4>
  __HAL_LOCK(hspi);
 8003ea2:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	f000 80d2 	beq.w	8004050 <HAL_SPI_TransmitReceive+0x1f4>
 8003eac:	2301      	movs	r3, #1
 8003eae:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003eb2:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003eb6:	f8c4 9038 	str.w	r9, [r4, #56]	@ 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003eba:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ebc:	bf1c      	itt	ne
 8003ebe:	2305      	movne	r3, #5
 8003ec0:	f884 3051 	strbne.w	r3, [r4, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	6563      	str	r3, [r4, #84]	@ 0x54
  hspi->TxISR       = NULL;
 8003ec8:	e9c4 3310 	strd	r3, r3, [r4, #64]	@ 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ecc:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8003ece:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferCount = Size;
 8003ed0:	86e6      	strh	r6, [r4, #54]	@ 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ed2:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8003ed4:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ed6:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8003ed8:	bf58      	it	pl
 8003eda:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003edc:	6325      	str	r5, [r4, #48]	@ 0x30
    __HAL_SPI_ENABLE(hspi);
 8003ede:	bf58      	it	pl
 8003ee0:	f041 0140 	orrpl.w	r1, r1, #64	@ 0x40
  hspi->TxXferSize  = Size;
 8003ee4:	86a6      	strh	r6, [r4, #52]	@ 0x34
    __HAL_SPI_ENABLE(hspi);
 8003ee6:	bf58      	it	pl
 8003ee8:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003eea:	68e1      	ldr	r1, [r4, #12]
 8003eec:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8003ef0:	d155      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x142>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ef2:	b10a      	cbz	r2, 8003ef8 <HAL_SPI_TransmitReceive+0x9c>
 8003ef4:	2e01      	cmp	r6, #1
 8003ef6:	d107      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ef8:	f835 2b02 	ldrh.w	r2, [r5], #2
 8003efc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8003efe:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f00:	6325      	str	r5, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003f08:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f0a:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	b98b      	cbnz	r3, 8003f34 <HAL_SPI_TransmitReceive+0xd8>
 8003f10:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	b973      	cbnz	r3, 8003f34 <HAL_SPI_TransmitReceive+0xd8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f16:	463a      	mov	r2, r7
 8003f18:	4641      	mov	r1, r8
 8003f1a:	4620      	mov	r0, r4
 8003f1c:	f7ff fe7a 	bl	8003c14 <SPI_EndRxTxTransaction>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	f000 8081 	beq.w	8004028 <HAL_SPI_TransmitReceive+0x1cc>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f26:	2320      	movs	r3, #32
 8003f28:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8003f30:	2001      	movs	r0, #1
 8003f32:	e031      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x13c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f34:	6821      	ldr	r1, [r4, #0]
 8003f36:	688b      	ldr	r3, [r1, #8]
 8003f38:	079a      	lsls	r2, r3, #30
 8003f3a:	d50d      	bpl.n	8003f58 <HAL_SPI_TransmitReceive+0xfc>
 8003f3c:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	b153      	cbz	r3, 8003f58 <HAL_SPI_TransmitReceive+0xfc>
 8003f42:	b145      	cbz	r5, 8003f56 <HAL_SPI_TransmitReceive+0xfa>
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f44:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003f46:	f833 2b02 	ldrh.w	r2, [r3], #2
 8003f4a:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f4c:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f4e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8003f56:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003f58:	688a      	ldr	r2, [r1, #8]
 8003f5a:	f012 0201 	ands.w	r2, r2, #1
 8003f5e:	d00c      	beq.n	8003f7a <HAL_SPI_TransmitReceive+0x11e>
 8003f60:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	b14b      	cbz	r3, 8003f7a <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8003f66:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f68:	68c9      	ldr	r1, [r1, #12]
 8003f6a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003f6c:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f70:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f72:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f7a:	f7fd fe87 	bl	8001c8c <HAL_GetTick>
 8003f7e:	1bc0      	subs	r0, r0, r7
 8003f80:	4540      	cmp	r0, r8
 8003f82:	d3c2      	bcc.n	8003f0a <HAL_SPI_TransmitReceive+0xae>
 8003f84:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003f88:	d0bf      	beq.n	8003f0a <HAL_SPI_TransmitReceive+0xae>
        hspi->State = HAL_SPI_STATE_READY;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f90:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8003f92:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8003f94:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
}
 8003f98:	b003      	add	sp, #12
 8003f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f9e:	b10a      	cbz	r2, 8003fa4 <HAL_SPI_TransmitReceive+0x148>
 8003fa0:	2e01      	cmp	r6, #1
 8003fa2:	d108      	bne.n	8003fb6 <HAL_SPI_TransmitReceive+0x15a>
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fa4:	782a      	ldrb	r2, [r5, #0]
 8003fa6:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fa8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003faa:	3301      	adds	r3, #1
 8003fac:	6323      	str	r3, [r4, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fae:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 1U;
 8003fb6:	2501      	movs	r5, #1
 8003fb8:	e02d      	b.n	8004016 <HAL_SPI_TransmitReceive+0x1ba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fba:	6822      	ldr	r2, [r4, #0]
 8003fbc:	6893      	ldr	r3, [r2, #8]
 8003fbe:	079b      	lsls	r3, r3, #30
 8003fc0:	d50e      	bpl.n	8003fe0 <HAL_SPI_TransmitReceive+0x184>
 8003fc2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	b15b      	cbz	r3, 8003fe0 <HAL_SPI_TransmitReceive+0x184>
 8003fc8:	b14d      	cbz	r5, 8003fde <HAL_SPI_TransmitReceive+0x182>
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8003fd0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	6323      	str	r3, [r4, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fd6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	86e3      	strh	r3, [r4, #54]	@ 0x36
        txallowed = 0U;
 8003fde:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fe0:	6822      	ldr	r2, [r4, #0]
 8003fe2:	6891      	ldr	r1, [r2, #8]
 8003fe4:	f011 0101 	ands.w	r1, r1, #1
 8003fe8:	d00d      	beq.n	8004006 <HAL_SPI_TransmitReceive+0x1aa>
 8003fea:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	b153      	cbz	r3, 8004006 <HAL_SPI_TransmitReceive+0x1aa>
        txallowed = 1U;
 8003ff0:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ff2:	68d2      	ldr	r2, [r2, #12]
 8003ff4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003ff6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ff8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ffe:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004000:	3b01      	subs	r3, #1
 8004002:	b29b      	uxth	r3, r3
 8004004:	87e3      	strh	r3, [r4, #62]	@ 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004006:	f7fd fe41 	bl	8001c8c <HAL_GetTick>
 800400a:	1bc0      	subs	r0, r0, r7
 800400c:	4540      	cmp	r0, r8
 800400e:	d302      	bcc.n	8004016 <HAL_SPI_TransmitReceive+0x1ba>
 8004010:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004014:	d1b9      	bne.n	8003f8a <HAL_SPI_TransmitReceive+0x12e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004016:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8004018:	b29b      	uxth	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1cd      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x15e>
 800401e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1c9      	bne.n	8003fba <HAL_SPI_TransmitReceive+0x15e>
 8004026:	e776      	b.n	8003f16 <HAL_SPI_TransmitReceive+0xba>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004028:	68a3      	ldr	r3, [r4, #8]
 800402a:	b933      	cbnz	r3, 800403a <HAL_SPI_TransmitReceive+0x1de>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	6823      	ldr	r3, [r4, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	9201      	str	r2, [sp, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	9301      	str	r3, [sp, #4]
 8004038:	9b01      	ldr	r3, [sp, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800403a:	2301      	movs	r3, #1
 800403c:	f884 3051 	strb.w	r3, [r4, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8004040:	2300      	movs	r3, #0
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004042:	6d60      	ldr	r0, [r4, #84]	@ 0x54
  __HAL_UNLOCK(hspi);
 8004044:	f884 3050 	strb.w	r3, [r4, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004048:	1ac0      	subs	r0, r0, r3
 800404a:	bf18      	it	ne
 800404c:	2001      	movne	r0, #1
 800404e:	e7a3      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x13c>
    return HAL_BUSY;
 8004050:	2002      	movs	r0, #2
 8004052:	e7a1      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x13c>

08004054 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004054:	b084      	sub	sp, #16
 8004056:	a804      	add	r0, sp, #16
 8004058:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800405c:	2000      	movs	r0, #0
 800405e:	b004      	add	sp, #16
 8004060:	4770      	bx	lr

08004062 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8004062:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004064:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 8004068:	2000      	movs	r0, #0
 800406a:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 800406e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 8004072:	4770      	bx	lr

08004074 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004074:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8004078:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800407c:	045b      	lsls	r3, r3, #17
 800407e:	0c5b      	lsrs	r3, r3, #17
 8004080:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8004084:	2000      	movs	r0, #0
 8004086:	4770      	bx	lr

08004088 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004088:	2000      	movs	r0, #0
 800408a:	4770      	bx	lr

0800408c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800408c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800408e:	4604      	mov	r4, r0
 8004090:	a804      	add	r0, sp, #16
 8004092:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004096:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004098:	2301      	movs	r3, #1
 800409a:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 800409e:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040a2:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80040a6:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 80040aa:	b004      	add	sp, #16
 80040ac:	bd10      	pop	{r4, pc}
	...

080040b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80040b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040b2:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80040b4:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040b6:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 80040ba:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80040bc:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 80040c0:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 80040c4:	0424      	lsls	r4, r4, #16
 80040c6:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 80040c8:	2d03      	cmp	r5, #3
 80040ca:	d84b      	bhi.n	8004164 <USB_ActivateEndpoint+0xb4>
 80040cc:	e8df f005 	tbb	[pc, r5]
 80040d0:	43454702 	.word	0x43454702
  HAL_StatusTypeDef ret = HAL_OK;
 80040d4:	4628      	mov	r0, r5
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80040d6:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80040da:	f248 0680 	movw	r6, #32896	@ 0x8080
 80040de:	4334      	orrs	r4, r6
 80040e0:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80040e4:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 80040e8:	4f9e      	ldr	r7, [pc, #632]	@ (8004364 <USB_ActivateEndpoint+0x2b4>)
 80040ea:	b2a4      	uxth	r4, r4
 80040ec:	403c      	ands	r4, r7
 80040ee:	4314      	orrs	r4, r2
 80040f0:	4334      	orrs	r4, r6
 80040f2:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 80040f6:	7b0c      	ldrb	r4, [r1, #12]
 80040f8:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 80040fc:	2c00      	cmp	r4, #0
 80040fe:	f040 808b 	bne.w	8004218 <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004102:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8004104:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004106:	0864      	lsrs	r4, r4, #1
 8004108:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 800410a:	b36e      	cbz	r6, 8004168 <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800410c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8004110:	b289      	uxth	r1, r1
 8004112:	4461      	add	r1, ip
 8004114:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004118:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800411c:	0649      	lsls	r1, r1, #25
 800411e:	d509      	bpl.n	8004134 <USB_ActivateEndpoint+0x84>
 8004120:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004124:	b289      	uxth	r1, r1
 8004126:	4039      	ands	r1, r7
 8004128:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800412c:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8004130:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004134:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004138:	4c8b      	ldr	r4, [pc, #556]	@ (8004368 <USB_ActivateEndpoint+0x2b8>)
 800413a:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 800413c:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800413e:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8004142:	d001      	beq.n	8004148 <USB_ActivateEndpoint+0x98>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004144:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004148:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800414c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8004150:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8004154:	e04a      	b.n	80041ec <USB_ActivateEndpoint+0x13c>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004156:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  HAL_StatusTypeDef ret = HAL_OK;
 800415a:	2000      	movs	r0, #0
      break;
 800415c:	e7bd      	b.n	80040da <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800415e:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 8004162:	e7fa      	b.n	800415a <USB_ActivateEndpoint+0xaa>
  switch (ep->type)
 8004164:	2001      	movs	r0, #1
 8004166:	e7b8      	b.n	80040da <USB_ActivateEndpoint+0x2a>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004168:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800416c:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800416e:	b2ad      	uxth	r5, r5
 8004170:	4465      	add	r5, ip
 8004172:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004176:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 800417a:	293e      	cmp	r1, #62	@ 0x3e
 800417c:	b2a4      	uxth	r4, r4
 800417e:	4464      	add	r4, ip
 8004180:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 8004184:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004188:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 800418c:	d92f      	bls.n	80041ee <USB_ActivateEndpoint+0x13e>
 800418e:	094d      	lsrs	r5, r1, #5
 8004190:	06ce      	lsls	r6, r1, #27
 8004192:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8004196:	bf08      	it	eq
 8004198:	f105 35ff 	addeq.w	r5, r5, #4294967295
 800419c:	b289      	uxth	r1, r1
 800419e:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 80041a2:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 80041a6:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 80041aa:	b289      	uxth	r1, r1
 80041ac:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041b0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80041b4:	044f      	lsls	r7, r1, #17
 80041b6:	d50d      	bpl.n	80041d4 <USB_ActivateEndpoint+0x124>
 80041b8:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80041bc:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80041c0:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80041c4:	0409      	lsls	r1, r1, #16
 80041c6:	0c09      	lsrs	r1, r1, #16
 80041c8:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 80041cc:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 80041d0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 80041d4:	4c65      	ldr	r4, [pc, #404]	@ (800436c <USB_ActivateEndpoint+0x2bc>)
 80041d6:	b9c2      	cbnz	r2, 800420a <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80041d8:	881a      	ldrh	r2, [r3, #0]
 80041da:	b292      	uxth	r2, r2
 80041dc:	4022      	ands	r2, r4
 80041de:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 80041e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80041ea:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 80041ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80041ee:	b911      	cbnz	r1, 80041f6 <USB_ActivateEndpoint+0x146>
 80041f0:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 80041f4:	e7d5      	b.n	80041a2 <USB_ActivateEndpoint+0xf2>
 80041f6:	084d      	lsrs	r5, r1, #1
 80041f8:	07c9      	lsls	r1, r1, #31
 80041fa:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 80041fe:	bf48      	it	mi
 8004200:	3501      	addmi	r5, #1
 8004202:	b289      	uxth	r1, r1
 8004204:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8004208:	e7cf      	b.n	80041aa <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800420a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800420e:	b289      	uxth	r1, r1
 8004210:	4021      	ands	r1, r4
 8004212:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 8004216:	e797      	b.n	8004148 <USB_ActivateEndpoint+0x98>
    if (ep->type == EP_TYPE_BULK)
 8004218:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800421a:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 800421e:	d15b      	bne.n	80042d8 <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004220:	b2a4      	uxth	r4, r4
 8004222:	403c      	ands	r4, r7
 8004224:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 8004228:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 800422c:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004230:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8004234:	890e      	ldrh	r6, [r1, #8]
 8004236:	b2a4      	uxth	r4, r4
 8004238:	0876      	lsrs	r6, r6, #1
 800423a:	4464      	add	r4, ip
 800423c:	0076      	lsls	r6, r6, #1
 800423e:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 8004242:	894e      	ldrh	r6, [r1, #10]
 8004244:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8004248:	0876      	lsrs	r6, r6, #1
 800424a:	b2a4      	uxth	r4, r4
 800424c:	4464      	add	r4, ip
 800424e:	0076      	lsls	r6, r6, #1
 8004250:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 8004254:	7849      	ldrb	r1, [r1, #1]
 8004256:	2900      	cmp	r1, #0
 8004258:	d148      	bne.n	80042ec <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800425a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800425e:	044e      	lsls	r6, r1, #17
 8004260:	d50d      	bpl.n	800427e <USB_ActivateEndpoint+0x1ce>
 8004262:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004266:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800426a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800426e:	0409      	lsls	r1, r1, #16
 8004270:	0c09      	lsrs	r1, r1, #16
 8004272:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8004276:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800427a:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800427e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004282:	064d      	lsls	r5, r1, #25
 8004284:	d50d      	bpl.n	80042a2 <USB_ActivateEndpoint+0x1f2>
 8004286:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800428a:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 800428e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004292:	0409      	lsls	r1, r1, #16
 8004294:	0c09      	lsrs	r1, r1, #16
 8004296:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800429a:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 800429e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80042a2:	f248 0480 	movw	r4, #32896	@ 0x8080
 80042a6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80042aa:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 80042ae:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 80042b2:	0409      	lsls	r1, r1, #16
 80042b4:	0c09      	lsrs	r1, r1, #16
 80042b6:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 80042ba:	4321      	orrs	r1, r4
 80042bc:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042c0:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80042c4:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80042c8:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80042cc:	0409      	lsls	r1, r1, #16
 80042ce:	0c09      	lsrs	r1, r1, #16
 80042d0:	430c      	orrs	r4, r1
 80042d2:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 80042d6:	e789      	b.n	80041ec <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80042d8:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 80042dc:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 80042e0:	0424      	lsls	r4, r4, #16
 80042e2:	0c24      	lsrs	r4, r4, #16
 80042e4:	4326      	orrs	r6, r4
 80042e6:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 80042ea:	e7a1      	b.n	8004230 <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042ec:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80042f0:	044c      	lsls	r4, r1, #17
 80042f2:	d50d      	bpl.n	8004310 <USB_ActivateEndpoint+0x260>
 80042f4:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 80042f8:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 80042fc:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004300:	0409      	lsls	r1, r1, #16
 8004302:	0c09      	lsrs	r1, r1, #16
 8004304:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8004308:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800430c:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004310:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004314:	0649      	lsls	r1, r1, #25
 8004316:	d50d      	bpl.n	8004334 <USB_ActivateEndpoint+0x284>
 8004318:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 800431c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8004320:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8004324:	0409      	lsls	r1, r1, #16
 8004326:	0c09      	lsrs	r1, r1, #16
 8004328:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800432c:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8004330:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004334:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004338:	4c0b      	ldr	r4, [pc, #44]	@ (8004368 <USB_ActivateEndpoint+0x2b8>)
 800433a:	b289      	uxth	r1, r1
 800433c:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 800433e:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004340:	bf18      	it	ne
 8004342:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004346:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800434a:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 800434e:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004352:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8004356:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 800435a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 800435e:	0409      	lsls	r1, r1, #16
 8004360:	0c09      	lsrs	r1, r1, #16
 8004362:	e6f1      	b.n	8004148 <USB_ActivateEndpoint+0x98>
 8004364:	ffff8f8f 	.word	0xffff8f8f
 8004368:	ffff8fbf 	.word	0xffff8fbf
 800436c:	ffffbf8f 	.word	0xffffbf8f

08004370 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8004370:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004372:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8004374:	7b09      	ldrb	r1, [r1, #12]
 8004376:	bbd9      	cbnz	r1, 80043f0 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8004378:	b30a      	cbz	r2, 80043be <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800437a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800437e:	0651      	lsls	r1, r2, #25
 8004380:	d50d      	bpl.n	800439e <USB_DeactivateEndpoint+0x2e>
 8004382:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004386:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800438a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800438e:	0412      	lsls	r2, r2, #16
 8004390:	0c12      	lsrs	r2, r2, #16
 8004392:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004396:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 800439a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800439e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80043a2:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80043a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043aa:	0412      	lsls	r2, r2, #16
 80043ac:	0c12      	lsrs	r2, r2, #16
 80043ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043b2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043b6:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80043ba:	2000      	movs	r0, #0
 80043bc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043be:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80043c2:	0452      	lsls	r2, r2, #17
 80043c4:	d50d      	bpl.n	80043e2 <USB_DeactivateEndpoint+0x72>
 80043c6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80043ca:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80043ce:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80043d2:	0412      	lsls	r2, r2, #16
 80043d4:	0c12      	lsrs	r2, r2, #16
 80043d6:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80043da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80043de:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043e2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80043e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80043ea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80043ee:	e7dc      	b.n	80043aa <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 80043f0:	2a00      	cmp	r2, #0
 80043f2:	d14a      	bne.n	800448a <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80043f4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80043f8:	0451      	lsls	r1, r2, #17
 80043fa:	d50d      	bpl.n	8004418 <USB_DeactivateEndpoint+0xa8>
 80043fc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004400:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004404:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004408:	0412      	lsls	r2, r2, #16
 800440a:	0c12      	lsrs	r2, r2, #16
 800440c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8004410:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004414:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004418:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800441c:	0652      	lsls	r2, r2, #25
 800441e:	d50d      	bpl.n	800443c <USB_DeactivateEndpoint+0xcc>
 8004420:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004424:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004428:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800442c:	0412      	lsls	r2, r2, #16
 800442e:	0c12      	lsrs	r2, r2, #16
 8004430:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004434:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004438:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800443c:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8004440:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004444:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8004448:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800444c:	0412      	lsls	r2, r2, #16
 800444e:	0c12      	lsrs	r2, r2, #16
 8004450:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004454:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8004458:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800445c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004460:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004464:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004468:	0412      	lsls	r2, r2, #16
 800446a:	0c12      	lsrs	r2, r2, #16
 800446c:	430a      	orrs	r2, r1
 800446e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004472:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004476:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800447a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800447e:	0412      	lsls	r2, r2, #16
 8004480:	0c12      	lsrs	r2, r2, #16
 8004482:	4311      	orrs	r1, r2
 8004484:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8004488:	e797      	b.n	80043ba <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800448a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800448e:	0451      	lsls	r1, r2, #17
 8004490:	d50d      	bpl.n	80044ae <USB_DeactivateEndpoint+0x13e>
 8004492:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8004496:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800449a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800449e:	0412      	lsls	r2, r2, #16
 80044a0:	0c12      	lsrs	r2, r2, #16
 80044a2:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80044a6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044aa:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80044ae:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80044b2:	0652      	lsls	r2, r2, #25
 80044b4:	d50d      	bpl.n	80044d2 <USB_DeactivateEndpoint+0x162>
 80044b6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80044ba:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80044be:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80044c2:	0412      	lsls	r2, r2, #16
 80044c4:	0c12      	lsrs	r2, r2, #16
 80044c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044ca:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80044ce:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044d2:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 80044d6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80044da:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80044de:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80044e2:	0412      	lsls	r2, r2, #16
 80044e4:	0c12      	lsrs	r2, r2, #16
 80044e6:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80044ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80044ee:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80044f2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80044f6:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80044fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044fe:	0412      	lsls	r2, r2, #16
 8004500:	0c12      	lsrs	r2, r2, #16
 8004502:	430a      	orrs	r2, r1
 8004504:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004508:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800450c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004510:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004514:	e7b3      	b.n	800447e <USB_DeactivateEndpoint+0x10e>

08004516 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8004516:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004518:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800451a:	b18b      	cbz	r3, 8004540 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800451c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004520:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004528:	041b      	lsls	r3, r3, #16
 800452a:	0c1b      	lsrs	r3, r3, #16
 800452c:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004538:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800453c:	2000      	movs	r0, #0
 800453e:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004540:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004544:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800454c:	041b      	lsls	r3, r3, #16
 800454e:	0c1b      	lsrs	r3, r3, #16
 8004550:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004554:	e7ec      	b.n	8004530 <USB_EPSetStall+0x1a>

08004556 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004556:	7b0b      	ldrb	r3, [r1, #12]
 8004558:	bb3b      	cbnz	r3, 80045aa <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 800455a:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800455c:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800455e:	b333      	cbz	r3, 80045ae <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004560:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004564:	065b      	lsls	r3, r3, #25
 8004566:	d50d      	bpl.n	8004584 <USB_EPClearStall+0x2e>
 8004568:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800456c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004570:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004574:	041b      	lsls	r3, r3, #16
 8004576:	0c1b      	lsrs	r3, r3, #16
 8004578:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800457c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004580:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8004584:	78cb      	ldrb	r3, [r1, #3]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d00f      	beq.n	80045aa <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800458a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800458e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004596:	041b      	lsls	r3, r3, #16
 8004598:	0c1b      	lsrs	r3, r3, #16
 800459a:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800459e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045a6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 80045aa:	2000      	movs	r0, #0
 80045ac:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045ae:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80045b2:	045b      	lsls	r3, r3, #17
 80045b4:	d50d      	bpl.n	80045d2 <USB_EPClearStall+0x7c>
 80045b6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80045ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c2:	041b      	lsls	r3, r3, #16
 80045c4:	0c1b      	lsrs	r3, r3, #16
 80045c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80045ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ce:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80045d2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80045d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045de:	041b      	lsls	r3, r3, #16
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80045e6:	e7da      	b.n	800459e <USB_EPClearStall+0x48>

080045e8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 80045e8:	b911      	cbnz	r1, 80045f0 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80045ea:	2380      	movs	r3, #128	@ 0x80
 80045ec:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 80045f0:	2000      	movs	r0, #0
 80045f2:	4770      	bx	lr

080045f4 <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 80045f4:	2000      	movs	r0, #0
 80045f6:	4770      	bx	lr

080045f8 <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 80045f8:	2000      	movs	r0, #0
 80045fa:	4770      	bx	lr

080045fc <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80045fc:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8004600:	b280      	uxth	r0, r0
 8004602:	4770      	bx	lr

08004604 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8004604:	2000      	movs	r0, #0
 8004606:	4770      	bx	lr

08004608 <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004608:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800460c:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800460e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004612:	085b      	lsrs	r3, r3, #1
 8004614:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 8004618:	4283      	cmp	r3, r0
 800461a:	d100      	bne.n	800461e <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 800461c:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 800461e:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8004622:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 8004626:	e7f7      	b.n	8004618 <USB_WritePMA+0x10>

08004628 <USB_EPStartXfer>:
{
 8004628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 800462c:	784b      	ldrb	r3, [r1, #1]
{
 800462e:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8004630:	2b01      	cmp	r3, #1
{
 8004632:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 8004634:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 8004636:	f040 8118 	bne.w	800486a <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 800463a:	f8d1 9010 	ldr.w	r9, [r1, #16]
 800463e:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004640:	6949      	ldr	r1, [r1, #20]
 8004642:	454f      	cmp	r7, r9
 8004644:	bf28      	it	cs
 8004646:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 8004648:	bb0a      	cbnz	r2, 800468e <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800464a:	b2bf      	uxth	r7, r7
 800464c:	88ea      	ldrh	r2, [r5, #6]
 800464e:	463b      	mov	r3, r7
 8004650:	f7ff ffda 	bl	8004608 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004654:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8004658:	7829      	ldrb	r1, [r5, #0]
 800465a:	b280      	uxth	r0, r0
 800465c:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8004660:	0109      	lsls	r1, r1, #4
 8004662:	4402      	add	r2, r0
 8004664:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004666:	782a      	ldrb	r2, [r5, #0]
 8004668:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800466c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004670:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004674:	041b      	lsls	r3, r3, #16
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 800467c:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800467e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004686:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 800468a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 800468e:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004690:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 8004694:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 8004696:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004698:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 800469c:	f040 80d0 	bne.w	8004840 <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 80046a0:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80046a2:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 80046a6:	f080 80b4 	bcs.w	8004812 <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80046aa:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80046ae:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80046b2:	0412      	lsls	r2, r2, #16
 80046b4:	0c12      	lsrs	r2, r2, #16
 80046b6:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 80046ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80046be:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80046c2:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80046c6:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 80046ca:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80046cc:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 80046d0:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 80046d2:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80046d6:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80046d8:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80046dc:	d04e      	beq.n	800477c <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80046de:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 80046e2:	4472      	add	r2, lr
 80046e4:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80046e8:	896a      	ldrh	r2, [r5, #10]
 80046ea:	f7ff ff8d 	bl	8004608 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80046ee:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 80046f0:	bf36      	itet	cc
 80046f2:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 80046f4:	2300      	movcs	r3, #0
 80046f6:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80046f8:	786a      	ldrb	r2, [r5, #1]
 80046fa:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 80046fc:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004700:	b2b3      	uxth	r3, r6
 8004702:	bb7a      	cbnz	r2, 8004764 <USB_EPStartXfer+0x13c>
 8004704:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 8004708:	7828      	ldrb	r0, [r5, #0]
 800470a:	b292      	uxth	r2, r2
 800470c:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 8004710:	0100      	lsls	r0, r0, #4
 8004712:	4411      	add	r1, r2
 8004714:	5a42      	ldrh	r2, [r0, r1]
 8004716:	2e3e      	cmp	r6, #62	@ 0x3e
 8004718:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800471c:	5242      	strh	r2, [r0, r1]
 800471e:	d914      	bls.n	800474a <USB_EPStartXfer+0x122>
 8004720:	5a42      	ldrh	r2, [r0, r1]
 8004722:	0977      	lsrs	r7, r6, #5
 8004724:	06f6      	lsls	r6, r6, #27
 8004726:	bf08      	it	eq
 8004728:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800472c:	b292      	uxth	r2, r2
 800472e:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8004732:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004736:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800473a:	b292      	uxth	r2, r2
 800473c:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800473e:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004740:	4651      	mov	r1, sl
 8004742:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004744:	f7ff ff60 	bl	8004608 <USB_WritePMA>
 8004748:	e78d      	b.n	8004666 <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800474a:	b90e      	cbnz	r6, 8004750 <USB_EPStartXfer+0x128>
 800474c:	5a42      	ldrh	r2, [r0, r1]
 800474e:	e7f0      	b.n	8004732 <USB_EPStartXfer+0x10a>
 8004750:	07f2      	lsls	r2, r6, #31
 8004752:	5a42      	ldrh	r2, [r0, r1]
 8004754:	ea4f 0756 	mov.w	r7, r6, lsr #1
 8004758:	bf48      	it	mi
 800475a:	3701      	addmi	r7, #1
 800475c:	b292      	uxth	r2, r2
 800475e:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8004762:	e7ea      	b.n	800473a <USB_EPStartXfer+0x112>
 8004764:	2a01      	cmp	r2, #1
 8004766:	d1ea      	bne.n	800473e <USB_EPStartXfer+0x116>
 8004768:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800476c:	7829      	ldrb	r1, [r5, #0]
 800476e:	b280      	uxth	r0, r0
 8004770:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 8004774:	0109      	lsls	r1, r1, #4
 8004776:	4402      	add	r2, r0
 8004778:	528b      	strh	r3, [r1, r2]
 800477a:	e7e0      	b.n	800473e <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800477c:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8004780:	4472      	add	r2, lr
 8004782:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004786:	892a      	ldrh	r2, [r5, #8]
 8004788:	f7ff ff3e 	bl	8004608 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800478c:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 800478e:	bf36      	itet	cc
 8004790:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8004792:	4643      	movcs	r3, r8
 8004794:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004796:	786a      	ldrb	r2, [r5, #1]
 8004798:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 800479a:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800479e:	b2b3      	uxth	r3, r6
 80047a0:	bb5a      	cbnz	r2, 80047fa <USB_EPStartXfer+0x1d2>
 80047a2:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 80047a6:	7828      	ldrb	r0, [r5, #0]
 80047a8:	b292      	uxth	r2, r2
 80047aa:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 80047ae:	0100      	lsls	r0, r0, #4
 80047b0:	4411      	add	r1, r2
 80047b2:	5a42      	ldrh	r2, [r0, r1]
 80047b4:	2e3e      	cmp	r6, #62	@ 0x3e
 80047b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80047ba:	5242      	strh	r2, [r0, r1]
 80047bc:	d910      	bls.n	80047e0 <USB_EPStartXfer+0x1b8>
 80047be:	5a42      	ldrh	r2, [r0, r1]
 80047c0:	0977      	lsrs	r7, r6, #5
 80047c2:	06f6      	lsls	r6, r6, #27
 80047c4:	bf08      	it	eq
 80047c6:	f107 37ff 	addeq.w	r7, r7, #4294967295
 80047ca:	b292      	uxth	r2, r2
 80047cc:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80047d0:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80047d4:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80047d8:	b292      	uxth	r2, r2
 80047da:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80047dc:	896a      	ldrh	r2, [r5, #10]
 80047de:	e7af      	b.n	8004740 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80047e0:	b90e      	cbnz	r6, 80047e6 <USB_EPStartXfer+0x1be>
 80047e2:	5a42      	ldrh	r2, [r0, r1]
 80047e4:	e7f4      	b.n	80047d0 <USB_EPStartXfer+0x1a8>
 80047e6:	07f2      	lsls	r2, r6, #31
 80047e8:	5a42      	ldrh	r2, [r0, r1]
 80047ea:	ea4f 0756 	mov.w	r7, r6, lsr #1
 80047ee:	bf48      	it	mi
 80047f0:	3701      	addmi	r7, #1
 80047f2:	b292      	uxth	r2, r2
 80047f4:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80047f8:	e7ee      	b.n	80047d8 <USB_EPStartXfer+0x1b0>
 80047fa:	2a01      	cmp	r2, #1
 80047fc:	d1ee      	bne.n	80047dc <USB_EPStartXfer+0x1b4>
 80047fe:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8004802:	7829      	ldrb	r1, [r5, #0]
 8004804:	b280      	uxth	r0, r0
 8004806:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 800480a:	0109      	lsls	r1, r1, #4
 800480c:	4402      	add	r2, r0
 800480e:	528b      	strh	r3, [r1, r2]
 8004810:	e7e4      	b.n	80047dc <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004812:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 8004816:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800481a:	0412      	lsls	r2, r2, #16
 800481c:	0c12      	lsrs	r2, r2, #16
 800481e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004822:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004826:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800482a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 800482e:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8004832:	b29b      	uxth	r3, r3
 8004834:	441a      	add	r2, r3
 8004836:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004838:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800483c:	892a      	ldrh	r2, [r5, #8]
 800483e:	e781      	b.n	8004744 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 8004840:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004842:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 8004846:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004848:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800484c:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800484e:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004850:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004852:	d506      	bpl.n	8004862 <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004854:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 8004858:	4432      	add	r2, r6
 800485a:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800485e:	896a      	ldrh	r2, [r5, #10]
 8004860:	e770      	b.n	8004744 <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004862:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8004866:	4432      	add	r2, r6
 8004868:	e7e6      	b.n	8004838 <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 800486a:	2a00      	cmp	r2, #0
 800486c:	d13b      	bne.n	80048e6 <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 800486e:	698b      	ldr	r3, [r1, #24]
 8004870:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004872:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 8004876:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 8004878:	bf84      	itt	hi
 800487a:	1a5a      	subhi	r2, r3, r1
 800487c:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800487e:	7829      	ldrb	r1, [r5, #0]
 8004880:	61aa      	str	r2, [r5, #24]
 8004882:	b280      	uxth	r0, r0
 8004884:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 8004888:	0109      	lsls	r1, r1, #4
 800488a:	4402      	add	r2, r0
 800488c:	5a88      	ldrh	r0, [r1, r2]
 800488e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004890:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004894:	5288      	strh	r0, [r1, r2]
 8004896:	d91a      	bls.n	80048ce <USB_EPStartXfer+0x2a6>
 8004898:	0958      	lsrs	r0, r3, #5
 800489a:	06de      	lsls	r6, r3, #27
 800489c:	5a8b      	ldrh	r3, [r1, r2]
 800489e:	bf08      	it	eq
 80048a0:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80048aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048b6:	782a      	ldrb	r2, [r5, #0]
 80048b8:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80048bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80048c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c4:	041b      	lsls	r3, r3, #16
 80048c6:	0c1b      	lsrs	r3, r3, #16
 80048c8:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 80048cc:	e6d6      	b.n	800467c <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80048ce:	b90b      	cbnz	r3, 80048d4 <USB_EPStartXfer+0x2ac>
 80048d0:	5a8b      	ldrh	r3, [r1, r2]
 80048d2:	e7ea      	b.n	80048aa <USB_EPStartXfer+0x282>
 80048d4:	0858      	lsrs	r0, r3, #1
 80048d6:	07db      	lsls	r3, r3, #31
 80048d8:	5a8b      	ldrh	r3, [r1, r2]
 80048da:	bf48      	it	mi
 80048dc:	3001      	addmi	r0, #1
 80048de:	b29b      	uxth	r3, r3
 80048e0:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 80048e4:	e7e5      	b.n	80048b2 <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 80048e6:	78ca      	ldrb	r2, [r1, #3]
 80048e8:	2a02      	cmp	r2, #2
 80048ea:	d170      	bne.n	80049ce <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d138      	bne.n	8004962 <USB_EPStartXfer+0x33a>
 80048f0:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80048f4:	780b      	ldrb	r3, [r1, #0]
 80048f6:	b292      	uxth	r2, r2
 80048f8:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	4410      	add	r0, r2
 8004900:	5ac2      	ldrh	r2, [r0, r3]
 8004902:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004906:	52c2      	strh	r2, [r0, r3]
 8004908:	690a      	ldr	r2, [r1, #16]
 800490a:	2a3e      	cmp	r2, #62	@ 0x3e
 800490c:	d946      	bls.n	800499c <USB_EPStartXfer+0x374>
 800490e:	5ac1      	ldrh	r1, [r0, r3]
 8004910:	0956      	lsrs	r6, r2, #5
 8004912:	06d7      	lsls	r7, r2, #27
 8004914:	bf08      	it	eq
 8004916:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800491a:	b289      	uxth	r1, r1
 800491c:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8004920:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004924:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004928:	b289      	uxth	r1, r1
 800492a:	52c1      	strh	r1, [r0, r3]
 800492c:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8004930:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8004934:	b280      	uxth	r0, r0
 8004936:	4401      	add	r1, r0
 8004938:	5ac8      	ldrh	r0, [r1, r3]
 800493a:	2a3e      	cmp	r2, #62	@ 0x3e
 800493c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004940:	52c8      	strh	r0, [r1, r3]
 8004942:	d938      	bls.n	80049b6 <USB_EPStartXfer+0x38e>
 8004944:	0950      	lsrs	r0, r2, #5
 8004946:	06d7      	lsls	r7, r2, #27
 8004948:	5aca      	ldrh	r2, [r1, r3]
 800494a:	bf08      	it	eq
 800494c:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8004950:	b292      	uxth	r2, r2
 8004952:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8004956:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800495a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800495e:	b292      	uxth	r2, r2
 8004960:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 8004962:	69eb      	ldr	r3, [r5, #28]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0a6      	beq.n	80048b6 <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8004968:	f244 0340 	movw	r3, #16448	@ 0x4040
 800496c:	782a      	ldrb	r2, [r5, #0]
 800496e:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8004972:	ea03 0001 	and.w	r0, r3, r1
 8004976:	438b      	bics	r3, r1
 8004978:	d001      	beq.n	800497e <USB_EPStartXfer+0x356>
 800497a:	2800      	cmp	r0, #0
 800497c:	d19b      	bne.n	80048b6 <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800497e:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8004982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800498a:	041b      	lsls	r3, r3, #16
 800498c:	0c1b      	lsrs	r3, r3, #16
 800498e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004992:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004996:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 800499a:	e78c      	b.n	80048b6 <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800499c:	b90a      	cbnz	r2, 80049a2 <USB_EPStartXfer+0x37a>
 800499e:	5ac1      	ldrh	r1, [r0, r3]
 80049a0:	e7be      	b.n	8004920 <USB_EPStartXfer+0x2f8>
 80049a2:	07d1      	lsls	r1, r2, #31
 80049a4:	5ac1      	ldrh	r1, [r0, r3]
 80049a6:	ea4f 0652 	mov.w	r6, r2, lsr #1
 80049aa:	bf48      	it	mi
 80049ac:	3601      	addmi	r6, #1
 80049ae:	b289      	uxth	r1, r1
 80049b0:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80049b4:	e7b8      	b.n	8004928 <USB_EPStartXfer+0x300>
 80049b6:	b90a      	cbnz	r2, 80049bc <USB_EPStartXfer+0x394>
 80049b8:	5aca      	ldrh	r2, [r1, r3]
 80049ba:	e7cc      	b.n	8004956 <USB_EPStartXfer+0x32e>
 80049bc:	0850      	lsrs	r0, r2, #1
 80049be:	07d6      	lsls	r6, r2, #31
 80049c0:	5aca      	ldrh	r2, [r1, r3]
 80049c2:	bf48      	it	mi
 80049c4:	3001      	addmi	r0, #1
 80049c6:	b292      	uxth	r2, r2
 80049c8:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80049cc:	e7c7      	b.n	800495e <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 80049ce:	2a01      	cmp	r2, #1
 80049d0:	d15d      	bne.n	8004a8e <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 80049d2:	698a      	ldr	r2, [r1, #24]
 80049d4:	6909      	ldr	r1, [r1, #16]
 80049d6:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 80049d8:	bf94      	ite	ls
 80049da:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 80049dc:	1a50      	subhi	r0, r2, r1
 80049de:	61a8      	str	r0, [r5, #24]
 80049e0:	bf88      	it	hi
 80049e2:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f47f af66 	bne.w	80048b6 <USB_EPStartXfer+0x28e>
 80049ea:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 80049ee:	782b      	ldrb	r3, [r5, #0]
 80049f0:	b289      	uxth	r1, r1
 80049f2:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	4408      	add	r0, r1
 80049fa:	5ac1      	ldrh	r1, [r0, r3]
 80049fc:	2a3e      	cmp	r2, #62	@ 0x3e
 80049fe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004a02:	52c1      	strh	r1, [r0, r3]
 8004a04:	d92b      	bls.n	8004a5e <USB_EPStartXfer+0x436>
 8004a06:	06d1      	lsls	r1, r2, #27
 8004a08:	5ac1      	ldrh	r1, [r0, r3]
 8004a0a:	ea4f 1652 	mov.w	r6, r2, lsr #5
 8004a0e:	bf08      	it	eq
 8004a10:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8004a14:	b289      	uxth	r1, r1
 8004a16:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8004a1a:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8004a1e:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8004a22:	b289      	uxth	r1, r1
 8004a24:	52c1      	strh	r1, [r0, r3]
 8004a26:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8004a2a:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8004a2e:	b280      	uxth	r0, r0
 8004a30:	4401      	add	r1, r0
 8004a32:	5ac8      	ldrh	r0, [r1, r3]
 8004a34:	2a3e      	cmp	r2, #62	@ 0x3e
 8004a36:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004a3a:	52c8      	strh	r0, [r1, r3]
 8004a3c:	d91b      	bls.n	8004a76 <USB_EPStartXfer+0x44e>
 8004a3e:	0950      	lsrs	r0, r2, #5
 8004a40:	06d6      	lsls	r6, r2, #27
 8004a42:	5aca      	ldrh	r2, [r1, r3]
 8004a44:	bf08      	it	eq
 8004a46:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8004a4a:	b292      	uxth	r2, r2
 8004a4c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8004a50:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8004a54:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8004a58:	b292      	uxth	r2, r2
 8004a5a:	52ca      	strh	r2, [r1, r3]
 8004a5c:	e72b      	b.n	80048b6 <USB_EPStartXfer+0x28e>
 8004a5e:	b90a      	cbnz	r2, 8004a64 <USB_EPStartXfer+0x43c>
 8004a60:	5ac1      	ldrh	r1, [r0, r3]
 8004a62:	e7da      	b.n	8004a1a <USB_EPStartXfer+0x3f2>
 8004a64:	5ac1      	ldrh	r1, [r0, r3]
 8004a66:	0856      	lsrs	r6, r2, #1
 8004a68:	07d7      	lsls	r7, r2, #31
 8004a6a:	bf48      	it	mi
 8004a6c:	3601      	addmi	r6, #1
 8004a6e:	b289      	uxth	r1, r1
 8004a70:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8004a74:	e7d5      	b.n	8004a22 <USB_EPStartXfer+0x3fa>
 8004a76:	b90a      	cbnz	r2, 8004a7c <USB_EPStartXfer+0x454>
 8004a78:	5aca      	ldrh	r2, [r1, r3]
 8004a7a:	e7e9      	b.n	8004a50 <USB_EPStartXfer+0x428>
 8004a7c:	0850      	lsrs	r0, r2, #1
 8004a7e:	07d2      	lsls	r2, r2, #31
 8004a80:	5aca      	ldrh	r2, [r1, r3]
 8004a82:	bf48      	it	mi
 8004a84:	3001      	addmi	r0, #1
 8004a86:	b292      	uxth	r2, r2
 8004a88:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8004a8c:	e7e4      	b.n	8004a58 <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 8004a8e:	2001      	movs	r0, #1
 8004a90:	e5fb      	b.n	800468a <USB_EPStartXfer+0x62>

08004a92 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004a92:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 8004a96:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004a98:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8004a9c:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8004a9e:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004aa0:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 8004aa2:	462e      	mov	r6, r5
 8004aa4:	3402      	adds	r4, #2
 8004aa6:	b936      	cbnz	r6, 8004ab6 <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8004aa8:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 8004aaa:	bf44      	itt	mi
 8004aac:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004ab0:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8004ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 8004ab6:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 8004aba:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8004abc:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8004abe:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8004ac2:	0a12      	lsrs	r2, r2, #8
 8004ac4:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 8004ac8:	e7ec      	b.n	8004aa4 <USB_ReadPMA+0x12>
	...

08004acc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004acc:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004ace:	4903      	ldr	r1, [pc, #12]	@ (8004adc <MX_FATFS_Init+0x10>)
 8004ad0:	4803      	ldr	r0, [pc, #12]	@ (8004ae0 <MX_FATFS_Init+0x14>)
 8004ad2:	f001 fe19 	bl	8006708 <FATFS_LinkDriver>
 8004ad6:	4b03      	ldr	r3, [pc, #12]	@ (8004ae4 <MX_FATFS_Init+0x18>)
 8004ad8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004ada:	bd08      	pop	{r3, pc}
 8004adc:	20000904 	.word	0x20000904
 8004ae0:	2000000c 	.word	0x2000000c
 8004ae4:	20000908 	.word	0x20000908

08004ae8 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8004ae8:	2000      	movs	r0, #0
 8004aea:	4770      	bx	lr

08004aec <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8004aec:	f7fc be40 	b.w	8001770 <USER_SPI_initialize>

08004af0 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8004af0:	f7fc bee4 	b.w	80018bc <USER_SPI_status>

08004af4 <USER_read>:
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8004af4:	f7fc beec 	b.w	80018d0 <USER_SPI_read>

08004af8 <USER_write>:
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8004af8:	f7fc bf2a 	b.w	8001950 <USER_SPI_write>

08004afc <USER_ioctl>:
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8004afc:	f7fc bf78 	b.w	80019f0 <USER_SPI_ioctl>

08004b00 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004b00:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 8004b04:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004b06:	b16b      	cbz	r3, 8004b24 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b08:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004b0c:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8004b10:	28ff      	cmp	r0, #255	@ 0xff
 8004b12:	d007      	beq.n	8004b24 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	4621      	mov	r1, r4
 8004b18:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 8004b1c:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8004b1e:	23ff      	movs	r3, #255	@ 0xff
 8004b20:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 8004b24:	2000      	movs	r0, #0
 8004b26:	bd10      	pop	{r4, pc}

08004b28 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004b28:	2343      	movs	r3, #67	@ 0x43
 8004b2a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8004b2c:	4800      	ldr	r0, [pc, #0]	@ (8004b30 <USBD_CDC_GetFSCfgDesc+0x8>)
 8004b2e:	4770      	bx	lr
 8004b30:	20000064 	.word	0x20000064

08004b34 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8004b34:	2343      	movs	r3, #67	@ 0x43
 8004b36:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004b38:	4800      	ldr	r0, [pc, #0]	@ (8004b3c <USBD_CDC_GetHSCfgDesc+0x8>)
 8004b3a:	4770      	bx	lr
 8004b3c:	200000a8 	.word	0x200000a8

08004b40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004b40:	2343      	movs	r3, #67	@ 0x43
 8004b42:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004b44:	4800      	ldr	r0, [pc, #0]	@ (8004b48 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004b46:	4770      	bx	lr
 8004b48:	20000020 	.word	0x20000020

08004b4c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004b4c:	230a      	movs	r3, #10
 8004b4e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004b50:	4800      	ldr	r0, [pc, #0]	@ (8004b54 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004b52:	4770      	bx	lr
 8004b54:	20000124 	.word	0x20000124

08004b58 <USBD_CDC_DataOut>:
{
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004b5c:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b60:	f001 ffa0 	bl	8006aa4 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8004b64:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b68:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 8004b6c:	b14b      	cbz	r3, 8004b82 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b6e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8004b72:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 8004b7c:	4798      	blx	r3
    return USBD_OK;
 8004b7e:	2000      	movs	r0, #0
}
 8004b80:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8004b82:	2002      	movs	r0, #2
 8004b84:	e7fc      	b.n	8004b80 <USBD_CDC_DataOut+0x28>

08004b86 <USBD_CDC_DataIn>:
{
 8004b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004b88:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 8004b8c:	b1ce      	cbz	r6, 8004bc2 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004b8e:	2214      	movs	r2, #20
 8004b90:	fb02 0201 	mla	r2, r2, r1, r0
 8004b94:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004b96:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004b9a:	b173      	cbz	r3, 8004bba <USBD_CDC_DataIn+0x34>
 8004b9c:	2728      	movs	r7, #40	@ 0x28
 8004b9e:	fb07 5401 	mla	r4, r7, r1, r5
 8004ba2:	6a24      	ldr	r4, [r4, #32]
 8004ba4:	fbb3 f5f4 	udiv	r5, r3, r4
 8004ba8:	fb04 3315 	mls	r3, r4, r5, r3
 8004bac:	b92b      	cbnz	r3, 8004bba <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 8004bae:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f001 ff65 	bl	8006a80 <USBD_LL_Transmit>
    return USBD_OK;
 8004bb6:	2000      	movs	r0, #0
}
 8004bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 8004bc0:	e7f9      	b.n	8004bb6 <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 8004bc2:	2002      	movs	r0, #2
 8004bc4:	e7f8      	b.n	8004bb8 <USBD_CDC_DataIn+0x32>

08004bc6 <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 8004bc6:	2300      	movs	r3, #0
{
 8004bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bca:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 8004bcc:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8004bd0:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bd4:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 8004bd8:	4604      	mov	r4, r0
 8004bda:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004bdc:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004be0:	d022      	beq.n	8004c28 <USBD_CDC_Setup+0x62>
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	d13a      	bne.n	8004c5c <USBD_CDC_Setup+0x96>
      if (req->wLength)
 8004be6:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004be8:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 8004bea:	b1ba      	cbz	r2, 8004c1c <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 8004bec:	0639      	lsls	r1, r7, #24
 8004bee:	d50b      	bpl.n	8004c08 <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004bf0:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	688f      	ldr	r7, [r1, #8]
 8004bf8:	4631      	mov	r1, r6
 8004bfa:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004bfc:	4631      	mov	r1, r6
 8004bfe:	4620      	mov	r0, r4
 8004c00:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c02:	f000 fc11 	bl	8005428 <USBD_CtlSendData>
 8004c06:	e006      	b.n	8004c16 <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004c08:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 8004c0a:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004c0e:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004c12:	f000 fc1e 	bl	8005452 <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8004c16:	2000      	movs	r0, #0
}
 8004c18:	b003      	add	sp, #12
 8004c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004c1c:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 8004c20:	6884      	ldr	r4, [r0, #8]
 8004c22:	4618      	mov	r0, r3
 8004c24:	47a0      	blx	r4
 8004c26:	e7f6      	b.n	8004c16 <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 8004c28:	784b      	ldrb	r3, [r1, #1]
 8004c2a:	2b0a      	cmp	r3, #10
 8004c2c:	d00a      	beq.n	8004c44 <USBD_CDC_Setup+0x7e>
 8004c2e:	2b0b      	cmp	r3, #11
 8004c30:	d010      	beq.n	8004c54 <USBD_CDC_Setup+0x8e>
 8004c32:	b99b      	cbnz	r3, 8004c5c <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c34:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004c38:	2b03      	cmp	r3, #3
 8004c3a:	d10f      	bne.n	8004c5c <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	f10d 0106 	add.w	r1, sp, #6
 8004c42:	e7de      	b.n	8004c02 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c44:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004c48:	2b03      	cmp	r3, #3
 8004c4a:	d107      	bne.n	8004c5c <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f10d 0105 	add.w	r1, sp, #5
 8004c52:	e7d6      	b.n	8004c02 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004c54:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d0dc      	beq.n	8004c16 <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	4629      	mov	r1, r5
 8004c60:	f000 fbbb 	bl	80053da <USBD_CtlError>
            ret = USBD_FAIL;
 8004c64:	2002      	movs	r0, #2
 8004c66:	e7d7      	b.n	8004c18 <USBD_CDC_Setup+0x52>

08004c68 <USBD_CDC_DeInit>:
{
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004c6c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004c6e:	2181      	movs	r1, #129	@ 0x81
 8004c70:	f001 fed1 	bl	8006a16 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004c74:	2101      	movs	r1, #1
 8004c76:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004c78:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004c7a:	f001 fecc 	bl	8006a16 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004c7e:	2182      	movs	r1, #130	@ 0x82
 8004c80:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004c82:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004c86:	f001 fec6 	bl	8006a16 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8004c8a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004c8e:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 8004c90:	b14b      	cbz	r3, 8004ca6 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004c92:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004c9a:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 8004c9e:	f001 ff09 	bl	8006ab4 <USBD_static_free>
    pdev->pClassData = NULL;
 8004ca2:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	bd38      	pop	{r3, r4, r5, pc}

08004caa <USBD_CDC_Init>:
{
 8004caa:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cac:	7c03      	ldrb	r3, [r0, #16]
{
 8004cae:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cb0:	bba3      	cbnz	r3, 8004d1c <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004cb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cb6:	2181      	movs	r1, #129	@ 0x81
 8004cb8:	2202      	movs	r2, #2
 8004cba:	f001 fea0 	bl	80069fe <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004cbe:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004cc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004cc4:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004cc6:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004cc8:	2202      	movs	r2, #2
 8004cca:	4620      	mov	r0, r4
 8004ccc:	f001 fe97 	bl	80069fe <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	2203      	movs	r2, #3
 8004cd4:	2182      	movs	r1, #130	@ 0x82
 8004cd6:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004cd8:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004cdc:	f001 fe8f 	bl	80069fe <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ce0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004ce4:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ce6:	f001 fee1 	bl	8006aac <USBD_static_malloc>
 8004cea:	4606      	mov	r6, r0
 8004cec:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8004cf0:	b1f8      	cbz	r0, 8004d32 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004cf2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4798      	blx	r3
    hcdc->TxState = 0U;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 8004d00:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d04:	7c23      	ldrb	r3, [r4, #16]
 8004d06:	b993      	cbnz	r3, 8004d2e <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d08:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	4620      	mov	r0, r4
 8004d10:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 8004d14:	f001 febd 	bl	8006a92 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8004d18:	2000      	movs	r0, #0
}
 8004d1a:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d1c:	2340      	movs	r3, #64	@ 0x40
 8004d1e:	2181      	movs	r1, #129	@ 0x81
 8004d20:	2202      	movs	r2, #2
 8004d22:	f001 fe6c 	bl	80069fe <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d26:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d28:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d2a:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d2c:	e7cb      	b.n	8004cc6 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d2e:	2340      	movs	r3, #64	@ 0x40
 8004d30:	e7ec      	b.n	8004d0c <USBD_CDC_Init+0x62>
    ret = 1U;
 8004d32:	4628      	mov	r0, r5
 8004d34:	e7f1      	b.n	8004d1a <USBD_CDC_Init+0x70>

08004d36 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8004d36:	b119      	cbz	r1, 8004d40 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8004d38:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8004d40:	2002      	movs	r0, #2
  }

  return ret;
}
 8004d42:	4770      	bx	lr

08004d44 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d44:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8004d48:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 8004d4a:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8004d4e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 8004d52:	4770      	bx	lr

08004d54 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8004d54:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 8004d58:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8004d5a:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 8004d5e:	4770      	bx	lr

08004d60 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004d60:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 8004d64:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004d66:	b162      	cbz	r2, 8004d82 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d68:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004d6a:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d6e:	b933      	cbnz	r3, 8004d7e <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 8004d70:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004d74:	2101      	movs	r1, #1
 8004d76:	f001 fe8c 	bl	8006a92 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004d7a:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004d7c:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 8004d7e:	2340      	movs	r3, #64	@ 0x40
 8004d80:	e7f8      	b.n	8004d74 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 8004d82:	2002      	movs	r0, #2
 8004d84:	e7fa      	b.n	8004d7c <USBD_CDC_ReceivePacket+0x1c>

08004d86 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004d86:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004d88:	b180      	cbz	r0, 8004dac <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004d8a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004d8e:	b113      	cbz	r3, 8004d96 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8004d90:	2300      	movs	r3, #0
 8004d92:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004d96:	b109      	cbz	r1, 8004d9c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8004d98:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004d9c:	2301      	movs	r3, #1
  pdev->id = id;
 8004d9e:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004da0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004da4:	f001 fde2 	bl	800696c <USBD_LL_Init>

  return USBD_OK;
 8004da8:	2000      	movs	r0, #0
}
 8004daa:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8004dac:	2002      	movs	r0, #2
 8004dae:	e7fc      	b.n	8004daa <USBD_Init+0x24>

08004db0 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8004db0:	b119      	cbz	r1, 8004dba <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004db2:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8004db6:	2000      	movs	r0, #0
 8004db8:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004dba:	2002      	movs	r0, #2
  }

  return status;
}
 8004dbc:	4770      	bx	lr

08004dbe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004dbe:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004dc0:	f001 fe14 	bl	80069ec <USBD_LL_Start>

  return USBD_OK;
}
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	bd08      	pop	{r3, pc}

08004dc8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004dc8:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004dca:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004dce:	b133      	cbz	r3, 8004dde <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4798      	blx	r3
 8004dd4:	3800      	subs	r0, #0
 8004dd6:	bf18      	it	ne
 8004dd8:	2001      	movne	r0, #1
 8004dda:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 8004ddc:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004dde:	2002      	movs	r0, #2
 8004de0:	e7fc      	b.n	8004ddc <USBD_SetClassConfig+0x14>

08004de2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004de2:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004de4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4798      	blx	r3

  return USBD_OK;
}
 8004dec:	2000      	movs	r0, #0
 8004dee:	bd08      	pop	{r3, pc}

08004df0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004df0:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004df2:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 8004df6:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004df8:	4628      	mov	r0, r5
 8004dfa:	f000 fae3 	bl	80053c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004dfe:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004e00:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8004e04:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 8004e08:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 8004e0c:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004e10:	f001 031f 	and.w	r3, r1, #31
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d008      	beq.n	8004e2a <USBD_LL_SetupStage+0x3a>
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d00b      	beq.n	8004e34 <USBD_LL_SetupStage+0x44>
 8004e1c:	b97b      	cbnz	r3, 8004e3e <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8004e1e:	4629      	mov	r1, r5
 8004e20:	4620      	mov	r0, r4
 8004e22:	f000 f8fb 	bl	800501c <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8004e26:	2000      	movs	r0, #0
 8004e28:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	f000 fa1d 	bl	800526c <USBD_StdItfReq>
      break;
 8004e32:	e7f8      	b.n	8004e26 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8004e34:	4629      	mov	r1, r5
 8004e36:	4620      	mov	r0, r4
 8004e38:	f000 fa3c 	bl	80052b4 <USBD_StdEPReq>
      break;
 8004e3c:	e7f3      	b.n	8004e26 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004e3e:	4620      	mov	r0, r4
 8004e40:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8004e44:	f001 fdf0 	bl	8006a28 <USBD_LL_StallEP>
      break;
 8004e48:	e7ed      	b.n	8004e26 <USBD_LL_SetupStage+0x36>

08004e4a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004e4a:	b570      	push	{r4, r5, r6, lr}
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004e50:	bb39      	cbnz	r1, 8004ea2 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004e52:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8004e56:	2a03      	cmp	r2, #3
 8004e58:	d11c      	bne.n	8004e94 <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 8004e5a:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 8004e5e:	4295      	cmp	r5, r2
 8004e60:	d90b      	bls.n	8004e7a <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 8004e62:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 8004e64:	42aa      	cmp	r2, r5
 8004e66:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 8004e68:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 8004e6c:	bf8c      	ite	hi
 8004e6e:	b2aa      	uxthhi	r2, r5
 8004e70:	b292      	uxthls	r2, r2
 8004e72:	f000 fafb 	bl	800546c <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004e76:	2000      	movs	r0, #0
}
 8004e78:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004e7a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	b123      	cbz	r3, 8004e8c <USBD_LL_DataOutStage+0x42>
 8004e82:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004e86:	2a03      	cmp	r2, #3
 8004e88:	d100      	bne.n	8004e8c <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 8004e8a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	f000 faf5 	bl	800547c <USBD_CtlSendStatus>
 8004e92:	e7f0      	b.n	8004e76 <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004e94:	2a05      	cmp	r2, #5
 8004e96:	d1ee      	bne.n	8004e76 <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 8004e98:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004e9c:	f001 fdc4 	bl	8006a28 <USBD_LL_StallEP>
 8004ea0:	e7e9      	b.n	8004e76 <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 8004ea2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	b12b      	cbz	r3, 8004eb6 <USBD_LL_DataOutStage+0x6c>
 8004eaa:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004eae:	2a03      	cmp	r2, #3
 8004eb0:	d101      	bne.n	8004eb6 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8004eb2:	4798      	blx	r3
 8004eb4:	e7df      	b.n	8004e76 <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 8004eb6:	2002      	movs	r0, #2
 8004eb8:	e7de      	b.n	8004e78 <USBD_LL_DataOutStage+0x2e>

08004eba <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004ec0:	460f      	mov	r7, r1
 8004ec2:	2900      	cmp	r1, #0
 8004ec4:	d149      	bne.n	8004f5a <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004ec6:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8004eca:	2a02      	cmp	r2, #2
 8004ecc:	d13a      	bne.n	8004f44 <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 8004ece:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 8004ed2:	42b5      	cmp	r5, r6
 8004ed4:	d911      	bls.n	8004efa <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 8004ed6:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004ed8:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 8004eda:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004edc:	b2aa      	uxth	r2, r5
 8004ede:	f000 fab0 	bl	8005442 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ee2:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4620      	mov	r0, r4
 8004eea:	f001 fdd2 	bl	8006a92 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004eee:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d02d      	beq.n	8004f52 <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8004ef6:	2000      	movs	r0, #0
}
 8004ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004efa:	69c3      	ldr	r3, [r0, #28]
 8004efc:	fbb3 f5f6 	udiv	r5, r3, r6
 8004f00:	fb06 3515 	mls	r5, r6, r5, r3
 8004f04:	b965      	cbnz	r5, 8004f20 <USBD_LL_DataInStage+0x66>
 8004f06:	429e      	cmp	r6, r3
 8004f08:	d80a      	bhi.n	8004f20 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8004f0a:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d206      	bcs.n	8004f20 <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004f12:	462a      	mov	r2, r5
 8004f14:	f000 fa95 	bl	8005442 <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f18:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 8004f1a:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004f1e:	e7e1      	b.n	8004ee4 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004f20:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	b12b      	cbz	r3, 8004f34 <USBD_LL_DataInStage+0x7a>
 8004f28:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 8004f2c:	2a03      	cmp	r2, #3
 8004f2e:	d101      	bne.n	8004f34 <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 8004f30:	4620      	mov	r0, r4
 8004f32:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8004f34:	2180      	movs	r1, #128	@ 0x80
 8004f36:	4620      	mov	r0, r4
 8004f38:	f001 fd76 	bl	8006a28 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f000 faa8 	bl	8005492 <USBD_CtlReceiveStatus>
 8004f42:	e7d4      	b.n	8004eee <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004f44:	f032 0304 	bics.w	r3, r2, #4
 8004f48:	d1d1      	bne.n	8004eee <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8004f4a:	2180      	movs	r1, #128	@ 0x80
 8004f4c:	f001 fd6c 	bl	8006a28 <USBD_LL_StallEP>
 8004f50:	e7cd      	b.n	8004eee <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 8004f58:	e7cd      	b.n	8004ef6 <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 8004f5a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	b12b      	cbz	r3, 8004f6e <USBD_LL_DataInStage+0xb4>
 8004f62:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004f66:	2a03      	cmp	r2, #3
 8004f68:	d101      	bne.n	8004f6e <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 8004f6a:	4798      	blx	r3
 8004f6c:	e7c3      	b.n	8004ef6 <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 8004f6e:	2002      	movs	r0, #2
 8004f70:	e7c2      	b.n	8004ef8 <USBD_LL_DataInStage+0x3e>

08004f72 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f72:	2200      	movs	r2, #0
{
 8004f74:	b570      	push	{r4, r5, r6, lr}
 8004f76:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f78:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f7a:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	2340      	movs	r3, #64	@ 0x40
 8004f80:	f001 fd3d 	bl	80069fe <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f84:	4633      	mov	r3, r6
 8004f86:	2180      	movs	r1, #128	@ 0x80
 8004f88:	2200      	movs	r2, #0
 8004f8a:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f8c:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f90:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f94:	f001 fd33 	bl	80069fe <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8004f98:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8004f9a:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004f9e:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fa0:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fa2:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004fa6:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 8004faa:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8004fac:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 8004fb0:	b123      	cbz	r3, 8004fbc <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004fb2:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	bd70      	pop	{r4, r5, r6, pc}

08004fc0 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8004fc0:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	4770      	bx	lr

08004fc6 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8004fc6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004fca:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004fce:	2304      	movs	r3, #4
 8004fd0:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	4770      	bx	lr

08004fd8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004fd8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8004fdc:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004fde:	bf04      	itt	eq
 8004fe0:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 8004fe4:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8004fe8:	2000      	movs	r0, #0
 8004fea:	4770      	bx	lr

08004fec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004fec:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fee:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8004ff2:	2a03      	cmp	r2, #3
 8004ff4:	d104      	bne.n	8005000 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8004ff6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	b103      	cbz	r3, 8005000 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8004ffe:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8005000:	2000      	movs	r0, #0
 8005002:	bd08      	pop	{r3, pc}

08005004 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8005004:	b510      	push	{r4, lr}
 8005006:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8005008:	2180      	movs	r1, #128	@ 0x80
 800500a:	f001 fd0d 	bl	8006a28 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800500e:	4620      	mov	r0, r4
}
 8005010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8005014:	2100      	movs	r1, #0
 8005016:	f001 bd07 	b.w	8006a28 <USBD_LL_StallEP>
	...

0800501c <USBD_StdDevReq>:
{
 800501c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800501e:	780b      	ldrb	r3, [r1, #0]
 8005020:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005022:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005026:	2b20      	cmp	r3, #32
{
 8005028:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800502a:	d012      	beq.n	8005052 <USBD_StdDevReq+0x36>
 800502c:	2b40      	cmp	r3, #64	@ 0x40
 800502e:	d010      	beq.n	8005052 <USBD_StdDevReq+0x36>
 8005030:	2b00      	cmp	r3, #0
 8005032:	d151      	bne.n	80050d8 <USBD_StdDevReq+0xbc>
      switch (req->bRequest)
 8005034:	784b      	ldrb	r3, [r1, #1]
 8005036:	2b09      	cmp	r3, #9
 8005038:	d84e      	bhi.n	80050d8 <USBD_StdDevReq+0xbc>
 800503a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800503e:	00ee      	.short	0x00ee
 8005040:	004d0109 	.word	0x004d0109
 8005044:	004d0102 	.word	0x004d0102
 8005048:	00130087 	.word	0x00130087
 800504c:	00d6004d 	.word	0x00d6004d
 8005050:	00a3      	.short	0x00a3
      pdev->pClass->Setup(pdev, req);
 8005052:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005056:	4629      	mov	r1, r5
 8005058:	4620      	mov	r0, r4
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	4798      	blx	r3
}
 800505e:	2000      	movs	r0, #0
 8005060:	b003      	add	sp, #12
 8005062:	bd30      	pop	{r4, r5, pc}
  uint16_t len = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 800506a:	884b      	ldrh	r3, [r1, #2]
 800506c:	0a1a      	lsrs	r2, r3, #8
 800506e:	3a01      	subs	r2, #1
 8005070:	2a06      	cmp	r2, #6
 8005072:	d831      	bhi.n	80050d8 <USBD_StdDevReq+0xbc>
 8005074:	e8df f002 	tbb	[pc, r2]
 8005078:	30231604 	.word	0x30231604
 800507c:	4830      	.short	0x4830
 800507e:	52          	.byte	0x52
 800507f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005080:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005084:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005086:	7c20      	ldrb	r0, [r4, #16]
 8005088:	f10d 0106 	add.w	r1, sp, #6
 800508c:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800508e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8005092:	88eb      	ldrh	r3, [r5, #6]
 8005094:	2a00      	cmp	r2, #0
 8005096:	d055      	beq.n	8005144 <USBD_StdDevReq+0x128>
 8005098:	2b00      	cmp	r3, #0
 800509a:	d14a      	bne.n	8005132 <USBD_StdDevReq+0x116>
        USBD_CtlSendStatus(pdev);
 800509c:	4620      	mov	r0, r4
 800509e:	f000 f9ed 	bl	800547c <USBD_CtlSendStatus>
 80050a2:	e7dc      	b.n	800505e <USBD_StdDevReq+0x42>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050a4:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 80050a6:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050aa:	b932      	cbnz	r2, 80050ba <USBD_StdDevReq+0x9e>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80050ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80050ae:	f10d 0006 	add.w	r0, sp, #6
 80050b2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80050b4:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80050b6:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 80050b8:	e7e9      	b.n	800508e <USBD_StdDevReq+0x72>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80050ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050bc:	e7f7      	b.n	80050ae <USBD_StdDevReq+0x92>
      switch ((uint8_t)(req->wValue))
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b05      	cmp	r3, #5
 80050c2:	d809      	bhi.n	80050d8 <USBD_StdDevReq+0xbc>
 80050c4:	e8df f003 	tbb	[pc, r3]
 80050c8:	14100c03 	.word	0x14100c03
 80050cc:	1c18      	.short	0x1c18
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80050ce:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80050d2:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1d6      	bne.n	8005086 <USBD_StdDevReq+0x6a>
        USBD_CtlError(pdev, req);
 80050d8:	4620      	mov	r0, r4
 80050da:	f7ff ff93 	bl	8005004 <USBD_CtlError.constprop.0>
        break;
 80050de:	e7be      	b.n	800505e <USBD_StdDevReq+0x42>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80050e0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	e7f5      	b.n	80050d4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80050e8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	e7f1      	b.n	80050d4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80050f0:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	e7ed      	b.n	80050d4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80050f8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	e7e9      	b.n	80050d4 <USBD_StdDevReq+0xb8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005100:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	e7e5      	b.n	80050d4 <USBD_StdDevReq+0xb8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005108:	7c03      	ldrb	r3, [r0, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e4      	bne.n	80050d8 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800510e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005112:	f10d 0006 	add.w	r0, sp, #6
 8005116:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005118:	4798      	blx	r3
  if (err != 0U)
 800511a:	e7b8      	b.n	800508e <USBD_StdDevReq+0x72>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800511c:	7c03      	ldrb	r3, [r0, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d1da      	bne.n	80050d8 <USBD_StdDevReq+0xbc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005122:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8005126:	f10d 0006 	add.w	r0, sp, #6
 800512a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800512e:	2307      	movs	r3, #7
 8005130:	e7c1      	b.n	80050b6 <USBD_StdDevReq+0x9a>
      len = MIN(len, req->wLength);
 8005132:	429a      	cmp	r2, r3
 8005134:	bf28      	it	cs
 8005136:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005138:	4601      	mov	r1, r0
 800513a:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 800513c:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005140:	f000 f972 	bl	8005428 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8005144:	88eb      	ldrh	r3, [r5, #6]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d189      	bne.n	800505e <USBD_StdDevReq+0x42>
 800514a:	e7a7      	b.n	800509c <USBD_StdDevReq+0x80>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800514c:	888b      	ldrh	r3, [r1, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1c2      	bne.n	80050d8 <USBD_StdDevReq+0xbc>
 8005152:	88cb      	ldrh	r3, [r1, #6]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1bf      	bne.n	80050d8 <USBD_StdDevReq+0xbc>
 8005158:	884d      	ldrh	r5, [r1, #2]
 800515a:	2d7f      	cmp	r5, #127	@ 0x7f
 800515c:	d8bc      	bhi.n	80050d8 <USBD_StdDevReq+0xbc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800515e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005162:	2b03      	cmp	r3, #3
 8005164:	d0b8      	beq.n	80050d8 <USBD_StdDevReq+0xbc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005166:	b2e9      	uxtb	r1, r5
      pdev->dev_address = dev_addr;
 8005168:	f880 129e 	strb.w	r1, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800516c:	f001 fc7f 	bl	8006a6e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005170:	4620      	mov	r0, r4
 8005172:	f000 f983 	bl	800547c <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8005176:	b11d      	cbz	r5, 8005180 <USBD_StdDevReq+0x164>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005178:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800517a:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 800517e:	e76e      	b.n	800505e <USBD_StdDevReq+0x42>
 8005180:	2301      	movs	r3, #1
 8005182:	e7fa      	b.n	800517a <USBD_StdDevReq+0x15e>
  cfgidx = (uint8_t)(req->wValue);
 8005184:	7889      	ldrb	r1, [r1, #2]
 8005186:	4d38      	ldr	r5, [pc, #224]	@ (8005268 <USBD_StdDevReq+0x24c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005188:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 800518a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800518c:	d8a4      	bhi.n	80050d8 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 800518e:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005192:	2b02      	cmp	r3, #2
 8005194:	d008      	beq.n	80051a8 <USBD_StdDevReq+0x18c>
 8005196:	2b03      	cmp	r3, #3
 8005198:	d015      	beq.n	80051c6 <USBD_StdDevReq+0x1aa>
        USBD_CtlError(pdev, req);
 800519a:	f7ff ff33 	bl	8005004 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 800519e:	4620      	mov	r0, r4
 80051a0:	7829      	ldrb	r1, [r5, #0]
 80051a2:	f7ff fe1e 	bl	8004de2 <USBD_ClrClassConfig>
        break;
 80051a6:	e75a      	b.n	800505e <USBD_StdDevReq+0x42>
        if (cfgidx)
 80051a8:	2900      	cmp	r1, #0
 80051aa:	f43f af77 	beq.w	800509c <USBD_StdDevReq+0x80>
          pdev->dev_config = cfgidx;
 80051ae:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80051b0:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 80051b2:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80051b4:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80051b8:	4620      	mov	r0, r4
 80051ba:	f7ff fe05 	bl	8004dc8 <USBD_SetClassConfig>
 80051be:	2802      	cmp	r0, #2
 80051c0:	f47f af6c 	bne.w	800509c <USBD_StdDevReq+0x80>
 80051c4:	e788      	b.n	80050d8 <USBD_StdDevReq+0xbc>
        if (cfgidx == 0U)
 80051c6:	b931      	cbnz	r1, 80051d6 <USBD_StdDevReq+0x1ba>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80051c8:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 80051ca:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80051cc:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 80051d0:	f7ff fe07 	bl	8004de2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80051d4:	e762      	b.n	800509c <USBD_StdDevReq+0x80>
        else if (cfgidx != pdev->dev_config)
 80051d6:	6841      	ldr	r1, [r0, #4]
 80051d8:	2901      	cmp	r1, #1
 80051da:	f43f af5f 	beq.w	800509c <USBD_StdDevReq+0x80>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80051de:	b2c9      	uxtb	r1, r1
 80051e0:	f7ff fdff 	bl	8004de2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80051e4:	7829      	ldrb	r1, [r5, #0]
 80051e6:	6061      	str	r1, [r4, #4]
 80051e8:	e7e6      	b.n	80051b8 <USBD_StdDevReq+0x19c>
  if (req->wLength != 1U)
 80051ea:	88ca      	ldrh	r2, [r1, #6]
 80051ec:	2a01      	cmp	r2, #1
 80051ee:	f47f af73 	bne.w	80050d8 <USBD_StdDevReq+0xbc>
    switch (pdev->dev_state)
 80051f2:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d80a      	bhi.n	8005210 <USBD_StdDevReq+0x1f4>
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f43f af6c 	beq.w	80050d8 <USBD_StdDevReq+0xbc>
        pdev->dev_default_config = 0U;
 8005200:	4601      	mov	r1, r0
 8005202:	2300      	movs	r3, #0
 8005204:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005208:	4620      	mov	r0, r4
 800520a:	f000 f90d 	bl	8005428 <USBD_CtlSendData>
      break;
 800520e:	e726      	b.n	800505e <USBD_StdDevReq+0x42>
    switch (pdev->dev_state)
 8005210:	2b03      	cmp	r3, #3
 8005212:	f47f af61 	bne.w	80050d8 <USBD_StdDevReq+0xbc>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005216:	1d01      	adds	r1, r0, #4
 8005218:	e7f6      	b.n	8005208 <USBD_StdDevReq+0x1ec>
  switch (pdev->dev_state)
 800521a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 800521e:	3b01      	subs	r3, #1
 8005220:	2b02      	cmp	r3, #2
 8005222:	f63f af59 	bhi.w	80050d8 <USBD_StdDevReq+0xbc>
      if (req->wLength != 0x2U)
 8005226:	88ca      	ldrh	r2, [r1, #6]
 8005228:	2a02      	cmp	r2, #2
 800522a:	f47f af55 	bne.w	80050d8 <USBD_StdDevReq+0xbc>
      if (pdev->dev_remote_wakeup)
 800522e:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8005232:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005234:	2b00      	cmp	r3, #0
 8005236:	bf0c      	ite	eq
 8005238:	2301      	moveq	r3, #1
 800523a:	2303      	movne	r3, #3
 800523c:	f841 3f0c 	str.w	r3, [r1, #12]!
 8005240:	e7e2      	b.n	8005208 <USBD_StdDevReq+0x1ec>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005242:	884b      	ldrh	r3, [r1, #2]
 8005244:	2b01      	cmp	r3, #1
 8005246:	f47f af0a 	bne.w	800505e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 800524a:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 800524e:	e725      	b.n	800509c <USBD_StdDevReq+0x80>
  switch (pdev->dev_state)
 8005250:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8005254:	3b01      	subs	r3, #1
 8005256:	2b02      	cmp	r3, #2
 8005258:	f63f af3e 	bhi.w	80050d8 <USBD_StdDevReq+0xbc>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800525c:	884b      	ldrh	r3, [r1, #2]
 800525e:	2b01      	cmp	r3, #1
 8005260:	f47f aefd 	bne.w	800505e <USBD_StdDevReq+0x42>
        pdev->dev_remote_wakeup = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	e7f0      	b.n	800524a <USBD_StdDevReq+0x22e>
 8005268:	20000909 	.word	0x20000909

0800526c <USBD_StdItfReq>:
{
 800526c:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800526e:	780b      	ldrb	r3, [r1, #0]
{
 8005270:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005272:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8005276:	065b      	lsls	r3, r3, #25
{
 8005278:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800527a:	d501      	bpl.n	8005280 <USBD_StdItfReq+0x14>
 800527c:	2a40      	cmp	r2, #64	@ 0x40
 800527e:	d115      	bne.n	80052ac <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8005280:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8005284:	3b01      	subs	r3, #1
 8005286:	2b02      	cmp	r3, #2
 8005288:	d810      	bhi.n	80052ac <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800528a:	792b      	ldrb	r3, [r5, #4]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d80d      	bhi.n	80052ac <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005290:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8005294:	4629      	mov	r1, r5
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	4620      	mov	r0, r4
 800529a:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 800529c:	88eb      	ldrh	r3, [r5, #6]
 800529e:	b91b      	cbnz	r3, 80052a8 <USBD_StdItfReq+0x3c>
 80052a0:	b910      	cbnz	r0, 80052a8 <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 80052a2:	4620      	mov	r0, r4
 80052a4:	f000 f8ea 	bl	800547c <USBD_CtlSendStatus>
}
 80052a8:	2000      	movs	r0, #0
 80052aa:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 80052ac:	4620      	mov	r0, r4
 80052ae:	f7ff fea9 	bl	8005004 <USBD_CtlError.constprop.0>
          break;
 80052b2:	e7f9      	b.n	80052a8 <USBD_StdItfReq+0x3c>

080052b4 <USBD_StdEPReq>:
{
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	780a      	ldrb	r2, [r1, #0]
 80052b8:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 80052ba:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052be:	2a20      	cmp	r2, #32
{
 80052c0:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 80052c2:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052c4:	d026      	beq.n	8005314 <USBD_StdEPReq+0x60>
 80052c6:	2a40      	cmp	r2, #64	@ 0x40
 80052c8:	d024      	beq.n	8005314 <USBD_StdEPReq+0x60>
 80052ca:	bb8a      	cbnz	r2, 8005330 <USBD_StdEPReq+0x7c>
      switch (req->bRequest)
 80052cc:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80052ce:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 80052d0:	2a01      	cmp	r2, #1
 80052d2:	d03d      	beq.n	8005350 <USBD_StdEPReq+0x9c>
 80052d4:	2a03      	cmp	r2, #3
 80052d6:	d025      	beq.n	8005324 <USBD_StdEPReq+0x70>
 80052d8:	bb52      	cbnz	r2, 8005330 <USBD_StdEPReq+0x7c>
          switch (pdev->dev_state)
 80052da:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d04d      	beq.n	800537e <USBD_StdEPReq+0xca>
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d124      	bne.n	8005330 <USBD_StdEPReq+0x7c>
              if ((ep_addr & 0x80U) == 0x80U)
 80052e6:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80052e8:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80052ec:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80052f0:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 80052f4:	d053      	beq.n	800539e <USBD_StdEPReq+0xea>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80052f6:	699b      	ldr	r3, [r3, #24]
 80052f8:	b1d3      	cbz	r3, 8005330 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80052fa:	2514      	movs	r5, #20
 80052fc:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8005300:	fb03 5505 	mla	r5, r3, r5, r5
 8005304:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005306:	064b      	lsls	r3, r1, #25
 8005308:	d155      	bne.n	80053b6 <USBD_StdEPReq+0x102>
{
 800530a:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800530c:	2202      	movs	r2, #2
 800530e:	4629      	mov	r1, r5
                pep->status = 0x0000U;
 8005310:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005312:	e040      	b.n	8005396 <USBD_StdEPReq+0xe2>
      pdev->pClass->Setup(pdev, req);
 8005314:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 8005318:	4619      	mov	r1, r3
 800531a:	4620      	mov	r0, r4
 800531c:	6892      	ldr	r2, [r2, #8]
 800531e:	4790      	blx	r2
}
 8005320:	2000      	movs	r0, #0
 8005322:	bd38      	pop	{r3, r4, r5, pc}
          switch (pdev->dev_state)
 8005324:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005328:	2a02      	cmp	r2, #2
 800532a:	d01f      	beq.n	800536c <USBD_StdEPReq+0xb8>
 800532c:	2a03      	cmp	r2, #3
 800532e:	d003      	beq.n	8005338 <USBD_StdEPReq+0x84>
              USBD_CtlError(pdev, req);
 8005330:	4620      	mov	r0, r4
 8005332:	f7ff fe67 	bl	8005004 <USBD_CtlError.constprop.0>
              break;
 8005336:	e7f3      	b.n	8005320 <USBD_StdEPReq+0x6c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005338:	885a      	ldrh	r2, [r3, #2]
 800533a:	b92a      	cbnz	r2, 8005348 <USBD_StdEPReq+0x94>
                if ((ep_addr != 0x00U) &&
 800533c:	064a      	lsls	r2, r1, #25
 800533e:	d003      	beq.n	8005348 <USBD_StdEPReq+0x94>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005340:	88db      	ldrh	r3, [r3, #6]
 8005342:	b90b      	cbnz	r3, 8005348 <USBD_StdEPReq+0x94>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005344:	f001 fb70 	bl	8006a28 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8005348:	4620      	mov	r0, r4
 800534a:	f000 f897 	bl	800547c <USBD_CtlSendStatus>
              break;
 800534e:	e7e7      	b.n	8005320 <USBD_StdEPReq+0x6c>
          switch (pdev->dev_state)
 8005350:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8005354:	2a02      	cmp	r2, #2
 8005356:	d009      	beq.n	800536c <USBD_StdEPReq+0xb8>
 8005358:	2a03      	cmp	r2, #3
 800535a:	d1e9      	bne.n	8005330 <USBD_StdEPReq+0x7c>
              if (req->wValue == USB_FEATURE_EP_HALT)
 800535c:	885b      	ldrh	r3, [r3, #2]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1de      	bne.n	8005320 <USBD_StdEPReq+0x6c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005362:	064d      	lsls	r5, r1, #25
 8005364:	d0f0      	beq.n	8005348 <USBD_StdEPReq+0x94>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005366:	f001 fb68 	bl	8006a3a <USBD_LL_ClearStallEP>
 800536a:	e7ed      	b.n	8005348 <USBD_StdEPReq+0x94>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800536c:	064b      	lsls	r3, r1, #25
 800536e:	d0df      	beq.n	8005330 <USBD_StdEPReq+0x7c>
                USBD_LL_StallEP(pdev, ep_addr);
 8005370:	f001 fb5a 	bl	8006a28 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005374:	2180      	movs	r1, #128	@ 0x80
 8005376:	4620      	mov	r0, r4
 8005378:	f001 fb56 	bl	8006a28 <USBD_LL_StallEP>
 800537c:	e7d0      	b.n	8005320 <USBD_StdEPReq+0x6c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800537e:	0649      	lsls	r1, r1, #25
 8005380:	d1d6      	bne.n	8005330 <USBD_StdEPReq+0x7c>
              pep->status = 0x0000U;
 8005382:	2300      	movs	r3, #0
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005384:	062a      	lsls	r2, r5, #24
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005386:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800538a:	bf4c      	ite	mi
 800538c:	f100 0114 	addmi.w	r1, r0, #20
 8005390:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 8005394:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005396:	4620      	mov	r0, r4
 8005398:	f000 f846 	bl	8005428 <USBD_CtlSendData>
              break;
 800539c:	e7c0      	b.n	8005320 <USBD_StdEPReq+0x6c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800539e:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0c4      	beq.n	8005330 <USBD_StdEPReq+0x7c>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053a6:	2314      	movs	r3, #20
                    &pdev->ep_out[ep_addr & 0x7FU];
 80053a8:	f001 057f 	and.w	r5, r1, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053ac:	fb03 0505 	mla	r5, r3, r5, r0
 80053b0:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
 80053b4:	e7a7      	b.n	8005306 <USBD_StdEPReq+0x52>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80053b6:	4620      	mov	r0, r4
 80053b8:	f001 fb48 	bl	8006a4c <USBD_LL_IsStallEP>
 80053bc:	2800      	cmp	r0, #0
 80053be:	d0a4      	beq.n	800530a <USBD_StdEPReq+0x56>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e7a3      	b.n	800530c <USBD_StdEPReq+0x58>

080053c4 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 80053c4:	780b      	ldrb	r3, [r1, #0]
 80053c6:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80053c8:	784b      	ldrb	r3, [r1, #1]
 80053ca:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80053cc:	884b      	ldrh	r3, [r1, #2]
 80053ce:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80053d0:	888b      	ldrh	r3, [r1, #4]
 80053d2:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80053d4:	88cb      	ldrh	r3, [r1, #6]
 80053d6:	80c3      	strh	r3, [r0, #6]
}
 80053d8:	4770      	bx	lr

080053da <USBD_CtlError>:
{
 80053da:	b510      	push	{r4, lr}
 80053dc:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 80053de:	2180      	movs	r1, #128	@ 0x80
 80053e0:	f001 fb22 	bl	8006a28 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80053e4:	4620      	mov	r0, r4
}
 80053e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 80053ea:	2100      	movs	r1, #0
 80053ec:	f001 bb1c 	b.w	8006a28 <USBD_LL_StallEP>

080053f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80053f0:	b570      	push	{r4, r5, r6, lr}
 80053f2:	460d      	mov	r5, r1
 80053f4:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 80053f6:	4604      	mov	r4, r0
 80053f8:	b170      	cbz	r0, 8005418 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 80053fa:	f7fa fea9 	bl	8000150 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80053fe:	b2c3      	uxtb	r3, r0
 8005400:	3301      	adds	r3, #1
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005406:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005408:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 800540a:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800540c:	706b      	strb	r3, [r5, #1]
 800540e:	2302      	movs	r3, #2
 8005410:	3c01      	subs	r4, #1
    while (*desc != '\0')
 8005412:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8005416:	b901      	cbnz	r1, 800541a <USBD_GetString+0x2a>
}
 8005418:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 800541a:	1c5a      	adds	r2, r3, #1
 800541c:	54e9      	strb	r1, [r5, r3]
 800541e:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8005420:	3302      	adds	r3, #2
 8005422:	b2db      	uxtb	r3, r3
 8005424:	54a8      	strb	r0, [r5, r2]
 8005426:	e7f4      	b.n	8005412 <USBD_GetString+0x22>

08005428 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005428:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800542a:	2202      	movs	r2, #2
{
 800542c:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 800542e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005432:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005436:	460a      	mov	r2, r1
 8005438:	2100      	movs	r1, #0
 800543a:	f001 fb21 	bl	8006a80 <USBD_LL_Transmit>

  return USBD_OK;
}
 800543e:	2000      	movs	r0, #0
 8005440:	bd10      	pop	{r4, pc}

08005442 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005442:	b508      	push	{r3, lr}
 8005444:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005446:	460a      	mov	r2, r1
 8005448:	2100      	movs	r1, #0
 800544a:	f001 fb19 	bl	8006a80 <USBD_LL_Transmit>

  return USBD_OK;
}
 800544e:	2000      	movs	r0, #0
 8005450:	bd08      	pop	{r3, pc}

08005452 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005452:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005454:	2203      	movs	r2, #3
{
 8005456:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8005458:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800545c:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005460:	460a      	mov	r2, r1
 8005462:	2100      	movs	r1, #0
 8005464:	f001 fb15 	bl	8006a92 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005468:	2000      	movs	r0, #0
 800546a:	bd10      	pop	{r4, pc}

0800546c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800546c:	b508      	push	{r3, lr}
 800546e:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005470:	460a      	mov	r2, r1
 8005472:	2100      	movs	r1, #0
 8005474:	f001 fb0d 	bl	8006a92 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005478:	2000      	movs	r0, #0
 800547a:	bd08      	pop	{r3, pc}

0800547c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800547c:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800547e:	2304      	movs	r3, #4
 8005480:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005484:	2300      	movs	r3, #0
 8005486:	461a      	mov	r2, r3
 8005488:	4619      	mov	r1, r3
 800548a:	f001 faf9 	bl	8006a80 <USBD_LL_Transmit>

  return USBD_OK;
}
 800548e:	2000      	movs	r0, #0
 8005490:	bd08      	pop	{r3, pc}

08005492 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005492:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005494:	2305      	movs	r3, #5
 8005496:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800549a:	2300      	movs	r3, #0
 800549c:	461a      	mov	r2, r3
 800549e:	4619      	mov	r1, r3
 80054a0:	f001 faf7 	bl	8006a92 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80054a4:	2000      	movs	r0, #0
 80054a6:	bd08      	pop	{r3, pc}

080054a8 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80054a8:	4b03      	ldr	r3, [pc, #12]	@ (80054b8 <disk_status+0x10>)
 80054aa:	181a      	adds	r2, r3, r0
 80054ac:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	7a10      	ldrb	r0, [r2, #8]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4718      	bx	r3
 80054b8:	2000092c 	.word	0x2000092c

080054bc <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 80054bc:	4b06      	ldr	r3, [pc, #24]	@ (80054d8 <disk_initialize+0x1c>)
 80054be:	5c1a      	ldrb	r2, [r3, r0]
 80054c0:	b942      	cbnz	r2, 80054d4 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 80054c2:	2201      	movs	r2, #1
 80054c4:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80054c6:	181a      	adds	r2, r3, r0
 80054c8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	7a10      	ldrb	r0, [r2, #8]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4718      	bx	r3
  }
  return stat;
}
 80054d4:	2000      	movs	r0, #0
 80054d6:	4770      	bx	lr
 80054d8:	2000092c 	.word	0x2000092c

080054dc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80054dc:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80054de:	4c05      	ldr	r4, [pc, #20]	@ (80054f4 <disk_read+0x18>)
 80054e0:	1825      	adds	r5, r4, r0
 80054e2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 80054e6:	6860      	ldr	r0, [r4, #4]
 80054e8:	6884      	ldr	r4, [r0, #8]
 80054ea:	7a28      	ldrb	r0, [r5, #8]
 80054ec:	46a4      	mov	ip, r4
  return res;
}
 80054ee:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80054f0:	4760      	bx	ip
 80054f2:	bf00      	nop
 80054f4:	2000092c 	.word	0x2000092c

080054f8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80054f8:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80054fa:	4c05      	ldr	r4, [pc, #20]	@ (8005510 <disk_write+0x18>)
 80054fc:	1825      	adds	r5, r4, r0
 80054fe:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8005502:	6860      	ldr	r0, [r4, #4]
 8005504:	68c4      	ldr	r4, [r0, #12]
 8005506:	7a28      	ldrb	r0, [r5, #8]
 8005508:	46a4      	mov	ip, r4
  return res;
}
 800550a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800550c:	4760      	bx	ip
 800550e:	bf00      	nop
 8005510:	2000092c 	.word	0x2000092c

08005514 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005514:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005516:	4b04      	ldr	r3, [pc, #16]	@ (8005528 <disk_ioctl+0x14>)
 8005518:	181c      	adds	r4, r3, r0
 800551a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	7a20      	ldrb	r0, [r4, #8]
 8005522:	691b      	ldr	r3, [r3, #16]
  return res;
}
 8005524:	bc10      	pop	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005526:	4718      	bx	r3
 8005528:	2000092c 	.word	0x2000092c

0800552c <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 800552c:	3801      	subs	r0, #1
 800552e:	440a      	add	r2, r1
		*d++ = *s++;
 8005530:	f811 3b01 	ldrb.w	r3, [r1], #1
	while (cnt--)
 8005534:	4291      	cmp	r1, r2
		*d++ = *s++;
 8005536:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (cnt--)
 800553a:	d1f9      	bne.n	8005530 <mem_cpy+0x4>
}
 800553c:	4770      	bx	lr

0800553e <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 800553e:	4402      	add	r2, r0
		*d++ = (BYTE)val;
 8005540:	f800 1b01 	strb.w	r1, [r0], #1
	while (cnt--)
 8005544:	4290      	cmp	r0, r2
 8005546:	d1fb      	bne.n	8005540 <mem_set+0x2>
}
 8005548:	4770      	bx	lr
	...

0800554c <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 800554c:	4b1e      	ldr	r3, [pc, #120]	@ (80055c8 <chk_lock+0x7c>)
{
 800554e:	4602      	mov	r2, r0
		if (Files[i].fs) {	/* Existing entry */
 8005550:	6818      	ldr	r0, [r3, #0]
{
 8005552:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 8005554:	b178      	cbz	r0, 8005576 <chk_lock+0x2a>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005556:	f8d2 4200 	ldr.w	r4, [r2, #512]	@ 0x200
 800555a:	42a0      	cmp	r0, r4
 800555c:	d109      	bne.n	8005572 <chk_lock+0x26>
 800555e:	685c      	ldr	r4, [r3, #4]
 8005560:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8005564:	4284      	cmp	r4, r0
 8005566:	d104      	bne.n	8005572 <chk_lock+0x26>
				Files[i].clu == dp->sclust &&
 8005568:	891c      	ldrh	r4, [r3, #8]
 800556a:	f8b2 0206 	ldrh.w	r0, [r2, #518]	@ 0x206
 800556e:	4284      	cmp	r4, r0
 8005570:	d015      	beq.n	800559e <chk_lock+0x52>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005572:	2400      	movs	r4, #0
 8005574:	e000      	b.n	8005578 <chk_lock+0x2c>
				Files[i].idx == dp->index) break;
		} else {			/* Blank entry */
			be = 1;
 8005576:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 8005578:	68d8      	ldr	r0, [r3, #12]
 800557a:	b1d0      	cbz	r0, 80055b2 <chk_lock+0x66>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 800557c:	f8d2 5200 	ldr.w	r5, [r2, #512]	@ 0x200
 8005580:	42a8      	cmp	r0, r5
 8005582:	d109      	bne.n	8005598 <chk_lock+0x4c>
 8005584:	691d      	ldr	r5, [r3, #16]
 8005586:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800558a:	4285      	cmp	r5, r0
 800558c:	d104      	bne.n	8005598 <chk_lock+0x4c>
				Files[i].clu == dp->sclust &&
 800558e:	8a98      	ldrh	r0, [r3, #20]
 8005590:	f8b2 2206 	ldrh.w	r2, [r2, #518]	@ 0x206
 8005594:	4290      	cmp	r0, r2
 8005596:	d006      	beq.n	80055a6 <chk_lock+0x5a>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005598:	b13c      	cbz	r4, 80055aa <chk_lock+0x5e>
 800559a:	2000      	movs	r0, #0
 800559c:	e009      	b.n	80055b2 <chk_lock+0x66>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800559e:	2200      	movs	r2, #0

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80055a0:	b141      	cbz	r1, 80055b4 <chk_lock+0x68>
 80055a2:	2010      	movs	r0, #16
 80055a4:	e005      	b.n	80055b2 <chk_lock+0x66>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80055a6:	2201      	movs	r2, #1
 80055a8:	e7fa      	b.n	80055a0 <chk_lock+0x54>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80055aa:	2902      	cmp	r1, #2
 80055ac:	bf14      	ite	ne
 80055ae:	2012      	movne	r0, #18
 80055b0:	2000      	moveq	r0, #0
}
 80055b2:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80055b4:	210c      	movs	r1, #12
 80055b6:	fb01 3302 	mla	r3, r1, r2, r3
 80055ba:	8958      	ldrh	r0, [r3, #10]
 80055bc:	f5a0 7380 	sub.w	r3, r0, #256	@ 0x100
 80055c0:	4258      	negs	r0, r3
 80055c2:	4158      	adcs	r0, r3
 80055c4:	0100      	lsls	r0, r0, #4
 80055c6:	e7f4      	b.n	80055b2 <chk_lock+0x66>
 80055c8:	2000090c 	.word	0x2000090c

080055cc <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 80055cc:	4a24      	ldr	r2, [pc, #144]	@ (8005660 <inc_lock+0x94>)
{
 80055ce:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->fs &&
 80055d0:	6813      	ldr	r3, [r2, #0]
 80055d2:	f8d0 6200 	ldr.w	r6, [r0, #512]	@ 0x200
 80055d6:	429e      	cmp	r6, r3
 80055d8:	d109      	bne.n	80055ee <inc_lock+0x22>
 80055da:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
 80055de:	6854      	ldr	r4, [r2, #4]
 80055e0:	42a5      	cmp	r5, r4
 80055e2:	d104      	bne.n	80055ee <inc_lock+0x22>
			Files[i].clu == dp->sclust &&
 80055e4:	8915      	ldrh	r5, [r2, #8]
 80055e6:	f8b0 4206 	ldrh.w	r4, [r0, #518]	@ 0x206
 80055ea:	42a5      	cmp	r5, r4
 80055ec:	d01e      	beq.n	800562c <inc_lock+0x60>
		if (Files[i].fs == dp->fs &&
 80055ee:	68d4      	ldr	r4, [r2, #12]
 80055f0:	42b4      	cmp	r4, r6
 80055f2:	d11d      	bne.n	8005630 <inc_lock+0x64>
 80055f4:	6917      	ldr	r7, [r2, #16]
 80055f6:	f8d0 5208 	ldr.w	r5, [r0, #520]	@ 0x208
 80055fa:	42af      	cmp	r7, r5
 80055fc:	d118      	bne.n	8005630 <inc_lock+0x64>
			Files[i].clu == dp->sclust &&
 80055fe:	8a97      	ldrh	r7, [r2, #20]
 8005600:	f8b0 5206 	ldrh.w	r5, [r0, #518]	@ 0x206
 8005604:	42af      	cmp	r7, r5
 8005606:	d113      	bne.n	8005630 <inc_lock+0x64>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005608:	2301      	movs	r3, #1
		Files[i].clu = dp->sclust;
		Files[i].idx = dp->index;
		Files[i].ctr = 0;
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800560a:	200c      	movs	r0, #12
 800560c:	fb00 2003 	mla	r0, r0, r3, r2
 8005610:	8940      	ldrh	r0, [r0, #10]
 8005612:	bb09      	cbnz	r1, 8005658 <inc_lock+0x8c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005614:	210c      	movs	r1, #12
 8005616:	fb01 2103 	mla	r1, r1, r3, r2
 800561a:	8949      	ldrh	r1, [r1, #10]
 800561c:	3101      	adds	r1, #1
 800561e:	b289      	uxth	r1, r1
 8005620:	200c      	movs	r0, #12
 8005622:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 8005626:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005628:	8151      	strh	r1, [r2, #10]
}
 800562a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800562c:	2300      	movs	r3, #0
 800562e:	e7ec      	b.n	800560a <inc_lock+0x3e>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005630:	b10b      	cbz	r3, 8005636 <inc_lock+0x6a>
 8005632:	b99c      	cbnz	r4, 800565c <inc_lock+0x90>
 8005634:	2301      	movs	r3, #1
		Files[i].fs = dp->fs;
 8005636:	240c      	movs	r4, #12
 8005638:	435c      	muls	r4, r3
 800563a:	1915      	adds	r5, r2, r4
 800563c:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 800563e:	f8d0 4208 	ldr.w	r4, [r0, #520]	@ 0x208
		Files[i].idx = dp->index;
 8005642:	f8b0 0206 	ldrh.w	r0, [r0, #518]	@ 0x206
		Files[i].clu = dp->sclust;
 8005646:	606c      	str	r4, [r5, #4]
		Files[i].idx = dp->index;
 8005648:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 800564a:	2000      	movs	r0, #0
 800564c:	8168      	strh	r0, [r5, #10]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800564e:	2900      	cmp	r1, #0
 8005650:	d0e0      	beq.n	8005614 <inc_lock+0x48>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005652:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005656:	e7e3      	b.n	8005620 <inc_lock+0x54>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005658:	2800      	cmp	r0, #0
 800565a:	d0fa      	beq.n	8005652 <inc_lock+0x86>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800565c:	2000      	movs	r0, #0
 800565e:	e7e4      	b.n	800562a <inc_lock+0x5e>
 8005660:	2000090c 	.word	0x2000090c

08005664 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005664:	3801      	subs	r0, #1
 8005666:	2801      	cmp	r0, #1
 8005668:	d817      	bhi.n	800569a <dec_lock+0x36>
		n = Files[i].ctr;
 800566a:	220c      	movs	r2, #12
 800566c:	490c      	ldr	r1, [pc, #48]	@ (80056a0 <dec_lock+0x3c>)
 800566e:	fb02 1200 	mla	r2, r2, r0, r1
 8005672:	8953      	ldrh	r3, [r2, #10]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005674:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005678:	d106      	bne.n	8005688 <dec_lock+0x24>
		if (n) n--;					/* Decrement read mode open count */
		Files[i].ctr = n;
 800567a:	2300      	movs	r3, #0
 800567c:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800567e:	230c      	movs	r3, #12
 8005680:	4358      	muls	r0, r3
 8005682:	2300      	movs	r3, #0
 8005684:	500b      	str	r3, [r1, r0]
 8005686:	e006      	b.n	8005696 <dec_lock+0x32>
		if (n) n--;					/* Decrement read mode open count */
 8005688:	2b00      	cmp	r3, #0
 800568a:	d0f8      	beq.n	800567e <dec_lock+0x1a>
 800568c:	3b01      	subs	r3, #1
 800568e:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 8005690:	8153      	strh	r3, [r2, #10]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f3      	beq.n	800567e <dec_lock+0x1a>
		res = FR_OK;
 8005696:	2000      	movs	r0, #0
 8005698:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800569a:	2002      	movs	r0, #2
	}
	return res;
}
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	2000090c 	.word	0x2000090c

080056a4 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 80056a4:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <clear_lock+0x18>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4290      	cmp	r0, r2
 80056aa:	bf04      	itt	eq
 80056ac:	2200      	moveq	r2, #0
 80056ae:	601a      	streq	r2, [r3, #0]
 80056b0:	68da      	ldr	r2, [r3, #12]
 80056b2:	4290      	cmp	r0, r2
 80056b4:	bf04      	itt	eq
 80056b6:	2200      	moveq	r2, #0
 80056b8:	60da      	streq	r2, [r3, #12]
	}
}
 80056ba:	4770      	bx	lr
 80056bc:	2000090c 	.word	0x2000090c

080056c0 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80056c0:	f8d0 2200 	ldr.w	r2, [r0, #512]	@ 0x200
 80056c4:	0a49      	lsrs	r1, r1, #9
 80056c6:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80056ca:	f8d0 3224 	ldr.w	r3, [r0, #548]	@ 0x224
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80056ce:	fbb1 f1f2 	udiv	r1, r1, r2
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80056d2:	3304      	adds	r3, #4
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80056d4:	6818      	ldr	r0, [r3, #0]
		if (!ncl) return 0;		/* End of table? (error) */
 80056d6:	b130      	cbz	r0, 80056e6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80056d8:	4281      	cmp	r1, r0
 80056da:	d302      	bcc.n	80056e2 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 80056dc:	1a09      	subs	r1, r1, r0
 80056de:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80056e0:	e7f8      	b.n	80056d4 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 80056e2:	6858      	ldr	r0, [r3, #4]
 80056e4:	4408      	add	r0, r1
}
 80056e6:	4770      	bx	lr

080056e8 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80056e8:	6803      	ldr	r3, [r0, #0]
{
 80056ea:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 80056ec:	b153      	cbz	r3, 8005704 <get_ldnumber+0x1c>
 80056ee:	4619      	mov	r1, r3
 80056f0:	460a      	mov	r2, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80056f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056f6:	2c20      	cmp	r4, #32
 80056f8:	d90c      	bls.n	8005714 <get_ldnumber+0x2c>
 80056fa:	2c3a      	cmp	r4, #58	@ 0x3a
 80056fc:	d1f8      	bne.n	80056f0 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80056fe:	7819      	ldrb	r1, [r3, #0]
 8005700:	2930      	cmp	r1, #48	@ 0x30
 8005702:	d002      	beq.n	800570a <get_ldnumber+0x22>
	int vol = -1;
 8005704:	f04f 30ff 	mov.w	r0, #4294967295
 8005708:	e005      	b.n	8005716 <get_ldnumber+0x2e>
			i = *tp++ - '0'; 
 800570a:	3301      	adds	r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800570c:	429a      	cmp	r2, r3
 800570e:	d1f9      	bne.n	8005704 <get_ldnumber+0x1c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
					vol = (int)i;
					*path = ++tt;
 8005710:	3201      	adds	r2, #1
 8005712:	6002      	str	r2, [r0, #0]
					vol = (int)i;
 8005714:	2000      	movs	r0, #0
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8005716:	bd10      	pop	{r4, pc}

08005718 <sync_window>:
{
 8005718:	b570      	push	{r4, r5, r6, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800571a:	f890 3204 	ldrb.w	r3, [r0, #516]	@ 0x204
{
 800571e:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005720:	b90b      	cbnz	r3, 8005726 <sync_window+0xe>
	FRESULT res = FR_OK;
 8005722:	2000      	movs	r0, #0
}
 8005724:	bd70      	pop	{r4, r5, r6, pc}
		wsect = fs->winsect;	/* Current sector number */
 8005726:	f8d0 522c 	ldr.w	r5, [r0, #556]	@ 0x22c
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800572a:	4601      	mov	r1, r0
 800572c:	2301      	movs	r3, #1
 800572e:	462a      	mov	r2, r5
 8005730:	f890 0201 	ldrb.w	r0, [r0, #513]	@ 0x201
 8005734:	f7ff fee0 	bl	80054f8 <disk_write>
 8005738:	b9c0      	cbnz	r0, 800576c <sync_window+0x54>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800573a:	f8d4 3220 	ldr.w	r3, [r4, #544]	@ 0x220
 800573e:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 8005742:	1aeb      	subs	r3, r5, r3
 8005744:	4293      	cmp	r3, r2
			fs->wflag = 0;
 8005746:	f884 0204 	strb.w	r0, [r4, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800574a:	d2ea      	bcs.n	8005722 <sync_window+0xa>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800574c:	f894 6203 	ldrb.w	r6, [r4, #515]	@ 0x203
 8005750:	2e01      	cmp	r6, #1
 8005752:	d9e6      	bls.n	8005722 <sync_window+0xa>
					wsect += fs->fsize;
 8005754:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005758:	4621      	mov	r1, r4
					wsect += fs->fsize;
 800575a:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800575c:	462a      	mov	r2, r5
 800575e:	2301      	movs	r3, #1
 8005760:	f894 0201 	ldrb.w	r0, [r4, #513]	@ 0x201
 8005764:	f7ff fec8 	bl	80054f8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005768:	3e01      	subs	r6, #1
 800576a:	e7f1      	b.n	8005750 <sync_window+0x38>
			res = FR_DISK_ERR;
 800576c:	2001      	movs	r0, #1
 800576e:	e7d9      	b.n	8005724 <sync_window+0xc>

08005770 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8005770:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8005772:	b190      	cbz	r0, 800579a <validate+0x2a>
 8005774:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8005778:	b17b      	cbz	r3, 800579a <validate+0x2a>
 800577a:	f893 2200 	ldrb.w	r2, [r3, #512]	@ 0x200
 800577e:	b162      	cbz	r2, 800579a <validate+0x2a>
 8005780:	f8b3 1206 	ldrh.w	r1, [r3, #518]	@ 0x206
 8005784:	f8b0 2204 	ldrh.w	r2, [r0, #516]	@ 0x204
 8005788:	4291      	cmp	r1, r2
 800578a:	d106      	bne.n	800579a <validate+0x2a>
 800578c:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8005790:	f7ff fe8a 	bl	80054a8 <disk_status>
 8005794:	f010 0001 	ands.w	r0, r0, #1
 8005798:	d000      	beq.n	800579c <validate+0x2c>
		return FR_INVALID_OBJECT;
 800579a:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 800579c:	bd08      	pop	{r3, pc}

0800579e <move_window>:
{
 800579e:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 80057a0:	f8d0 322c 	ldr.w	r3, [r0, #556]	@ 0x22c
{
 80057a4:	4605      	mov	r5, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 80057a6:	428b      	cmp	r3, r1
{
 80057a8:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 80057aa:	d011      	beq.n	80057d0 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 80057ac:	f7ff ffb4 	bl	8005718 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 80057b0:	b968      	cbnz	r0, 80057ce <move_window+0x30>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80057b2:	4622      	mov	r2, r4
 80057b4:	2301      	movs	r3, #1
 80057b6:	4629      	mov	r1, r5
 80057b8:	f895 0201 	ldrb.w	r0, [r5, #513]	@ 0x201
 80057bc:	f7ff fe8e 	bl	80054dc <disk_read>
				res = FR_DISK_ERR;
 80057c0:	2800      	cmp	r0, #0
 80057c2:	bf1c      	itt	ne
 80057c4:	f04f 34ff 	movne.w	r4, #4294967295
 80057c8:	2001      	movne	r0, #1
			fs->winsect = sector;
 80057ca:	f8c5 422c 	str.w	r4, [r5, #556]	@ 0x22c
}
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 80057d0:	2000      	movs	r0, #0
 80057d2:	e7fc      	b.n	80057ce <move_window+0x30>

080057d4 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80057d4:	2300      	movs	r3, #0
{
 80057d6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80057d8:	f880 3204 	strb.w	r3, [r0, #516]	@ 0x204
 80057dc:	f04f 33ff 	mov.w	r3, #4294967295
 80057e0:	f8c0 322c 	str.w	r3, [r0, #556]	@ 0x22c
{
 80057e4:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80057e6:	f7ff ffda 	bl	800579e <move_window>
 80057ea:	b9a0      	cbnz	r0, 8005816 <check_fs+0x42>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80057ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80057f0:	f8b4 21fe 	ldrh.w	r2, [r4, #510]	@ 0x1fe
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d110      	bne.n	800581a <check_fs+0x46>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80057f8:	f8d4 3036 	ldr.w	r3, [r4, #54]	@ 0x36
 80057fc:	4a08      	ldr	r2, [pc, #32]	@ (8005820 <check_fs+0x4c>)
 80057fe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005802:	4293      	cmp	r3, r2
 8005804:	d006      	beq.n	8005814 <check_fs+0x40>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8005806:	f8d4 0052 	ldr.w	r0, [r4, #82]	@ 0x52
 800580a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800580e:	1a80      	subs	r0, r0, r2
 8005810:	bf18      	it	ne
 8005812:	2001      	movne	r0, #1
}
 8005814:	bd10      	pop	{r4, pc}
		return 3;
 8005816:	2003      	movs	r0, #3
 8005818:	e7fc      	b.n	8005814 <check_fs+0x40>
		return 2;
 800581a:	2002      	movs	r0, #2
 800581c:	e7fa      	b.n	8005814 <check_fs+0x40>
 800581e:	bf00      	nop
 8005820:	00544146 	.word	0x00544146

08005824 <find_volume>:
	*rfs = 0;
 8005824:	2300      	movs	r3, #0
{
 8005826:	b5f0      	push	{r4, r5, r6, r7, lr}
	*rfs = 0;
 8005828:	6003      	str	r3, [r0, #0]
{
 800582a:	4607      	mov	r7, r0
 800582c:	b085      	sub	sp, #20
	vol = get_ldnumber(path);
 800582e:	4608      	mov	r0, r1
{
 8005830:	4616      	mov	r6, r2
	vol = get_ldnumber(path);
 8005832:	f7ff ff59 	bl	80056e8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005836:	1e05      	subs	r5, r0, #0
 8005838:	f2c0 8101 	blt.w	8005a3e <find_volume+0x21a>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800583c:	4b83      	ldr	r3, [pc, #524]	@ (8005a4c <find_volume+0x228>)
 800583e:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005842:	2c00      	cmp	r4, #0
 8005844:	f000 80fd 	beq.w	8005a42 <find_volume+0x21e>
	*rfs = fs;							/* Return pointer to the file system object */
 8005848:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800584a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800584e:	b16b      	cbz	r3, 800586c <find_volume+0x48>
		stat = disk_status(fs->drv);
 8005850:	f894 0201 	ldrb.w	r0, [r4, #513]	@ 0x201
 8005854:	f7ff fe28 	bl	80054a8 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005858:	07c7      	lsls	r7, r0, #31
 800585a:	d407      	bmi.n	800586c <find_volume+0x48>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800585c:	b10e      	cbz	r6, 8005862 <find_volume+0x3e>
 800585e:	0741      	lsls	r1, r0, #29
 8005860:	d402      	bmi.n	8005868 <find_volume+0x44>
			return FR_OK;				/* The file system object is valid */
 8005862:	2000      	movs	r0, #0
}
 8005864:	b005      	add	sp, #20
 8005866:	bdf0      	pop	{r4, r5, r6, r7, pc}
				return FR_WRITE_PROTECTED;
 8005868:	200a      	movs	r0, #10
 800586a:	e7fb      	b.n	8005864 <find_volume+0x40>
	fs->fs_type = 0;					/* Clear the file system object */
 800586c:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800586e:	b2e8      	uxtb	r0, r5
	fs->fs_type = 0;					/* Clear the file system object */
 8005870:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005874:	f884 0201 	strb.w	r0, [r4, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005878:	f7ff fe20 	bl	80054bc <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800587c:	07c2      	lsls	r2, r0, #31
 800587e:	f100 80e2 	bmi.w	8005a46 <find_volume+0x222>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005882:	b10e      	cbz	r6, 8005888 <find_volume+0x64>
 8005884:	0743      	lsls	r3, r0, #29
 8005886:	d4ef      	bmi.n	8005868 <find_volume+0x44>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005888:	2100      	movs	r1, #0
 800588a:	4620      	mov	r0, r4
 800588c:	f7ff ffa2 	bl	80057d4 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005890:	2801      	cmp	r0, #1
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8005892:	4605      	mov	r5, r0
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8005894:	f040 80bb 	bne.w	8005a0e <find_volume+0x1ea>
 8005898:	466f      	mov	r7, sp
 800589a:	4639      	mov	r1, r7
 800589c:	f504 73df 	add.w	r3, r4, #446	@ 0x1be
 80058a0:	f504 70ff 	add.w	r0, r4, #510	@ 0x1fe
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80058a4:	791a      	ldrb	r2, [r3, #4]
 80058a6:	b102      	cbz	r2, 80058aa <find_volume+0x86>
 80058a8:	689a      	ldr	r2, [r3, #8]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80058aa:	3310      	adds	r3, #16
 80058ac:	4298      	cmp	r0, r3
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 80058ae:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80058b2:	d1f7      	bne.n	80058a4 <find_volume+0x80>
 80058b4:	2600      	movs	r6, #0
			bsect = br[i];
 80058b6:	f857 5b04 	ldr.w	r5, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80058ba:	2d00      	cmp	r5, #0
 80058bc:	f000 809e 	beq.w	80059fc <find_volume+0x1d8>
 80058c0:	4629      	mov	r1, r5
 80058c2:	4620      	mov	r0, r4
 80058c4:	f7ff ff86 	bl	80057d4 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80058c8:	2800      	cmp	r0, #0
 80058ca:	f040 8098 	bne.w	80059fe <find_volume+0x1da>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80058ce:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 80058d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058d6:	f040 809f 	bne.w	8005a18 <find_volume+0x1f4>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 80058da:	8ae0      	ldrh	r0, [r4, #22]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 80058dc:	b900      	cbnz	r0, 80058e0 <find_volume+0xbc>
 80058de:	6a60      	ldr	r0, [r4, #36]	@ 0x24
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80058e0:	7c27      	ldrb	r7, [r4, #16]
	fs->fsize = fasize;
 80058e2:	f8c4 0218 	str.w	r0, [r4, #536]	@ 0x218
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80058e6:	1e7b      	subs	r3, r7, #1
 80058e8:	2b01      	cmp	r3, #1
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 80058ea:	f884 7203 	strb.w	r7, [r4, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 80058ee:	f200 8093 	bhi.w	8005a18 <find_volume+0x1f4>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 80058f2:	f894 c00d 	ldrb.w	ip, [r4, #13]
 80058f6:	f884 c202 	strb.w	ip, [r4, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80058fa:	f1bc 0f00 	cmp.w	ip, #0
 80058fe:	f000 808b 	beq.w	8005a18 <find_volume+0x1f4>
 8005902:	f10c 33ff 	add.w	r3, ip, #4294967295
 8005906:	ea13 0f0c 	tst.w	r3, ip
 800590a:	f040 8085 	bne.w	8005a18 <find_volume+0x1f4>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800590e:	f8b4 e011 	ldrh.w	lr, [r4, #17]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8005912:	f01e 0f0f 	tst.w	lr, #15
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8005916:	f8a4 e208 	strh.w	lr, [r4, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800591a:	d17d      	bne.n	8005a18 <find_volume+0x1f4>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800591c:	f8b4 6013 	ldrh.w	r6, [r4, #19]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8005920:	b906      	cbnz	r6, 8005924 <find_volume+0x100>
 8005922:	6a26      	ldr	r6, [r4, #32]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005924:	89e2      	ldrh	r2, [r4, #14]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8005926:	2a00      	cmp	r2, #0
 8005928:	d076      	beq.n	8005a18 <find_volume+0x1f4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800592a:	4347      	muls	r7, r0
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800592c:	eb02 111e 	add.w	r1, r2, lr, lsr #4
 8005930:	4439      	add	r1, r7
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005932:	428e      	cmp	r6, r1
 8005934:	d370      	bcc.n	8005a18 <find_volume+0x1f4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005936:	1a76      	subs	r6, r6, r1
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8005938:	4566      	cmp	r6, ip
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800593a:	fbb6 f3fc 	udiv	r3, r6, ip
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800593e:	d36b      	bcc.n	8005a18 <find_volume+0x1f4>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8005940:	f640 76f5 	movw	r6, #4085	@ 0xff5
 8005944:	42b3      	cmp	r3, r6
 8005946:	d969      	bls.n	8005a1c <find_volume+0x1f8>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8005948:	f64f 76f5 	movw	r6, #65525	@ 0xfff5
 800594c:	42b3      	cmp	r3, r6
 800594e:	bf94      	ite	ls
 8005950:	2602      	movls	r6, #2
 8005952:	2603      	movhi	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8005954:	3302      	adds	r3, #2
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005956:	442a      	add	r2, r5
	fs->database = bsect + sysect;						/* Data start sector */
 8005958:	4429      	add	r1, r5
	if (fmt == FS_FAT32) {
 800595a:	2e03      	cmp	r6, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800595c:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8005960:	f8c4 521c 	str.w	r5, [r4, #540]	@ 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8005964:	f8c4 2220 	str.w	r2, [r4, #544]	@ 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8005968:	f8c4 1228 	str.w	r1, [r4, #552]	@ 0x228
	if (fmt == FS_FAT32) {
 800596c:	d158      	bne.n	8005a20 <find_volume+0x1fc>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800596e:	f1be 0f00 	cmp.w	lr, #0
 8005972:	d151      	bne.n	8005a18 <find_volume+0x1f4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005974:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005976:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005978:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800597c:	ebb0 2f53 	cmp.w	r0, r3, lsr #9
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8005980:	f8c4 7224 	str.w	r7, [r4, #548]	@ 0x224
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8005984:	d348      	bcc.n	8005a18 <find_volume+0x1f4>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8005986:	f04f 33ff 	mov.w	r3, #4294967295
 800598a:	e9c4 3383 	strd	r3, r3, [r4, #524]	@ 0x20c
	fs->fsi_flag = 0x80;
 800598e:	2380      	movs	r3, #128	@ 0x80
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005990:	2e03      	cmp	r6, #3
	fs->fsi_flag = 0x80;
 8005992:	f884 3205 	strb.w	r3, [r4, #517]	@ 0x205
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8005996:	d124      	bne.n	80059e2 <find_volume+0x1be>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8005998:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800599a:	2b01      	cmp	r3, #1
 800599c:	d121      	bne.n	80059e2 <find_volume+0x1be>
		&& move_window(fs, bsect + 1) == FR_OK)
 800599e:	4620      	mov	r0, r4
 80059a0:	1c69      	adds	r1, r5, #1
 80059a2:	f7ff fefc 	bl	800579e <move_window>
 80059a6:	b9e0      	cbnz	r0, 80059e2 <find_volume+0x1be>
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80059a8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80059ac:	f8b4 21fe 	ldrh.w	r2, [r4, #510]	@ 0x1fe
		fs->fsi_flag = 0;
 80059b0:	f884 0205 	strb.w	r0, [r4, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d114      	bne.n	80059e2 <find_volume+0x1be>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 80059b8:	6822      	ldr	r2, [r4, #0]
 80059ba:	4b25      	ldr	r3, [pc, #148]	@ (8005a50 <find_volume+0x22c>)
 80059bc:	429a      	cmp	r2, r3
 80059be:	d110      	bne.n	80059e2 <find_volume+0x1be>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 80059c0:	f103 53ff 	add.w	r3, r3, #534773760	@ 0x1fe00000
 80059c4:	f8d4 21e4 	ldr.w	r2, [r4, #484]	@ 0x1e4
 80059c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80059cc:	3320      	adds	r3, #32
 80059ce:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 80059d0:	bf01      	itttt	eq
 80059d2:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	@ 0x1e8
 80059d6:	f8c4 3210 	streq.w	r3, [r4, #528]	@ 0x210
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 80059da:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	@ 0x1ec
 80059de:	f8c4 320c 	streq.w	r3, [r4, #524]	@ 0x20c
	fs->id = ++Fsid;	/* File system mount ID */
 80059e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a54 <find_volume+0x230>)
	clear_lock(fs);
 80059e4:	4620      	mov	r0, r4
	fs->id = ++Fsid;	/* File system mount ID */
 80059e6:	8813      	ldrh	r3, [r2, #0]
	fs->fs_type = fmt;	/* FAT sub-type */
 80059e8:	f884 6200 	strb.w	r6, [r4, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80059ec:	3301      	adds	r3, #1
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	f8a4 3206 	strh.w	r3, [r4, #518]	@ 0x206
 80059f4:	8013      	strh	r3, [r2, #0]
	clear_lock(fs);
 80059f6:	f7ff fe55 	bl	80056a4 <clear_lock>
	return FR_OK;
 80059fa:	e732      	b.n	8005862 <find_volume+0x3e>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80059fc:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80059fe:	3601      	adds	r6, #1
 8005a00:	2e04      	cmp	r6, #4
 8005a02:	f47f af58 	bne.w	80058b6 <find_volume+0x92>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005a06:	2803      	cmp	r0, #3
 8005a08:	d106      	bne.n	8005a18 <find_volume+0x1f4>
 8005a0a:	2001      	movs	r0, #1
 8005a0c:	e72a      	b.n	8005864 <find_volume+0x40>
 8005a0e:	2803      	cmp	r0, #3
 8005a10:	d0fb      	beq.n	8005a0a <find_volume+0x1e6>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8005a12:	2800      	cmp	r0, #0
 8005a14:	f43f af5b 	beq.w	80058ce <find_volume+0xaa>
 8005a18:	200d      	movs	r0, #13
 8005a1a:	e723      	b.n	8005864 <find_volume+0x40>
	fmt = FS_FAT12;
 8005a1c:	2601      	movs	r6, #1
 8005a1e:	e799      	b.n	8005954 <find_volume+0x130>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8005a20:	f1be 0f00 	cmp.w	lr, #0
 8005a24:	d0f8      	beq.n	8005a18 <find_volume+0x1f4>
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005a26:	2e02      	cmp	r6, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005a28:	4417      	add	r7, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005a2a:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005a2e:	bf1b      	ittet	ne
 8005a30:	18d2      	addne	r2, r2, r3
 8005a32:	f003 0301 	andne.w	r3, r3, #1
 8005a36:	4613      	moveq	r3, r2
 8005a38:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8005a3c:	e79c      	b.n	8005978 <find_volume+0x154>
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a3e:	200b      	movs	r0, #11
 8005a40:	e710      	b.n	8005864 <find_volume+0x40>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005a42:	200c      	movs	r0, #12
 8005a44:	e70e      	b.n	8005864 <find_volume+0x40>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005a46:	2003      	movs	r0, #3
 8005a48:	e70c      	b.n	8005864 <find_volume+0x40>
 8005a4a:	bf00      	nop
 8005a4c:	20000928 	.word	0x20000928
 8005a50:	41615252 	.word	0x41615252
 8005a54:	20000924 	.word	0x20000924

08005a58 <sync_fs>:
{
 8005a58:	b538      	push	{r3, r4, r5, lr}
 8005a5a:	4604      	mov	r4, r0
	res = sync_window(fs);
 8005a5c:	f7ff fe5c 	bl	8005718 <sync_window>
 8005a60:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8005a62:	bbb8      	cbnz	r0, 8005ad4 <sync_fs+0x7c>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005a64:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 8005a68:	2b03      	cmp	r3, #3
 8005a6a:	d12a      	bne.n	8005ac2 <sync_fs+0x6a>
 8005a6c:	f894 3205 	ldrb.w	r3, [r4, #517]	@ 0x205
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d126      	bne.n	8005ac2 <sync_fs+0x6a>
			mem_set(fs->win.d8, 0, SS(fs));
 8005a74:	4601      	mov	r1, r0
 8005a76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f7ff fd5f 	bl	800553e <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005a80:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8005a84:	f8a4 21fe 	strh.w	r2, [r4, #510]	@ 0x1fe
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005a88:	4a13      	ldr	r2, [pc, #76]	@ (8005ad8 <sync_fs+0x80>)
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005a8a:	4621      	mov	r1, r4
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005a8c:	6022      	str	r2, [r4, #0]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005a8e:	f102 52ff 	add.w	r2, r2, #534773760	@ 0x1fe00000
 8005a92:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8005a96:	3220      	adds	r2, #32
 8005a98:	f8c4 21e4 	str.w	r2, [r4, #484]	@ 0x1e4
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005a9c:	f8d4 2210 	ldr.w	r2, [r4, #528]	@ 0x210
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005aa0:	f894 0201 	ldrb.w	r0, [r4, #513]	@ 0x201
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005aa4:	f8c4 21e8 	str.w	r2, [r4, #488]	@ 0x1e8
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005aa8:	f8d4 220c 	ldr.w	r2, [r4, #524]	@ 0x20c
 8005aac:	f8c4 21ec 	str.w	r2, [r4, #492]	@ 0x1ec
			fs->winsect = fs->volbase + 1;
 8005ab0:	f8d4 221c 	ldr.w	r2, [r4, #540]	@ 0x21c
 8005ab4:	3201      	adds	r2, #1
 8005ab6:	f8c4 222c 	str.w	r2, [r4, #556]	@ 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005aba:	f7ff fd1d 	bl	80054f8 <disk_write>
			fs->fsi_flag = 0;
 8005abe:	f884 5205 	strb.w	r5, [r4, #517]	@ 0x205
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f894 0201 	ldrb.w	r0, [r4, #513]	@ 0x201
 8005ac8:	4611      	mov	r1, r2
 8005aca:	f7ff fd23 	bl	8005514 <disk_ioctl>
 8005ace:	3800      	subs	r0, #0
 8005ad0:	bf18      	it	ne
 8005ad2:	2001      	movne	r0, #1
}
 8005ad4:	bd38      	pop	{r3, r4, r5, pc}
 8005ad6:	bf00      	nop
 8005ad8:	41615252 	.word	0x41615252

08005adc <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32)
 8005adc:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 8005ade:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8005ae0:	bf04      	itt	eq
 8005ae2:	8a8a      	ldrheq	r2, [r1, #20]
 8005ae4:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	4770      	bx	lr

08005aec <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005aec:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
	clst -= 2;
 8005af0:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005af2:	3b02      	subs	r3, #2
 8005af4:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8005af6:	bf83      	ittte	hi
 8005af8:	f890 3202 	ldrbhi.w	r3, [r0, #514]	@ 0x202
 8005afc:	f8d0 0228 	ldrhi.w	r0, [r0, #552]	@ 0x228
 8005b00:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005b04:	2000      	movls	r0, #0
}
 8005b06:	4770      	bx	lr

08005b08 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005b08:	2901      	cmp	r1, #1
{
 8005b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b0c:	4606      	mov	r6, r0
 8005b0e:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005b10:	d959      	bls.n	8005bc6 <get_fat+0xbe>
 8005b12:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 8005b16:	428b      	cmp	r3, r1
 8005b18:	d955      	bls.n	8005bc6 <get_fat+0xbe>
		switch (fs->fs_type) {
 8005b1a:	f890 3200 	ldrb.w	r3, [r0, #512]	@ 0x200
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d027      	beq.n	8005b72 <get_fat+0x6a>
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d036      	beq.n	8005b94 <get_fat+0x8c>
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d14d      	bne.n	8005bc6 <get_fat+0xbe>
			bc = (UINT)clst; bc += bc / 2;
 8005b2a:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b2e:	f8d0 1220 	ldr.w	r1, [r0, #544]	@ 0x220
 8005b32:	eb01 2154 	add.w	r1, r1, r4, lsr #9
 8005b36:	f7ff fe32 	bl	800579e <move_window>
 8005b3a:	b110      	cbz	r0, 8005b42 <get_fat+0x3a>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005b3c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b42:	f8d6 1220 	ldr.w	r1, [r6, #544]	@ 0x220
			wc = fs->win.d8[bc++ % SS(fs)];
 8005b46:	1c67      	adds	r7, r4, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b48:	4630      	mov	r0, r6
			wc = fs->win.d8[bc++ % SS(fs)];
 8005b4a:	f3c4 0408 	ubfx	r4, r4, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b4e:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win.d8[bc++ % SS(fs)];
 8005b52:	5d34      	ldrb	r4, [r6, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005b54:	f7ff fe23 	bl	800579e <move_window>
 8005b58:	2800      	cmp	r0, #0
 8005b5a:	d1ef      	bne.n	8005b3c <get_fat+0x34>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005b5c:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8005b60:	5df3      	ldrb	r3, [r6, r7]
 8005b62:	ea44 2003 	orr.w	r0, r4, r3, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005b66:	07eb      	lsls	r3, r5, #31
 8005b68:	bf4c      	ite	mi
 8005b6a:	0900      	lsrmi	r0, r0, #4
 8005b6c:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8005b70:	e7e6      	b.n	8005b40 <get_fat+0x38>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005b72:	f8d0 1220 	ldr.w	r1, [r0, #544]	@ 0x220
 8005b76:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8005b7a:	f7ff fe10 	bl	800579e <move_window>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d1dc      	bne.n	8005b3c <get_fat+0x34>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005b82:	006d      	lsls	r5, r5, #1
 8005b84:	f405 75ff 	and.w	r5, r5, #510	@ 0x1fe
			val = LD_WORD(p);
 8005b88:	1973      	adds	r3, r6, r5
 8005b8a:	785b      	ldrb	r3, [r3, #1]
 8005b8c:	5d70      	ldrb	r0, [r6, r5]
 8005b8e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 8005b92:	e7d5      	b.n	8005b40 <get_fat+0x38>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005b94:	f8d0 1220 	ldr.w	r1, [r0, #544]	@ 0x220
 8005b98:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 8005b9c:	f7ff fdff 	bl	800579e <move_window>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d1cb      	bne.n	8005b3c <get_fat+0x34>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005ba4:	00ad      	lsls	r5, r5, #2
 8005ba6:	f405 75fe 	and.w	r5, r5, #508	@ 0x1fc
 8005baa:	1973      	adds	r3, r6, r5
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005bac:	7898      	ldrb	r0, [r3, #2]
 8005bae:	78da      	ldrb	r2, [r3, #3]
 8005bb0:	0400      	lsls	r0, r0, #16
 8005bb2:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8005bb6:	5d72      	ldrb	r2, [r6, r5]
 8005bb8:	785b      	ldrb	r3, [r3, #1]
 8005bba:	4310      	orrs	r0, r2
 8005bbc:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005bc0:	f020 4070 	bic.w	r0, r0, #4026531840	@ 0xf0000000
			break;
 8005bc4:	e7bc      	b.n	8005b40 <get_fat+0x38>
		val = 1;	/* Internal error */
 8005bc6:	2001      	movs	r0, #1
	return val;
 8005bc8:	e7ba      	b.n	8005b40 <get_fat+0x38>

08005bca <dir_sdi>:
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8005bca:	f8d0 2208 	ldr.w	r2, [r0, #520]	@ 0x208
{
 8005bce:	b570      	push	{r4, r5, r6, lr}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005bd0:	2a01      	cmp	r2, #1
{
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	460d      	mov	r5, r1
	dp->index = (WORD)idx;	/* Current index */
 8005bd6:	f8a0 1206 	strh.w	r1, [r0, #518]	@ 0x206
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005bda:	d101      	bne.n	8005be0 <dir_sdi+0x16>
		return FR_INT_ERR;
 8005bdc:	2002      	movs	r0, #2
}
 8005bde:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8005be0:	f8d0 3200 	ldr.w	r3, [r0, #512]	@ 0x200
 8005be4:	f8d3 1214 	ldr.w	r1, [r3, #532]	@ 0x214
 8005be8:	4291      	cmp	r1, r2
 8005bea:	d9f7      	bls.n	8005bdc <dir_sdi+0x12>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8005bec:	b9f2      	cbnz	r2, 8005c2c <dir_sdi+0x62>
 8005bee:	f893 1200 	ldrb.w	r1, [r3, #512]	@ 0x200
 8005bf2:	2903      	cmp	r1, #3
 8005bf4:	d102      	bne.n	8005bfc <dir_sdi+0x32>
		clst = dp->fs->dirbase;
 8005bf6:	f8d3 1224 	ldr.w	r1, [r3, #548]	@ 0x224
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005bfa:	b9c1      	cbnz	r1, 8005c2e <dir_sdi+0x64>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8005bfc:	f8b3 1208 	ldrh.w	r1, [r3, #520]	@ 0x208
 8005c00:	42a9      	cmp	r1, r5
 8005c02:	d9eb      	bls.n	8005bdc <dir_sdi+0x12>
		sect = dp->fs->dirbase;
 8005c04:	f8d3 0224 	ldr.w	r0, [r3, #548]	@ 0x224
	dp->clust = clst;	/* Current cluster# */
 8005c08:	f8c4 220c 	str.w	r2, [r4, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 8005c0c:	2800      	cmp	r0, #0
 8005c0e:	d0e5      	beq.n	8005bdc <dir_sdi+0x12>
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005c10:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005c14:	eb00 1015 	add.w	r0, r0, r5, lsr #4
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005c18:	f005 050f 	and.w	r5, r5, #15
 8005c1c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8005c20:	f8c4 0210 	str.w	r0, [r4, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8005c24:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
	return FR_OK;
 8005c28:	2000      	movs	r0, #0
 8005c2a:	e7d8      	b.n	8005bde <dir_sdi+0x14>
 8005c2c:	4611      	mov	r1, r2
		while (idx >= ic) {	/* Follow cluster chain */
 8005c2e:	460a      	mov	r2, r1
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8005c30:	f893 6202 	ldrb.w	r6, [r3, #514]	@ 0x202
 8005c34:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
 8005c36:	42b5      	cmp	r5, r6
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005c38:	4611      	mov	r1, r2
 8005c3a:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
		while (idx >= ic) {	/* Follow cluster chain */
 8005c3e:	d202      	bcs.n	8005c46 <dir_sdi+0x7c>
		sect = clust2sect(dp->fs, clst);
 8005c40:	f7ff ff54 	bl	8005aec <clust2sect>
 8005c44:	e7e0      	b.n	8005c08 <dir_sdi+0x3e>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005c46:	f7ff ff5f 	bl	8005b08 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c4a:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8005c4c:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c4e:	d009      	beq.n	8005c64 <dir_sdi+0x9a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8005c50:	2801      	cmp	r0, #1
 8005c52:	d9c3      	bls.n	8005bdc <dir_sdi+0x12>
 8005c54:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 8005c58:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005c5c:	4283      	cmp	r3, r0
 8005c5e:	d9bd      	bls.n	8005bdc <dir_sdi+0x12>
			idx -= ic;
 8005c60:	1bad      	subs	r5, r5, r6
 8005c62:	e7e8      	b.n	8005c36 <dir_sdi+0x6c>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005c64:	2001      	movs	r0, #1
 8005c66:	e7ba      	b.n	8005bde <dir_sdi+0x14>

08005c68 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005c68:	2901      	cmp	r1, #1
{
 8005c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c6e:	4604      	mov	r4, r0
 8005c70:	460e      	mov	r6, r1
 8005c72:	4615      	mov	r5, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005c74:	d970      	bls.n	8005d58 <put_fat+0xf0>
 8005c76:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 8005c7a:	428b      	cmp	r3, r1
 8005c7c:	d96c      	bls.n	8005d58 <put_fat+0xf0>
		switch (fs->fs_type) {
 8005c7e:	f890 3200 	ldrb.w	r3, [r0, #512]	@ 0x200
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d03d      	beq.n	8005d02 <put_fat+0x9a>
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d04c      	beq.n	8005d24 <put_fat+0xbc>
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d164      	bne.n	8005d58 <put_fat+0xf0>
			bc = (UINT)clst; bc += bc / 2;
 8005c8e:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005c92:	f8d0 1220 	ldr.w	r1, [r0, #544]	@ 0x220
 8005c96:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 8005c9a:	f7ff fd80 	bl	800579e <move_window>
			if (res != FR_OK) break;
 8005c9e:	bb30      	cbnz	r0, 8005cee <put_fat+0x86>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005ca0:	f016 0601 	ands.w	r6, r6, #1
			p = &fs->win.d8[bc++ % SS(fs)];
 8005ca4:	f107 0801 	add.w	r8, r7, #1
 8005ca8:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005cac:	bf1f      	itttt	ne
 8005cae:	5de2      	ldrbne	r2, [r4, r7]
 8005cb0:	012b      	lslne	r3, r5, #4
 8005cb2:	f003 03f0 	andne.w	r3, r3, #240	@ 0xf0
 8005cb6:	f002 020f 	andne.w	r2, r2, #15
 8005cba:	bf14      	ite	ne
 8005cbc:	4313      	orrne	r3, r2
 8005cbe:	b2eb      	uxtbeq	r3, r5
 8005cc0:	55e3      	strb	r3, [r4, r7]
			fs->wflag = 1;
 8005cc2:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005cc4:	f8d4 1220 	ldr.w	r1, [r4, #544]	@ 0x220
 8005cc8:	4620      	mov	r0, r4
			fs->wflag = 1;
 8005cca:	f884 3204 	strb.w	r3, [r4, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005cce:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8005cd2:	f7ff fd64 	bl	800579e <move_window>
			if (res != FR_OK) break;
 8005cd6:	b950      	cbnz	r0, 8005cee <put_fat+0x86>
			p = &fs->win.d8[bc % SS(fs)];
 8005cd8:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005cdc:	b14e      	cbz	r6, 8005cf2 <put_fat+0x8a>
 8005cde:	f3c5 1507 	ubfx	r5, r5, #4, #8
 8005ce2:	f804 5008 	strb.w	r5, [r4, r8]
			fs->wflag = 1;
 8005ce6:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005ce8:	2000      	movs	r0, #0
			fs->wflag = 1;
 8005cea:	f884 3204 	strb.w	r3, [r4, #516]	@ 0x204
}
 8005cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005cf2:	f814 3008 	ldrb.w	r3, [r4, r8]
 8005cf6:	f3c5 2503 	ubfx	r5, r5, #8, #4
 8005cfa:	f023 030f 	bic.w	r3, r3, #15
 8005cfe:	431d      	orrs	r5, r3
 8005d00:	e7ef      	b.n	8005ce2 <put_fat+0x7a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005d02:	f8d0 1220 	ldr.w	r1, [r0, #544]	@ 0x220
 8005d06:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8005d0a:	f7ff fd48 	bl	800579e <move_window>
			if (res != FR_OK) break;
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d1ed      	bne.n	8005cee <put_fat+0x86>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005d12:	0076      	lsls	r6, r6, #1
 8005d14:	f406 76ff 	and.w	r6, r6, #510	@ 0x1fe
			ST_WORD(p, (WORD)val);
 8005d18:	55a5      	strb	r5, [r4, r6]
 8005d1a:	4426      	add	r6, r4
 8005d1c:	f3c5 2507 	ubfx	r5, r5, #8, #8
 8005d20:	7075      	strb	r5, [r6, #1]
			break;
 8005d22:	e7e0      	b.n	8005ce6 <put_fat+0x7e>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005d24:	f8d0 1220 	ldr.w	r1, [r0, #544]	@ 0x220
 8005d28:	eb01 11d6 	add.w	r1, r1, r6, lsr #7
 8005d2c:	f7ff fd37 	bl	800579e <move_window>
			if (res != FR_OK) break;
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d1dc      	bne.n	8005cee <put_fat+0x86>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005d34:	00b6      	lsls	r6, r6, #2
 8005d36:	f406 76fe 	and.w	r6, r6, #508	@ 0x1fc
 8005d3a:	19a2      	adds	r2, r4, r6
			val |= LD_DWORD(p) & 0xF0000000;
 8005d3c:	78d3      	ldrb	r3, [r2, #3]
 8005d3e:	061b      	lsls	r3, r3, #24
 8005d40:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005d44:	432b      	orrs	r3, r5
			ST_DWORD(p, val);
 8005d46:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8005d4a:	55a3      	strb	r3, [r4, r6]
 8005d4c:	7051      	strb	r1, [r2, #1]
 8005d4e:	0c19      	lsrs	r1, r3, #16
 8005d50:	0e1b      	lsrs	r3, r3, #24
 8005d52:	7091      	strb	r1, [r2, #2]
 8005d54:	70d3      	strb	r3, [r2, #3]
			break;
 8005d56:	e7c6      	b.n	8005ce6 <put_fat+0x7e>
		res = FR_INT_ERR;
 8005d58:	2002      	movs	r0, #2
 8005d5a:	e7c8      	b.n	8005cee <put_fat+0x86>

08005d5c <create_chain>:
{
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 8005d60:	460f      	mov	r7, r1
 8005d62:	b989      	cbnz	r1, 8005d88 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 8005d64:	f8d0 620c 	ldr.w	r6, [r0, #524]	@ 0x20c
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005d68:	b1f6      	cbz	r6, 8005da8 <create_chain+0x4c>
 8005d6a:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 8005d6e:	42b3      	cmp	r3, r6
 8005d70:	bf98      	it	ls
 8005d72:	2601      	movls	r6, #1
 8005d74:	4634      	mov	r4, r6
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005d76:	f8d5 3214 	ldr.w	r3, [r5, #532]	@ 0x214
		ncl++;							/* Next cluster */
 8005d7a:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8005d7c:	42a3      	cmp	r3, r4
 8005d7e:	d816      	bhi.n	8005dae <create_chain+0x52>
			if (ncl > scl) return 0;	/* No free cluster */
 8005d80:	2e01      	cmp	r6, #1
 8005d82:	d113      	bne.n	8005dac <create_chain+0x50>
 8005d84:	2400      	movs	r4, #0
 8005d86:	e005      	b.n	8005d94 <create_chain+0x38>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005d88:	f7ff febe 	bl	8005b08 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 8005d8c:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8005d8e:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 8005d90:	d802      	bhi.n	8005d98 <create_chain+0x3c>
 8005d92:	2401      	movs	r4, #1
}
 8005d94:	4620      	mov	r0, r4
 8005d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005d98:	1c60      	adds	r0, r4, #1
 8005d9a:	d035      	beq.n	8005e08 <create_chain+0xac>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005d9c:	f8d5 3214 	ldr.w	r3, [r5, #532]	@ 0x214
 8005da0:	42a3      	cmp	r3, r4
 8005da2:	d8f7      	bhi.n	8005d94 <create_chain+0x38>
 8005da4:	463e      	mov	r6, r7
 8005da6:	e7e5      	b.n	8005d74 <create_chain+0x18>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8005da8:	2601      	movs	r6, #1
 8005daa:	e7e3      	b.n	8005d74 <create_chain+0x18>
			ncl = 2;
 8005dac:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8005dae:	4621      	mov	r1, r4
 8005db0:	4628      	mov	r0, r5
 8005db2:	f7ff fea9 	bl	8005b08 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 8005db6:	b130      	cbz	r0, 8005dc6 <create_chain+0x6a>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8005db8:	1c41      	adds	r1, r0, #1
 8005dba:	d025      	beq.n	8005e08 <create_chain+0xac>
 8005dbc:	2801      	cmp	r0, #1
 8005dbe:	d0e8      	beq.n	8005d92 <create_chain+0x36>
		if (ncl == scl) return 0;		/* No free cluster */
 8005dc0:	42b4      	cmp	r4, r6
 8005dc2:	d1d8      	bne.n	8005d76 <create_chain+0x1a>
 8005dc4:	e7de      	b.n	8005d84 <create_chain+0x28>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8005dc6:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8005dca:	4621      	mov	r1, r4
 8005dcc:	4628      	mov	r0, r5
 8005dce:	f7ff ff4b 	bl	8005c68 <put_fat>
	if (res == FR_OK && clst != 0) {
 8005dd2:	b9b8      	cbnz	r0, 8005e04 <create_chain+0xa8>
 8005dd4:	b97f      	cbnz	r7, 8005df6 <create_chain+0x9a>
		if (fs->free_clust != 0xFFFFFFFF) {
 8005dd6:	f8d5 3210 	ldr.w	r3, [r5, #528]	@ 0x210
		fs->last_clust = ncl;			/* Update FSINFO */
 8005dda:	f8c5 420c 	str.w	r4, [r5, #524]	@ 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	d0d8      	beq.n	8005d94 <create_chain+0x38>
			fs->free_clust--;
 8005de2:	3b01      	subs	r3, #1
 8005de4:	f8c5 3210 	str.w	r3, [r5, #528]	@ 0x210
			fs->fsi_flag |= 1;
 8005de8:	f895 3205 	ldrb.w	r3, [r5, #517]	@ 0x205
 8005dec:	f043 0301 	orr.w	r3, r3, #1
 8005df0:	f885 3205 	strb.w	r3, [r5, #517]	@ 0x205
 8005df4:	e7ce      	b.n	8005d94 <create_chain+0x38>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8005df6:	4622      	mov	r2, r4
 8005df8:	4639      	mov	r1, r7
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	f7ff ff34 	bl	8005c68 <put_fat>
	if (res == FR_OK) {
 8005e00:	2800      	cmp	r0, #0
 8005e02:	d0e8      	beq.n	8005dd6 <create_chain+0x7a>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8005e04:	2801      	cmp	r0, #1
 8005e06:	d1c4      	bne.n	8005d92 <create_chain+0x36>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005e08:	f04f 34ff 	mov.w	r4, #4294967295
 8005e0c:	e7c2      	b.n	8005d94 <create_chain+0x38>

08005e0e <dir_next>:
{
 8005e0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	i = dp->index + 1;
 8005e12:	f8b0 6206 	ldrh.w	r6, [r0, #518]	@ 0x206
{
 8005e16:	4604      	mov	r4, r0
	i = dp->index + 1;
 8005e18:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005e1a:	b2b3      	uxth	r3, r6
{
 8005e1c:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005e1e:	b913      	cbnz	r3, 8005e26 <dir_next+0x18>
		return FR_NO_FILE;
 8005e20:	2004      	movs	r0, #4
}
 8005e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8005e26:	f8d0 3210 	ldr.w	r3, [r0, #528]	@ 0x210
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d0f8      	beq.n	8005e20 <dir_next+0x12>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005e2e:	f016 080f 	ands.w	r8, r6, #15
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005e32:	f8d0 0200 	ldr.w	r0, [r0, #512]	@ 0x200
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8005e36:	d109      	bne.n	8005e4c <dir_next+0x3e>
		if (!dp->clust) {		/* Static table */
 8005e38:	f8d4 120c 	ldr.w	r1, [r4, #524]	@ 0x20c
		dp->sect++;					/* Next sector */
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	f8c4 3210 	str.w	r3, [r4, #528]	@ 0x210
		if (!dp->clust) {		/* Static table */
 8005e42:	b969      	cbnz	r1, 8005e60 <dir_next+0x52>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8005e44:	f8b0 3208 	ldrh.w	r3, [r0, #520]	@ 0x208
 8005e48:	42b3      	cmp	r3, r6
 8005e4a:	d9e9      	bls.n	8005e20 <dir_next+0x12>
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005e4c:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
	return FR_OK;
 8005e50:	2000      	movs	r0, #0
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005e52:	eb03 1348 	add.w	r3, r3, r8, lsl #5
	dp->index = (WORD)i;	/* Current index */
 8005e56:	f8a4 6206 	strh.w	r6, [r4, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8005e5a:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
	return FR_OK;
 8005e5e:	e7e0      	b.n	8005e22 <dir_next+0x14>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8005e60:	f890 7202 	ldrb.w	r7, [r0, #514]	@ 0x202
 8005e64:	3f01      	subs	r7, #1
 8005e66:	ea17 1716 	ands.w	r7, r7, r6, lsr #4
 8005e6a:	d1ef      	bne.n	8005e4c <dir_next+0x3e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005e6c:	f7ff fe4c 	bl	8005b08 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 8005e70:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8005e72:	4605      	mov	r5, r0
				if (clst <= 1) return FR_INT_ERR;
 8005e74:	d801      	bhi.n	8005e7a <dir_next+0x6c>
 8005e76:	2002      	movs	r0, #2
 8005e78:	e7d3      	b.n	8005e22 <dir_next+0x14>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005e7a:	1c42      	adds	r2, r0, #1
 8005e7c:	d101      	bne.n	8005e82 <dir_next+0x74>
 8005e7e:	2001      	movs	r0, #1
 8005e80:	e7cf      	b.n	8005e22 <dir_next+0x14>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8005e82:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 8005e86:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 8005e8a:	42ab      	cmp	r3, r5
 8005e8c:	d82f      	bhi.n	8005eee <dir_next+0xe0>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8005e8e:	f1b9 0f00 	cmp.w	r9, #0
 8005e92:	d0c5      	beq.n	8005e20 <dir_next+0x12>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8005e94:	f8d4 120c 	ldr.w	r1, [r4, #524]	@ 0x20c
 8005e98:	f7ff ff60 	bl	8005d5c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d03e      	beq.n	8005f20 <dir_next+0x112>
					if (clst == 1) return FR_INT_ERR;
 8005ea2:	2801      	cmp	r0, #1
 8005ea4:	d0e7      	beq.n	8005e76 <dir_next+0x68>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8005ea6:	1c43      	adds	r3, r0, #1
 8005ea8:	d0e9      	beq.n	8005e7e <dir_next+0x70>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8005eaa:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 8005eae:	f7ff fc33 	bl	8005718 <sync_window>
 8005eb2:	4601      	mov	r1, r0
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d1e2      	bne.n	8005e7e <dir_next+0x70>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8005eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ebc:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 8005ec0:	f7ff fb3d 	bl	800553e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005ec4:	f8d4 2200 	ldr.w	r2, [r4, #512]	@ 0x200
 8005ec8:	4629      	mov	r1, r5
 8005eca:	4610      	mov	r0, r2
 8005ecc:	f7ff fe0e 	bl	8005aec <clust2sect>
						dp->fs->wflag = 1;
 8005ed0:	f04f 0901 	mov.w	r9, #1
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8005ed4:	f8c2 022c 	str.w	r0, [r2, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005ed8:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 8005edc:	f890 3202 	ldrb.w	r3, [r0, #514]	@ 0x202
 8005ee0:	42bb      	cmp	r3, r7
 8005ee2:	d80e      	bhi.n	8005f02 <dir_next+0xf4>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8005ee4:	f8d0 322c 	ldr.w	r3, [r0, #556]	@ 0x22c
 8005ee8:	1bdb      	subs	r3, r3, r7
 8005eea:	f8c0 322c 	str.w	r3, [r0, #556]	@ 0x22c
				dp->sect = clust2sect(dp->fs, clst);
 8005eee:	4629      	mov	r1, r5
 8005ef0:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
				dp->clust = clst;				/* Initialize data for new cluster */
 8005ef4:	f8c4 520c 	str.w	r5, [r4, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8005ef8:	f7ff fdf8 	bl	8005aec <clust2sect>
 8005efc:	f8c4 0210 	str.w	r0, [r4, #528]	@ 0x210
 8005f00:	e7a4      	b.n	8005e4c <dir_next+0x3e>
						dp->fs->wflag = 1;
 8005f02:	f880 9204 	strb.w	r9, [r0, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8005f06:	f7ff fc07 	bl	8005718 <sync_window>
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d1b7      	bne.n	8005e7e <dir_next+0x70>
						dp->fs->winsect++;
 8005f0e:	f8d4 2200 	ldr.w	r2, [r4, #512]	@ 0x200
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005f12:	3701      	adds	r7, #1
						dp->fs->winsect++;
 8005f14:	f8d2 322c 	ldr.w	r3, [r2, #556]	@ 0x22c
 8005f18:	3301      	adds	r3, #1
 8005f1a:	f8c2 322c 	str.w	r3, [r2, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8005f1e:	e7db      	b.n	8005ed8 <dir_next+0xca>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005f20:	2007      	movs	r0, #7
 8005f22:	e77e      	b.n	8005e22 <dir_next+0x14>

08005f24 <follow_path>:
{
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005f26:	780b      	ldrb	r3, [r1, #0]
{
 8005f28:	4604      	mov	r4, r0
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005f2a:	2b2f      	cmp	r3, #47	@ 0x2f
{
 8005f2c:	460d      	mov	r5, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8005f2e:	d001      	beq.n	8005f34 <follow_path+0x10>
 8005f30:	2b5c      	cmp	r3, #92	@ 0x5c
 8005f32:	d100      	bne.n	8005f36 <follow_path+0x12>
		path++;
 8005f34:	3501      	adds	r5, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8005f36:	2600      	movs	r6, #0
 8005f38:	f8c4 6208 	str.w	r6, [r4, #520]	@ 0x208
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005f3c:	782b      	ldrb	r3, [r5, #0]
 8005f3e:	2b1f      	cmp	r3, #31
 8005f40:	d931      	bls.n	8005fa6 <follow_path+0x82>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005f42:	4e5c      	ldr	r6, [pc, #368]	@ (80060b4 <follow_path+0x190>)
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8005f44:	782a      	ldrb	r2, [r5, #0]
 8005f46:	462b      	mov	r3, r5
 8005f48:	2a2f      	cmp	r2, #47	@ 0x2f
 8005f4a:	f105 0501 	add.w	r5, r5, #1
 8005f4e:	d0f9      	beq.n	8005f44 <follow_path+0x20>
 8005f50:	2a5c      	cmp	r2, #92	@ 0x5c
 8005f52:	d0f7      	beq.n	8005f44 <follow_path+0x20>
	sfn = dp->fn;
 8005f54:	f8d4 7218 	ldr.w	r7, [r4, #536]	@ 0x218
	mem_set(sfn, ' ', 11);
 8005f58:	220b      	movs	r2, #11
 8005f5a:	2120      	movs	r1, #32
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	f7ff faee 	bl	800553e <mem_set>
	si = i = b = 0; ni = 8;
 8005f62:	2000      	movs	r0, #0
 8005f64:	f04f 0c08 	mov.w	ip, #8
 8005f68:	4602      	mov	r2, r0
 8005f6a:	1e59      	subs	r1, r3, #1
		c = (BYTE)p[si++];
 8005f6c:	784b      	ldrb	r3, [r1, #1]
 8005f6e:	f101 0e01 	add.w	lr, r1, #1
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	d930      	bls.n	8005fd8 <follow_path+0xb4>
 8005f76:	2b2f      	cmp	r3, #47	@ 0x2f
 8005f78:	d02e      	beq.n	8005fd8 <follow_path+0xb4>
 8005f7a:	2b5c      	cmp	r3, #92	@ 0x5c
 8005f7c:	d02c      	beq.n	8005fd8 <follow_path+0xb4>
		if (c == '.' || i >= ni) {
 8005f7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f80:	f000 808c 	beq.w	800609c <follow_path+0x178>
 8005f84:	4584      	cmp	ip, r0
 8005f86:	d90c      	bls.n	8005fa2 <follow_path+0x7e>
		if (c >= 0x80) {				/* Extended character? */
 8005f88:	0619      	lsls	r1, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8005f8a:	bf44      	itt	mi
 8005f8c:	3b80      	submi	r3, #128	@ 0x80
 8005f8e:	5cf3      	ldrbmi	r3, [r6, r3]
 8005f90:	4d49      	ldr	r5, [pc, #292]	@ (80060b8 <follow_path+0x194>)
			b |= 3;						/* Eliminate NT flag */
 8005f92:	bf48      	it	mi
 8005f94:	f042 0203 	orrmi.w	r2, r2, #3
	while (*str && *str != chr) str++;
 8005f98:	f815 1b01 	ldrb.w	r1, [r5], #1
 8005f9c:	b151      	cbz	r1, 8005fb4 <follow_path+0x90>
 8005f9e:	428b      	cmp	r3, r1
 8005fa0:	d1fa      	bne.n	8005f98 <follow_path+0x74>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8005fa2:	2006      	movs	r0, #6
	return res;
 8005fa4:	e005      	b.n	8005fb2 <follow_path+0x8e>
		res = dir_sdi(dp, 0);
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	4620      	mov	r0, r4
 8005faa:	f7ff fe0e 	bl	8005bca <dir_sdi>
		dp->dir = 0;
 8005fae:	f8c4 6214 	str.w	r6, [r4, #532]	@ 0x214
}
 8005fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (IsUpper(c)) {			/* ASCII large capital? */
 8005fb4:	f1a3 0141 	sub.w	r1, r3, #65	@ 0x41
 8005fb8:	2919      	cmp	r1, #25
 8005fba:	d804      	bhi.n	8005fc6 <follow_path+0xa2>
				b |= 2;
 8005fbc:	f042 0202 	orr.w	r2, r2, #2
			sfn[i++] = c;
 8005fc0:	543b      	strb	r3, [r7, r0]
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	e073      	b.n	80060ae <follow_path+0x18a>
				if (IsLower(c)) {		/* ASCII small capital? */
 8005fc6:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 8005fca:	2919      	cmp	r1, #25
					b |= 1; c -= 0x20;
 8005fcc:	bf9e      	ittt	ls
 8005fce:	3b20      	subls	r3, #32
 8005fd0:	f042 0201 	orrls.w	r2, r2, #1
 8005fd4:	b2db      	uxtbls	r3, r3
 8005fd6:	e7f3      	b.n	8005fc0 <follow_path+0x9c>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	bf8c      	ite	hi
 8005fdc:	2300      	movhi	r3, #0
 8005fde:	2301      	movls	r3, #1
	*path = &p[si];						/* Return pointer to the next segment */
 8005fe0:	1c8d      	adds	r5, r1, #2
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8005fe2:	009b      	lsls	r3, r3, #2
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	d0dc      	beq.n	8005fa2 <follow_path+0x7e>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8005fe8:	7839      	ldrb	r1, [r7, #0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005fea:	4620      	mov	r0, r4
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8005fec:	29e5      	cmp	r1, #229	@ 0xe5
 8005fee:	bf04      	itt	eq
 8005ff0:	2105      	moveq	r1, #5
 8005ff2:	7039      	strbeq	r1, [r7, #0]
	if (ni == 8) b <<= 2;
 8005ff4:	f1bc 0f08 	cmp.w	ip, #8
 8005ff8:	bf04      	itt	eq
 8005ffa:	0092      	lsleq	r2, r2, #2
 8005ffc:	b2d2      	uxtbeq	r2, r2
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8005ffe:	f002 0103 	and.w	r1, r2, #3
 8006002:	2901      	cmp	r1, #1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8006004:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8006008:	bf08      	it	eq
 800600a:	f043 0310 	orreq.w	r3, r3, #16
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800600e:	2a04      	cmp	r2, #4
 8006010:	bf08      	it	eq
 8006012:	f043 0308 	orreq.w	r3, r3, #8
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006016:	2100      	movs	r1, #0
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8006018:	72fb      	strb	r3, [r7, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800601a:	f7ff fdd6 	bl	8005bca <dir_sdi>
	if (res != FR_OK) return res;
 800601e:	bb00      	cbnz	r0, 8006062 <follow_path+0x13e>
		res = move_window(dp->fs, dp->sect);
 8006020:	f8d4 1210 	ldr.w	r1, [r4, #528]	@ 0x210
 8006024:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 8006028:	f7ff fbb9 	bl	800579e <move_window>
		if (res != FR_OK) break;
 800602c:	b9c8      	cbnz	r0, 8006062 <follow_path+0x13e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800602e:	f8d4 3214 	ldr.w	r3, [r4, #532]	@ 0x214
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006032:	781a      	ldrb	r2, [r3, #0]
 8006034:	b1a2      	cbz	r2, 8006060 <follow_path+0x13c>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8006036:	7ad8      	ldrb	r0, [r3, #11]
 8006038:	f010 0008 	ands.w	r0, r0, #8
 800603c:	d10b      	bne.n	8006056 <follow_path+0x132>
 800603e:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8006042:	f103 0c0b 	add.w	ip, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8006046:	4563      	cmp	r3, ip
 8006048:	d00b      	beq.n	8006062 <follow_path+0x13e>
 800604a:	f813 7b01 	ldrb.w	r7, [r3], #1
 800604e:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006052:	428f      	cmp	r7, r1
 8006054:	d0f7      	beq.n	8006046 <follow_path+0x122>
		res = dir_next(dp, 0);		/* Next entry */
 8006056:	2100      	movs	r1, #0
 8006058:	4620      	mov	r0, r4
 800605a:	f7ff fed8 	bl	8005e0e <dir_next>
 800605e:	e7de      	b.n	800601e <follow_path+0xfa>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006060:	2004      	movs	r0, #4
			ns = dp->fn[NSFLAG];
 8006062:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
 8006066:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006068:	b130      	cbz	r0, 8006078 <follow_path+0x154>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800606a:	2804      	cmp	r0, #4
 800606c:	d1a1      	bne.n	8005fb2 <follow_path+0x8e>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800606e:	f013 0f04 	tst.w	r3, #4
 8006072:	bf08      	it	eq
 8006074:	2005      	moveq	r0, #5
 8006076:	e79c      	b.n	8005fb2 <follow_path+0x8e>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006078:	075a      	lsls	r2, r3, #29
 800607a:	d49a      	bmi.n	8005fb2 <follow_path+0x8e>
			dir = dp->dir;						/* Follow the sub-directory */
 800607c:	f8d4 1214 	ldr.w	r1, [r4, #532]	@ 0x214
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006080:	7acb      	ldrb	r3, [r1, #11]
 8006082:	06db      	lsls	r3, r3, #27
 8006084:	d508      	bpl.n	8006098 <follow_path+0x174>
			dp->sclust = ld_clust(dp->fs, dir);
 8006086:	f8d4 3200 	ldr.w	r3, [r4, #512]	@ 0x200
 800608a:	f893 0200 	ldrb.w	r0, [r3, #512]	@ 0x200
 800608e:	f7ff fd25 	bl	8005adc <ld_clust.isra.0>
 8006092:	f8c4 0208 	str.w	r0, [r4, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006096:	e755      	b.n	8005f44 <follow_path+0x20>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006098:	2005      	movs	r0, #5
 800609a:	e78a      	b.n	8005fb2 <follow_path+0x8e>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800609c:	f1bc 0f08 	cmp.w	ip, #8
 80060a0:	f47f af7f 	bne.w	8005fa2 <follow_path+0x7e>
			i = 8; ni = 11;
 80060a4:	4660      	mov	r0, ip
 80060a6:	f04f 0c0b 	mov.w	ip, #11
			b <<= 2; continue;
 80060aa:	0092      	lsls	r2, r2, #2
 80060ac:	b2d2      	uxtb	r2, r2
			i = 8; ni = 11;
 80060ae:	4671      	mov	r1, lr
 80060b0:	e75c      	b.n	8005f6c <follow_path+0x48>
 80060b2:	bf00      	nop
 80060b4:	080097e0 	.word	0x080097e0
 80060b8:	080097d1 	.word	0x080097d1

080060bc <dir_register>:
{
 80060bc:	b538      	push	{r3, r4, r5, lr}
	res = dir_sdi(dp, 0);
 80060be:	2100      	movs	r1, #0
{
 80060c0:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 80060c2:	f7ff fd82 	bl	8005bca <dir_sdi>
	if (res == FR_OK) {
 80060c6:	4604      	mov	r4, r0
 80060c8:	b990      	cbnz	r0, 80060f0 <dir_register+0x34>
			res = move_window(dp->fs, dp->sect);
 80060ca:	f8d5 1210 	ldr.w	r1, [r5, #528]	@ 0x210
 80060ce:	f8d5 0200 	ldr.w	r0, [r5, #512]	@ 0x200
 80060d2:	f7ff fb64 	bl	800579e <move_window>
			if (res != FR_OK) break;
 80060d6:	4604      	mov	r4, r0
 80060d8:	b950      	cbnz	r0, 80060f0 <dir_register+0x34>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80060da:	f8d5 3214 	ldr.w	r3, [r5, #532]	@ 0x214
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	2be5      	cmp	r3, #229	@ 0xe5
 80060e2:	d00a      	beq.n	80060fa <dir_register+0x3e>
 80060e4:	b14b      	cbz	r3, 80060fa <dir_register+0x3e>
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80060e6:	2101      	movs	r1, #1
 80060e8:	4628      	mov	r0, r5
 80060ea:	f7ff fe90 	bl	8005e0e <dir_next>
 80060ee:	e7ea      	b.n	80060c6 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80060f0:	2c04      	cmp	r4, #4
 80060f2:	bf08      	it	eq
 80060f4:	2407      	moveq	r4, #7
}
 80060f6:	4620      	mov	r0, r4
 80060f8:	bd38      	pop	{r3, r4, r5, pc}
		res = move_window(dp->fs, dp->sect);
 80060fa:	f8d5 1210 	ldr.w	r1, [r5, #528]	@ 0x210
 80060fe:	f8d5 0200 	ldr.w	r0, [r5, #512]	@ 0x200
 8006102:	f7ff fb4c 	bl	800579e <move_window>
		if (res == FR_OK) {
 8006106:	4604      	mov	r4, r0
 8006108:	2800      	cmp	r0, #0
 800610a:	d1f4      	bne.n	80060f6 <dir_register+0x3a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800610c:	2220      	movs	r2, #32
 800610e:	4621      	mov	r1, r4
 8006110:	f8d5 0214 	ldr.w	r0, [r5, #532]	@ 0x214
 8006114:	f7ff fa13 	bl	800553e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8006118:	e9d5 0185 	ldrd	r0, r1, [r5, #532]	@ 0x214
 800611c:	220b      	movs	r2, #11
 800611e:	f7ff fa05 	bl	800552c <mem_cpy>
			dp->fs->wflag = 1;
 8006122:	2201      	movs	r2, #1
 8006124:	f8d5 3200 	ldr.w	r3, [r5, #512]	@ 0x200
 8006128:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
	return res;
 800612c:	e7e3      	b.n	80060f6 <dir_register+0x3a>

0800612e <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800612e:	2901      	cmp	r1, #1
{
 8006130:	b570      	push	{r4, r5, r6, lr}
 8006132:	4604      	mov	r4, r0
 8006134:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8006136:	d801      	bhi.n	800613c <remove_chain+0xe>
		res = FR_INT_ERR;
 8006138:	2002      	movs	r0, #2
}
 800613a:	bd70      	pop	{r4, r5, r6, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800613c:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 8006140:	428b      	cmp	r3, r1
 8006142:	d9f9      	bls.n	8006138 <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006144:	f8d4 3214 	ldr.w	r3, [r4, #532]	@ 0x214
 8006148:	42ab      	cmp	r3, r5
 800614a:	d905      	bls.n	8006158 <remove_chain+0x2a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800614c:	4629      	mov	r1, r5
 800614e:	4620      	mov	r0, r4
 8006150:	f7ff fcda 	bl	8005b08 <get_fat>
			if (nxt == 0) break;				/* Empty cluster? */
 8006154:	4606      	mov	r6, r0
 8006156:	b908      	cbnz	r0, 800615c <remove_chain+0x2e>
		res = FR_INT_ERR;
 8006158:	2000      	movs	r0, #0
 800615a:	e7ee      	b.n	800613a <remove_chain+0xc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800615c:	2801      	cmp	r0, #1
 800615e:	d0eb      	beq.n	8006138 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006160:	1c41      	adds	r1, r0, #1
 8006162:	d015      	beq.n	8006190 <remove_chain+0x62>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006164:	2200      	movs	r2, #0
 8006166:	4629      	mov	r1, r5
 8006168:	4620      	mov	r0, r4
 800616a:	f7ff fd7d 	bl	8005c68 <put_fat>
			if (res != FR_OK) break;
 800616e:	2800      	cmp	r0, #0
 8006170:	d1e3      	bne.n	800613a <remove_chain+0xc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006172:	f8d4 3210 	ldr.w	r3, [r4, #528]	@ 0x210
 8006176:	1c5a      	adds	r2, r3, #1
 8006178:	d008      	beq.n	800618c <remove_chain+0x5e>
				fs->free_clust++;
 800617a:	3301      	adds	r3, #1
 800617c:	f8c4 3210 	str.w	r3, [r4, #528]	@ 0x210
				fs->fsi_flag |= 1;
 8006180:	f894 3205 	ldrb.w	r3, [r4, #517]	@ 0x205
 8006184:	f043 0301 	orr.w	r3, r3, #1
 8006188:	f884 3205 	strb.w	r3, [r4, #517]	@ 0x205
{
 800618c:	4635      	mov	r5, r6
 800618e:	e7d9      	b.n	8006144 <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006190:	2001      	movs	r0, #1
 8006192:	e7d2      	b.n	800613a <remove_chain+0xc>

08006194 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006194:	b530      	push	{r4, r5, lr}
 8006196:	b085      	sub	sp, #20
 8006198:	e9cd 1000 	strd	r1, r0, [sp]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 800619c:	a803      	add	r0, sp, #12
	const TCHAR *rp = path;
 800619e:	9103      	str	r1, [sp, #12]
{
 80061a0:	4614      	mov	r4, r2
	vol = get_ldnumber(&rp);
 80061a2:	f7ff faa1 	bl	80056e8 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80061a6:	1e01      	subs	r1, r0, #0
 80061a8:	db1b      	blt.n	80061e2 <f_mount+0x4e>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80061aa:	4d0f      	ldr	r5, [pc, #60]	@ (80061e8 <f_mount+0x54>)
 80061ac:	f855 0021 	ldr.w	r0, [r5, r1, lsl #2]

	if (cfs) {
 80061b0:	b120      	cbz	r0, 80061bc <f_mount+0x28>
#if _FS_LOCK
		clear_lock(cfs);
 80061b2:	f7ff fa77 	bl	80056a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80061b6:	2300      	movs	r3, #0
 80061b8:	f880 3200 	strb.w	r3, [r0, #512]	@ 0x200
	}

	if (fs) {
 80061bc:	9b01      	ldr	r3, [sp, #4]
 80061be:	b923      	cbnz	r3, 80061ca <f_mount+0x36>
		fs->fs_type = 0;				/* Clear new fs object */
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80061c0:	f845 3021 	str.w	r3, [r5, r1, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80061c4:	2000      	movs	r0, #0

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 80061c6:	b005      	add	sp, #20
 80061c8:	bd30      	pop	{r4, r5, pc}
		fs->fs_type = 0;				/* Clear new fs object */
 80061ca:	2200      	movs	r2, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80061cc:	2c01      	cmp	r4, #1
		fs->fs_type = 0;				/* Clear new fs object */
 80061ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	FatFs[vol] = fs;					/* Register new fs object */
 80061d2:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80061d6:	d1f5      	bne.n	80061c4 <f_mount+0x30>
	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80061d8:	4669      	mov	r1, sp
 80061da:	a801      	add	r0, sp, #4
 80061dc:	f7ff fb22 	bl	8005824 <find_volume>
	LEAVE_FF(fs, res);
 80061e0:	e7f1      	b.n	80061c6 <f_mount+0x32>
	if (vol < 0) return FR_INVALID_DRIVE;
 80061e2:	200b      	movs	r0, #11
 80061e4:	e7ef      	b.n	80061c6 <f_mount+0x32>
 80061e6:	bf00      	nop
 80061e8:	20000928 	.word	0x20000928

080061ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80061ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061f0:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 80061f4:	4617      	mov	r7, r2
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80061f6:	4606      	mov	r6, r0
{
 80061f8:	9101      	str	r1, [sp, #4]
	if (!fp) return FR_INVALID_OBJECT;
 80061fa:	2800      	cmp	r0, #0
 80061fc:	f000 80b6 	beq.w	800636c <f_open+0x180>
	fp->fs = 0;			/* Clear file object */
 8006200:	2300      	movs	r3, #0

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8006202:	f002 091e 	and.w	r9, r2, #30
	fp->fs = 0;			/* Clear file object */
 8006206:	f8c0 3200 	str.w	r3, [r0, #512]	@ 0x200
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800620a:	464a      	mov	r2, r9
 800620c:	a901      	add	r1, sp, #4
 800620e:	a886      	add	r0, sp, #536	@ 0x218
 8006210:	f7ff fb08 	bl	8005824 <find_volume>
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8006214:	4680      	mov	r8, r0
 8006216:	2800      	cmp	r0, #0
 8006218:	d15f      	bne.n	80062da <f_open+0xee>
		INIT_BUF(dj);
 800621a:	ab03      	add	r3, sp, #12
		res = follow_path(&dj, path);	/* Follow the file path */
 800621c:	9901      	ldr	r1, [sp, #4]
 800621e:	a806      	add	r0, sp, #24
		INIT_BUF(dj);
 8006220:	938c      	str	r3, [sp, #560]	@ 0x230
		res = follow_path(&dj, path);	/* Follow the file path */
 8006222:	f7ff fe7f 	bl	8005f24 <follow_path>
		dir = dj.dir;
 8006226:	9d8b      	ldr	r5, [sp, #556]	@ 0x22c
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006228:	4604      	mov	r4, r0
 800622a:	b948      	cbnz	r0, 8006240 <f_open+0x54>
			if (!dir)	/* Default directory itself */
 800622c:	2d00      	cmp	r5, #0
 800622e:	d059      	beq.n	80062e4 <f_open+0xf8>
				res = FR_INVALID_NAME;
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006230:	f1b9 0100 	subs.w	r1, r9, #0
 8006234:	bf18      	it	ne
 8006236:	2101      	movne	r1, #1
 8006238:	a806      	add	r0, sp, #24
 800623a:	f7ff f987 	bl	800554c <chk_lock>
 800623e:	4604      	mov	r4, r0
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006240:	f017 0f1c 	tst.w	r7, #28
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8006244:	f007 091f 	and.w	r9, r7, #31
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006248:	d058      	beq.n	80062fc <f_open+0x110>
			if (res != FR_OK) {					/* No file, create new */
 800624a:	2c00      	cmp	r4, #0
 800624c:	d04e      	beq.n	80062ec <f_open+0x100>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800624e:	2c04      	cmp	r4, #4
 8006250:	d109      	bne.n	8006266 <f_open+0x7a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006252:	4b4c      	ldr	r3, [pc, #304]	@ (8006384 <f_open+0x198>)
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	b112      	cbz	r2, 800625e <f_open+0x72>
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d144      	bne.n	80062e8 <f_open+0xfc>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800625e:	a806      	add	r0, sp, #24
 8006260:	f7ff ff2c 	bl	80060bc <dir_register>
 8006264:	4604      	mov	r4, r0
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
				dir = dj.dir;					/* New entry */
 8006266:	9d8b      	ldr	r5, [sp, #556]	@ 0x22c
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006268:	f049 0908 	orr.w	r9, r9, #8
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
						res = FR_EXIST;
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800626c:	2c00      	cmp	r4, #0
 800626e:	f040 8084 	bne.w	800637a <f_open+0x18e>
 8006272:	f019 0f08 	tst.w	r9, #8
				dw = GET_FATTIME();				/* Created time */
				ST_DWORD(dir + DIR_CrtTime, dw);
				dir[DIR_Attr] = 0;				/* Reset attribute */
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8006276:	f8dd a218 	ldr.w	sl, [sp, #536]	@ 0x218
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800627a:	d04d      	beq.n	8006318 <f_open+0x12c>
				dw = GET_FATTIME();				/* Created time */
 800627c:	f7fe fc34 	bl	8004ae8 <get_fattime>
				ST_DWORD(dir + DIR_CrtTime, dw);
 8006280:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8006284:	73a8      	strb	r0, [r5, #14]
 8006286:	73eb      	strb	r3, [r5, #15]
 8006288:	0c03      	lsrs	r3, r0, #16
 800628a:	0e00      	lsrs	r0, r0, #24
 800628c:	742b      	strb	r3, [r5, #16]
 800628e:	7468      	strb	r0, [r5, #17]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 8006290:	72ec      	strb	r4, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8006292:	772c      	strb	r4, [r5, #28]
 8006294:	776c      	strb	r4, [r5, #29]
 8006296:	77ac      	strb	r4, [r5, #30]
 8006298:	77ec      	strb	r4, [r5, #31]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800629a:	f89a 0200 	ldrb.w	r0, [sl, #512]	@ 0x200
 800629e:	4629      	mov	r1, r5
 80062a0:	f7ff fc1c 	bl	8005adc <ld_clust.isra.0>
				st_clust(dir, 0);				/* cluster = 0 */
				dj.fs->wflag = 1;
 80062a4:	2301      	movs	r3, #1
	ST_WORD(dir + DIR_FstClusLO, cl);
 80062a6:	76ac      	strb	r4, [r5, #26]
 80062a8:	76ec      	strb	r4, [r5, #27]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80062aa:	752c      	strb	r4, [r5, #20]
 80062ac:	756c      	strb	r4, [r5, #21]
				if (cl) {						/* Remove the cluster chain if exist */
 80062ae:	4607      	mov	r7, r0
				dj.fs->wflag = 1;
 80062b0:	f88a 3204 	strb.w	r3, [sl, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 80062b4:	b358      	cbz	r0, 800630e <f_open+0x122>
					dw = dj.fs->winsect;
					res = remove_chain(dj.fs, cl);
 80062b6:	4601      	mov	r1, r0
 80062b8:	4650      	mov	r0, sl
					dw = dj.fs->winsect;
 80062ba:	f8da b22c 	ldr.w	fp, [sl, #556]	@ 0x22c
					res = remove_chain(dj.fs, cl);
 80062be:	f7ff ff36 	bl	800612e <remove_chain>
					if (res == FR_OK) {
 80062c2:	4604      	mov	r4, r0
 80062c4:	2800      	cmp	r0, #0
 80062c6:	d158      	bne.n	800637a <f_open+0x18e>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80062c8:	3f01      	subs	r7, #1
						res = move_window(dj.fs, dw);
 80062ca:	4659      	mov	r1, fp
 80062cc:	4650      	mov	r0, sl
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80062ce:	f8ca 720c 	str.w	r7, [sl, #524]	@ 0x20c
						res = move_window(dj.fs, dw);
 80062d2:	f7ff fa64 	bl	800579e <move_window>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
						res = FR_DENIED;
				}
			}
		}
		if (res == FR_OK) {
 80062d6:	b1e8      	cbz	r0, 8006314 <f_open+0x128>
						res = move_window(dj.fs, dw);
 80062d8:	4680      	mov	r8, r0
			fp->id = fp->fs->id;
		}
	}

	LEAVE_FF(dj.fs, res);
}
 80062da:	4640      	mov	r0, r8
 80062dc:	f50d 7d0f 	add.w	sp, sp, #572	@ 0x23c
 80062e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				res = FR_INVALID_NAME;
 80062e4:	2406      	movs	r4, #6
 80062e6:	e7ab      	b.n	8006240 <f_open+0x54>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80062e8:	2412      	movs	r4, #18
 80062ea:	e7bc      	b.n	8006266 <f_open+0x7a>
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80062ec:	7aeb      	ldrb	r3, [r5, #11]
 80062ee:	f013 0f11 	tst.w	r3, #17
 80062f2:	d144      	bne.n	800637e <f_open+0x192>
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 80062f4:	f3c7 0780 	ubfx	r7, r7, #2, #1
 80062f8:	00fc      	lsls	r4, r7, #3
 80062fa:	e7b7      	b.n	800626c <f_open+0x80>
			if (res == FR_OK) {					/* Follow succeeded */
 80062fc:	2c00      	cmp	r4, #0
 80062fe:	d13c      	bne.n	800637a <f_open+0x18e>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8006300:	7aeb      	ldrb	r3, [r5, #11]
 8006302:	06d8      	lsls	r0, r3, #27
 8006304:	d438      	bmi.n	8006378 <f_open+0x18c>
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8006306:	07ba      	lsls	r2, r7, #30
 8006308:	d501      	bpl.n	800630e <f_open+0x122>
 800630a:	07db      	lsls	r3, r3, #31
 800630c:	d437      	bmi.n	800637e <f_open+0x192>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800630e:	f019 0f08 	tst.w	r9, #8
 8006312:	d001      	beq.n	8006318 <f_open+0x12c>
				mode |= FA__WRITTEN;
 8006314:	f049 0920 	orr.w	r9, r9, #32
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8006318:	9c86      	ldr	r4, [sp, #536]	@ 0x218
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800631a:	f1b9 0f01 	cmp.w	r9, #1
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800631e:	f8d4 322c 	ldr.w	r3, [r4, #556]	@ 0x22c
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006322:	bf94      	ite	ls
 8006324:	2100      	movls	r1, #0
 8006326:	2101      	movhi	r1, #1
			fp->dir_ptr = dir;
 8006328:	e9c6 3587 	strd	r3, r5, [r6, #540]	@ 0x21c
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800632c:	a806      	add	r0, sp, #24
 800632e:	f7ff f94d 	bl	80055cc <inc_lock>
 8006332:	f8c6 0228 	str.w	r0, [r6, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 8006336:	b1e0      	cbz	r0, 8006372 <f_open+0x186>
			fp->err = 0;						/* Clear error flag */
 8006338:	2700      	movs	r7, #0
			fp->flag = mode;					/* File access mode */
 800633a:	f886 9206 	strb.w	r9, [r6, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 800633e:	f886 7207 	strb.w	r7, [r6, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8006342:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 8006346:	4629      	mov	r1, r5
 8006348:	f7ff fbc8 	bl	8005adc <ld_clust.isra.0>
 800634c:	f8c6 0210 	str.w	r0, [r6, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8006350:	69eb      	ldr	r3, [r5, #28]
			fp->dsect = 0;
 8006352:	f8c6 7218 	str.w	r7, [r6, #536]	@ 0x218
			fp->fptr = 0;						/* File pointer */
 8006356:	e9c6 7382 	strd	r7, r3, [r6, #520]	@ 0x208
			fp->id = fp->fs->id;
 800635a:	f8b4 3206 	ldrh.w	r3, [r4, #518]	@ 0x206
			fp->cltbl = 0;						/* Normal seek mode */
 800635e:	f8c6 7224 	str.w	r7, [r6, #548]	@ 0x224
			fp->fs = dj.fs;	 					/* Validate file object */
 8006362:	f8c6 4200 	str.w	r4, [r6, #512]	@ 0x200
			fp->id = fp->fs->id;
 8006366:	f8a6 3204 	strh.w	r3, [r6, #516]	@ 0x204
 800636a:	e7b6      	b.n	80062da <f_open+0xee>
	if (!fp) return FR_INVALID_OBJECT;
 800636c:	f04f 0809 	mov.w	r8, #9
 8006370:	e7b3      	b.n	80062da <f_open+0xee>
			if (!fp->lockid) res = FR_INT_ERR;
 8006372:	f04f 0802 	mov.w	r8, #2
 8006376:	e7b0      	b.n	80062da <f_open+0xee>
					res = FR_NO_FILE;
 8006378:	2404      	movs	r4, #4
						res = move_window(dj.fs, dw);
 800637a:	46a0      	mov	r8, r4
 800637c:	e7ad      	b.n	80062da <f_open+0xee>
					res = FR_DENIED;
 800637e:	2407      	movs	r4, #7
 8006380:	e7fb      	b.n	800637a <f_open+0x18e>
 8006382:	bf00      	nop
 8006384:	2000090c 	.word	0x2000090c

08006388 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006388:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638c:	4699      	mov	r9, r3
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800638e:	2300      	movs	r3, #0
 8006390:	f8c9 3000 	str.w	r3, [r9]
{
 8006394:	4604      	mov	r4, r0
 8006396:	4688      	mov	r8, r1
 8006398:	4616      	mov	r6, r2

	res = validate(fp);						/* Check validity */
 800639a:	f7ff f9e9 	bl	8005770 <validate>
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800639e:	4605      	mov	r5, r0
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d142      	bne.n	800642a <f_write+0xa2>
	if (fp->err)							/* Check error */
 80063a4:	f894 5207 	ldrb.w	r5, [r4, #519]	@ 0x207
 80063a8:	2d00      	cmp	r5, #0
 80063aa:	d13e      	bne.n	800642a <f_write+0xa2>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 80063ac:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 80063b0:	0799      	lsls	r1, r3, #30
 80063b2:	f140 80cf 	bpl.w	8006554 <f_write+0x1cc>
		LEAVE_FF(fp->fs, FR_DENIED);
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80063b6:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 80063ba:	42de      	cmn	r6, r3
 80063bc:	bf28      	it	cs
 80063be:	2600      	movcs	r6, #0

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80063c0:	f8d4 1208 	ldr.w	r1, [r4, #520]	@ 0x208
	for ( ;  btw;							/* Repeat until all data written */
 80063c4:	b1ee      	cbz	r6, 8006402 <f_write+0x7a>
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80063c6:	f3c1 0308 	ubfx	r3, r1, #0, #9
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	f040 80aa 	bne.w	8006524 <f_write+0x19c>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80063d0:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 80063d4:	f890 7202 	ldrb.w	r7, [r0, #514]	@ 0x202
 80063d8:	3f01      	subs	r7, #1
 80063da:	ea07 2751 	and.w	r7, r7, r1, lsr #9
			if (!csect) {					/* On the cluster boundary? */
 80063de:	f017 07ff 	ands.w	r7, r7, #255	@ 0xff
 80063e2:	d131      	bne.n	8006448 <f_write+0xc0>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80063e4:	b929      	cbnz	r1, 80063f2 <f_write+0x6a>
					clst = fp->sclust;		/* Follow from the origin */
 80063e6:	f8d4 1210 	ldr.w	r1, [r4, #528]	@ 0x210
					if (clst == 0)			/* When no cluster is allocated, */
 80063ea:	b9c9      	cbnz	r1, 8006420 <f_write+0x98>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80063ec:	f7ff fcb6 	bl	8005d5c <create_chain>
 80063f0:	e005      	b.n	80063fe <f_write+0x76>
					if (fp->cltbl)
 80063f2:	f8d4 3224 	ldr.w	r3, [r4, #548]	@ 0x224
 80063f6:	b183      	cbz	r3, 800641a <f_write+0x92>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80063f8:	4620      	mov	r0, r4
 80063fa:	f7ff f961 	bl	80056c0 <clmt_clust>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80063fe:	4601      	mov	r1, r0
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006400:	b970      	cbnz	r0, 8006420 <f_write+0x98>
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8006402:	e9d4 3282 	ldrd	r3, r2, [r4, #520]	@ 0x208
 8006406:	4293      	cmp	r3, r2
 8006408:	f200 80a1 	bhi.w	800654e <f_write+0x1c6>
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800640c:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 8006410:	f043 0320 	orr.w	r3, r3, #32
 8006414:	f884 3206 	strb.w	r3, [r4, #518]	@ 0x206

	LEAVE_FF(fp->fs, FR_OK);
 8006418:	e007      	b.n	800642a <f_write+0xa2>
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800641a:	f8d4 1214 	ldr.w	r1, [r4, #532]	@ 0x214
 800641e:	e7e5      	b.n	80063ec <f_write+0x64>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8006420:	2901      	cmp	r1, #1
 8006422:	d106      	bne.n	8006432 <f_write+0xaa>
 8006424:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006426:	f884 5207 	strb.w	r5, [r4, #519]	@ 0x207
}
 800642a:	4628      	mov	r0, r5
 800642c:	b003      	add	sp, #12
 800642e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006432:	1c4a      	adds	r2, r1, #1
 8006434:	d101      	bne.n	800643a <f_write+0xb2>
 8006436:	2501      	movs	r5, #1
 8006438:	e7f5      	b.n	8006426 <f_write+0x9e>
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800643a:	f8d4 3210 	ldr.w	r3, [r4, #528]	@ 0x210
				fp->clust = clst;			/* Update current cluster */
 800643e:	f8c4 1214 	str.w	r1, [r4, #532]	@ 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8006442:	b90b      	cbnz	r3, 8006448 <f_write+0xc0>
 8006444:	f8c4 1210 	str.w	r1, [r4, #528]	@ 0x210
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006448:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800644c:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8006450:	065b      	lsls	r3, r3, #25
 8006452:	d50f      	bpl.n	8006474 <f_write+0xec>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8006454:	2301      	movs	r3, #1
 8006456:	4621      	mov	r1, r4
 8006458:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 800645c:	f890 0201 	ldrb.w	r0, [r0, #513]	@ 0x201
 8006460:	f7ff f84a 	bl	80054f8 <disk_write>
 8006464:	2800      	cmp	r0, #0
 8006466:	d1e6      	bne.n	8006436 <f_write+0xae>
				fp->flag &= ~FA__DIRTY;
 8006468:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 800646c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006470:	f884 3206 	strb.w	r3, [r4, #518]	@ 0x206
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8006474:	f8d4 b200 	ldr.w	fp, [r4, #512]	@ 0x200
 8006478:	f8d4 1214 	ldr.w	r1, [r4, #532]	@ 0x214
 800647c:	4658      	mov	r0, fp
 800647e:	f7ff fb35 	bl	8005aec <clust2sect>
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8006482:	2800      	cmp	r0, #0
 8006484:	d0ce      	beq.n	8006424 <f_write+0x9c>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006486:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
			sect += csect;
 800648a:	eb00 0a07 	add.w	sl, r0, r7
			if (cc) {						/* Write maximum contiguous sectors directly */
 800648e:	d334      	bcc.n	80064fa <f_write+0x172>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8006490:	f89b 2202 	ldrb.w	r2, [fp, #514]	@ 0x202
 8006494:	eb07 2156 	add.w	r1, r7, r6, lsr #9
 8006498:	4291      	cmp	r1, r2
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800649a:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800649e:	4641      	mov	r1, r8
					cc = fp->fs->csize - csect;
 80064a0:	bf88      	it	hi
 80064a2:	1bd3      	subhi	r3, r2, r7
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 80064a4:	f89b 0201 	ldrb.w	r0, [fp, #513]	@ 0x201
 80064a8:	4652      	mov	r2, sl
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	f7ff f824 	bl	80054f8 <disk_write>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	d1c0      	bne.n	8006436 <f_write+0xae>
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80064b4:	f8d4 1218 	ldr.w	r1, [r4, #536]	@ 0x218
 80064b8:	9b01      	ldr	r3, [sp, #4]
 80064ba:	eba1 010a 	sub.w	r1, r1, sl
 80064be:	428b      	cmp	r3, r1
 80064c0:	d90d      	bls.n	80064de <f_write+0x156>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 80064c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80064c6:	4620      	mov	r0, r4
 80064c8:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 80064cc:	f7ff f82e 	bl	800552c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 80064d0:	f894 2206 	ldrb.w	r2, [r4, #518]	@ 0x206
 80064d4:	9b01      	ldr	r3, [sp, #4]
 80064d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064da:	f884 2206 	strb.w	r2, [r4, #518]	@ 0x206
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 80064de:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 80064e0:	f8d4 3208 	ldr.w	r3, [r4, #520]	@ 0x208
 80064e4:	44b8      	add	r8, r7
 80064e6:	443b      	add	r3, r7
 80064e8:	f8c4 3208 	str.w	r3, [r4, #520]	@ 0x208
 80064ec:	f8d9 3000 	ldr.w	r3, [r9]
 80064f0:	1bf6      	subs	r6, r6, r7
 80064f2:	443b      	add	r3, r7
 80064f4:	f8c9 3000 	str.w	r3, [r9]
 80064f8:	e762      	b.n	80063c0 <f_write+0x38>
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 80064fa:	f8d4 3218 	ldr.w	r3, [r4, #536]	@ 0x218
				if (fp->fptr < fp->fsize &&
 80064fe:	f8d4 2208 	ldr.w	r2, [r4, #520]	@ 0x208
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8006502:	459a      	cmp	sl, r3
 8006504:	d00c      	beq.n	8006520 <f_write+0x198>
				if (fp->fptr < fp->fsize &&
 8006506:	f8d4 320c 	ldr.w	r3, [r4, #524]	@ 0x20c
 800650a:	429a      	cmp	r2, r3
 800650c:	d208      	bcs.n	8006520 <f_write+0x198>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800650e:	2301      	movs	r3, #1
 8006510:	4652      	mov	r2, sl
 8006512:	4621      	mov	r1, r4
 8006514:	f89b 0201 	ldrb.w	r0, [fp, #513]	@ 0x201
 8006518:	f7fe ffe0 	bl	80054dc <disk_read>
				if (fp->fptr < fp->fsize &&
 800651c:	2800      	cmp	r0, #0
 800651e:	d18a      	bne.n	8006436 <f_write+0xae>
			fp->dsect = sect;
 8006520:	f8c4 a218 	str.w	sl, [r4, #536]	@ 0x218
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8006524:	f8d4 0208 	ldr.w	r0, [r4, #520]	@ 0x208
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006528:	4641      	mov	r1, r8
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800652a:	f3c0 0008 	ubfx	r0, r0, #0, #9
 800652e:	f5c0 7700 	rsb	r7, r0, #512	@ 0x200
 8006532:	42b7      	cmp	r7, r6
 8006534:	bf28      	it	cs
 8006536:	4637      	movcs	r7, r6
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8006538:	4420      	add	r0, r4
 800653a:	463a      	mov	r2, r7
 800653c:	f7fe fff6 	bl	800552c <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006540:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 8006544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006548:	f884 3206 	strb.w	r3, [r4, #518]	@ 0x206
 800654c:	e7c8      	b.n	80064e0 <f_write+0x158>
	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800654e:	f8c4 320c 	str.w	r3, [r4, #524]	@ 0x20c
 8006552:	e75b      	b.n	800640c <f_write+0x84>
		LEAVE_FF(fp->fs, FR_DENIED);
 8006554:	2507      	movs	r5, #7
 8006556:	e768      	b.n	800642a <f_write+0xa2>

08006558 <putc_bfd>:
{
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8006558:	290a      	cmp	r1, #10
{
 800655a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800655c:	4604      	mov	r4, r0
 800655e:	460e      	mov	r6, r1
	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
 8006560:	d102      	bne.n	8006568 <putc_bfd+0x10>
		putc_bfd(pb, '\r');
 8006562:	210d      	movs	r1, #13
 8006564:	f7ff fff8 	bl	8006558 <putc_bfd>

	i = pb->idx;	/* Buffer write index (-1:error) */
 8006568:	6863      	ldr	r3, [r4, #4]
	if (i < 0) return;
 800656a:	2b00      	cmp	r3, #0
 800656c:	db14      	blt.n	8006598 <putc_bfd+0x40>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800656e:	1c5d      	adds	r5, r3, #1
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006570:	2d3c      	cmp	r5, #60	@ 0x3c
	pb->buf[i++] = (BYTE)c;
 8006572:	4423      	add	r3, r4
 8006574:	731e      	strb	r6, [r3, #12]
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006576:	dd0b      	ble.n	8006590 <putc_bfd+0x38>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006578:	462a      	mov	r2, r5
 800657a:	ab01      	add	r3, sp, #4
 800657c:	6820      	ldr	r0, [r4, #0]
 800657e:	f104 010c 	add.w	r1, r4, #12
 8006582:	f7ff ff01 	bl	8006388 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006586:	9b01      	ldr	r3, [sp, #4]
 8006588:	1b5d      	subs	r5, r3, r5
 800658a:	bf18      	it	ne
 800658c:	f04f 35ff 	movne.w	r5, #4294967295
	}
	pb->idx = i;
	pb->nchr++;
 8006590:	68a3      	ldr	r3, [r4, #8]
	pb->idx = i;
 8006592:	6065      	str	r5, [r4, #4]
	pb->nchr++;
 8006594:	3301      	adds	r3, #1
 8006596:	60a3      	str	r3, [r4, #8]
}
 8006598:	b002      	add	sp, #8
 800659a:	bd70      	pop	{r4, r5, r6, pc}

0800659c <f_sync>:
{
 800659c:	b570      	push	{r4, r5, r6, lr}
 800659e:	4604      	mov	r4, r0
	res = validate(fp);					/* Check validity of the object */
 80065a0:	f7ff f8e6 	bl	8005770 <validate>
	if (res == FR_OK) {
 80065a4:	2800      	cmp	r0, #0
 80065a6:	d159      	bne.n	800665c <f_sync+0xc0>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80065a8:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 80065ac:	f013 0020 	ands.w	r0, r3, #32
 80065b0:	d054      	beq.n	800665c <f_sync+0xc0>
			if (fp->flag & FA__DIRTY) {
 80065b2:	065b      	lsls	r3, r3, #25
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80065b4:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
			if (fp->flag & FA__DIRTY) {
 80065b8:	d50f      	bpl.n	80065da <f_sync+0x3e>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80065ba:	2301      	movs	r3, #1
 80065bc:	4621      	mov	r1, r4
 80065be:	f8d4 2218 	ldr.w	r2, [r4, #536]	@ 0x218
 80065c2:	f890 0201 	ldrb.w	r0, [r0, #513]	@ 0x201
 80065c6:	f7fe ff97 	bl	80054f8 <disk_write>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	d145      	bne.n	800665a <f_sync+0xbe>
				fp->flag &= ~FA__DIRTY;
 80065ce:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
 80065d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065d6:	f884 3206 	strb.w	r3, [r4, #518]	@ 0x206
			res = move_window(fp->fs, fp->dir_sect);
 80065da:	f8d4 121c 	ldr.w	r1, [r4, #540]	@ 0x21c
 80065de:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
 80065e2:	f7ff f8dc 	bl	800579e <move_window>
 80065e6:	4606      	mov	r6, r0
			if (res == FR_OK) {
 80065e8:	bbc0      	cbnz	r0, 800665c <f_sync+0xc0>
				dir = fp->dir_ptr;
 80065ea:	f8d4 5220 	ldr.w	r5, [r4, #544]	@ 0x220
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 80065ee:	7aeb      	ldrb	r3, [r5, #11]
 80065f0:	f043 0320 	orr.w	r3, r3, #32
 80065f4:	72eb      	strb	r3, [r5, #11]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 80065f6:	f8d4 320c 	ldr.w	r3, [r4, #524]	@ 0x20c
 80065fa:	772b      	strb	r3, [r5, #28]
 80065fc:	f8b4 320c 	ldrh.w	r3, [r4, #524]	@ 0x20c
 8006600:	0a1b      	lsrs	r3, r3, #8
 8006602:	776b      	strb	r3, [r5, #29]
 8006604:	f8b4 320e 	ldrh.w	r3, [r4, #526]	@ 0x20e
 8006608:	77ab      	strb	r3, [r5, #30]
 800660a:	f894 320f 	ldrb.w	r3, [r4, #527]	@ 0x20f
 800660e:	77eb      	strb	r3, [r5, #31]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006610:	f8d4 3210 	ldr.w	r3, [r4, #528]	@ 0x210
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006614:	76ab      	strb	r3, [r5, #26]
 8006616:	f3c3 2207 	ubfx	r2, r3, #8, #8
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800661a:	0c1b      	lsrs	r3, r3, #16
 800661c:	752b      	strb	r3, [r5, #20]
 800661e:	0a1b      	lsrs	r3, r3, #8
 8006620:	756b      	strb	r3, [r5, #21]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006622:	76ea      	strb	r2, [r5, #27]
				tm = GET_FATTIME();							/* Update updated time */
 8006624:	f7fe fa60 	bl	8004ae8 <get_fattime>
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006628:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800662c:	75eb      	strb	r3, [r5, #23]
 800662e:	0c03      	lsrs	r3, r0, #16
 8006630:	762b      	strb	r3, [r5, #24]
 8006632:	0e03      	lsrs	r3, r0, #24
 8006634:	75a8      	strb	r0, [r5, #22]
 8006636:	766b      	strb	r3, [r5, #25]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006638:	74ae      	strb	r6, [r5, #18]
 800663a:	74ee      	strb	r6, [r5, #19]
				fp->flag &= ~FA__WRITTEN;
 800663c:	f894 3206 	ldrb.w	r3, [r4, #518]	@ 0x206
				fp->fs->wflag = 1;
 8006640:	f8d4 0200 	ldr.w	r0, [r4, #512]	@ 0x200
				fp->flag &= ~FA__WRITTEN;
 8006644:	f023 0320 	bic.w	r3, r3, #32
 8006648:	f884 3206 	strb.w	r3, [r4, #518]	@ 0x206
				fp->fs->wflag = 1;
 800664c:	2301      	movs	r3, #1
 800664e:	f880 3204 	strb.w	r3, [r0, #516]	@ 0x204
}
 8006652:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				res = sync_fs(fp->fs);
 8006656:	f7ff b9ff 	b.w	8005a58 <sync_fs>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800665a:	2001      	movs	r0, #1
}
 800665c:	bd70      	pop	{r4, r5, r6, pc}

0800665e <f_close>:
{
 800665e:	b510      	push	{r4, lr}
 8006660:	4604      	mov	r4, r0
	res = f_sync(fp);					/* Flush cached data */
 8006662:	f7ff ff9b 	bl	800659c <f_sync>
	if (res == FR_OK)
 8006666:	b950      	cbnz	r0, 800667e <f_close+0x20>
		res = validate(fp);				/* Lock volume */
 8006668:	4620      	mov	r0, r4
 800666a:	f7ff f881 	bl	8005770 <validate>
		if (res == FR_OK) {
 800666e:	b930      	cbnz	r0, 800667e <f_close+0x20>
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8006670:	f8d4 0228 	ldr.w	r0, [r4, #552]	@ 0x228
 8006674:	f7fe fff6 	bl	8005664 <dec_lock>
			if (res == FR_OK)
 8006678:	b908      	cbnz	r0, 800667e <f_close+0x20>
				fp->fs = 0;				/* Invalidate file object */
 800667a:	f8c4 0200 	str.w	r0, [r4, #512]	@ 0x200
}
 800667e:	bd10      	pop	{r4, pc}

08006680 <f_puts>:
	putbuff pb;
	UINT nw;


	pb.fp = fp;				/* Initialize output buffer */
	pb.nchr = pb.idx = 0;
 8006680:	2300      	movs	r3, #0
{
 8006682:	b510      	push	{r4, lr}
 8006684:	b094      	sub	sp, #80	@ 0x50
	pb.nchr = pb.idx = 0;
 8006686:	e9cd 3302 	strd	r3, r3, [sp, #8]
	pb.fp = fp;				/* Initialize output buffer */
 800668a:	9101      	str	r1, [sp, #4]

	while (*str)			/* Put the string */
 800668c:	1e44      	subs	r4, r0, #1
 800668e:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8006692:	b931      	cbnz	r1, 80066a2 <f_puts+0x22>
		putc_bfd(&pb, *str++);

	if (   pb.idx >= 0		/* Flush buffered characters to the file */
 8006694:	9a02      	ldr	r2, [sp, #8]
 8006696:	2a00      	cmp	r2, #0
 8006698:	da07      	bge.n	80066aa <f_puts+0x2a>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
		&& (UINT)pb.idx == nw) return pb.nchr;
	return EOF;
 800669a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800669e:	b014      	add	sp, #80	@ 0x50
 80066a0:	bd10      	pop	{r4, pc}
		putc_bfd(&pb, *str++);
 80066a2:	a801      	add	r0, sp, #4
 80066a4:	f7ff ff58 	bl	8006558 <putc_bfd>
 80066a8:	e7f1      	b.n	800668e <f_puts+0xe>
		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
 80066aa:	466b      	mov	r3, sp
 80066ac:	9801      	ldr	r0, [sp, #4]
 80066ae:	a904      	add	r1, sp, #16
 80066b0:	f7ff fe6a 	bl	8006388 <f_write>
 80066b4:	2800      	cmp	r0, #0
 80066b6:	d1f0      	bne.n	800669a <f_puts+0x1a>
		&& (UINT)pb.idx == nw) return pb.nchr;
 80066b8:	9a02      	ldr	r2, [sp, #8]
 80066ba:	9b00      	ldr	r3, [sp, #0]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d1ec      	bne.n	800669a <f_puts+0x1a>
 80066c0:	9803      	ldr	r0, [sp, #12]
 80066c2:	e7ec      	b.n	800669e <f_puts+0x1e>

080066c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80066c4:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 80066c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006704 <FATFS_LinkDriverEx+0x40>)
 80066c8:	7a5c      	ldrb	r4, [r3, #9]
 80066ca:	2c01      	cmp	r4, #1
 80066cc:	d817      	bhi.n	80066fe <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 80066ce:	2400      	movs	r4, #0
 80066d0:	7a5d      	ldrb	r5, [r3, #9]
 80066d2:	b2ed      	uxtb	r5, r5
 80066d4:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;  
 80066d6:	7a5d      	ldrb	r5, [r3, #9]
 80066d8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80066dc:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;  
 80066de:	7a58      	ldrb	r0, [r3, #9]
 80066e0:	4418      	add	r0, r3
 80066e2:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 80066e4:	7a5a      	ldrb	r2, [r3, #9]
 80066e6:	1c50      	adds	r0, r2, #1
 80066e8:	b2c0      	uxtb	r0, r0
 80066ea:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 80066ec:	233a      	movs	r3, #58	@ 0x3a
 80066ee:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80066f0:	232f      	movs	r3, #47	@ 0x2f
    path[3] = 0;
 80066f2:	4620      	mov	r0, r4
    path[0] = DiskNum + '0';
 80066f4:	3230      	adds	r2, #48	@ 0x30
 80066f6:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 80066f8:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80066fa:	70cc      	strb	r4, [r1, #3]
    ret = 0;
  }
  
  return ret;
}
 80066fc:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80066fe:	2001      	movs	r0, #1
 8006700:	e7fc      	b.n	80066fc <FATFS_LinkDriverEx+0x38>
 8006702:	bf00      	nop
 8006704:	2000092c 	.word	0x2000092c

08006708 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8006708:	2200      	movs	r2, #0
 800670a:	f7ff bfdb 	b.w	80066c4 <FATFS_LinkDriverEx>
	...

08006710 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006710:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006712:	2200      	movs	r2, #0
 8006714:	490e      	ldr	r1, [pc, #56]	@ (8006750 <MX_USB_DEVICE_Init+0x40>)
 8006716:	480f      	ldr	r0, [pc, #60]	@ (8006754 <MX_USB_DEVICE_Init+0x44>)
 8006718:	f7fe fb35 	bl	8004d86 <USBD_Init>
 800671c:	b108      	cbz	r0, 8006722 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 800671e:	f7fa fddb 	bl	80012d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006722:	490d      	ldr	r1, [pc, #52]	@ (8006758 <MX_USB_DEVICE_Init+0x48>)
 8006724:	480b      	ldr	r0, [pc, #44]	@ (8006754 <MX_USB_DEVICE_Init+0x44>)
 8006726:	f7fe fb43 	bl	8004db0 <USBD_RegisterClass>
 800672a:	b108      	cbz	r0, 8006730 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 800672c:	f7fa fdd4 	bl	80012d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006730:	490a      	ldr	r1, [pc, #40]	@ (800675c <MX_USB_DEVICE_Init+0x4c>)
 8006732:	4808      	ldr	r0, [pc, #32]	@ (8006754 <MX_USB_DEVICE_Init+0x44>)
 8006734:	f7fe faff 	bl	8004d36 <USBD_CDC_RegisterInterface>
 8006738:	b108      	cbz	r0, 800673e <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800673a:	f7fa fdcd 	bl	80012d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800673e:	4805      	ldr	r0, [pc, #20]	@ (8006754 <MX_USB_DEVICE_Init+0x44>)
 8006740:	f7fe fb3d 	bl	8004dbe <USBD_Start>
 8006744:	b118      	cbz	r0, 800674e <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006746:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800674a:	f7fa bdc5 	b.w	80012d8 <Error_Handler>
}
 800674e:	bd08      	pop	{r3, pc}
 8006750:	20000174 	.word	0x20000174
 8006754:	20000938 	.word	0x20000938
 8006758:	200000ec 	.word	0x200000ec
 800675c:	20000130 	.word	0x20000130

08006760 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006760:	2000      	movs	r0, #0
 8006762:	4770      	bx	lr

08006764 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8006764:	2000      	movs	r0, #0
 8006766:	4770      	bx	lr

08006768 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006768:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800676a:	4c05      	ldr	r4, [pc, #20]	@ (8006780 <CDC_Receive_FS+0x18>)
{
 800676c:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800676e:	4620      	mov	r0, r4
 8006770:	f7fe faf0 	bl	8004d54 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006774:	4620      	mov	r0, r4
 8006776:	f7fe faf3 	bl	8004d60 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800677a:	2000      	movs	r0, #0
 800677c:	bd10      	pop	{r4, pc}
 800677e:	bf00      	nop
 8006780:	20000938 	.word	0x20000938

08006784 <CDC_Init_FS>:
{
 8006784:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006786:	4c06      	ldr	r4, [pc, #24]	@ (80067a0 <CDC_Init_FS+0x1c>)
 8006788:	2200      	movs	r2, #0
 800678a:	4620      	mov	r0, r4
 800678c:	4905      	ldr	r1, [pc, #20]	@ (80067a4 <CDC_Init_FS+0x20>)
 800678e:	f7fe fad9 	bl	8004d44 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006792:	4620      	mov	r0, r4
 8006794:	4904      	ldr	r1, [pc, #16]	@ (80067a8 <CDC_Init_FS+0x24>)
 8006796:	f7fe fadd 	bl	8004d54 <USBD_CDC_SetRxBuffer>
}
 800679a:	2000      	movs	r0, #0
 800679c:	bd10      	pop	{r4, pc}
 800679e:	bf00      	nop
 80067a0:	20000938 	.word	0x20000938
 80067a4:	20000bfc 	.word	0x20000bfc
 80067a8:	20000ffc 	.word	0x20000ffc

080067ac <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80067ac:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80067ae:	4801      	ldr	r0, [pc, #4]	@ (80067b4 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80067b0:	800b      	strh	r3, [r1, #0]
}
 80067b2:	4770      	bx	lr
 80067b4:	20000160 	.word	0x20000160

080067b8 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80067b8:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80067ba:	4801      	ldr	r0, [pc, #4]	@ (80067c0 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80067bc:	800b      	strh	r3, [r1, #0]
}
 80067be:	4770      	bx	lr
 80067c0:	2000015c 	.word	0x2000015c

080067c4 <IntToUnicode>:
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 80067c4:	2300      	movs	r3, #0
{
 80067c6:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 80067c8:	461e      	mov	r6, r3
 80067ca:	1c4d      	adds	r5, r1, #1
  for (idx = 0; idx < len; idx++)
 80067cc:	b2dc      	uxtb	r4, r3
 80067ce:	42a2      	cmp	r2, r4
 80067d0:	d800      	bhi.n	80067d4 <IntToUnicode+0x10>
  }
}
 80067d2:	bd70      	pop	{r4, r5, r6, pc}
      pbuf[2 * idx] = (value >> 28) + '0';
 80067d4:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 80067d6:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 80067da:	bf34      	ite	cc
 80067dc:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80067de:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 80067e0:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    value = value << 4;
 80067e4:	0100      	lsls	r0, r0, #4
    pbuf[2 * idx + 1] = 0;
 80067e6:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 80067ea:	3301      	adds	r3, #1
 80067ec:	e7ee      	b.n	80067cc <IntToUnicode+0x8>
	...

080067f0 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 80067f0:	231a      	movs	r3, #26
{
 80067f2:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80067f4:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80067f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006820 <USBD_FS_SerialStrDescriptor+0x30>)
 80067f8:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 80067fc:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 8006800:	1880      	adds	r0, r0, r2
 8006802:	d00a      	beq.n	800681a <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006804:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006808:	4906      	ldr	r1, [pc, #24]	@ (8006824 <USBD_FS_SerialStrDescriptor+0x34>)
 800680a:	2208      	movs	r2, #8
 800680c:	f7ff ffda 	bl	80067c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006810:	2204      	movs	r2, #4
 8006812:	4620      	mov	r0, r4
 8006814:	3110      	adds	r1, #16
 8006816:	f7ff ffd5 	bl	80067c4 <IntToUnicode>
}
 800681a:	4803      	ldr	r0, [pc, #12]	@ (8006828 <USBD_FS_SerialStrDescriptor+0x38>)
 800681c:	bd10      	pop	{r4, pc}
 800681e:	bf00      	nop
 8006820:	1ffff000 	.word	0x1ffff000
 8006824:	20000142 	.word	0x20000142
 8006828:	20000140 	.word	0x20000140

0800682c <USBD_FS_ManufacturerStrDescriptor>:
{
 800682c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800682e:	4c04      	ldr	r4, [pc, #16]	@ (8006840 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8006830:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006832:	4804      	ldr	r0, [pc, #16]	@ (8006844 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006834:	4621      	mov	r1, r4
 8006836:	f7fe fddb 	bl	80053f0 <USBD_GetString>
}
 800683a:	4620      	mov	r0, r4
 800683c:	bd10      	pop	{r4, pc}
 800683e:	bf00      	nop
 8006840:	200013fc 	.word	0x200013fc
 8006844:	08009860 	.word	0x08009860

08006848 <USBD_FS_ProductStrDescriptor>:
{
 8006848:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800684a:	4c04      	ldr	r4, [pc, #16]	@ (800685c <USBD_FS_ProductStrDescriptor+0x14>)
{
 800684c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800684e:	4804      	ldr	r0, [pc, #16]	@ (8006860 <USBD_FS_ProductStrDescriptor+0x18>)
 8006850:	4621      	mov	r1, r4
 8006852:	f7fe fdcd 	bl	80053f0 <USBD_GetString>
}
 8006856:	4620      	mov	r0, r4
 8006858:	bd10      	pop	{r4, pc}
 800685a:	bf00      	nop
 800685c:	200013fc 	.word	0x200013fc
 8006860:	08009873 	.word	0x08009873

08006864 <USBD_FS_ConfigStrDescriptor>:
{
 8006864:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006866:	4c04      	ldr	r4, [pc, #16]	@ (8006878 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8006868:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800686a:	4804      	ldr	r0, [pc, #16]	@ (800687c <USBD_FS_ConfigStrDescriptor+0x18>)
 800686c:	4621      	mov	r1, r4
 800686e:	f7fe fdbf 	bl	80053f0 <USBD_GetString>
}
 8006872:	4620      	mov	r0, r4
 8006874:	bd10      	pop	{r4, pc}
 8006876:	bf00      	nop
 8006878:	200013fc 	.word	0x200013fc
 800687c:	08009889 	.word	0x08009889

08006880 <USBD_FS_InterfaceStrDescriptor>:
{
 8006880:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006882:	4c04      	ldr	r4, [pc, #16]	@ (8006894 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8006884:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006886:	4804      	ldr	r0, [pc, #16]	@ (8006898 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8006888:	4621      	mov	r1, r4
 800688a:	f7fe fdb1 	bl	80053f0 <USBD_GetString>
}
 800688e:	4620      	mov	r0, r4
 8006890:	bd10      	pop	{r4, pc}
 8006892:	bf00      	nop
 8006894:	200013fc 	.word	0x200013fc
 8006898:	08009894 	.word	0x08009894

0800689c <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 800689c:	b118      	cbz	r0, 80068a6 <USBD_Get_USB_Status+0xa>
 800689e:	2802      	cmp	r0, #2
 80068a0:	bf0c      	ite	eq
 80068a2:	2001      	moveq	r0, #1
 80068a4:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 80068a6:	4770      	bx	lr

080068a8 <HAL_PCD_MspInit>:
{
 80068a8:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80068aa:	4b0e      	ldr	r3, [pc, #56]	@ (80068e4 <HAL_PCD_MspInit+0x3c>)
 80068ac:	6802      	ldr	r2, [r0, #0]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d115      	bne.n	80068de <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 80068b2:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 80068b6:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80068b8:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80068ba:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80068be:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80068c0:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80068c2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80068c4:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80068c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068ca:	9301      	str	r3, [sp, #4]
 80068cc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80068ce:	f7fb fa07 	bl	8001ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80068d2:	2014      	movs	r0, #20
}
 80068d4:	b003      	add	sp, #12
 80068d6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80068da:	f7fb ba31 	b.w	8001d40 <HAL_NVIC_EnableIRQ>
}
 80068de:	b003      	add	sp, #12
 80068e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80068e4:	40005c00 	.word	0x40005c00

080068e8 <HAL_PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80068e8:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 80068ec:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80068f0:	f7fe ba7e 	b.w	8004df0 <USBD_LL_SetupStage>

080068f4 <HAL_PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80068f4:	2328      	movs	r3, #40	@ 0x28
 80068f6:	fb03 0301 	mla	r3, r3, r1, r0
 80068fa:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80068fe:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8006902:	f7fe baa2 	b.w	8004e4a <USBD_LL_DataOutStage>

08006906 <HAL_PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006906:	2328      	movs	r3, #40	@ 0x28
 8006908:	fb03 0301 	mla	r3, r3, r1, r0
 800690c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8006910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006912:	f7fe bad2 	b.w	8004eba <USBD_LL_DataInStage>

08006916 <HAL_PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006916:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800691a:	f7fe bb67 	b.w	8004fec <USBD_LL_SOF>

0800691e <HAL_PCD_ResetCallback>:
{
 800691e:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006920:	7983      	ldrb	r3, [r0, #6]
{
 8006922:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006924:	2b02      	cmp	r3, #2
 8006926:	d001      	beq.n	800692c <HAL_PCD_ResetCallback+0xe>
    Error_Handler();
 8006928:	f7fa fcd6 	bl	80012d8 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800692c:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 8006930:	2101      	movs	r1, #1
 8006932:	f7fe fb45 	bl	8004fc0 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006936:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 800693a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800693e:	f7fe bb18 	b.w	8004f72 <USBD_LL_Reset>
	...

08006944 <HAL_PCD_SuspendCallback>:
{
 8006944:	b510      	push	{r4, lr}
 8006946:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006948:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800694c:	f7fe fb3b 	bl	8004fc6 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 8006950:	7aa3      	ldrb	r3, [r4, #10]
 8006952:	b123      	cbz	r3, 800695e <HAL_PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006954:	4a02      	ldr	r2, [pc, #8]	@ (8006960 <HAL_PCD_SuspendCallback+0x1c>)
 8006956:	6913      	ldr	r3, [r2, #16]
 8006958:	f043 0306 	orr.w	r3, r3, #6
 800695c:	6113      	str	r3, [r2, #16]
}
 800695e:	bd10      	pop	{r4, pc}
 8006960:	e000ed00 	.word	0xe000ed00

08006964 <HAL_PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006964:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8006968:	f7fe bb36 	b.w	8004fd8 <USBD_LL_Resume>

0800696c <USBD_LL_Init>:
{
 800696c:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 800696e:	4b1d      	ldr	r3, [pc, #116]	@ (80069e4 <USBD_LL_Init+0x78>)
{
 8006970:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 8006972:	481d      	ldr	r0, [pc, #116]	@ (80069e8 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.Instance = USB;
 8006974:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006976:	2308      	movs	r3, #8
 8006978:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800697a:	2302      	movs	r3, #2
 800697c:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800697e:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8006980:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8006984:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8006988:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800698a:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800698c:	f7fb ff54 	bl	8002838 <HAL_PCD_Init>
 8006990:	b108      	cbz	r0, 8006996 <USBD_LL_Init+0x2a>
    Error_Handler( );
 8006992:	f7fa fca1 	bl	80012d8 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006996:	2200      	movs	r2, #0
 8006998:	2318      	movs	r3, #24
 800699a:	4611      	mov	r1, r2
 800699c:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80069a0:	f7fc fdd5 	bl	800354e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80069a4:	2358      	movs	r3, #88	@ 0x58
 80069a6:	2200      	movs	r2, #0
 80069a8:	2180      	movs	r1, #128	@ 0x80
 80069aa:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80069ae:	f7fc fdce 	bl	800354e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80069b2:	23c0      	movs	r3, #192	@ 0xc0
 80069b4:	2200      	movs	r2, #0
 80069b6:	2181      	movs	r1, #129	@ 0x81
 80069b8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80069bc:	f7fc fdc7 	bl	800354e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80069c0:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80069c4:	2200      	movs	r2, #0
 80069c6:	2101      	movs	r1, #1
 80069c8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80069cc:	f7fc fdbf 	bl	800354e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80069d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069d4:	2200      	movs	r2, #0
 80069d6:	2182      	movs	r1, #130	@ 0x82
 80069d8:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80069dc:	f7fc fdb7 	bl	800354e <HAL_PCDEx_PMAConfig>
}
 80069e0:	2000      	movs	r0, #0
 80069e2:	bd10      	pop	{r4, pc}
 80069e4:	40005c00 	.word	0x40005c00
 80069e8:	2000181c 	.word	0x2000181c

080069ec <USBD_LL_Start>:
{
 80069ec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80069ee:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80069f2:	f7fb ff84 	bl	80028fe <HAL_PCD_Start>
}
 80069f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80069fa:	f7ff bf4f 	b.w	800689c <USBD_Get_USB_Status>

080069fe <USBD_LL_OpenEP>:
{
 80069fe:	b510      	push	{r4, lr}
 8006a00:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a02:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 8006a06:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006a08:	4623      	mov	r3, r4
 8006a0a:	f7fc fca9 	bl	8003360 <HAL_PCD_EP_Open>
}
 8006a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a12:	f7ff bf43 	b.w	800689c <USBD_Get_USB_Status>

08006a16 <USBD_LL_CloseEP>:
{
 8006a16:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006a18:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006a1c:	f7fc fcd0 	bl	80033c0 <HAL_PCD_EP_Close>
}
 8006a20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a24:	f7ff bf3a 	b.w	800689c <USBD_Get_USB_Status>

08006a28 <USBD_LL_StallEP>:
{
 8006a28:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006a2a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006a2e:	f7fc fd26 	bl	800347e <HAL_PCD_EP_SetStall>
}
 8006a32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a36:	f7ff bf31 	b.w	800689c <USBD_Get_USB_Status>

08006a3a <USBD_LL_ClearStallEP>:
{
 8006a3a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006a3c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006a40:	f7fc fd53 	bl	80034ea <HAL_PCD_EP_ClrStall>
}
 8006a44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a48:	f7ff bf28 	b.w	800689c <USBD_Get_USB_Status>

08006a4c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006a4c:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 8006a4e:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006a52:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006a56:	bf1b      	ittet	ne
 8006a58:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 8006a5c:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006a60:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006a64:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006a66:	bf08      	it	eq
 8006a68:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 8006a6c:	4770      	bx	lr

08006a6e <USBD_LL_SetUSBAddress>:
{
 8006a6e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006a70:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006a74:	f7fb ff5c 	bl	8002930 <HAL_PCD_SetAddress>
}
 8006a78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a7c:	f7ff bf0e 	b.w	800689c <USBD_Get_USB_Status>

08006a80 <USBD_LL_Transmit>:
{
 8006a80:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006a82:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006a86:	f7fc fce2 	bl	800344e <HAL_PCD_EP_Transmit>
}
 8006a8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006a8e:	f7ff bf05 	b.w	800689c <USBD_Get_USB_Status>

08006a92 <USBD_LL_PrepareReceive>:
{
 8006a92:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006a94:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006a98:	f7fc fcba 	bl	8003410 <HAL_PCD_EP_Receive>
}
 8006a9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006aa0:	f7ff befc 	b.w	800689c <USBD_Get_USB_Status>

08006aa4 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006aa4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8006aa8:	f7fc bcc9 	b.w	800343e <HAL_PCD_EP_GetRxCount>

08006aac <USBD_static_malloc>:
}
 8006aac:	4800      	ldr	r0, [pc, #0]	@ (8006ab0 <USBD_static_malloc+0x4>)
 8006aae:	4770      	bx	lr
 8006ab0:	200015fc 	.word	0x200015fc

08006ab4 <USBD_static_free>:
}
 8006ab4:	4770      	bx	lr

08006ab6 <HAL_PCDEx_SetConnectionState>:
}
 8006ab6:	4770      	bx	lr

08006ab8 <__cvt>:
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006abe:	461d      	mov	r5, r3
 8006ac0:	bfbb      	ittet	lt
 8006ac2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006ac6:	461d      	movlt	r5, r3
 8006ac8:	2300      	movge	r3, #0
 8006aca:	232d      	movlt	r3, #45	@ 0x2d
 8006acc:	b088      	sub	sp, #32
 8006ace:	4614      	mov	r4, r2
 8006ad0:	bfb8      	it	lt
 8006ad2:	4614      	movlt	r4, r2
 8006ad4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ad6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006ad8:	7013      	strb	r3, [r2, #0]
 8006ada:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006adc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006ae0:	f023 0820 	bic.w	r8, r3, #32
 8006ae4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ae8:	d005      	beq.n	8006af6 <__cvt+0x3e>
 8006aea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006aee:	d100      	bne.n	8006af2 <__cvt+0x3a>
 8006af0:	3601      	adds	r6, #1
 8006af2:	2302      	movs	r3, #2
 8006af4:	e000      	b.n	8006af8 <__cvt+0x40>
 8006af6:	2303      	movs	r3, #3
 8006af8:	aa07      	add	r2, sp, #28
 8006afa:	9204      	str	r2, [sp, #16]
 8006afc:	aa06      	add	r2, sp, #24
 8006afe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006b02:	e9cd 3600 	strd	r3, r6, [sp]
 8006b06:	4622      	mov	r2, r4
 8006b08:	462b      	mov	r3, r5
 8006b0a:	f000 fe6d 	bl	80077e8 <_dtoa_r>
 8006b0e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006b12:	4607      	mov	r7, r0
 8006b14:	d119      	bne.n	8006b4a <__cvt+0x92>
 8006b16:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006b18:	07db      	lsls	r3, r3, #31
 8006b1a:	d50e      	bpl.n	8006b3a <__cvt+0x82>
 8006b1c:	eb00 0906 	add.w	r9, r0, r6
 8006b20:	2200      	movs	r2, #0
 8006b22:	2300      	movs	r3, #0
 8006b24:	4620      	mov	r0, r4
 8006b26:	4629      	mov	r1, r5
 8006b28:	f7f9 fff2 	bl	8000b10 <__aeabi_dcmpeq>
 8006b2c:	b108      	cbz	r0, 8006b32 <__cvt+0x7a>
 8006b2e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006b32:	2230      	movs	r2, #48	@ 0x30
 8006b34:	9b07      	ldr	r3, [sp, #28]
 8006b36:	454b      	cmp	r3, r9
 8006b38:	d31e      	bcc.n	8006b78 <__cvt+0xc0>
 8006b3a:	4638      	mov	r0, r7
 8006b3c:	9b07      	ldr	r3, [sp, #28]
 8006b3e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006b40:	1bdb      	subs	r3, r3, r7
 8006b42:	6013      	str	r3, [r2, #0]
 8006b44:	b008      	add	sp, #32
 8006b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b4e:	eb00 0906 	add.w	r9, r0, r6
 8006b52:	d1e5      	bne.n	8006b20 <__cvt+0x68>
 8006b54:	7803      	ldrb	r3, [r0, #0]
 8006b56:	2b30      	cmp	r3, #48	@ 0x30
 8006b58:	d10a      	bne.n	8006b70 <__cvt+0xb8>
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	4620      	mov	r0, r4
 8006b60:	4629      	mov	r1, r5
 8006b62:	f7f9 ffd5 	bl	8000b10 <__aeabi_dcmpeq>
 8006b66:	b918      	cbnz	r0, 8006b70 <__cvt+0xb8>
 8006b68:	f1c6 0601 	rsb	r6, r6, #1
 8006b6c:	f8ca 6000 	str.w	r6, [sl]
 8006b70:	f8da 3000 	ldr.w	r3, [sl]
 8006b74:	4499      	add	r9, r3
 8006b76:	e7d3      	b.n	8006b20 <__cvt+0x68>
 8006b78:	1c59      	adds	r1, r3, #1
 8006b7a:	9107      	str	r1, [sp, #28]
 8006b7c:	701a      	strb	r2, [r3, #0]
 8006b7e:	e7d9      	b.n	8006b34 <__cvt+0x7c>

08006b80 <__exponent>:
 8006b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b82:	2900      	cmp	r1, #0
 8006b84:	bfb6      	itet	lt
 8006b86:	232d      	movlt	r3, #45	@ 0x2d
 8006b88:	232b      	movge	r3, #43	@ 0x2b
 8006b8a:	4249      	neglt	r1, r1
 8006b8c:	2909      	cmp	r1, #9
 8006b8e:	7002      	strb	r2, [r0, #0]
 8006b90:	7043      	strb	r3, [r0, #1]
 8006b92:	dd29      	ble.n	8006be8 <__exponent+0x68>
 8006b94:	f10d 0307 	add.w	r3, sp, #7
 8006b98:	461d      	mov	r5, r3
 8006b9a:	270a      	movs	r7, #10
 8006b9c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	fb07 1416 	mls	r4, r7, r6, r1
 8006ba6:	3430      	adds	r4, #48	@ 0x30
 8006ba8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006bac:	460c      	mov	r4, r1
 8006bae:	2c63      	cmp	r4, #99	@ 0x63
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bb6:	dcf1      	bgt.n	8006b9c <__exponent+0x1c>
 8006bb8:	3130      	adds	r1, #48	@ 0x30
 8006bba:	1e94      	subs	r4, r2, #2
 8006bbc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006bc0:	4623      	mov	r3, r4
 8006bc2:	1c41      	adds	r1, r0, #1
 8006bc4:	42ab      	cmp	r3, r5
 8006bc6:	d30a      	bcc.n	8006bde <__exponent+0x5e>
 8006bc8:	f10d 0309 	add.w	r3, sp, #9
 8006bcc:	1a9b      	subs	r3, r3, r2
 8006bce:	42ac      	cmp	r4, r5
 8006bd0:	bf88      	it	hi
 8006bd2:	2300      	movhi	r3, #0
 8006bd4:	3302      	adds	r3, #2
 8006bd6:	4403      	add	r3, r0
 8006bd8:	1a18      	subs	r0, r3, r0
 8006bda:	b003      	add	sp, #12
 8006bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bde:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006be2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006be6:	e7ed      	b.n	8006bc4 <__exponent+0x44>
 8006be8:	2330      	movs	r3, #48	@ 0x30
 8006bea:	3130      	adds	r1, #48	@ 0x30
 8006bec:	7083      	strb	r3, [r0, #2]
 8006bee:	70c1      	strb	r1, [r0, #3]
 8006bf0:	1d03      	adds	r3, r0, #4
 8006bf2:	e7f1      	b.n	8006bd8 <__exponent+0x58>

08006bf4 <_printf_float>:
 8006bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf8:	b091      	sub	sp, #68	@ 0x44
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006c00:	4616      	mov	r6, r2
 8006c02:	461f      	mov	r7, r3
 8006c04:	4605      	mov	r5, r0
 8006c06:	f000 fce1 	bl	80075cc <_localeconv_r>
 8006c0a:	6803      	ldr	r3, [r0, #0]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	9308      	str	r3, [sp, #32]
 8006c10:	f7f9 fa9e 	bl	8000150 <strlen>
 8006c14:	2300      	movs	r3, #0
 8006c16:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c18:	f8d8 3000 	ldr.w	r3, [r8]
 8006c1c:	9009      	str	r0, [sp, #36]	@ 0x24
 8006c1e:	3307      	adds	r3, #7
 8006c20:	f023 0307 	bic.w	r3, r3, #7
 8006c24:	f103 0208 	add.w	r2, r3, #8
 8006c28:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c2c:	f8d4 b000 	ldr.w	fp, [r4]
 8006c30:	f8c8 2000 	str.w	r2, [r8]
 8006c34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c3e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006c42:	f04f 32ff 	mov.w	r2, #4294967295
 8006c46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c4e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ec0 <_printf_float+0x2cc>)
 8006c50:	f7f9 ff90 	bl	8000b74 <__aeabi_dcmpun>
 8006c54:	bb70      	cbnz	r0, 8006cb4 <_printf_float+0xc0>
 8006c56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5e:	4b98      	ldr	r3, [pc, #608]	@ (8006ec0 <_printf_float+0x2cc>)
 8006c60:	f7f9 ff6a 	bl	8000b38 <__aeabi_dcmple>
 8006c64:	bb30      	cbnz	r0, 8006cb4 <_printf_float+0xc0>
 8006c66:	2200      	movs	r2, #0
 8006c68:	2300      	movs	r3, #0
 8006c6a:	4640      	mov	r0, r8
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	f7f9 ff59 	bl	8000b24 <__aeabi_dcmplt>
 8006c72:	b110      	cbz	r0, 8006c7a <_printf_float+0x86>
 8006c74:	232d      	movs	r3, #45	@ 0x2d
 8006c76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c7a:	4a92      	ldr	r2, [pc, #584]	@ (8006ec4 <_printf_float+0x2d0>)
 8006c7c:	4b92      	ldr	r3, [pc, #584]	@ (8006ec8 <_printf_float+0x2d4>)
 8006c7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c82:	bf94      	ite	ls
 8006c84:	4690      	movls	r8, r2
 8006c86:	4698      	movhi	r8, r3
 8006c88:	2303      	movs	r3, #3
 8006c8a:	f04f 0900 	mov.w	r9, #0
 8006c8e:	6123      	str	r3, [r4, #16]
 8006c90:	f02b 0304 	bic.w	r3, fp, #4
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	4633      	mov	r3, r6
 8006c98:	4621      	mov	r1, r4
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	9700      	str	r7, [sp, #0]
 8006c9e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006ca0:	f000 f9d4 	bl	800704c <_printf_common>
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	f040 8090 	bne.w	8006dca <_printf_float+0x1d6>
 8006caa:	f04f 30ff 	mov.w	r0, #4294967295
 8006cae:	b011      	add	sp, #68	@ 0x44
 8006cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb4:	4642      	mov	r2, r8
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	4640      	mov	r0, r8
 8006cba:	4649      	mov	r1, r9
 8006cbc:	f7f9 ff5a 	bl	8000b74 <__aeabi_dcmpun>
 8006cc0:	b148      	cbz	r0, 8006cd6 <_printf_float+0xe2>
 8006cc2:	464b      	mov	r3, r9
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	bfb8      	it	lt
 8006cc8:	232d      	movlt	r3, #45	@ 0x2d
 8006cca:	4a80      	ldr	r2, [pc, #512]	@ (8006ecc <_printf_float+0x2d8>)
 8006ccc:	bfb8      	it	lt
 8006cce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006cd2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ed0 <_printf_float+0x2dc>)
 8006cd4:	e7d3      	b.n	8006c7e <_printf_float+0x8a>
 8006cd6:	6863      	ldr	r3, [r4, #4]
 8006cd8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	d13f      	bne.n	8006d60 <_printf_float+0x16c>
 8006ce0:	2306      	movs	r3, #6
 8006ce2:	6063      	str	r3, [r4, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006cea:	6023      	str	r3, [r4, #0]
 8006cec:	9206      	str	r2, [sp, #24]
 8006cee:	aa0e      	add	r2, sp, #56	@ 0x38
 8006cf0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006cf4:	aa0d      	add	r2, sp, #52	@ 0x34
 8006cf6:	9203      	str	r2, [sp, #12]
 8006cf8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006cfc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006d00:	6863      	ldr	r3, [r4, #4]
 8006d02:	4642      	mov	r2, r8
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	4628      	mov	r0, r5
 8006d08:	464b      	mov	r3, r9
 8006d0a:	910a      	str	r1, [sp, #40]	@ 0x28
 8006d0c:	f7ff fed4 	bl	8006ab8 <__cvt>
 8006d10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d12:	4680      	mov	r8, r0
 8006d14:	2947      	cmp	r1, #71	@ 0x47
 8006d16:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006d18:	d128      	bne.n	8006d6c <_printf_float+0x178>
 8006d1a:	1cc8      	adds	r0, r1, #3
 8006d1c:	db02      	blt.n	8006d24 <_printf_float+0x130>
 8006d1e:	6863      	ldr	r3, [r4, #4]
 8006d20:	4299      	cmp	r1, r3
 8006d22:	dd40      	ble.n	8006da6 <_printf_float+0x1b2>
 8006d24:	f1aa 0a02 	sub.w	sl, sl, #2
 8006d28:	fa5f fa8a 	uxtb.w	sl, sl
 8006d2c:	4652      	mov	r2, sl
 8006d2e:	3901      	subs	r1, #1
 8006d30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006d34:	910d      	str	r1, [sp, #52]	@ 0x34
 8006d36:	f7ff ff23 	bl	8006b80 <__exponent>
 8006d3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d3c:	4681      	mov	r9, r0
 8006d3e:	1813      	adds	r3, r2, r0
 8006d40:	2a01      	cmp	r2, #1
 8006d42:	6123      	str	r3, [r4, #16]
 8006d44:	dc02      	bgt.n	8006d4c <_printf_float+0x158>
 8006d46:	6822      	ldr	r2, [r4, #0]
 8006d48:	07d2      	lsls	r2, r2, #31
 8006d4a:	d501      	bpl.n	8006d50 <_printf_float+0x15c>
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	6123      	str	r3, [r4, #16]
 8006d50:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d09e      	beq.n	8006c96 <_printf_float+0xa2>
 8006d58:	232d      	movs	r3, #45	@ 0x2d
 8006d5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d5e:	e79a      	b.n	8006c96 <_printf_float+0xa2>
 8006d60:	2947      	cmp	r1, #71	@ 0x47
 8006d62:	d1bf      	bne.n	8006ce4 <_printf_float+0xf0>
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1bd      	bne.n	8006ce4 <_printf_float+0xf0>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e7ba      	b.n	8006ce2 <_printf_float+0xee>
 8006d6c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d70:	d9dc      	bls.n	8006d2c <_printf_float+0x138>
 8006d72:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d76:	d118      	bne.n	8006daa <_printf_float+0x1b6>
 8006d78:	2900      	cmp	r1, #0
 8006d7a:	6863      	ldr	r3, [r4, #4]
 8006d7c:	dd0b      	ble.n	8006d96 <_printf_float+0x1a2>
 8006d7e:	6121      	str	r1, [r4, #16]
 8006d80:	b913      	cbnz	r3, 8006d88 <_printf_float+0x194>
 8006d82:	6822      	ldr	r2, [r4, #0]
 8006d84:	07d0      	lsls	r0, r2, #31
 8006d86:	d502      	bpl.n	8006d8e <_printf_float+0x19a>
 8006d88:	3301      	adds	r3, #1
 8006d8a:	440b      	add	r3, r1
 8006d8c:	6123      	str	r3, [r4, #16]
 8006d8e:	f04f 0900 	mov.w	r9, #0
 8006d92:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d94:	e7dc      	b.n	8006d50 <_printf_float+0x15c>
 8006d96:	b913      	cbnz	r3, 8006d9e <_printf_float+0x1aa>
 8006d98:	6822      	ldr	r2, [r4, #0]
 8006d9a:	07d2      	lsls	r2, r2, #31
 8006d9c:	d501      	bpl.n	8006da2 <_printf_float+0x1ae>
 8006d9e:	3302      	adds	r3, #2
 8006da0:	e7f4      	b.n	8006d8c <_printf_float+0x198>
 8006da2:	2301      	movs	r3, #1
 8006da4:	e7f2      	b.n	8006d8c <_printf_float+0x198>
 8006da6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006daa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006dac:	4299      	cmp	r1, r3
 8006dae:	db05      	blt.n	8006dbc <_printf_float+0x1c8>
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	6121      	str	r1, [r4, #16]
 8006db4:	07d8      	lsls	r0, r3, #31
 8006db6:	d5ea      	bpl.n	8006d8e <_printf_float+0x19a>
 8006db8:	1c4b      	adds	r3, r1, #1
 8006dba:	e7e7      	b.n	8006d8c <_printf_float+0x198>
 8006dbc:	2900      	cmp	r1, #0
 8006dbe:	bfcc      	ite	gt
 8006dc0:	2201      	movgt	r2, #1
 8006dc2:	f1c1 0202 	rsble	r2, r1, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	e7e0      	b.n	8006d8c <_printf_float+0x198>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	055a      	lsls	r2, r3, #21
 8006dce:	d407      	bmi.n	8006de0 <_printf_float+0x1ec>
 8006dd0:	6923      	ldr	r3, [r4, #16]
 8006dd2:	4642      	mov	r2, r8
 8006dd4:	4631      	mov	r1, r6
 8006dd6:	4628      	mov	r0, r5
 8006dd8:	47b8      	blx	r7
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d12b      	bne.n	8006e36 <_printf_float+0x242>
 8006dde:	e764      	b.n	8006caa <_printf_float+0xb6>
 8006de0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006de4:	f240 80dc 	bls.w	8006fa0 <_printf_float+0x3ac>
 8006de8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006dec:	2200      	movs	r2, #0
 8006dee:	2300      	movs	r3, #0
 8006df0:	f7f9 fe8e 	bl	8000b10 <__aeabi_dcmpeq>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d033      	beq.n	8006e60 <_printf_float+0x26c>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	4631      	mov	r1, r6
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	4a35      	ldr	r2, [pc, #212]	@ (8006ed4 <_printf_float+0x2e0>)
 8006e00:	47b8      	blx	r7
 8006e02:	3001      	adds	r0, #1
 8006e04:	f43f af51 	beq.w	8006caa <_printf_float+0xb6>
 8006e08:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006e0c:	4543      	cmp	r3, r8
 8006e0e:	db02      	blt.n	8006e16 <_printf_float+0x222>
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	07d8      	lsls	r0, r3, #31
 8006e14:	d50f      	bpl.n	8006e36 <_printf_float+0x242>
 8006e16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	47b8      	blx	r7
 8006e20:	3001      	adds	r0, #1
 8006e22:	f43f af42 	beq.w	8006caa <_printf_float+0xb6>
 8006e26:	f04f 0900 	mov.w	r9, #0
 8006e2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e2e:	f104 0a1a 	add.w	sl, r4, #26
 8006e32:	45c8      	cmp	r8, r9
 8006e34:	dc09      	bgt.n	8006e4a <_printf_float+0x256>
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	079b      	lsls	r3, r3, #30
 8006e3a:	f100 8102 	bmi.w	8007042 <_printf_float+0x44e>
 8006e3e:	68e0      	ldr	r0, [r4, #12]
 8006e40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e42:	4298      	cmp	r0, r3
 8006e44:	bfb8      	it	lt
 8006e46:	4618      	movlt	r0, r3
 8006e48:	e731      	b.n	8006cae <_printf_float+0xba>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	4652      	mov	r2, sl
 8006e4e:	4631      	mov	r1, r6
 8006e50:	4628      	mov	r0, r5
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	f43f af28 	beq.w	8006caa <_printf_float+0xb6>
 8006e5a:	f109 0901 	add.w	r9, r9, #1
 8006e5e:	e7e8      	b.n	8006e32 <_printf_float+0x23e>
 8006e60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	dc38      	bgt.n	8006ed8 <_printf_float+0x2e4>
 8006e66:	2301      	movs	r3, #1
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	4a19      	ldr	r2, [pc, #100]	@ (8006ed4 <_printf_float+0x2e0>)
 8006e6e:	47b8      	blx	r7
 8006e70:	3001      	adds	r0, #1
 8006e72:	f43f af1a 	beq.w	8006caa <_printf_float+0xb6>
 8006e76:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006e7a:	ea59 0303 	orrs.w	r3, r9, r3
 8006e7e:	d102      	bne.n	8006e86 <_printf_float+0x292>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	07d9      	lsls	r1, r3, #31
 8006e84:	d5d7      	bpl.n	8006e36 <_printf_float+0x242>
 8006e86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006e8a:	4631      	mov	r1, r6
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	47b8      	blx	r7
 8006e90:	3001      	adds	r0, #1
 8006e92:	f43f af0a 	beq.w	8006caa <_printf_float+0xb6>
 8006e96:	f04f 0a00 	mov.w	sl, #0
 8006e9a:	f104 0b1a 	add.w	fp, r4, #26
 8006e9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ea0:	425b      	negs	r3, r3
 8006ea2:	4553      	cmp	r3, sl
 8006ea4:	dc01      	bgt.n	8006eaa <_printf_float+0x2b6>
 8006ea6:	464b      	mov	r3, r9
 8006ea8:	e793      	b.n	8006dd2 <_printf_float+0x1de>
 8006eaa:	2301      	movs	r3, #1
 8006eac:	465a      	mov	r2, fp
 8006eae:	4631      	mov	r1, r6
 8006eb0:	4628      	mov	r0, r5
 8006eb2:	47b8      	blx	r7
 8006eb4:	3001      	adds	r0, #1
 8006eb6:	f43f aef8 	beq.w	8006caa <_printf_float+0xb6>
 8006eba:	f10a 0a01 	add.w	sl, sl, #1
 8006ebe:	e7ee      	b.n	8006e9e <_printf_float+0x2aa>
 8006ec0:	7fefffff 	.word	0x7fefffff
 8006ec4:	080098a2 	.word	0x080098a2
 8006ec8:	080098a6 	.word	0x080098a6
 8006ecc:	080098aa 	.word	0x080098aa
 8006ed0:	080098ae 	.word	0x080098ae
 8006ed4:	080098b2 	.word	0x080098b2
 8006ed8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006eda:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006ede:	4553      	cmp	r3, sl
 8006ee0:	bfa8      	it	ge
 8006ee2:	4653      	movge	r3, sl
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	4699      	mov	r9, r3
 8006ee8:	dc36      	bgt.n	8006f58 <_printf_float+0x364>
 8006eea:	f04f 0b00 	mov.w	fp, #0
 8006eee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ef2:	f104 021a 	add.w	r2, r4, #26
 8006ef6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ef8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006efa:	eba3 0309 	sub.w	r3, r3, r9
 8006efe:	455b      	cmp	r3, fp
 8006f00:	dc31      	bgt.n	8006f66 <_printf_float+0x372>
 8006f02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f04:	459a      	cmp	sl, r3
 8006f06:	dc3a      	bgt.n	8006f7e <_printf_float+0x38a>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	07da      	lsls	r2, r3, #31
 8006f0c:	d437      	bmi.n	8006f7e <_printf_float+0x38a>
 8006f0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f10:	ebaa 0903 	sub.w	r9, sl, r3
 8006f14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f16:	ebaa 0303 	sub.w	r3, sl, r3
 8006f1a:	4599      	cmp	r9, r3
 8006f1c:	bfa8      	it	ge
 8006f1e:	4699      	movge	r9, r3
 8006f20:	f1b9 0f00 	cmp.w	r9, #0
 8006f24:	dc33      	bgt.n	8006f8e <_printf_float+0x39a>
 8006f26:	f04f 0800 	mov.w	r8, #0
 8006f2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f2e:	f104 0b1a 	add.w	fp, r4, #26
 8006f32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f34:	ebaa 0303 	sub.w	r3, sl, r3
 8006f38:	eba3 0309 	sub.w	r3, r3, r9
 8006f3c:	4543      	cmp	r3, r8
 8006f3e:	f77f af7a 	ble.w	8006e36 <_printf_float+0x242>
 8006f42:	2301      	movs	r3, #1
 8006f44:	465a      	mov	r2, fp
 8006f46:	4631      	mov	r1, r6
 8006f48:	4628      	mov	r0, r5
 8006f4a:	47b8      	blx	r7
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	f43f aeac 	beq.w	8006caa <_printf_float+0xb6>
 8006f52:	f108 0801 	add.w	r8, r8, #1
 8006f56:	e7ec      	b.n	8006f32 <_printf_float+0x33e>
 8006f58:	4642      	mov	r2, r8
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	47b8      	blx	r7
 8006f60:	3001      	adds	r0, #1
 8006f62:	d1c2      	bne.n	8006eea <_printf_float+0x2f6>
 8006f64:	e6a1      	b.n	8006caa <_printf_float+0xb6>
 8006f66:	2301      	movs	r3, #1
 8006f68:	4631      	mov	r1, r6
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	920a      	str	r2, [sp, #40]	@ 0x28
 8006f6e:	47b8      	blx	r7
 8006f70:	3001      	adds	r0, #1
 8006f72:	f43f ae9a 	beq.w	8006caa <_printf_float+0xb6>
 8006f76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f78:	f10b 0b01 	add.w	fp, fp, #1
 8006f7c:	e7bb      	b.n	8006ef6 <_printf_float+0x302>
 8006f7e:	4631      	mov	r1, r6
 8006f80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006f84:	4628      	mov	r0, r5
 8006f86:	47b8      	blx	r7
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d1c0      	bne.n	8006f0e <_printf_float+0x31a>
 8006f8c:	e68d      	b.n	8006caa <_printf_float+0xb6>
 8006f8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f90:	464b      	mov	r3, r9
 8006f92:	4631      	mov	r1, r6
 8006f94:	4628      	mov	r0, r5
 8006f96:	4442      	add	r2, r8
 8006f98:	47b8      	blx	r7
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d1c3      	bne.n	8006f26 <_printf_float+0x332>
 8006f9e:	e684      	b.n	8006caa <_printf_float+0xb6>
 8006fa0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006fa4:	f1ba 0f01 	cmp.w	sl, #1
 8006fa8:	dc01      	bgt.n	8006fae <_printf_float+0x3ba>
 8006faa:	07db      	lsls	r3, r3, #31
 8006fac:	d536      	bpl.n	800701c <_printf_float+0x428>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4642      	mov	r2, r8
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	47b8      	blx	r7
 8006fb8:	3001      	adds	r0, #1
 8006fba:	f43f ae76 	beq.w	8006caa <_printf_float+0xb6>
 8006fbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	47b8      	blx	r7
 8006fc8:	3001      	adds	r0, #1
 8006fca:	f43f ae6e 	beq.w	8006caa <_printf_float+0xb6>
 8006fce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fda:	f7f9 fd99 	bl	8000b10 <__aeabi_dcmpeq>
 8006fde:	b9c0      	cbnz	r0, 8007012 <_printf_float+0x41e>
 8006fe0:	4653      	mov	r3, sl
 8006fe2:	f108 0201 	add.w	r2, r8, #1
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4628      	mov	r0, r5
 8006fea:	47b8      	blx	r7
 8006fec:	3001      	adds	r0, #1
 8006fee:	d10c      	bne.n	800700a <_printf_float+0x416>
 8006ff0:	e65b      	b.n	8006caa <_printf_float+0xb6>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	465a      	mov	r2, fp
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	47b8      	blx	r7
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	f43f ae54 	beq.w	8006caa <_printf_float+0xb6>
 8007002:	f108 0801 	add.w	r8, r8, #1
 8007006:	45d0      	cmp	r8, sl
 8007008:	dbf3      	blt.n	8006ff2 <_printf_float+0x3fe>
 800700a:	464b      	mov	r3, r9
 800700c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007010:	e6e0      	b.n	8006dd4 <_printf_float+0x1e0>
 8007012:	f04f 0800 	mov.w	r8, #0
 8007016:	f104 0b1a 	add.w	fp, r4, #26
 800701a:	e7f4      	b.n	8007006 <_printf_float+0x412>
 800701c:	2301      	movs	r3, #1
 800701e:	4642      	mov	r2, r8
 8007020:	e7e1      	b.n	8006fe6 <_printf_float+0x3f2>
 8007022:	2301      	movs	r3, #1
 8007024:	464a      	mov	r2, r9
 8007026:	4631      	mov	r1, r6
 8007028:	4628      	mov	r0, r5
 800702a:	47b8      	blx	r7
 800702c:	3001      	adds	r0, #1
 800702e:	f43f ae3c 	beq.w	8006caa <_printf_float+0xb6>
 8007032:	f108 0801 	add.w	r8, r8, #1
 8007036:	68e3      	ldr	r3, [r4, #12]
 8007038:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800703a:	1a5b      	subs	r3, r3, r1
 800703c:	4543      	cmp	r3, r8
 800703e:	dcf0      	bgt.n	8007022 <_printf_float+0x42e>
 8007040:	e6fd      	b.n	8006e3e <_printf_float+0x24a>
 8007042:	f04f 0800 	mov.w	r8, #0
 8007046:	f104 0919 	add.w	r9, r4, #25
 800704a:	e7f4      	b.n	8007036 <_printf_float+0x442>

0800704c <_printf_common>:
 800704c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007050:	4616      	mov	r6, r2
 8007052:	4698      	mov	r8, r3
 8007054:	688a      	ldr	r2, [r1, #8]
 8007056:	690b      	ldr	r3, [r1, #16]
 8007058:	4607      	mov	r7, r0
 800705a:	4293      	cmp	r3, r2
 800705c:	bfb8      	it	lt
 800705e:	4613      	movlt	r3, r2
 8007060:	6033      	str	r3, [r6, #0]
 8007062:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007066:	460c      	mov	r4, r1
 8007068:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800706c:	b10a      	cbz	r2, 8007072 <_printf_common+0x26>
 800706e:	3301      	adds	r3, #1
 8007070:	6033      	str	r3, [r6, #0]
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	0699      	lsls	r1, r3, #26
 8007076:	bf42      	ittt	mi
 8007078:	6833      	ldrmi	r3, [r6, #0]
 800707a:	3302      	addmi	r3, #2
 800707c:	6033      	strmi	r3, [r6, #0]
 800707e:	6825      	ldr	r5, [r4, #0]
 8007080:	f015 0506 	ands.w	r5, r5, #6
 8007084:	d106      	bne.n	8007094 <_printf_common+0x48>
 8007086:	f104 0a19 	add.w	sl, r4, #25
 800708a:	68e3      	ldr	r3, [r4, #12]
 800708c:	6832      	ldr	r2, [r6, #0]
 800708e:	1a9b      	subs	r3, r3, r2
 8007090:	42ab      	cmp	r3, r5
 8007092:	dc2b      	bgt.n	80070ec <_printf_common+0xa0>
 8007094:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007098:	6822      	ldr	r2, [r4, #0]
 800709a:	3b00      	subs	r3, #0
 800709c:	bf18      	it	ne
 800709e:	2301      	movne	r3, #1
 80070a0:	0692      	lsls	r2, r2, #26
 80070a2:	d430      	bmi.n	8007106 <_printf_common+0xba>
 80070a4:	4641      	mov	r1, r8
 80070a6:	4638      	mov	r0, r7
 80070a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070ac:	47c8      	blx	r9
 80070ae:	3001      	adds	r0, #1
 80070b0:	d023      	beq.n	80070fa <_printf_common+0xae>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	6922      	ldr	r2, [r4, #16]
 80070b6:	f003 0306 	and.w	r3, r3, #6
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	bf14      	ite	ne
 80070be:	2500      	movne	r5, #0
 80070c0:	6833      	ldreq	r3, [r6, #0]
 80070c2:	f04f 0600 	mov.w	r6, #0
 80070c6:	bf08      	it	eq
 80070c8:	68e5      	ldreq	r5, [r4, #12]
 80070ca:	f104 041a 	add.w	r4, r4, #26
 80070ce:	bf08      	it	eq
 80070d0:	1aed      	subeq	r5, r5, r3
 80070d2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80070d6:	bf08      	it	eq
 80070d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070dc:	4293      	cmp	r3, r2
 80070de:	bfc4      	itt	gt
 80070e0:	1a9b      	subgt	r3, r3, r2
 80070e2:	18ed      	addgt	r5, r5, r3
 80070e4:	42b5      	cmp	r5, r6
 80070e6:	d11a      	bne.n	800711e <_printf_common+0xd2>
 80070e8:	2000      	movs	r0, #0
 80070ea:	e008      	b.n	80070fe <_printf_common+0xb2>
 80070ec:	2301      	movs	r3, #1
 80070ee:	4652      	mov	r2, sl
 80070f0:	4641      	mov	r1, r8
 80070f2:	4638      	mov	r0, r7
 80070f4:	47c8      	blx	r9
 80070f6:	3001      	adds	r0, #1
 80070f8:	d103      	bne.n	8007102 <_printf_common+0xb6>
 80070fa:	f04f 30ff 	mov.w	r0, #4294967295
 80070fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007102:	3501      	adds	r5, #1
 8007104:	e7c1      	b.n	800708a <_printf_common+0x3e>
 8007106:	2030      	movs	r0, #48	@ 0x30
 8007108:	18e1      	adds	r1, r4, r3
 800710a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800710e:	1c5a      	adds	r2, r3, #1
 8007110:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007114:	4422      	add	r2, r4
 8007116:	3302      	adds	r3, #2
 8007118:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800711c:	e7c2      	b.n	80070a4 <_printf_common+0x58>
 800711e:	2301      	movs	r3, #1
 8007120:	4622      	mov	r2, r4
 8007122:	4641      	mov	r1, r8
 8007124:	4638      	mov	r0, r7
 8007126:	47c8      	blx	r9
 8007128:	3001      	adds	r0, #1
 800712a:	d0e6      	beq.n	80070fa <_printf_common+0xae>
 800712c:	3601      	adds	r6, #1
 800712e:	e7d9      	b.n	80070e4 <_printf_common+0x98>

08007130 <_printf_i>:
 8007130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007134:	7e0f      	ldrb	r7, [r1, #24]
 8007136:	4691      	mov	r9, r2
 8007138:	2f78      	cmp	r7, #120	@ 0x78
 800713a:	4680      	mov	r8, r0
 800713c:	460c      	mov	r4, r1
 800713e:	469a      	mov	sl, r3
 8007140:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007142:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007146:	d807      	bhi.n	8007158 <_printf_i+0x28>
 8007148:	2f62      	cmp	r7, #98	@ 0x62
 800714a:	d80a      	bhi.n	8007162 <_printf_i+0x32>
 800714c:	2f00      	cmp	r7, #0
 800714e:	f000 80d3 	beq.w	80072f8 <_printf_i+0x1c8>
 8007152:	2f58      	cmp	r7, #88	@ 0x58
 8007154:	f000 80ba 	beq.w	80072cc <_printf_i+0x19c>
 8007158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800715c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007160:	e03a      	b.n	80071d8 <_printf_i+0xa8>
 8007162:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007166:	2b15      	cmp	r3, #21
 8007168:	d8f6      	bhi.n	8007158 <_printf_i+0x28>
 800716a:	a101      	add	r1, pc, #4	@ (adr r1, 8007170 <_printf_i+0x40>)
 800716c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007170:	080071c9 	.word	0x080071c9
 8007174:	080071dd 	.word	0x080071dd
 8007178:	08007159 	.word	0x08007159
 800717c:	08007159 	.word	0x08007159
 8007180:	08007159 	.word	0x08007159
 8007184:	08007159 	.word	0x08007159
 8007188:	080071dd 	.word	0x080071dd
 800718c:	08007159 	.word	0x08007159
 8007190:	08007159 	.word	0x08007159
 8007194:	08007159 	.word	0x08007159
 8007198:	08007159 	.word	0x08007159
 800719c:	080072df 	.word	0x080072df
 80071a0:	08007207 	.word	0x08007207
 80071a4:	08007299 	.word	0x08007299
 80071a8:	08007159 	.word	0x08007159
 80071ac:	08007159 	.word	0x08007159
 80071b0:	08007301 	.word	0x08007301
 80071b4:	08007159 	.word	0x08007159
 80071b8:	08007207 	.word	0x08007207
 80071bc:	08007159 	.word	0x08007159
 80071c0:	08007159 	.word	0x08007159
 80071c4:	080072a1 	.word	0x080072a1
 80071c8:	6833      	ldr	r3, [r6, #0]
 80071ca:	1d1a      	adds	r2, r3, #4
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	6032      	str	r2, [r6, #0]
 80071d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071d8:	2301      	movs	r3, #1
 80071da:	e09e      	b.n	800731a <_printf_i+0x1ea>
 80071dc:	6833      	ldr	r3, [r6, #0]
 80071de:	6820      	ldr	r0, [r4, #0]
 80071e0:	1d19      	adds	r1, r3, #4
 80071e2:	6031      	str	r1, [r6, #0]
 80071e4:	0606      	lsls	r6, r0, #24
 80071e6:	d501      	bpl.n	80071ec <_printf_i+0xbc>
 80071e8:	681d      	ldr	r5, [r3, #0]
 80071ea:	e003      	b.n	80071f4 <_printf_i+0xc4>
 80071ec:	0645      	lsls	r5, r0, #25
 80071ee:	d5fb      	bpl.n	80071e8 <_printf_i+0xb8>
 80071f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071f4:	2d00      	cmp	r5, #0
 80071f6:	da03      	bge.n	8007200 <_printf_i+0xd0>
 80071f8:	232d      	movs	r3, #45	@ 0x2d
 80071fa:	426d      	negs	r5, r5
 80071fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007200:	230a      	movs	r3, #10
 8007202:	4859      	ldr	r0, [pc, #356]	@ (8007368 <_printf_i+0x238>)
 8007204:	e011      	b.n	800722a <_printf_i+0xfa>
 8007206:	6821      	ldr	r1, [r4, #0]
 8007208:	6833      	ldr	r3, [r6, #0]
 800720a:	0608      	lsls	r0, r1, #24
 800720c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007210:	d402      	bmi.n	8007218 <_printf_i+0xe8>
 8007212:	0649      	lsls	r1, r1, #25
 8007214:	bf48      	it	mi
 8007216:	b2ad      	uxthmi	r5, r5
 8007218:	2f6f      	cmp	r7, #111	@ 0x6f
 800721a:	6033      	str	r3, [r6, #0]
 800721c:	bf14      	ite	ne
 800721e:	230a      	movne	r3, #10
 8007220:	2308      	moveq	r3, #8
 8007222:	4851      	ldr	r0, [pc, #324]	@ (8007368 <_printf_i+0x238>)
 8007224:	2100      	movs	r1, #0
 8007226:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800722a:	6866      	ldr	r6, [r4, #4]
 800722c:	2e00      	cmp	r6, #0
 800722e:	bfa8      	it	ge
 8007230:	6821      	ldrge	r1, [r4, #0]
 8007232:	60a6      	str	r6, [r4, #8]
 8007234:	bfa4      	itt	ge
 8007236:	f021 0104 	bicge.w	r1, r1, #4
 800723a:	6021      	strge	r1, [r4, #0]
 800723c:	b90d      	cbnz	r5, 8007242 <_printf_i+0x112>
 800723e:	2e00      	cmp	r6, #0
 8007240:	d04b      	beq.n	80072da <_printf_i+0x1aa>
 8007242:	4616      	mov	r6, r2
 8007244:	fbb5 f1f3 	udiv	r1, r5, r3
 8007248:	fb03 5711 	mls	r7, r3, r1, r5
 800724c:	5dc7      	ldrb	r7, [r0, r7]
 800724e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007252:	462f      	mov	r7, r5
 8007254:	42bb      	cmp	r3, r7
 8007256:	460d      	mov	r5, r1
 8007258:	d9f4      	bls.n	8007244 <_printf_i+0x114>
 800725a:	2b08      	cmp	r3, #8
 800725c:	d10b      	bne.n	8007276 <_printf_i+0x146>
 800725e:	6823      	ldr	r3, [r4, #0]
 8007260:	07df      	lsls	r7, r3, #31
 8007262:	d508      	bpl.n	8007276 <_printf_i+0x146>
 8007264:	6923      	ldr	r3, [r4, #16]
 8007266:	6861      	ldr	r1, [r4, #4]
 8007268:	4299      	cmp	r1, r3
 800726a:	bfde      	ittt	le
 800726c:	2330      	movle	r3, #48	@ 0x30
 800726e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007272:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007276:	1b92      	subs	r2, r2, r6
 8007278:	6122      	str	r2, [r4, #16]
 800727a:	464b      	mov	r3, r9
 800727c:	4621      	mov	r1, r4
 800727e:	4640      	mov	r0, r8
 8007280:	f8cd a000 	str.w	sl, [sp]
 8007284:	aa03      	add	r2, sp, #12
 8007286:	f7ff fee1 	bl	800704c <_printf_common>
 800728a:	3001      	adds	r0, #1
 800728c:	d14a      	bne.n	8007324 <_printf_i+0x1f4>
 800728e:	f04f 30ff 	mov.w	r0, #4294967295
 8007292:	b004      	add	sp, #16
 8007294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	f043 0320 	orr.w	r3, r3, #32
 800729e:	6023      	str	r3, [r4, #0]
 80072a0:	2778      	movs	r7, #120	@ 0x78
 80072a2:	4832      	ldr	r0, [pc, #200]	@ (800736c <_printf_i+0x23c>)
 80072a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072a8:	6823      	ldr	r3, [r4, #0]
 80072aa:	6831      	ldr	r1, [r6, #0]
 80072ac:	061f      	lsls	r7, r3, #24
 80072ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80072b2:	d402      	bmi.n	80072ba <_printf_i+0x18a>
 80072b4:	065f      	lsls	r7, r3, #25
 80072b6:	bf48      	it	mi
 80072b8:	b2ad      	uxthmi	r5, r5
 80072ba:	6031      	str	r1, [r6, #0]
 80072bc:	07d9      	lsls	r1, r3, #31
 80072be:	bf44      	itt	mi
 80072c0:	f043 0320 	orrmi.w	r3, r3, #32
 80072c4:	6023      	strmi	r3, [r4, #0]
 80072c6:	b11d      	cbz	r5, 80072d0 <_printf_i+0x1a0>
 80072c8:	2310      	movs	r3, #16
 80072ca:	e7ab      	b.n	8007224 <_printf_i+0xf4>
 80072cc:	4826      	ldr	r0, [pc, #152]	@ (8007368 <_printf_i+0x238>)
 80072ce:	e7e9      	b.n	80072a4 <_printf_i+0x174>
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	f023 0320 	bic.w	r3, r3, #32
 80072d6:	6023      	str	r3, [r4, #0]
 80072d8:	e7f6      	b.n	80072c8 <_printf_i+0x198>
 80072da:	4616      	mov	r6, r2
 80072dc:	e7bd      	b.n	800725a <_printf_i+0x12a>
 80072de:	6833      	ldr	r3, [r6, #0]
 80072e0:	6825      	ldr	r5, [r4, #0]
 80072e2:	1d18      	adds	r0, r3, #4
 80072e4:	6961      	ldr	r1, [r4, #20]
 80072e6:	6030      	str	r0, [r6, #0]
 80072e8:	062e      	lsls	r6, r5, #24
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	d501      	bpl.n	80072f2 <_printf_i+0x1c2>
 80072ee:	6019      	str	r1, [r3, #0]
 80072f0:	e002      	b.n	80072f8 <_printf_i+0x1c8>
 80072f2:	0668      	lsls	r0, r5, #25
 80072f4:	d5fb      	bpl.n	80072ee <_printf_i+0x1be>
 80072f6:	8019      	strh	r1, [r3, #0]
 80072f8:	2300      	movs	r3, #0
 80072fa:	4616      	mov	r6, r2
 80072fc:	6123      	str	r3, [r4, #16]
 80072fe:	e7bc      	b.n	800727a <_printf_i+0x14a>
 8007300:	6833      	ldr	r3, [r6, #0]
 8007302:	2100      	movs	r1, #0
 8007304:	1d1a      	adds	r2, r3, #4
 8007306:	6032      	str	r2, [r6, #0]
 8007308:	681e      	ldr	r6, [r3, #0]
 800730a:	6862      	ldr	r2, [r4, #4]
 800730c:	4630      	mov	r0, r6
 800730e:	f000 f9d4 	bl	80076ba <memchr>
 8007312:	b108      	cbz	r0, 8007318 <_printf_i+0x1e8>
 8007314:	1b80      	subs	r0, r0, r6
 8007316:	6060      	str	r0, [r4, #4]
 8007318:	6863      	ldr	r3, [r4, #4]
 800731a:	6123      	str	r3, [r4, #16]
 800731c:	2300      	movs	r3, #0
 800731e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007322:	e7aa      	b.n	800727a <_printf_i+0x14a>
 8007324:	4632      	mov	r2, r6
 8007326:	4649      	mov	r1, r9
 8007328:	4640      	mov	r0, r8
 800732a:	6923      	ldr	r3, [r4, #16]
 800732c:	47d0      	blx	sl
 800732e:	3001      	adds	r0, #1
 8007330:	d0ad      	beq.n	800728e <_printf_i+0x15e>
 8007332:	6823      	ldr	r3, [r4, #0]
 8007334:	079b      	lsls	r3, r3, #30
 8007336:	d413      	bmi.n	8007360 <_printf_i+0x230>
 8007338:	68e0      	ldr	r0, [r4, #12]
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	4298      	cmp	r0, r3
 800733e:	bfb8      	it	lt
 8007340:	4618      	movlt	r0, r3
 8007342:	e7a6      	b.n	8007292 <_printf_i+0x162>
 8007344:	2301      	movs	r3, #1
 8007346:	4632      	mov	r2, r6
 8007348:	4649      	mov	r1, r9
 800734a:	4640      	mov	r0, r8
 800734c:	47d0      	blx	sl
 800734e:	3001      	adds	r0, #1
 8007350:	d09d      	beq.n	800728e <_printf_i+0x15e>
 8007352:	3501      	adds	r5, #1
 8007354:	68e3      	ldr	r3, [r4, #12]
 8007356:	9903      	ldr	r1, [sp, #12]
 8007358:	1a5b      	subs	r3, r3, r1
 800735a:	42ab      	cmp	r3, r5
 800735c:	dcf2      	bgt.n	8007344 <_printf_i+0x214>
 800735e:	e7eb      	b.n	8007338 <_printf_i+0x208>
 8007360:	2500      	movs	r5, #0
 8007362:	f104 0619 	add.w	r6, r4, #25
 8007366:	e7f5      	b.n	8007354 <_printf_i+0x224>
 8007368:	080098b4 	.word	0x080098b4
 800736c:	080098c5 	.word	0x080098c5

08007370 <std>:
 8007370:	2300      	movs	r3, #0
 8007372:	b510      	push	{r4, lr}
 8007374:	4604      	mov	r4, r0
 8007376:	e9c0 3300 	strd	r3, r3, [r0]
 800737a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800737e:	6083      	str	r3, [r0, #8]
 8007380:	8181      	strh	r1, [r0, #12]
 8007382:	6643      	str	r3, [r0, #100]	@ 0x64
 8007384:	81c2      	strh	r2, [r0, #14]
 8007386:	6183      	str	r3, [r0, #24]
 8007388:	4619      	mov	r1, r3
 800738a:	2208      	movs	r2, #8
 800738c:	305c      	adds	r0, #92	@ 0x5c
 800738e:	f000 f914 	bl	80075ba <memset>
 8007392:	4b0d      	ldr	r3, [pc, #52]	@ (80073c8 <std+0x58>)
 8007394:	6224      	str	r4, [r4, #32]
 8007396:	6263      	str	r3, [r4, #36]	@ 0x24
 8007398:	4b0c      	ldr	r3, [pc, #48]	@ (80073cc <std+0x5c>)
 800739a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800739c:	4b0c      	ldr	r3, [pc, #48]	@ (80073d0 <std+0x60>)
 800739e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80073a0:	4b0c      	ldr	r3, [pc, #48]	@ (80073d4 <std+0x64>)
 80073a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80073a4:	4b0c      	ldr	r3, [pc, #48]	@ (80073d8 <std+0x68>)
 80073a6:	429c      	cmp	r4, r3
 80073a8:	d006      	beq.n	80073b8 <std+0x48>
 80073aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80073ae:	4294      	cmp	r4, r2
 80073b0:	d002      	beq.n	80073b8 <std+0x48>
 80073b2:	33d0      	adds	r3, #208	@ 0xd0
 80073b4:	429c      	cmp	r4, r3
 80073b6:	d105      	bne.n	80073c4 <std+0x54>
 80073b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80073bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c0:	f000 b978 	b.w	80076b4 <__retarget_lock_init_recursive>
 80073c4:	bd10      	pop	{r4, pc}
 80073c6:	bf00      	nop
 80073c8:	08007535 	.word	0x08007535
 80073cc:	08007557 	.word	0x08007557
 80073d0:	0800758f 	.word	0x0800758f
 80073d4:	080075b3 	.word	0x080075b3
 80073d8:	20001af4 	.word	0x20001af4

080073dc <stdio_exit_handler>:
 80073dc:	4a02      	ldr	r2, [pc, #8]	@ (80073e8 <stdio_exit_handler+0xc>)
 80073de:	4903      	ldr	r1, [pc, #12]	@ (80073ec <stdio_exit_handler+0x10>)
 80073e0:	4803      	ldr	r0, [pc, #12]	@ (80073f0 <stdio_exit_handler+0x14>)
 80073e2:	f000 b869 	b.w	80074b8 <_fwalk_sglue>
 80073e6:	bf00      	nop
 80073e8:	20000190 	.word	0x20000190
 80073ec:	08009025 	.word	0x08009025
 80073f0:	200001a0 	.word	0x200001a0

080073f4 <cleanup_stdio>:
 80073f4:	6841      	ldr	r1, [r0, #4]
 80073f6:	4b0c      	ldr	r3, [pc, #48]	@ (8007428 <cleanup_stdio+0x34>)
 80073f8:	b510      	push	{r4, lr}
 80073fa:	4299      	cmp	r1, r3
 80073fc:	4604      	mov	r4, r0
 80073fe:	d001      	beq.n	8007404 <cleanup_stdio+0x10>
 8007400:	f001 fe10 	bl	8009024 <_fflush_r>
 8007404:	68a1      	ldr	r1, [r4, #8]
 8007406:	4b09      	ldr	r3, [pc, #36]	@ (800742c <cleanup_stdio+0x38>)
 8007408:	4299      	cmp	r1, r3
 800740a:	d002      	beq.n	8007412 <cleanup_stdio+0x1e>
 800740c:	4620      	mov	r0, r4
 800740e:	f001 fe09 	bl	8009024 <_fflush_r>
 8007412:	68e1      	ldr	r1, [r4, #12]
 8007414:	4b06      	ldr	r3, [pc, #24]	@ (8007430 <cleanup_stdio+0x3c>)
 8007416:	4299      	cmp	r1, r3
 8007418:	d004      	beq.n	8007424 <cleanup_stdio+0x30>
 800741a:	4620      	mov	r0, r4
 800741c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007420:	f001 be00 	b.w	8009024 <_fflush_r>
 8007424:	bd10      	pop	{r4, pc}
 8007426:	bf00      	nop
 8007428:	20001af4 	.word	0x20001af4
 800742c:	20001b5c 	.word	0x20001b5c
 8007430:	20001bc4 	.word	0x20001bc4

08007434 <global_stdio_init.part.0>:
 8007434:	b510      	push	{r4, lr}
 8007436:	4b0b      	ldr	r3, [pc, #44]	@ (8007464 <global_stdio_init.part.0+0x30>)
 8007438:	4c0b      	ldr	r4, [pc, #44]	@ (8007468 <global_stdio_init.part.0+0x34>)
 800743a:	4a0c      	ldr	r2, [pc, #48]	@ (800746c <global_stdio_init.part.0+0x38>)
 800743c:	4620      	mov	r0, r4
 800743e:	601a      	str	r2, [r3, #0]
 8007440:	2104      	movs	r1, #4
 8007442:	2200      	movs	r2, #0
 8007444:	f7ff ff94 	bl	8007370 <std>
 8007448:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800744c:	2201      	movs	r2, #1
 800744e:	2109      	movs	r1, #9
 8007450:	f7ff ff8e 	bl	8007370 <std>
 8007454:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007458:	2202      	movs	r2, #2
 800745a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800745e:	2112      	movs	r1, #18
 8007460:	f7ff bf86 	b.w	8007370 <std>
 8007464:	20001c2c 	.word	0x20001c2c
 8007468:	20001af4 	.word	0x20001af4
 800746c:	080073dd 	.word	0x080073dd

08007470 <__sfp_lock_acquire>:
 8007470:	4801      	ldr	r0, [pc, #4]	@ (8007478 <__sfp_lock_acquire+0x8>)
 8007472:	f000 b920 	b.w	80076b6 <__retarget_lock_acquire_recursive>
 8007476:	bf00      	nop
 8007478:	20001c35 	.word	0x20001c35

0800747c <__sfp_lock_release>:
 800747c:	4801      	ldr	r0, [pc, #4]	@ (8007484 <__sfp_lock_release+0x8>)
 800747e:	f000 b91b 	b.w	80076b8 <__retarget_lock_release_recursive>
 8007482:	bf00      	nop
 8007484:	20001c35 	.word	0x20001c35

08007488 <__sinit>:
 8007488:	b510      	push	{r4, lr}
 800748a:	4604      	mov	r4, r0
 800748c:	f7ff fff0 	bl	8007470 <__sfp_lock_acquire>
 8007490:	6a23      	ldr	r3, [r4, #32]
 8007492:	b11b      	cbz	r3, 800749c <__sinit+0x14>
 8007494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007498:	f7ff bff0 	b.w	800747c <__sfp_lock_release>
 800749c:	4b04      	ldr	r3, [pc, #16]	@ (80074b0 <__sinit+0x28>)
 800749e:	6223      	str	r3, [r4, #32]
 80074a0:	4b04      	ldr	r3, [pc, #16]	@ (80074b4 <__sinit+0x2c>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1f5      	bne.n	8007494 <__sinit+0xc>
 80074a8:	f7ff ffc4 	bl	8007434 <global_stdio_init.part.0>
 80074ac:	e7f2      	b.n	8007494 <__sinit+0xc>
 80074ae:	bf00      	nop
 80074b0:	080073f5 	.word	0x080073f5
 80074b4:	20001c2c 	.word	0x20001c2c

080074b8 <_fwalk_sglue>:
 80074b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074bc:	4607      	mov	r7, r0
 80074be:	4688      	mov	r8, r1
 80074c0:	4614      	mov	r4, r2
 80074c2:	2600      	movs	r6, #0
 80074c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074c8:	f1b9 0901 	subs.w	r9, r9, #1
 80074cc:	d505      	bpl.n	80074da <_fwalk_sglue+0x22>
 80074ce:	6824      	ldr	r4, [r4, #0]
 80074d0:	2c00      	cmp	r4, #0
 80074d2:	d1f7      	bne.n	80074c4 <_fwalk_sglue+0xc>
 80074d4:	4630      	mov	r0, r6
 80074d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d907      	bls.n	80074f0 <_fwalk_sglue+0x38>
 80074e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074e4:	3301      	adds	r3, #1
 80074e6:	d003      	beq.n	80074f0 <_fwalk_sglue+0x38>
 80074e8:	4629      	mov	r1, r5
 80074ea:	4638      	mov	r0, r7
 80074ec:	47c0      	blx	r8
 80074ee:	4306      	orrs	r6, r0
 80074f0:	3568      	adds	r5, #104	@ 0x68
 80074f2:	e7e9      	b.n	80074c8 <_fwalk_sglue+0x10>

080074f4 <siprintf>:
 80074f4:	b40e      	push	{r1, r2, r3}
 80074f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80074fa:	b500      	push	{lr}
 80074fc:	b09c      	sub	sp, #112	@ 0x70
 80074fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8007500:	9002      	str	r0, [sp, #8]
 8007502:	9006      	str	r0, [sp, #24]
 8007504:	9107      	str	r1, [sp, #28]
 8007506:	9104      	str	r1, [sp, #16]
 8007508:	4808      	ldr	r0, [pc, #32]	@ (800752c <siprintf+0x38>)
 800750a:	4909      	ldr	r1, [pc, #36]	@ (8007530 <siprintf+0x3c>)
 800750c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007510:	9105      	str	r1, [sp, #20]
 8007512:	6800      	ldr	r0, [r0, #0]
 8007514:	a902      	add	r1, sp, #8
 8007516:	9301      	str	r3, [sp, #4]
 8007518:	f001 fc08 	bl	8008d2c <_svfiprintf_r>
 800751c:	2200      	movs	r2, #0
 800751e:	9b02      	ldr	r3, [sp, #8]
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	b01c      	add	sp, #112	@ 0x70
 8007524:	f85d eb04 	ldr.w	lr, [sp], #4
 8007528:	b003      	add	sp, #12
 800752a:	4770      	bx	lr
 800752c:	2000019c 	.word	0x2000019c
 8007530:	ffff0208 	.word	0xffff0208

08007534 <__sread>:
 8007534:	b510      	push	{r4, lr}
 8007536:	460c      	mov	r4, r1
 8007538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800753c:	f000 f86c 	bl	8007618 <_read_r>
 8007540:	2800      	cmp	r0, #0
 8007542:	bfab      	itete	ge
 8007544:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007546:	89a3      	ldrhlt	r3, [r4, #12]
 8007548:	181b      	addge	r3, r3, r0
 800754a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800754e:	bfac      	ite	ge
 8007550:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007552:	81a3      	strhlt	r3, [r4, #12]
 8007554:	bd10      	pop	{r4, pc}

08007556 <__swrite>:
 8007556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800755a:	461f      	mov	r7, r3
 800755c:	898b      	ldrh	r3, [r1, #12]
 800755e:	4605      	mov	r5, r0
 8007560:	05db      	lsls	r3, r3, #23
 8007562:	460c      	mov	r4, r1
 8007564:	4616      	mov	r6, r2
 8007566:	d505      	bpl.n	8007574 <__swrite+0x1e>
 8007568:	2302      	movs	r3, #2
 800756a:	2200      	movs	r2, #0
 800756c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007570:	f000 f840 	bl	80075f4 <_lseek_r>
 8007574:	89a3      	ldrh	r3, [r4, #12]
 8007576:	4632      	mov	r2, r6
 8007578:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800757c:	81a3      	strh	r3, [r4, #12]
 800757e:	4628      	mov	r0, r5
 8007580:	463b      	mov	r3, r7
 8007582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800758a:	f000 b857 	b.w	800763c <_write_r>

0800758e <__sseek>:
 800758e:	b510      	push	{r4, lr}
 8007590:	460c      	mov	r4, r1
 8007592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007596:	f000 f82d 	bl	80075f4 <_lseek_r>
 800759a:	1c43      	adds	r3, r0, #1
 800759c:	89a3      	ldrh	r3, [r4, #12]
 800759e:	bf15      	itete	ne
 80075a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80075a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80075a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80075aa:	81a3      	strheq	r3, [r4, #12]
 80075ac:	bf18      	it	ne
 80075ae:	81a3      	strhne	r3, [r4, #12]
 80075b0:	bd10      	pop	{r4, pc}

080075b2 <__sclose>:
 80075b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b6:	f000 b80d 	b.w	80075d4 <_close_r>

080075ba <memset>:
 80075ba:	4603      	mov	r3, r0
 80075bc:	4402      	add	r2, r0
 80075be:	4293      	cmp	r3, r2
 80075c0:	d100      	bne.n	80075c4 <memset+0xa>
 80075c2:	4770      	bx	lr
 80075c4:	f803 1b01 	strb.w	r1, [r3], #1
 80075c8:	e7f9      	b.n	80075be <memset+0x4>
	...

080075cc <_localeconv_r>:
 80075cc:	4800      	ldr	r0, [pc, #0]	@ (80075d0 <_localeconv_r+0x4>)
 80075ce:	4770      	bx	lr
 80075d0:	200002dc 	.word	0x200002dc

080075d4 <_close_r>:
 80075d4:	b538      	push	{r3, r4, r5, lr}
 80075d6:	2300      	movs	r3, #0
 80075d8:	4d05      	ldr	r5, [pc, #20]	@ (80075f0 <_close_r+0x1c>)
 80075da:	4604      	mov	r4, r0
 80075dc:	4608      	mov	r0, r1
 80075de:	602b      	str	r3, [r5, #0]
 80075e0:	f7f9 ff9a 	bl	8001518 <_close>
 80075e4:	1c43      	adds	r3, r0, #1
 80075e6:	d102      	bne.n	80075ee <_close_r+0x1a>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	b103      	cbz	r3, 80075ee <_close_r+0x1a>
 80075ec:	6023      	str	r3, [r4, #0]
 80075ee:	bd38      	pop	{r3, r4, r5, pc}
 80075f0:	20001c30 	.word	0x20001c30

080075f4 <_lseek_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4604      	mov	r4, r0
 80075f8:	4608      	mov	r0, r1
 80075fa:	4611      	mov	r1, r2
 80075fc:	2200      	movs	r2, #0
 80075fe:	4d05      	ldr	r5, [pc, #20]	@ (8007614 <_lseek_r+0x20>)
 8007600:	602a      	str	r2, [r5, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	f7f9 ff92 	bl	800152c <_lseek>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d102      	bne.n	8007612 <_lseek_r+0x1e>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	b103      	cbz	r3, 8007612 <_lseek_r+0x1e>
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	20001c30 	.word	0x20001c30

08007618 <_read_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4604      	mov	r4, r0
 800761c:	4608      	mov	r0, r1
 800761e:	4611      	mov	r1, r2
 8007620:	2200      	movs	r2, #0
 8007622:	4d05      	ldr	r5, [pc, #20]	@ (8007638 <_read_r+0x20>)
 8007624:	602a      	str	r2, [r5, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	f7f9 ff5a 	bl	80014e0 <_read>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d102      	bne.n	8007636 <_read_r+0x1e>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	b103      	cbz	r3, 8007636 <_read_r+0x1e>
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	bd38      	pop	{r3, r4, r5, pc}
 8007638:	20001c30 	.word	0x20001c30

0800763c <_write_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	4611      	mov	r1, r2
 8007644:	2200      	movs	r2, #0
 8007646:	4d05      	ldr	r5, [pc, #20]	@ (800765c <_write_r+0x20>)
 8007648:	602a      	str	r2, [r5, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	f7f9 ff56 	bl	80014fc <_write>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d102      	bne.n	800765a <_write_r+0x1e>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	b103      	cbz	r3, 800765a <_write_r+0x1e>
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	20001c30 	.word	0x20001c30

08007660 <__errno>:
 8007660:	4b01      	ldr	r3, [pc, #4]	@ (8007668 <__errno+0x8>)
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	2000019c 	.word	0x2000019c

0800766c <__libc_init_array>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	2600      	movs	r6, #0
 8007670:	4d0c      	ldr	r5, [pc, #48]	@ (80076a4 <__libc_init_array+0x38>)
 8007672:	4c0d      	ldr	r4, [pc, #52]	@ (80076a8 <__libc_init_array+0x3c>)
 8007674:	1b64      	subs	r4, r4, r5
 8007676:	10a4      	asrs	r4, r4, #2
 8007678:	42a6      	cmp	r6, r4
 800767a:	d109      	bne.n	8007690 <__libc_init_array+0x24>
 800767c:	f002 f86e 	bl	800975c <_init>
 8007680:	2600      	movs	r6, #0
 8007682:	4d0a      	ldr	r5, [pc, #40]	@ (80076ac <__libc_init_array+0x40>)
 8007684:	4c0a      	ldr	r4, [pc, #40]	@ (80076b0 <__libc_init_array+0x44>)
 8007686:	1b64      	subs	r4, r4, r5
 8007688:	10a4      	asrs	r4, r4, #2
 800768a:	42a6      	cmp	r6, r4
 800768c:	d105      	bne.n	800769a <__libc_init_array+0x2e>
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	f855 3b04 	ldr.w	r3, [r5], #4
 8007694:	4798      	blx	r3
 8007696:	3601      	adds	r6, #1
 8007698:	e7ee      	b.n	8007678 <__libc_init_array+0xc>
 800769a:	f855 3b04 	ldr.w	r3, [r5], #4
 800769e:	4798      	blx	r3
 80076a0:	3601      	adds	r6, #1
 80076a2:	e7f2      	b.n	800768a <__libc_init_array+0x1e>
 80076a4:	08009c18 	.word	0x08009c18
 80076a8:	08009c18 	.word	0x08009c18
 80076ac:	08009c18 	.word	0x08009c18
 80076b0:	08009c1c 	.word	0x08009c1c

080076b4 <__retarget_lock_init_recursive>:
 80076b4:	4770      	bx	lr

080076b6 <__retarget_lock_acquire_recursive>:
 80076b6:	4770      	bx	lr

080076b8 <__retarget_lock_release_recursive>:
 80076b8:	4770      	bx	lr

080076ba <memchr>:
 80076ba:	4603      	mov	r3, r0
 80076bc:	b510      	push	{r4, lr}
 80076be:	b2c9      	uxtb	r1, r1
 80076c0:	4402      	add	r2, r0
 80076c2:	4293      	cmp	r3, r2
 80076c4:	4618      	mov	r0, r3
 80076c6:	d101      	bne.n	80076cc <memchr+0x12>
 80076c8:	2000      	movs	r0, #0
 80076ca:	e003      	b.n	80076d4 <memchr+0x1a>
 80076cc:	7804      	ldrb	r4, [r0, #0]
 80076ce:	3301      	adds	r3, #1
 80076d0:	428c      	cmp	r4, r1
 80076d2:	d1f6      	bne.n	80076c2 <memchr+0x8>
 80076d4:	bd10      	pop	{r4, pc}

080076d6 <quorem>:
 80076d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076da:	6903      	ldr	r3, [r0, #16]
 80076dc:	690c      	ldr	r4, [r1, #16]
 80076de:	4607      	mov	r7, r0
 80076e0:	42a3      	cmp	r3, r4
 80076e2:	db7e      	blt.n	80077e2 <quorem+0x10c>
 80076e4:	3c01      	subs	r4, #1
 80076e6:	00a3      	lsls	r3, r4, #2
 80076e8:	f100 0514 	add.w	r5, r0, #20
 80076ec:	f101 0814 	add.w	r8, r1, #20
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076f6:	9301      	str	r3, [sp, #4]
 80076f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80076fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007700:	3301      	adds	r3, #1
 8007702:	429a      	cmp	r2, r3
 8007704:	fbb2 f6f3 	udiv	r6, r2, r3
 8007708:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800770c:	d32e      	bcc.n	800776c <quorem+0x96>
 800770e:	f04f 0a00 	mov.w	sl, #0
 8007712:	46c4      	mov	ip, r8
 8007714:	46ae      	mov	lr, r5
 8007716:	46d3      	mov	fp, sl
 8007718:	f85c 3b04 	ldr.w	r3, [ip], #4
 800771c:	b298      	uxth	r0, r3
 800771e:	fb06 a000 	mla	r0, r6, r0, sl
 8007722:	0c1b      	lsrs	r3, r3, #16
 8007724:	0c02      	lsrs	r2, r0, #16
 8007726:	fb06 2303 	mla	r3, r6, r3, r2
 800772a:	f8de 2000 	ldr.w	r2, [lr]
 800772e:	b280      	uxth	r0, r0
 8007730:	b292      	uxth	r2, r2
 8007732:	1a12      	subs	r2, r2, r0
 8007734:	445a      	add	r2, fp
 8007736:	f8de 0000 	ldr.w	r0, [lr]
 800773a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800773e:	b29b      	uxth	r3, r3
 8007740:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007744:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007748:	b292      	uxth	r2, r2
 800774a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800774e:	45e1      	cmp	r9, ip
 8007750:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007754:	f84e 2b04 	str.w	r2, [lr], #4
 8007758:	d2de      	bcs.n	8007718 <quorem+0x42>
 800775a:	9b00      	ldr	r3, [sp, #0]
 800775c:	58eb      	ldr	r3, [r5, r3]
 800775e:	b92b      	cbnz	r3, 800776c <quorem+0x96>
 8007760:	9b01      	ldr	r3, [sp, #4]
 8007762:	3b04      	subs	r3, #4
 8007764:	429d      	cmp	r5, r3
 8007766:	461a      	mov	r2, r3
 8007768:	d32f      	bcc.n	80077ca <quorem+0xf4>
 800776a:	613c      	str	r4, [r7, #16]
 800776c:	4638      	mov	r0, r7
 800776e:	f001 f979 	bl	8008a64 <__mcmp>
 8007772:	2800      	cmp	r0, #0
 8007774:	db25      	blt.n	80077c2 <quorem+0xec>
 8007776:	4629      	mov	r1, r5
 8007778:	2000      	movs	r0, #0
 800777a:	f858 2b04 	ldr.w	r2, [r8], #4
 800777e:	f8d1 c000 	ldr.w	ip, [r1]
 8007782:	fa1f fe82 	uxth.w	lr, r2
 8007786:	fa1f f38c 	uxth.w	r3, ip
 800778a:	eba3 030e 	sub.w	r3, r3, lr
 800778e:	4403      	add	r3, r0
 8007790:	0c12      	lsrs	r2, r2, #16
 8007792:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007796:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800779a:	b29b      	uxth	r3, r3
 800779c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80077a0:	45c1      	cmp	r9, r8
 80077a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80077a6:	f841 3b04 	str.w	r3, [r1], #4
 80077aa:	d2e6      	bcs.n	800777a <quorem+0xa4>
 80077ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077b4:	b922      	cbnz	r2, 80077c0 <quorem+0xea>
 80077b6:	3b04      	subs	r3, #4
 80077b8:	429d      	cmp	r5, r3
 80077ba:	461a      	mov	r2, r3
 80077bc:	d30b      	bcc.n	80077d6 <quorem+0x100>
 80077be:	613c      	str	r4, [r7, #16]
 80077c0:	3601      	adds	r6, #1
 80077c2:	4630      	mov	r0, r6
 80077c4:	b003      	add	sp, #12
 80077c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ca:	6812      	ldr	r2, [r2, #0]
 80077cc:	3b04      	subs	r3, #4
 80077ce:	2a00      	cmp	r2, #0
 80077d0:	d1cb      	bne.n	800776a <quorem+0x94>
 80077d2:	3c01      	subs	r4, #1
 80077d4:	e7c6      	b.n	8007764 <quorem+0x8e>
 80077d6:	6812      	ldr	r2, [r2, #0]
 80077d8:	3b04      	subs	r3, #4
 80077da:	2a00      	cmp	r2, #0
 80077dc:	d1ef      	bne.n	80077be <quorem+0xe8>
 80077de:	3c01      	subs	r4, #1
 80077e0:	e7ea      	b.n	80077b8 <quorem+0xe2>
 80077e2:	2000      	movs	r0, #0
 80077e4:	e7ee      	b.n	80077c4 <quorem+0xee>
	...

080077e8 <_dtoa_r>:
 80077e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	4614      	mov	r4, r2
 80077ee:	461d      	mov	r5, r3
 80077f0:	69c7      	ldr	r7, [r0, #28]
 80077f2:	b097      	sub	sp, #92	@ 0x5c
 80077f4:	4683      	mov	fp, r0
 80077f6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80077fa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80077fc:	b97f      	cbnz	r7, 800781e <_dtoa_r+0x36>
 80077fe:	2010      	movs	r0, #16
 8007800:	f000 fe02 	bl	8008408 <malloc>
 8007804:	4602      	mov	r2, r0
 8007806:	f8cb 001c 	str.w	r0, [fp, #28]
 800780a:	b920      	cbnz	r0, 8007816 <_dtoa_r+0x2e>
 800780c:	21ef      	movs	r1, #239	@ 0xef
 800780e:	4ba8      	ldr	r3, [pc, #672]	@ (8007ab0 <_dtoa_r+0x2c8>)
 8007810:	48a8      	ldr	r0, [pc, #672]	@ (8007ab4 <_dtoa_r+0x2cc>)
 8007812:	f001 fc67 	bl	80090e4 <__assert_func>
 8007816:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800781a:	6007      	str	r7, [r0, #0]
 800781c:	60c7      	str	r7, [r0, #12]
 800781e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007822:	6819      	ldr	r1, [r3, #0]
 8007824:	b159      	cbz	r1, 800783e <_dtoa_r+0x56>
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	2301      	movs	r3, #1
 800782a:	4093      	lsls	r3, r2
 800782c:	604a      	str	r2, [r1, #4]
 800782e:	608b      	str	r3, [r1, #8]
 8007830:	4658      	mov	r0, fp
 8007832:	f000 fedf 	bl	80085f4 <_Bfree>
 8007836:	2200      	movs	r2, #0
 8007838:	f8db 301c 	ldr.w	r3, [fp, #28]
 800783c:	601a      	str	r2, [r3, #0]
 800783e:	1e2b      	subs	r3, r5, #0
 8007840:	bfaf      	iteee	ge
 8007842:	2300      	movge	r3, #0
 8007844:	2201      	movlt	r2, #1
 8007846:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800784a:	9303      	strlt	r3, [sp, #12]
 800784c:	bfa8      	it	ge
 800784e:	6033      	strge	r3, [r6, #0]
 8007850:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007854:	4b98      	ldr	r3, [pc, #608]	@ (8007ab8 <_dtoa_r+0x2d0>)
 8007856:	bfb8      	it	lt
 8007858:	6032      	strlt	r2, [r6, #0]
 800785a:	ea33 0308 	bics.w	r3, r3, r8
 800785e:	d112      	bne.n	8007886 <_dtoa_r+0x9e>
 8007860:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007864:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007866:	6013      	str	r3, [r2, #0]
 8007868:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800786c:	4323      	orrs	r3, r4
 800786e:	f000 8550 	beq.w	8008312 <_dtoa_r+0xb2a>
 8007872:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007874:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007abc <_dtoa_r+0x2d4>
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 8552 	beq.w	8008322 <_dtoa_r+0xb3a>
 800787e:	f10a 0303 	add.w	r3, sl, #3
 8007882:	f000 bd4c 	b.w	800831e <_dtoa_r+0xb36>
 8007886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800788a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800788e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007892:	2200      	movs	r2, #0
 8007894:	2300      	movs	r3, #0
 8007896:	f7f9 f93b 	bl	8000b10 <__aeabi_dcmpeq>
 800789a:	4607      	mov	r7, r0
 800789c:	b158      	cbz	r0, 80078b6 <_dtoa_r+0xce>
 800789e:	2301      	movs	r3, #1
 80078a0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80078a6:	b113      	cbz	r3, 80078ae <_dtoa_r+0xc6>
 80078a8:	4b85      	ldr	r3, [pc, #532]	@ (8007ac0 <_dtoa_r+0x2d8>)
 80078aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80078ac:	6013      	str	r3, [r2, #0]
 80078ae:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007ac4 <_dtoa_r+0x2dc>
 80078b2:	f000 bd36 	b.w	8008322 <_dtoa_r+0xb3a>
 80078b6:	ab14      	add	r3, sp, #80	@ 0x50
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	ab15      	add	r3, sp, #84	@ 0x54
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	4658      	mov	r0, fp
 80078c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80078c4:	f001 f97e 	bl	8008bc4 <__d2b>
 80078c8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80078cc:	4681      	mov	r9, r0
 80078ce:	2e00      	cmp	r6, #0
 80078d0:	d077      	beq.n	80079c2 <_dtoa_r+0x1da>
 80078d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078d8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80078dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078e0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80078e4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80078e8:	9712      	str	r7, [sp, #72]	@ 0x48
 80078ea:	4619      	mov	r1, r3
 80078ec:	2200      	movs	r2, #0
 80078ee:	4b76      	ldr	r3, [pc, #472]	@ (8007ac8 <_dtoa_r+0x2e0>)
 80078f0:	f7f8 fcee 	bl	80002d0 <__aeabi_dsub>
 80078f4:	a368      	add	r3, pc, #416	@ (adr r3, 8007a98 <_dtoa_r+0x2b0>)
 80078f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078fa:	f7f8 fea1 	bl	8000640 <__aeabi_dmul>
 80078fe:	a368      	add	r3, pc, #416	@ (adr r3, 8007aa0 <_dtoa_r+0x2b8>)
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	f7f8 fce6 	bl	80002d4 <__adddf3>
 8007908:	4604      	mov	r4, r0
 800790a:	4630      	mov	r0, r6
 800790c:	460d      	mov	r5, r1
 800790e:	f7f8 fe2d 	bl	800056c <__aeabi_i2d>
 8007912:	a365      	add	r3, pc, #404	@ (adr r3, 8007aa8 <_dtoa_r+0x2c0>)
 8007914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007918:	f7f8 fe92 	bl	8000640 <__aeabi_dmul>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4620      	mov	r0, r4
 8007922:	4629      	mov	r1, r5
 8007924:	f7f8 fcd6 	bl	80002d4 <__adddf3>
 8007928:	4604      	mov	r4, r0
 800792a:	460d      	mov	r5, r1
 800792c:	f7f9 f938 	bl	8000ba0 <__aeabi_d2iz>
 8007930:	2200      	movs	r2, #0
 8007932:	4607      	mov	r7, r0
 8007934:	2300      	movs	r3, #0
 8007936:	4620      	mov	r0, r4
 8007938:	4629      	mov	r1, r5
 800793a:	f7f9 f8f3 	bl	8000b24 <__aeabi_dcmplt>
 800793e:	b140      	cbz	r0, 8007952 <_dtoa_r+0x16a>
 8007940:	4638      	mov	r0, r7
 8007942:	f7f8 fe13 	bl	800056c <__aeabi_i2d>
 8007946:	4622      	mov	r2, r4
 8007948:	462b      	mov	r3, r5
 800794a:	f7f9 f8e1 	bl	8000b10 <__aeabi_dcmpeq>
 800794e:	b900      	cbnz	r0, 8007952 <_dtoa_r+0x16a>
 8007950:	3f01      	subs	r7, #1
 8007952:	2f16      	cmp	r7, #22
 8007954:	d853      	bhi.n	80079fe <_dtoa_r+0x216>
 8007956:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800795a:	4b5c      	ldr	r3, [pc, #368]	@ (8007acc <_dtoa_r+0x2e4>)
 800795c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007964:	f7f9 f8de 	bl	8000b24 <__aeabi_dcmplt>
 8007968:	2800      	cmp	r0, #0
 800796a:	d04a      	beq.n	8007a02 <_dtoa_r+0x21a>
 800796c:	2300      	movs	r3, #0
 800796e:	3f01      	subs	r7, #1
 8007970:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007972:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007974:	1b9b      	subs	r3, r3, r6
 8007976:	1e5a      	subs	r2, r3, #1
 8007978:	bf46      	itte	mi
 800797a:	f1c3 0801 	rsbmi	r8, r3, #1
 800797e:	2300      	movmi	r3, #0
 8007980:	f04f 0800 	movpl.w	r8, #0
 8007984:	9209      	str	r2, [sp, #36]	@ 0x24
 8007986:	bf48      	it	mi
 8007988:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800798a:	2f00      	cmp	r7, #0
 800798c:	db3b      	blt.n	8007a06 <_dtoa_r+0x21e>
 800798e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007990:	970e      	str	r7, [sp, #56]	@ 0x38
 8007992:	443b      	add	r3, r7
 8007994:	9309      	str	r3, [sp, #36]	@ 0x24
 8007996:	2300      	movs	r3, #0
 8007998:	930a      	str	r3, [sp, #40]	@ 0x28
 800799a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800799c:	2b09      	cmp	r3, #9
 800799e:	d866      	bhi.n	8007a6e <_dtoa_r+0x286>
 80079a0:	2b05      	cmp	r3, #5
 80079a2:	bfc4      	itt	gt
 80079a4:	3b04      	subgt	r3, #4
 80079a6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80079a8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80079aa:	bfc8      	it	gt
 80079ac:	2400      	movgt	r4, #0
 80079ae:	f1a3 0302 	sub.w	r3, r3, #2
 80079b2:	bfd8      	it	le
 80079b4:	2401      	movle	r4, #1
 80079b6:	2b03      	cmp	r3, #3
 80079b8:	d864      	bhi.n	8007a84 <_dtoa_r+0x29c>
 80079ba:	e8df f003 	tbb	[pc, r3]
 80079be:	382b      	.short	0x382b
 80079c0:	5636      	.short	0x5636
 80079c2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80079c6:	441e      	add	r6, r3
 80079c8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80079cc:	2b20      	cmp	r3, #32
 80079ce:	bfc1      	itttt	gt
 80079d0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80079d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80079d8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80079dc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80079e0:	bfd6      	itet	le
 80079e2:	f1c3 0320 	rsble	r3, r3, #32
 80079e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80079ea:	fa04 f003 	lslle.w	r0, r4, r3
 80079ee:	f7f8 fdad 	bl	800054c <__aeabi_ui2d>
 80079f2:	2201      	movs	r2, #1
 80079f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80079f8:	3e01      	subs	r6, #1
 80079fa:	9212      	str	r2, [sp, #72]	@ 0x48
 80079fc:	e775      	b.n	80078ea <_dtoa_r+0x102>
 80079fe:	2301      	movs	r3, #1
 8007a00:	e7b6      	b.n	8007970 <_dtoa_r+0x188>
 8007a02:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007a04:	e7b5      	b.n	8007972 <_dtoa_r+0x18a>
 8007a06:	427b      	negs	r3, r7
 8007a08:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	eba8 0807 	sub.w	r8, r8, r7
 8007a10:	930e      	str	r3, [sp, #56]	@ 0x38
 8007a12:	e7c2      	b.n	800799a <_dtoa_r+0x1b2>
 8007a14:	2300      	movs	r3, #0
 8007a16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a18:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	dc35      	bgt.n	8007a8a <_dtoa_r+0x2a2>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	461a      	mov	r2, r3
 8007a22:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007a26:	9221      	str	r2, [sp, #132]	@ 0x84
 8007a28:	e00b      	b.n	8007a42 <_dtoa_r+0x25a>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e7f3      	b.n	8007a16 <_dtoa_r+0x22e>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a34:	18fb      	adds	r3, r7, r3
 8007a36:	9308      	str	r3, [sp, #32]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	9307      	str	r3, [sp, #28]
 8007a3e:	bfb8      	it	lt
 8007a40:	2301      	movlt	r3, #1
 8007a42:	2100      	movs	r1, #0
 8007a44:	2204      	movs	r2, #4
 8007a46:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007a4a:	f102 0514 	add.w	r5, r2, #20
 8007a4e:	429d      	cmp	r5, r3
 8007a50:	d91f      	bls.n	8007a92 <_dtoa_r+0x2aa>
 8007a52:	6041      	str	r1, [r0, #4]
 8007a54:	4658      	mov	r0, fp
 8007a56:	f000 fd8d 	bl	8008574 <_Balloc>
 8007a5a:	4682      	mov	sl, r0
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	d139      	bne.n	8007ad4 <_dtoa_r+0x2ec>
 8007a60:	4602      	mov	r2, r0
 8007a62:	f240 11af 	movw	r1, #431	@ 0x1af
 8007a66:	4b1a      	ldr	r3, [pc, #104]	@ (8007ad0 <_dtoa_r+0x2e8>)
 8007a68:	e6d2      	b.n	8007810 <_dtoa_r+0x28>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e7e0      	b.n	8007a30 <_dtoa_r+0x248>
 8007a6e:	2401      	movs	r4, #1
 8007a70:	2300      	movs	r3, #0
 8007a72:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007a74:	9320      	str	r3, [sp, #128]	@ 0x80
 8007a76:	f04f 33ff 	mov.w	r3, #4294967295
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007a80:	2312      	movs	r3, #18
 8007a82:	e7d0      	b.n	8007a26 <_dtoa_r+0x23e>
 8007a84:	2301      	movs	r3, #1
 8007a86:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a88:	e7f5      	b.n	8007a76 <_dtoa_r+0x28e>
 8007a8a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007a90:	e7d7      	b.n	8007a42 <_dtoa_r+0x25a>
 8007a92:	3101      	adds	r1, #1
 8007a94:	0052      	lsls	r2, r2, #1
 8007a96:	e7d8      	b.n	8007a4a <_dtoa_r+0x262>
 8007a98:	636f4361 	.word	0x636f4361
 8007a9c:	3fd287a7 	.word	0x3fd287a7
 8007aa0:	8b60c8b3 	.word	0x8b60c8b3
 8007aa4:	3fc68a28 	.word	0x3fc68a28
 8007aa8:	509f79fb 	.word	0x509f79fb
 8007aac:	3fd34413 	.word	0x3fd34413
 8007ab0:	080098e3 	.word	0x080098e3
 8007ab4:	080098fa 	.word	0x080098fa
 8007ab8:	7ff00000 	.word	0x7ff00000
 8007abc:	080098df 	.word	0x080098df
 8007ac0:	080098b3 	.word	0x080098b3
 8007ac4:	080098b2 	.word	0x080098b2
 8007ac8:	3ff80000 	.word	0x3ff80000
 8007acc:	080099f0 	.word	0x080099f0
 8007ad0:	08009952 	.word	0x08009952
 8007ad4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007ad8:	6018      	str	r0, [r3, #0]
 8007ada:	9b07      	ldr	r3, [sp, #28]
 8007adc:	2b0e      	cmp	r3, #14
 8007ade:	f200 80a4 	bhi.w	8007c2a <_dtoa_r+0x442>
 8007ae2:	2c00      	cmp	r4, #0
 8007ae4:	f000 80a1 	beq.w	8007c2a <_dtoa_r+0x442>
 8007ae8:	2f00      	cmp	r7, #0
 8007aea:	dd33      	ble.n	8007b54 <_dtoa_r+0x36c>
 8007aec:	4b86      	ldr	r3, [pc, #536]	@ (8007d08 <_dtoa_r+0x520>)
 8007aee:	f007 020f 	and.w	r2, r7, #15
 8007af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007af6:	05f8      	lsls	r0, r7, #23
 8007af8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007afc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007b04:	d516      	bpl.n	8007b34 <_dtoa_r+0x34c>
 8007b06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b0a:	4b80      	ldr	r3, [pc, #512]	@ (8007d0c <_dtoa_r+0x524>)
 8007b0c:	2603      	movs	r6, #3
 8007b0e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007b12:	f7f8 febf 	bl	8000894 <__aeabi_ddiv>
 8007b16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b1a:	f004 040f 	and.w	r4, r4, #15
 8007b1e:	4d7b      	ldr	r5, [pc, #492]	@ (8007d0c <_dtoa_r+0x524>)
 8007b20:	b954      	cbnz	r4, 8007b38 <_dtoa_r+0x350>
 8007b22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b2a:	f7f8 feb3 	bl	8000894 <__aeabi_ddiv>
 8007b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b32:	e028      	b.n	8007b86 <_dtoa_r+0x39e>
 8007b34:	2602      	movs	r6, #2
 8007b36:	e7f2      	b.n	8007b1e <_dtoa_r+0x336>
 8007b38:	07e1      	lsls	r1, r4, #31
 8007b3a:	d508      	bpl.n	8007b4e <_dtoa_r+0x366>
 8007b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007b40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b44:	f7f8 fd7c 	bl	8000640 <__aeabi_dmul>
 8007b48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007b4c:	3601      	adds	r6, #1
 8007b4e:	1064      	asrs	r4, r4, #1
 8007b50:	3508      	adds	r5, #8
 8007b52:	e7e5      	b.n	8007b20 <_dtoa_r+0x338>
 8007b54:	f000 80d2 	beq.w	8007cfc <_dtoa_r+0x514>
 8007b58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b5c:	427c      	negs	r4, r7
 8007b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8007d08 <_dtoa_r+0x520>)
 8007b60:	f004 020f 	and.w	r2, r4, #15
 8007b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	f7f8 fd68 	bl	8000640 <__aeabi_dmul>
 8007b70:	2602      	movs	r6, #2
 8007b72:	2300      	movs	r3, #0
 8007b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b78:	4d64      	ldr	r5, [pc, #400]	@ (8007d0c <_dtoa_r+0x524>)
 8007b7a:	1124      	asrs	r4, r4, #4
 8007b7c:	2c00      	cmp	r4, #0
 8007b7e:	f040 80b2 	bne.w	8007ce6 <_dtoa_r+0x4fe>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1d3      	bne.n	8007b2e <_dtoa_r+0x346>
 8007b86:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b8a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 80b7 	beq.w	8007d00 <_dtoa_r+0x518>
 8007b92:	2200      	movs	r2, #0
 8007b94:	4620      	mov	r0, r4
 8007b96:	4629      	mov	r1, r5
 8007b98:	4b5d      	ldr	r3, [pc, #372]	@ (8007d10 <_dtoa_r+0x528>)
 8007b9a:	f7f8 ffc3 	bl	8000b24 <__aeabi_dcmplt>
 8007b9e:	2800      	cmp	r0, #0
 8007ba0:	f000 80ae 	beq.w	8007d00 <_dtoa_r+0x518>
 8007ba4:	9b07      	ldr	r3, [sp, #28]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f000 80aa 	beq.w	8007d00 <_dtoa_r+0x518>
 8007bac:	9b08      	ldr	r3, [sp, #32]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dd37      	ble.n	8007c22 <_dtoa_r+0x43a>
 8007bb2:	1e7b      	subs	r3, r7, #1
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	9304      	str	r3, [sp, #16]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4629      	mov	r1, r5
 8007bbc:	4b55      	ldr	r3, [pc, #340]	@ (8007d14 <_dtoa_r+0x52c>)
 8007bbe:	f7f8 fd3f 	bl	8000640 <__aeabi_dmul>
 8007bc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bc6:	9c08      	ldr	r4, [sp, #32]
 8007bc8:	3601      	adds	r6, #1
 8007bca:	4630      	mov	r0, r6
 8007bcc:	f7f8 fcce 	bl	800056c <__aeabi_i2d>
 8007bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bd4:	f7f8 fd34 	bl	8000640 <__aeabi_dmul>
 8007bd8:	2200      	movs	r2, #0
 8007bda:	4b4f      	ldr	r3, [pc, #316]	@ (8007d18 <_dtoa_r+0x530>)
 8007bdc:	f7f8 fb7a 	bl	80002d4 <__adddf3>
 8007be0:	4605      	mov	r5, r0
 8007be2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007be6:	2c00      	cmp	r4, #0
 8007be8:	f040 809a 	bne.w	8007d20 <_dtoa_r+0x538>
 8007bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4b4a      	ldr	r3, [pc, #296]	@ (8007d1c <_dtoa_r+0x534>)
 8007bf4:	f7f8 fb6c 	bl	80002d0 <__aeabi_dsub>
 8007bf8:	4602      	mov	r2, r0
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c00:	462a      	mov	r2, r5
 8007c02:	4633      	mov	r3, r6
 8007c04:	f7f8 ffac 	bl	8000b60 <__aeabi_dcmpgt>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	f040 828e 	bne.w	800812a <_dtoa_r+0x942>
 8007c0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c12:	462a      	mov	r2, r5
 8007c14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007c18:	f7f8 ff84 	bl	8000b24 <__aeabi_dcmplt>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	f040 8127 	bne.w	8007e70 <_dtoa_r+0x688>
 8007c22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007c26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007c2a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f2c0 8163 	blt.w	8007ef8 <_dtoa_r+0x710>
 8007c32:	2f0e      	cmp	r7, #14
 8007c34:	f300 8160 	bgt.w	8007ef8 <_dtoa_r+0x710>
 8007c38:	4b33      	ldr	r3, [pc, #204]	@ (8007d08 <_dtoa_r+0x520>)
 8007c3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007c42:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007c46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	da03      	bge.n	8007c54 <_dtoa_r+0x46c>
 8007c4c:	9b07      	ldr	r3, [sp, #28]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f340 8100 	ble.w	8007e54 <_dtoa_r+0x66c>
 8007c54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c58:	4656      	mov	r6, sl
 8007c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c5e:	4620      	mov	r0, r4
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7f8 fe17 	bl	8000894 <__aeabi_ddiv>
 8007c66:	f7f8 ff9b 	bl	8000ba0 <__aeabi_d2iz>
 8007c6a:	4680      	mov	r8, r0
 8007c6c:	f7f8 fc7e 	bl	800056c <__aeabi_i2d>
 8007c70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c74:	f7f8 fce4 	bl	8000640 <__aeabi_dmul>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	4629      	mov	r1, r5
 8007c80:	f7f8 fb26 	bl	80002d0 <__aeabi_dsub>
 8007c84:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007c88:	9d07      	ldr	r5, [sp, #28]
 8007c8a:	f806 4b01 	strb.w	r4, [r6], #1
 8007c8e:	eba6 040a 	sub.w	r4, r6, sl
 8007c92:	42a5      	cmp	r5, r4
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	f040 8116 	bne.w	8007ec8 <_dtoa_r+0x6e0>
 8007c9c:	f7f8 fb1a 	bl	80002d4 <__adddf3>
 8007ca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ca4:	4604      	mov	r4, r0
 8007ca6:	460d      	mov	r5, r1
 8007ca8:	f7f8 ff5a 	bl	8000b60 <__aeabi_dcmpgt>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f040 80f8 	bne.w	8007ea2 <_dtoa_r+0x6ba>
 8007cb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	4629      	mov	r1, r5
 8007cba:	f7f8 ff29 	bl	8000b10 <__aeabi_dcmpeq>
 8007cbe:	b118      	cbz	r0, 8007cc8 <_dtoa_r+0x4e0>
 8007cc0:	f018 0f01 	tst.w	r8, #1
 8007cc4:	f040 80ed 	bne.w	8007ea2 <_dtoa_r+0x6ba>
 8007cc8:	4649      	mov	r1, r9
 8007cca:	4658      	mov	r0, fp
 8007ccc:	f000 fc92 	bl	80085f4 <_Bfree>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	7033      	strb	r3, [r6, #0]
 8007cd4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007cd6:	3701      	adds	r7, #1
 8007cd8:	601f      	str	r7, [r3, #0]
 8007cda:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 8320 	beq.w	8008322 <_dtoa_r+0xb3a>
 8007ce2:	601e      	str	r6, [r3, #0]
 8007ce4:	e31d      	b.n	8008322 <_dtoa_r+0xb3a>
 8007ce6:	07e2      	lsls	r2, r4, #31
 8007ce8:	d505      	bpl.n	8007cf6 <_dtoa_r+0x50e>
 8007cea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007cee:	f7f8 fca7 	bl	8000640 <__aeabi_dmul>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	3601      	adds	r6, #1
 8007cf6:	1064      	asrs	r4, r4, #1
 8007cf8:	3508      	adds	r5, #8
 8007cfa:	e73f      	b.n	8007b7c <_dtoa_r+0x394>
 8007cfc:	2602      	movs	r6, #2
 8007cfe:	e742      	b.n	8007b86 <_dtoa_r+0x39e>
 8007d00:	9c07      	ldr	r4, [sp, #28]
 8007d02:	9704      	str	r7, [sp, #16]
 8007d04:	e761      	b.n	8007bca <_dtoa_r+0x3e2>
 8007d06:	bf00      	nop
 8007d08:	080099f0 	.word	0x080099f0
 8007d0c:	080099c8 	.word	0x080099c8
 8007d10:	3ff00000 	.word	0x3ff00000
 8007d14:	40240000 	.word	0x40240000
 8007d18:	401c0000 	.word	0x401c0000
 8007d1c:	40140000 	.word	0x40140000
 8007d20:	4b70      	ldr	r3, [pc, #448]	@ (8007ee4 <_dtoa_r+0x6fc>)
 8007d22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d2c:	4454      	add	r4, sl
 8007d2e:	2900      	cmp	r1, #0
 8007d30:	d045      	beq.n	8007dbe <_dtoa_r+0x5d6>
 8007d32:	2000      	movs	r0, #0
 8007d34:	496c      	ldr	r1, [pc, #432]	@ (8007ee8 <_dtoa_r+0x700>)
 8007d36:	f7f8 fdad 	bl	8000894 <__aeabi_ddiv>
 8007d3a:	4633      	mov	r3, r6
 8007d3c:	462a      	mov	r2, r5
 8007d3e:	f7f8 fac7 	bl	80002d0 <__aeabi_dsub>
 8007d42:	4656      	mov	r6, sl
 8007d44:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d4c:	f7f8 ff28 	bl	8000ba0 <__aeabi_d2iz>
 8007d50:	4605      	mov	r5, r0
 8007d52:	f7f8 fc0b 	bl	800056c <__aeabi_i2d>
 8007d56:	4602      	mov	r2, r0
 8007d58:	460b      	mov	r3, r1
 8007d5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d5e:	f7f8 fab7 	bl	80002d0 <__aeabi_dsub>
 8007d62:	4602      	mov	r2, r0
 8007d64:	460b      	mov	r3, r1
 8007d66:	3530      	adds	r5, #48	@ 0x30
 8007d68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d6c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d70:	f806 5b01 	strb.w	r5, [r6], #1
 8007d74:	f7f8 fed6 	bl	8000b24 <__aeabi_dcmplt>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d163      	bne.n	8007e44 <_dtoa_r+0x65c>
 8007d7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d80:	2000      	movs	r0, #0
 8007d82:	495a      	ldr	r1, [pc, #360]	@ (8007eec <_dtoa_r+0x704>)
 8007d84:	f7f8 faa4 	bl	80002d0 <__aeabi_dsub>
 8007d88:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d8c:	f7f8 feca 	bl	8000b24 <__aeabi_dcmplt>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	f040 8087 	bne.w	8007ea4 <_dtoa_r+0x6bc>
 8007d96:	42a6      	cmp	r6, r4
 8007d98:	f43f af43 	beq.w	8007c22 <_dtoa_r+0x43a>
 8007d9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007da0:	2200      	movs	r2, #0
 8007da2:	4b53      	ldr	r3, [pc, #332]	@ (8007ef0 <_dtoa_r+0x708>)
 8007da4:	f7f8 fc4c 	bl	8000640 <__aeabi_dmul>
 8007da8:	2200      	movs	r2, #0
 8007daa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007db2:	4b4f      	ldr	r3, [pc, #316]	@ (8007ef0 <_dtoa_r+0x708>)
 8007db4:	f7f8 fc44 	bl	8000640 <__aeabi_dmul>
 8007db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dbc:	e7c4      	b.n	8007d48 <_dtoa_r+0x560>
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	f7f8 fc3d 	bl	8000640 <__aeabi_dmul>
 8007dc6:	4656      	mov	r6, sl
 8007dc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007dcc:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dd2:	f7f8 fee5 	bl	8000ba0 <__aeabi_d2iz>
 8007dd6:	4605      	mov	r5, r0
 8007dd8:	f7f8 fbc8 	bl	800056c <__aeabi_i2d>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	460b      	mov	r3, r1
 8007de0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007de4:	f7f8 fa74 	bl	80002d0 <__aeabi_dsub>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	3530      	adds	r5, #48	@ 0x30
 8007dee:	f806 5b01 	strb.w	r5, [r6], #1
 8007df2:	42a6      	cmp	r6, r4
 8007df4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007df8:	f04f 0200 	mov.w	r2, #0
 8007dfc:	d124      	bne.n	8007e48 <_dtoa_r+0x660>
 8007dfe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e02:	4b39      	ldr	r3, [pc, #228]	@ (8007ee8 <_dtoa_r+0x700>)
 8007e04:	f7f8 fa66 	bl	80002d4 <__adddf3>
 8007e08:	4602      	mov	r2, r0
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e10:	f7f8 fea6 	bl	8000b60 <__aeabi_dcmpgt>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d145      	bne.n	8007ea4 <_dtoa_r+0x6bc>
 8007e18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	4932      	ldr	r1, [pc, #200]	@ (8007ee8 <_dtoa_r+0x700>)
 8007e20:	f7f8 fa56 	bl	80002d0 <__aeabi_dsub>
 8007e24:	4602      	mov	r2, r0
 8007e26:	460b      	mov	r3, r1
 8007e28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e2c:	f7f8 fe7a 	bl	8000b24 <__aeabi_dcmplt>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	f43f aef6 	beq.w	8007c22 <_dtoa_r+0x43a>
 8007e36:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007e38:	1e73      	subs	r3, r6, #1
 8007e3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e3c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007e40:	2b30      	cmp	r3, #48	@ 0x30
 8007e42:	d0f8      	beq.n	8007e36 <_dtoa_r+0x64e>
 8007e44:	9f04      	ldr	r7, [sp, #16]
 8007e46:	e73f      	b.n	8007cc8 <_dtoa_r+0x4e0>
 8007e48:	4b29      	ldr	r3, [pc, #164]	@ (8007ef0 <_dtoa_r+0x708>)
 8007e4a:	f7f8 fbf9 	bl	8000640 <__aeabi_dmul>
 8007e4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e52:	e7bc      	b.n	8007dce <_dtoa_r+0x5e6>
 8007e54:	d10c      	bne.n	8007e70 <_dtoa_r+0x688>
 8007e56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	4b25      	ldr	r3, [pc, #148]	@ (8007ef4 <_dtoa_r+0x70c>)
 8007e5e:	f7f8 fbef 	bl	8000640 <__aeabi_dmul>
 8007e62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e66:	f7f8 fe71 	bl	8000b4c <__aeabi_dcmpge>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	f000 815b 	beq.w	8008126 <_dtoa_r+0x93e>
 8007e70:	2400      	movs	r4, #0
 8007e72:	4625      	mov	r5, r4
 8007e74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e76:	4656      	mov	r6, sl
 8007e78:	43db      	mvns	r3, r3
 8007e7a:	9304      	str	r3, [sp, #16]
 8007e7c:	2700      	movs	r7, #0
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4658      	mov	r0, fp
 8007e82:	f000 fbb7 	bl	80085f4 <_Bfree>
 8007e86:	2d00      	cmp	r5, #0
 8007e88:	d0dc      	beq.n	8007e44 <_dtoa_r+0x65c>
 8007e8a:	b12f      	cbz	r7, 8007e98 <_dtoa_r+0x6b0>
 8007e8c:	42af      	cmp	r7, r5
 8007e8e:	d003      	beq.n	8007e98 <_dtoa_r+0x6b0>
 8007e90:	4639      	mov	r1, r7
 8007e92:	4658      	mov	r0, fp
 8007e94:	f000 fbae 	bl	80085f4 <_Bfree>
 8007e98:	4629      	mov	r1, r5
 8007e9a:	4658      	mov	r0, fp
 8007e9c:	f000 fbaa 	bl	80085f4 <_Bfree>
 8007ea0:	e7d0      	b.n	8007e44 <_dtoa_r+0x65c>
 8007ea2:	9704      	str	r7, [sp, #16]
 8007ea4:	4633      	mov	r3, r6
 8007ea6:	461e      	mov	r6, r3
 8007ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007eac:	2a39      	cmp	r2, #57	@ 0x39
 8007eae:	d107      	bne.n	8007ec0 <_dtoa_r+0x6d8>
 8007eb0:	459a      	cmp	sl, r3
 8007eb2:	d1f8      	bne.n	8007ea6 <_dtoa_r+0x6be>
 8007eb4:	9a04      	ldr	r2, [sp, #16]
 8007eb6:	3201      	adds	r2, #1
 8007eb8:	9204      	str	r2, [sp, #16]
 8007eba:	2230      	movs	r2, #48	@ 0x30
 8007ebc:	f88a 2000 	strb.w	r2, [sl]
 8007ec0:	781a      	ldrb	r2, [r3, #0]
 8007ec2:	3201      	adds	r2, #1
 8007ec4:	701a      	strb	r2, [r3, #0]
 8007ec6:	e7bd      	b.n	8007e44 <_dtoa_r+0x65c>
 8007ec8:	2200      	movs	r2, #0
 8007eca:	4b09      	ldr	r3, [pc, #36]	@ (8007ef0 <_dtoa_r+0x708>)
 8007ecc:	f7f8 fbb8 	bl	8000640 <__aeabi_dmul>
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	460d      	mov	r5, r1
 8007ed8:	f7f8 fe1a 	bl	8000b10 <__aeabi_dcmpeq>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	f43f aebc 	beq.w	8007c5a <_dtoa_r+0x472>
 8007ee2:	e6f1      	b.n	8007cc8 <_dtoa_r+0x4e0>
 8007ee4:	080099f0 	.word	0x080099f0
 8007ee8:	3fe00000 	.word	0x3fe00000
 8007eec:	3ff00000 	.word	0x3ff00000
 8007ef0:	40240000 	.word	0x40240000
 8007ef4:	40140000 	.word	0x40140000
 8007ef8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007efa:	2a00      	cmp	r2, #0
 8007efc:	f000 80db 	beq.w	80080b6 <_dtoa_r+0x8ce>
 8007f00:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f02:	2a01      	cmp	r2, #1
 8007f04:	f300 80bf 	bgt.w	8008086 <_dtoa_r+0x89e>
 8007f08:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007f0a:	2a00      	cmp	r2, #0
 8007f0c:	f000 80b7 	beq.w	800807e <_dtoa_r+0x896>
 8007f10:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007f14:	4646      	mov	r6, r8
 8007f16:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007f18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	441a      	add	r2, r3
 8007f1e:	4658      	mov	r0, fp
 8007f20:	4498      	add	r8, r3
 8007f22:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f24:	f000 fc1a 	bl	800875c <__i2b>
 8007f28:	4605      	mov	r5, r0
 8007f2a:	b15e      	cbz	r6, 8007f44 <_dtoa_r+0x75c>
 8007f2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	dd08      	ble.n	8007f44 <_dtoa_r+0x75c>
 8007f32:	42b3      	cmp	r3, r6
 8007f34:	bfa8      	it	ge
 8007f36:	4633      	movge	r3, r6
 8007f38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f3a:	eba8 0803 	sub.w	r8, r8, r3
 8007f3e:	1af6      	subs	r6, r6, r3
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f46:	b1f3      	cbz	r3, 8007f86 <_dtoa_r+0x79e>
 8007f48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 80b7 	beq.w	80080be <_dtoa_r+0x8d6>
 8007f50:	b18c      	cbz	r4, 8007f76 <_dtoa_r+0x78e>
 8007f52:	4629      	mov	r1, r5
 8007f54:	4622      	mov	r2, r4
 8007f56:	4658      	mov	r0, fp
 8007f58:	f000 fcbe 	bl	80088d8 <__pow5mult>
 8007f5c:	464a      	mov	r2, r9
 8007f5e:	4601      	mov	r1, r0
 8007f60:	4605      	mov	r5, r0
 8007f62:	4658      	mov	r0, fp
 8007f64:	f000 fc10 	bl	8008788 <__multiply>
 8007f68:	4649      	mov	r1, r9
 8007f6a:	9004      	str	r0, [sp, #16]
 8007f6c:	4658      	mov	r0, fp
 8007f6e:	f000 fb41 	bl	80085f4 <_Bfree>
 8007f72:	9b04      	ldr	r3, [sp, #16]
 8007f74:	4699      	mov	r9, r3
 8007f76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f78:	1b1a      	subs	r2, r3, r4
 8007f7a:	d004      	beq.n	8007f86 <_dtoa_r+0x79e>
 8007f7c:	4649      	mov	r1, r9
 8007f7e:	4658      	mov	r0, fp
 8007f80:	f000 fcaa 	bl	80088d8 <__pow5mult>
 8007f84:	4681      	mov	r9, r0
 8007f86:	2101      	movs	r1, #1
 8007f88:	4658      	mov	r0, fp
 8007f8a:	f000 fbe7 	bl	800875c <__i2b>
 8007f8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f90:	4604      	mov	r4, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 81c9 	beq.w	800832a <_dtoa_r+0xb42>
 8007f98:	461a      	mov	r2, r3
 8007f9a:	4601      	mov	r1, r0
 8007f9c:	4658      	mov	r0, fp
 8007f9e:	f000 fc9b 	bl	80088d8 <__pow5mult>
 8007fa2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	f300 808f 	bgt.w	80080ca <_dtoa_r+0x8e2>
 8007fac:	9b02      	ldr	r3, [sp, #8]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	f040 8087 	bne.w	80080c2 <_dtoa_r+0x8da>
 8007fb4:	9b03      	ldr	r3, [sp, #12]
 8007fb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f040 8083 	bne.w	80080c6 <_dtoa_r+0x8de>
 8007fc0:	9b03      	ldr	r3, [sp, #12]
 8007fc2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fc6:	0d1b      	lsrs	r3, r3, #20
 8007fc8:	051b      	lsls	r3, r3, #20
 8007fca:	b12b      	cbz	r3, 8007fd8 <_dtoa_r+0x7f0>
 8007fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fce:	f108 0801 	add.w	r8, r8, #1
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 81aa 	beq.w	8008336 <_dtoa_r+0xb4e>
 8007fe2:	6923      	ldr	r3, [r4, #16]
 8007fe4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007fe8:	6918      	ldr	r0, [r3, #16]
 8007fea:	f000 fb6b 	bl	80086c4 <__hi0bits>
 8007fee:	f1c0 0020 	rsb	r0, r0, #32
 8007ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff4:	4418      	add	r0, r3
 8007ff6:	f010 001f 	ands.w	r0, r0, #31
 8007ffa:	d071      	beq.n	80080e0 <_dtoa_r+0x8f8>
 8007ffc:	f1c0 0320 	rsb	r3, r0, #32
 8008000:	2b04      	cmp	r3, #4
 8008002:	dd65      	ble.n	80080d0 <_dtoa_r+0x8e8>
 8008004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008006:	f1c0 001c 	rsb	r0, r0, #28
 800800a:	4403      	add	r3, r0
 800800c:	4480      	add	r8, r0
 800800e:	4406      	add	r6, r0
 8008010:	9309      	str	r3, [sp, #36]	@ 0x24
 8008012:	f1b8 0f00 	cmp.w	r8, #0
 8008016:	dd05      	ble.n	8008024 <_dtoa_r+0x83c>
 8008018:	4649      	mov	r1, r9
 800801a:	4642      	mov	r2, r8
 800801c:	4658      	mov	r0, fp
 800801e:	f000 fcb5 	bl	800898c <__lshift>
 8008022:	4681      	mov	r9, r0
 8008024:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008026:	2b00      	cmp	r3, #0
 8008028:	dd05      	ble.n	8008036 <_dtoa_r+0x84e>
 800802a:	4621      	mov	r1, r4
 800802c:	461a      	mov	r2, r3
 800802e:	4658      	mov	r0, fp
 8008030:	f000 fcac 	bl	800898c <__lshift>
 8008034:	4604      	mov	r4, r0
 8008036:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008038:	2b00      	cmp	r3, #0
 800803a:	d053      	beq.n	80080e4 <_dtoa_r+0x8fc>
 800803c:	4621      	mov	r1, r4
 800803e:	4648      	mov	r0, r9
 8008040:	f000 fd10 	bl	8008a64 <__mcmp>
 8008044:	2800      	cmp	r0, #0
 8008046:	da4d      	bge.n	80080e4 <_dtoa_r+0x8fc>
 8008048:	1e7b      	subs	r3, r7, #1
 800804a:	4649      	mov	r1, r9
 800804c:	9304      	str	r3, [sp, #16]
 800804e:	220a      	movs	r2, #10
 8008050:	2300      	movs	r3, #0
 8008052:	4658      	mov	r0, fp
 8008054:	f000 faf0 	bl	8008638 <__multadd>
 8008058:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800805a:	4681      	mov	r9, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 816c 	beq.w	800833a <_dtoa_r+0xb52>
 8008062:	2300      	movs	r3, #0
 8008064:	4629      	mov	r1, r5
 8008066:	220a      	movs	r2, #10
 8008068:	4658      	mov	r0, fp
 800806a:	f000 fae5 	bl	8008638 <__multadd>
 800806e:	9b08      	ldr	r3, [sp, #32]
 8008070:	4605      	mov	r5, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	dc61      	bgt.n	800813a <_dtoa_r+0x952>
 8008076:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008078:	2b02      	cmp	r3, #2
 800807a:	dc3b      	bgt.n	80080f4 <_dtoa_r+0x90c>
 800807c:	e05d      	b.n	800813a <_dtoa_r+0x952>
 800807e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008080:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008084:	e746      	b.n	8007f14 <_dtoa_r+0x72c>
 8008086:	9b07      	ldr	r3, [sp, #28]
 8008088:	1e5c      	subs	r4, r3, #1
 800808a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800808c:	42a3      	cmp	r3, r4
 800808e:	bfbf      	itttt	lt
 8008090:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008092:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008094:	1ae3      	sublt	r3, r4, r3
 8008096:	18d2      	addlt	r2, r2, r3
 8008098:	bfa8      	it	ge
 800809a:	1b1c      	subge	r4, r3, r4
 800809c:	9b07      	ldr	r3, [sp, #28]
 800809e:	bfbe      	ittt	lt
 80080a0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80080a2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80080a4:	2400      	movlt	r4, #0
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	bfb5      	itete	lt
 80080aa:	eba8 0603 	sublt.w	r6, r8, r3
 80080ae:	4646      	movge	r6, r8
 80080b0:	2300      	movlt	r3, #0
 80080b2:	9b07      	ldrge	r3, [sp, #28]
 80080b4:	e730      	b.n	8007f18 <_dtoa_r+0x730>
 80080b6:	4646      	mov	r6, r8
 80080b8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80080ba:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80080bc:	e735      	b.n	8007f2a <_dtoa_r+0x742>
 80080be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80080c0:	e75c      	b.n	8007f7c <_dtoa_r+0x794>
 80080c2:	2300      	movs	r3, #0
 80080c4:	e788      	b.n	8007fd8 <_dtoa_r+0x7f0>
 80080c6:	9b02      	ldr	r3, [sp, #8]
 80080c8:	e786      	b.n	8007fd8 <_dtoa_r+0x7f0>
 80080ca:	2300      	movs	r3, #0
 80080cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80080ce:	e788      	b.n	8007fe2 <_dtoa_r+0x7fa>
 80080d0:	d09f      	beq.n	8008012 <_dtoa_r+0x82a>
 80080d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080d4:	331c      	adds	r3, #28
 80080d6:	441a      	add	r2, r3
 80080d8:	4498      	add	r8, r3
 80080da:	441e      	add	r6, r3
 80080dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80080de:	e798      	b.n	8008012 <_dtoa_r+0x82a>
 80080e0:	4603      	mov	r3, r0
 80080e2:	e7f6      	b.n	80080d2 <_dtoa_r+0x8ea>
 80080e4:	9b07      	ldr	r3, [sp, #28]
 80080e6:	9704      	str	r7, [sp, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	dc20      	bgt.n	800812e <_dtoa_r+0x946>
 80080ec:	9308      	str	r3, [sp, #32]
 80080ee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80080f0:	2b02      	cmp	r3, #2
 80080f2:	dd1e      	ble.n	8008132 <_dtoa_r+0x94a>
 80080f4:	9b08      	ldr	r3, [sp, #32]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f47f aebc 	bne.w	8007e74 <_dtoa_r+0x68c>
 80080fc:	4621      	mov	r1, r4
 80080fe:	2205      	movs	r2, #5
 8008100:	4658      	mov	r0, fp
 8008102:	f000 fa99 	bl	8008638 <__multadd>
 8008106:	4601      	mov	r1, r0
 8008108:	4604      	mov	r4, r0
 800810a:	4648      	mov	r0, r9
 800810c:	f000 fcaa 	bl	8008a64 <__mcmp>
 8008110:	2800      	cmp	r0, #0
 8008112:	f77f aeaf 	ble.w	8007e74 <_dtoa_r+0x68c>
 8008116:	2331      	movs	r3, #49	@ 0x31
 8008118:	4656      	mov	r6, sl
 800811a:	f806 3b01 	strb.w	r3, [r6], #1
 800811e:	9b04      	ldr	r3, [sp, #16]
 8008120:	3301      	adds	r3, #1
 8008122:	9304      	str	r3, [sp, #16]
 8008124:	e6aa      	b.n	8007e7c <_dtoa_r+0x694>
 8008126:	9c07      	ldr	r4, [sp, #28]
 8008128:	9704      	str	r7, [sp, #16]
 800812a:	4625      	mov	r5, r4
 800812c:	e7f3      	b.n	8008116 <_dtoa_r+0x92e>
 800812e:	9b07      	ldr	r3, [sp, #28]
 8008130:	9308      	str	r3, [sp, #32]
 8008132:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008134:	2b00      	cmp	r3, #0
 8008136:	f000 8104 	beq.w	8008342 <_dtoa_r+0xb5a>
 800813a:	2e00      	cmp	r6, #0
 800813c:	dd05      	ble.n	800814a <_dtoa_r+0x962>
 800813e:	4629      	mov	r1, r5
 8008140:	4632      	mov	r2, r6
 8008142:	4658      	mov	r0, fp
 8008144:	f000 fc22 	bl	800898c <__lshift>
 8008148:	4605      	mov	r5, r0
 800814a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800814c:	2b00      	cmp	r3, #0
 800814e:	d05a      	beq.n	8008206 <_dtoa_r+0xa1e>
 8008150:	4658      	mov	r0, fp
 8008152:	6869      	ldr	r1, [r5, #4]
 8008154:	f000 fa0e 	bl	8008574 <_Balloc>
 8008158:	4606      	mov	r6, r0
 800815a:	b928      	cbnz	r0, 8008168 <_dtoa_r+0x980>
 800815c:	4602      	mov	r2, r0
 800815e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008162:	4b83      	ldr	r3, [pc, #524]	@ (8008370 <_dtoa_r+0xb88>)
 8008164:	f7ff bb54 	b.w	8007810 <_dtoa_r+0x28>
 8008168:	692a      	ldr	r2, [r5, #16]
 800816a:	f105 010c 	add.w	r1, r5, #12
 800816e:	3202      	adds	r2, #2
 8008170:	0092      	lsls	r2, r2, #2
 8008172:	300c      	adds	r0, #12
 8008174:	f000 ffa8 	bl	80090c8 <memcpy>
 8008178:	2201      	movs	r2, #1
 800817a:	4631      	mov	r1, r6
 800817c:	4658      	mov	r0, fp
 800817e:	f000 fc05 	bl	800898c <__lshift>
 8008182:	462f      	mov	r7, r5
 8008184:	4605      	mov	r5, r0
 8008186:	f10a 0301 	add.w	r3, sl, #1
 800818a:	9307      	str	r3, [sp, #28]
 800818c:	9b08      	ldr	r3, [sp, #32]
 800818e:	4453      	add	r3, sl
 8008190:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008192:	9b02      	ldr	r3, [sp, #8]
 8008194:	f003 0301 	and.w	r3, r3, #1
 8008198:	930a      	str	r3, [sp, #40]	@ 0x28
 800819a:	9b07      	ldr	r3, [sp, #28]
 800819c:	4621      	mov	r1, r4
 800819e:	3b01      	subs	r3, #1
 80081a0:	4648      	mov	r0, r9
 80081a2:	9302      	str	r3, [sp, #8]
 80081a4:	f7ff fa97 	bl	80076d6 <quorem>
 80081a8:	4639      	mov	r1, r7
 80081aa:	9008      	str	r0, [sp, #32]
 80081ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80081b0:	4648      	mov	r0, r9
 80081b2:	f000 fc57 	bl	8008a64 <__mcmp>
 80081b6:	462a      	mov	r2, r5
 80081b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80081ba:	4621      	mov	r1, r4
 80081bc:	4658      	mov	r0, fp
 80081be:	f000 fc6d 	bl	8008a9c <__mdiff>
 80081c2:	68c2      	ldr	r2, [r0, #12]
 80081c4:	4606      	mov	r6, r0
 80081c6:	bb02      	cbnz	r2, 800820a <_dtoa_r+0xa22>
 80081c8:	4601      	mov	r1, r0
 80081ca:	4648      	mov	r0, r9
 80081cc:	f000 fc4a 	bl	8008a64 <__mcmp>
 80081d0:	4602      	mov	r2, r0
 80081d2:	4631      	mov	r1, r6
 80081d4:	4658      	mov	r0, fp
 80081d6:	920c      	str	r2, [sp, #48]	@ 0x30
 80081d8:	f000 fa0c 	bl	80085f4 <_Bfree>
 80081dc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081de:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80081e0:	9e07      	ldr	r6, [sp, #28]
 80081e2:	ea43 0102 	orr.w	r1, r3, r2
 80081e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081e8:	4319      	orrs	r1, r3
 80081ea:	d110      	bne.n	800820e <_dtoa_r+0xa26>
 80081ec:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081f0:	d029      	beq.n	8008246 <_dtoa_r+0xa5e>
 80081f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	dd02      	ble.n	80081fe <_dtoa_r+0xa16>
 80081f8:	9b08      	ldr	r3, [sp, #32]
 80081fa:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80081fe:	9b02      	ldr	r3, [sp, #8]
 8008200:	f883 8000 	strb.w	r8, [r3]
 8008204:	e63b      	b.n	8007e7e <_dtoa_r+0x696>
 8008206:	4628      	mov	r0, r5
 8008208:	e7bb      	b.n	8008182 <_dtoa_r+0x99a>
 800820a:	2201      	movs	r2, #1
 800820c:	e7e1      	b.n	80081d2 <_dtoa_r+0x9ea>
 800820e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008210:	2b00      	cmp	r3, #0
 8008212:	db04      	blt.n	800821e <_dtoa_r+0xa36>
 8008214:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008216:	430b      	orrs	r3, r1
 8008218:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800821a:	430b      	orrs	r3, r1
 800821c:	d120      	bne.n	8008260 <_dtoa_r+0xa78>
 800821e:	2a00      	cmp	r2, #0
 8008220:	dded      	ble.n	80081fe <_dtoa_r+0xa16>
 8008222:	4649      	mov	r1, r9
 8008224:	2201      	movs	r2, #1
 8008226:	4658      	mov	r0, fp
 8008228:	f000 fbb0 	bl	800898c <__lshift>
 800822c:	4621      	mov	r1, r4
 800822e:	4681      	mov	r9, r0
 8008230:	f000 fc18 	bl	8008a64 <__mcmp>
 8008234:	2800      	cmp	r0, #0
 8008236:	dc03      	bgt.n	8008240 <_dtoa_r+0xa58>
 8008238:	d1e1      	bne.n	80081fe <_dtoa_r+0xa16>
 800823a:	f018 0f01 	tst.w	r8, #1
 800823e:	d0de      	beq.n	80081fe <_dtoa_r+0xa16>
 8008240:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008244:	d1d8      	bne.n	80081f8 <_dtoa_r+0xa10>
 8008246:	2339      	movs	r3, #57	@ 0x39
 8008248:	9a02      	ldr	r2, [sp, #8]
 800824a:	7013      	strb	r3, [r2, #0]
 800824c:	4633      	mov	r3, r6
 800824e:	461e      	mov	r6, r3
 8008250:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008254:	3b01      	subs	r3, #1
 8008256:	2a39      	cmp	r2, #57	@ 0x39
 8008258:	d052      	beq.n	8008300 <_dtoa_r+0xb18>
 800825a:	3201      	adds	r2, #1
 800825c:	701a      	strb	r2, [r3, #0]
 800825e:	e60e      	b.n	8007e7e <_dtoa_r+0x696>
 8008260:	2a00      	cmp	r2, #0
 8008262:	dd07      	ble.n	8008274 <_dtoa_r+0xa8c>
 8008264:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008268:	d0ed      	beq.n	8008246 <_dtoa_r+0xa5e>
 800826a:	9a02      	ldr	r2, [sp, #8]
 800826c:	f108 0301 	add.w	r3, r8, #1
 8008270:	7013      	strb	r3, [r2, #0]
 8008272:	e604      	b.n	8007e7e <_dtoa_r+0x696>
 8008274:	9b07      	ldr	r3, [sp, #28]
 8008276:	9a07      	ldr	r2, [sp, #28]
 8008278:	f803 8c01 	strb.w	r8, [r3, #-1]
 800827c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800827e:	4293      	cmp	r3, r2
 8008280:	d028      	beq.n	80082d4 <_dtoa_r+0xaec>
 8008282:	4649      	mov	r1, r9
 8008284:	2300      	movs	r3, #0
 8008286:	220a      	movs	r2, #10
 8008288:	4658      	mov	r0, fp
 800828a:	f000 f9d5 	bl	8008638 <__multadd>
 800828e:	42af      	cmp	r7, r5
 8008290:	4681      	mov	r9, r0
 8008292:	f04f 0300 	mov.w	r3, #0
 8008296:	f04f 020a 	mov.w	r2, #10
 800829a:	4639      	mov	r1, r7
 800829c:	4658      	mov	r0, fp
 800829e:	d107      	bne.n	80082b0 <_dtoa_r+0xac8>
 80082a0:	f000 f9ca 	bl	8008638 <__multadd>
 80082a4:	4607      	mov	r7, r0
 80082a6:	4605      	mov	r5, r0
 80082a8:	9b07      	ldr	r3, [sp, #28]
 80082aa:	3301      	adds	r3, #1
 80082ac:	9307      	str	r3, [sp, #28]
 80082ae:	e774      	b.n	800819a <_dtoa_r+0x9b2>
 80082b0:	f000 f9c2 	bl	8008638 <__multadd>
 80082b4:	4629      	mov	r1, r5
 80082b6:	4607      	mov	r7, r0
 80082b8:	2300      	movs	r3, #0
 80082ba:	220a      	movs	r2, #10
 80082bc:	4658      	mov	r0, fp
 80082be:	f000 f9bb 	bl	8008638 <__multadd>
 80082c2:	4605      	mov	r5, r0
 80082c4:	e7f0      	b.n	80082a8 <_dtoa_r+0xac0>
 80082c6:	9b08      	ldr	r3, [sp, #32]
 80082c8:	2700      	movs	r7, #0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	bfcc      	ite	gt
 80082ce:	461e      	movgt	r6, r3
 80082d0:	2601      	movle	r6, #1
 80082d2:	4456      	add	r6, sl
 80082d4:	4649      	mov	r1, r9
 80082d6:	2201      	movs	r2, #1
 80082d8:	4658      	mov	r0, fp
 80082da:	f000 fb57 	bl	800898c <__lshift>
 80082de:	4621      	mov	r1, r4
 80082e0:	4681      	mov	r9, r0
 80082e2:	f000 fbbf 	bl	8008a64 <__mcmp>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	dcb0      	bgt.n	800824c <_dtoa_r+0xa64>
 80082ea:	d102      	bne.n	80082f2 <_dtoa_r+0xb0a>
 80082ec:	f018 0f01 	tst.w	r8, #1
 80082f0:	d1ac      	bne.n	800824c <_dtoa_r+0xa64>
 80082f2:	4633      	mov	r3, r6
 80082f4:	461e      	mov	r6, r3
 80082f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082fa:	2a30      	cmp	r2, #48	@ 0x30
 80082fc:	d0fa      	beq.n	80082f4 <_dtoa_r+0xb0c>
 80082fe:	e5be      	b.n	8007e7e <_dtoa_r+0x696>
 8008300:	459a      	cmp	sl, r3
 8008302:	d1a4      	bne.n	800824e <_dtoa_r+0xa66>
 8008304:	9b04      	ldr	r3, [sp, #16]
 8008306:	3301      	adds	r3, #1
 8008308:	9304      	str	r3, [sp, #16]
 800830a:	2331      	movs	r3, #49	@ 0x31
 800830c:	f88a 3000 	strb.w	r3, [sl]
 8008310:	e5b5      	b.n	8007e7e <_dtoa_r+0x696>
 8008312:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008314:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008374 <_dtoa_r+0xb8c>
 8008318:	b11b      	cbz	r3, 8008322 <_dtoa_r+0xb3a>
 800831a:	f10a 0308 	add.w	r3, sl, #8
 800831e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008320:	6013      	str	r3, [r2, #0]
 8008322:	4650      	mov	r0, sl
 8008324:	b017      	add	sp, #92	@ 0x5c
 8008326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800832c:	2b01      	cmp	r3, #1
 800832e:	f77f ae3d 	ble.w	8007fac <_dtoa_r+0x7c4>
 8008332:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008334:	930a      	str	r3, [sp, #40]	@ 0x28
 8008336:	2001      	movs	r0, #1
 8008338:	e65b      	b.n	8007ff2 <_dtoa_r+0x80a>
 800833a:	9b08      	ldr	r3, [sp, #32]
 800833c:	2b00      	cmp	r3, #0
 800833e:	f77f aed6 	ble.w	80080ee <_dtoa_r+0x906>
 8008342:	4656      	mov	r6, sl
 8008344:	4621      	mov	r1, r4
 8008346:	4648      	mov	r0, r9
 8008348:	f7ff f9c5 	bl	80076d6 <quorem>
 800834c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008350:	9b08      	ldr	r3, [sp, #32]
 8008352:	f806 8b01 	strb.w	r8, [r6], #1
 8008356:	eba6 020a 	sub.w	r2, r6, sl
 800835a:	4293      	cmp	r3, r2
 800835c:	ddb3      	ble.n	80082c6 <_dtoa_r+0xade>
 800835e:	4649      	mov	r1, r9
 8008360:	2300      	movs	r3, #0
 8008362:	220a      	movs	r2, #10
 8008364:	4658      	mov	r0, fp
 8008366:	f000 f967 	bl	8008638 <__multadd>
 800836a:	4681      	mov	r9, r0
 800836c:	e7ea      	b.n	8008344 <_dtoa_r+0xb5c>
 800836e:	bf00      	nop
 8008370:	08009952 	.word	0x08009952
 8008374:	080098d6 	.word	0x080098d6

08008378 <_free_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4605      	mov	r5, r0
 800837c:	2900      	cmp	r1, #0
 800837e:	d040      	beq.n	8008402 <_free_r+0x8a>
 8008380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008384:	1f0c      	subs	r4, r1, #4
 8008386:	2b00      	cmp	r3, #0
 8008388:	bfb8      	it	lt
 800838a:	18e4      	addlt	r4, r4, r3
 800838c:	f000 f8e6 	bl	800855c <__malloc_lock>
 8008390:	4a1c      	ldr	r2, [pc, #112]	@ (8008404 <_free_r+0x8c>)
 8008392:	6813      	ldr	r3, [r2, #0]
 8008394:	b933      	cbnz	r3, 80083a4 <_free_r+0x2c>
 8008396:	6063      	str	r3, [r4, #4]
 8008398:	6014      	str	r4, [r2, #0]
 800839a:	4628      	mov	r0, r5
 800839c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80083a0:	f000 b8e2 	b.w	8008568 <__malloc_unlock>
 80083a4:	42a3      	cmp	r3, r4
 80083a6:	d908      	bls.n	80083ba <_free_r+0x42>
 80083a8:	6820      	ldr	r0, [r4, #0]
 80083aa:	1821      	adds	r1, r4, r0
 80083ac:	428b      	cmp	r3, r1
 80083ae:	bf01      	itttt	eq
 80083b0:	6819      	ldreq	r1, [r3, #0]
 80083b2:	685b      	ldreq	r3, [r3, #4]
 80083b4:	1809      	addeq	r1, r1, r0
 80083b6:	6021      	streq	r1, [r4, #0]
 80083b8:	e7ed      	b.n	8008396 <_free_r+0x1e>
 80083ba:	461a      	mov	r2, r3
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	b10b      	cbz	r3, 80083c4 <_free_r+0x4c>
 80083c0:	42a3      	cmp	r3, r4
 80083c2:	d9fa      	bls.n	80083ba <_free_r+0x42>
 80083c4:	6811      	ldr	r1, [r2, #0]
 80083c6:	1850      	adds	r0, r2, r1
 80083c8:	42a0      	cmp	r0, r4
 80083ca:	d10b      	bne.n	80083e4 <_free_r+0x6c>
 80083cc:	6820      	ldr	r0, [r4, #0]
 80083ce:	4401      	add	r1, r0
 80083d0:	1850      	adds	r0, r2, r1
 80083d2:	4283      	cmp	r3, r0
 80083d4:	6011      	str	r1, [r2, #0]
 80083d6:	d1e0      	bne.n	800839a <_free_r+0x22>
 80083d8:	6818      	ldr	r0, [r3, #0]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	4408      	add	r0, r1
 80083de:	6010      	str	r0, [r2, #0]
 80083e0:	6053      	str	r3, [r2, #4]
 80083e2:	e7da      	b.n	800839a <_free_r+0x22>
 80083e4:	d902      	bls.n	80083ec <_free_r+0x74>
 80083e6:	230c      	movs	r3, #12
 80083e8:	602b      	str	r3, [r5, #0]
 80083ea:	e7d6      	b.n	800839a <_free_r+0x22>
 80083ec:	6820      	ldr	r0, [r4, #0]
 80083ee:	1821      	adds	r1, r4, r0
 80083f0:	428b      	cmp	r3, r1
 80083f2:	bf01      	itttt	eq
 80083f4:	6819      	ldreq	r1, [r3, #0]
 80083f6:	685b      	ldreq	r3, [r3, #4]
 80083f8:	1809      	addeq	r1, r1, r0
 80083fa:	6021      	streq	r1, [r4, #0]
 80083fc:	6063      	str	r3, [r4, #4]
 80083fe:	6054      	str	r4, [r2, #4]
 8008400:	e7cb      	b.n	800839a <_free_r+0x22>
 8008402:	bd38      	pop	{r3, r4, r5, pc}
 8008404:	20001c3c 	.word	0x20001c3c

08008408 <malloc>:
 8008408:	4b02      	ldr	r3, [pc, #8]	@ (8008414 <malloc+0xc>)
 800840a:	4601      	mov	r1, r0
 800840c:	6818      	ldr	r0, [r3, #0]
 800840e:	f000 b825 	b.w	800845c <_malloc_r>
 8008412:	bf00      	nop
 8008414:	2000019c 	.word	0x2000019c

08008418 <sbrk_aligned>:
 8008418:	b570      	push	{r4, r5, r6, lr}
 800841a:	4e0f      	ldr	r6, [pc, #60]	@ (8008458 <sbrk_aligned+0x40>)
 800841c:	460c      	mov	r4, r1
 800841e:	6831      	ldr	r1, [r6, #0]
 8008420:	4605      	mov	r5, r0
 8008422:	b911      	cbnz	r1, 800842a <sbrk_aligned+0x12>
 8008424:	f000 fe40 	bl	80090a8 <_sbrk_r>
 8008428:	6030      	str	r0, [r6, #0]
 800842a:	4621      	mov	r1, r4
 800842c:	4628      	mov	r0, r5
 800842e:	f000 fe3b 	bl	80090a8 <_sbrk_r>
 8008432:	1c43      	adds	r3, r0, #1
 8008434:	d103      	bne.n	800843e <sbrk_aligned+0x26>
 8008436:	f04f 34ff 	mov.w	r4, #4294967295
 800843a:	4620      	mov	r0, r4
 800843c:	bd70      	pop	{r4, r5, r6, pc}
 800843e:	1cc4      	adds	r4, r0, #3
 8008440:	f024 0403 	bic.w	r4, r4, #3
 8008444:	42a0      	cmp	r0, r4
 8008446:	d0f8      	beq.n	800843a <sbrk_aligned+0x22>
 8008448:	1a21      	subs	r1, r4, r0
 800844a:	4628      	mov	r0, r5
 800844c:	f000 fe2c 	bl	80090a8 <_sbrk_r>
 8008450:	3001      	adds	r0, #1
 8008452:	d1f2      	bne.n	800843a <sbrk_aligned+0x22>
 8008454:	e7ef      	b.n	8008436 <sbrk_aligned+0x1e>
 8008456:	bf00      	nop
 8008458:	20001c38 	.word	0x20001c38

0800845c <_malloc_r>:
 800845c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008460:	1ccd      	adds	r5, r1, #3
 8008462:	f025 0503 	bic.w	r5, r5, #3
 8008466:	3508      	adds	r5, #8
 8008468:	2d0c      	cmp	r5, #12
 800846a:	bf38      	it	cc
 800846c:	250c      	movcc	r5, #12
 800846e:	2d00      	cmp	r5, #0
 8008470:	4606      	mov	r6, r0
 8008472:	db01      	blt.n	8008478 <_malloc_r+0x1c>
 8008474:	42a9      	cmp	r1, r5
 8008476:	d904      	bls.n	8008482 <_malloc_r+0x26>
 8008478:	230c      	movs	r3, #12
 800847a:	6033      	str	r3, [r6, #0]
 800847c:	2000      	movs	r0, #0
 800847e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008482:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008558 <_malloc_r+0xfc>
 8008486:	f000 f869 	bl	800855c <__malloc_lock>
 800848a:	f8d8 3000 	ldr.w	r3, [r8]
 800848e:	461c      	mov	r4, r3
 8008490:	bb44      	cbnz	r4, 80084e4 <_malloc_r+0x88>
 8008492:	4629      	mov	r1, r5
 8008494:	4630      	mov	r0, r6
 8008496:	f7ff ffbf 	bl	8008418 <sbrk_aligned>
 800849a:	1c43      	adds	r3, r0, #1
 800849c:	4604      	mov	r4, r0
 800849e:	d158      	bne.n	8008552 <_malloc_r+0xf6>
 80084a0:	f8d8 4000 	ldr.w	r4, [r8]
 80084a4:	4627      	mov	r7, r4
 80084a6:	2f00      	cmp	r7, #0
 80084a8:	d143      	bne.n	8008532 <_malloc_r+0xd6>
 80084aa:	2c00      	cmp	r4, #0
 80084ac:	d04b      	beq.n	8008546 <_malloc_r+0xea>
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	4639      	mov	r1, r7
 80084b2:	4630      	mov	r0, r6
 80084b4:	eb04 0903 	add.w	r9, r4, r3
 80084b8:	f000 fdf6 	bl	80090a8 <_sbrk_r>
 80084bc:	4581      	cmp	r9, r0
 80084be:	d142      	bne.n	8008546 <_malloc_r+0xea>
 80084c0:	6821      	ldr	r1, [r4, #0]
 80084c2:	4630      	mov	r0, r6
 80084c4:	1a6d      	subs	r5, r5, r1
 80084c6:	4629      	mov	r1, r5
 80084c8:	f7ff ffa6 	bl	8008418 <sbrk_aligned>
 80084cc:	3001      	adds	r0, #1
 80084ce:	d03a      	beq.n	8008546 <_malloc_r+0xea>
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	442b      	add	r3, r5
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	f8d8 3000 	ldr.w	r3, [r8]
 80084da:	685a      	ldr	r2, [r3, #4]
 80084dc:	bb62      	cbnz	r2, 8008538 <_malloc_r+0xdc>
 80084de:	f8c8 7000 	str.w	r7, [r8]
 80084e2:	e00f      	b.n	8008504 <_malloc_r+0xa8>
 80084e4:	6822      	ldr	r2, [r4, #0]
 80084e6:	1b52      	subs	r2, r2, r5
 80084e8:	d420      	bmi.n	800852c <_malloc_r+0xd0>
 80084ea:	2a0b      	cmp	r2, #11
 80084ec:	d917      	bls.n	800851e <_malloc_r+0xc2>
 80084ee:	1961      	adds	r1, r4, r5
 80084f0:	42a3      	cmp	r3, r4
 80084f2:	6025      	str	r5, [r4, #0]
 80084f4:	bf18      	it	ne
 80084f6:	6059      	strne	r1, [r3, #4]
 80084f8:	6863      	ldr	r3, [r4, #4]
 80084fa:	bf08      	it	eq
 80084fc:	f8c8 1000 	streq.w	r1, [r8]
 8008500:	5162      	str	r2, [r4, r5]
 8008502:	604b      	str	r3, [r1, #4]
 8008504:	4630      	mov	r0, r6
 8008506:	f000 f82f 	bl	8008568 <__malloc_unlock>
 800850a:	f104 000b 	add.w	r0, r4, #11
 800850e:	1d23      	adds	r3, r4, #4
 8008510:	f020 0007 	bic.w	r0, r0, #7
 8008514:	1ac2      	subs	r2, r0, r3
 8008516:	bf1c      	itt	ne
 8008518:	1a1b      	subne	r3, r3, r0
 800851a:	50a3      	strne	r3, [r4, r2]
 800851c:	e7af      	b.n	800847e <_malloc_r+0x22>
 800851e:	6862      	ldr	r2, [r4, #4]
 8008520:	42a3      	cmp	r3, r4
 8008522:	bf0c      	ite	eq
 8008524:	f8c8 2000 	streq.w	r2, [r8]
 8008528:	605a      	strne	r2, [r3, #4]
 800852a:	e7eb      	b.n	8008504 <_malloc_r+0xa8>
 800852c:	4623      	mov	r3, r4
 800852e:	6864      	ldr	r4, [r4, #4]
 8008530:	e7ae      	b.n	8008490 <_malloc_r+0x34>
 8008532:	463c      	mov	r4, r7
 8008534:	687f      	ldr	r7, [r7, #4]
 8008536:	e7b6      	b.n	80084a6 <_malloc_r+0x4a>
 8008538:	461a      	mov	r2, r3
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	42a3      	cmp	r3, r4
 800853e:	d1fb      	bne.n	8008538 <_malloc_r+0xdc>
 8008540:	2300      	movs	r3, #0
 8008542:	6053      	str	r3, [r2, #4]
 8008544:	e7de      	b.n	8008504 <_malloc_r+0xa8>
 8008546:	230c      	movs	r3, #12
 8008548:	4630      	mov	r0, r6
 800854a:	6033      	str	r3, [r6, #0]
 800854c:	f000 f80c 	bl	8008568 <__malloc_unlock>
 8008550:	e794      	b.n	800847c <_malloc_r+0x20>
 8008552:	6005      	str	r5, [r0, #0]
 8008554:	e7d6      	b.n	8008504 <_malloc_r+0xa8>
 8008556:	bf00      	nop
 8008558:	20001c3c 	.word	0x20001c3c

0800855c <__malloc_lock>:
 800855c:	4801      	ldr	r0, [pc, #4]	@ (8008564 <__malloc_lock+0x8>)
 800855e:	f7ff b8aa 	b.w	80076b6 <__retarget_lock_acquire_recursive>
 8008562:	bf00      	nop
 8008564:	20001c34 	.word	0x20001c34

08008568 <__malloc_unlock>:
 8008568:	4801      	ldr	r0, [pc, #4]	@ (8008570 <__malloc_unlock+0x8>)
 800856a:	f7ff b8a5 	b.w	80076b8 <__retarget_lock_release_recursive>
 800856e:	bf00      	nop
 8008570:	20001c34 	.word	0x20001c34

08008574 <_Balloc>:
 8008574:	b570      	push	{r4, r5, r6, lr}
 8008576:	69c6      	ldr	r6, [r0, #28]
 8008578:	4604      	mov	r4, r0
 800857a:	460d      	mov	r5, r1
 800857c:	b976      	cbnz	r6, 800859c <_Balloc+0x28>
 800857e:	2010      	movs	r0, #16
 8008580:	f7ff ff42 	bl	8008408 <malloc>
 8008584:	4602      	mov	r2, r0
 8008586:	61e0      	str	r0, [r4, #28]
 8008588:	b920      	cbnz	r0, 8008594 <_Balloc+0x20>
 800858a:	216b      	movs	r1, #107	@ 0x6b
 800858c:	4b17      	ldr	r3, [pc, #92]	@ (80085ec <_Balloc+0x78>)
 800858e:	4818      	ldr	r0, [pc, #96]	@ (80085f0 <_Balloc+0x7c>)
 8008590:	f000 fda8 	bl	80090e4 <__assert_func>
 8008594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008598:	6006      	str	r6, [r0, #0]
 800859a:	60c6      	str	r6, [r0, #12]
 800859c:	69e6      	ldr	r6, [r4, #28]
 800859e:	68f3      	ldr	r3, [r6, #12]
 80085a0:	b183      	cbz	r3, 80085c4 <_Balloc+0x50>
 80085a2:	69e3      	ldr	r3, [r4, #28]
 80085a4:	68db      	ldr	r3, [r3, #12]
 80085a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085aa:	b9b8      	cbnz	r0, 80085dc <_Balloc+0x68>
 80085ac:	2101      	movs	r1, #1
 80085ae:	fa01 f605 	lsl.w	r6, r1, r5
 80085b2:	1d72      	adds	r2, r6, #5
 80085b4:	4620      	mov	r0, r4
 80085b6:	0092      	lsls	r2, r2, #2
 80085b8:	f000 fdb2 	bl	8009120 <_calloc_r>
 80085bc:	b160      	cbz	r0, 80085d8 <_Balloc+0x64>
 80085be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085c2:	e00e      	b.n	80085e2 <_Balloc+0x6e>
 80085c4:	2221      	movs	r2, #33	@ 0x21
 80085c6:	2104      	movs	r1, #4
 80085c8:	4620      	mov	r0, r4
 80085ca:	f000 fda9 	bl	8009120 <_calloc_r>
 80085ce:	69e3      	ldr	r3, [r4, #28]
 80085d0:	60f0      	str	r0, [r6, #12]
 80085d2:	68db      	ldr	r3, [r3, #12]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1e4      	bne.n	80085a2 <_Balloc+0x2e>
 80085d8:	2000      	movs	r0, #0
 80085da:	bd70      	pop	{r4, r5, r6, pc}
 80085dc:	6802      	ldr	r2, [r0, #0]
 80085de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80085e2:	2300      	movs	r3, #0
 80085e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80085e8:	e7f7      	b.n	80085da <_Balloc+0x66>
 80085ea:	bf00      	nop
 80085ec:	080098e3 	.word	0x080098e3
 80085f0:	08009963 	.word	0x08009963

080085f4 <_Bfree>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	69c6      	ldr	r6, [r0, #28]
 80085f8:	4605      	mov	r5, r0
 80085fa:	460c      	mov	r4, r1
 80085fc:	b976      	cbnz	r6, 800861c <_Bfree+0x28>
 80085fe:	2010      	movs	r0, #16
 8008600:	f7ff ff02 	bl	8008408 <malloc>
 8008604:	4602      	mov	r2, r0
 8008606:	61e8      	str	r0, [r5, #28]
 8008608:	b920      	cbnz	r0, 8008614 <_Bfree+0x20>
 800860a:	218f      	movs	r1, #143	@ 0x8f
 800860c:	4b08      	ldr	r3, [pc, #32]	@ (8008630 <_Bfree+0x3c>)
 800860e:	4809      	ldr	r0, [pc, #36]	@ (8008634 <_Bfree+0x40>)
 8008610:	f000 fd68 	bl	80090e4 <__assert_func>
 8008614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008618:	6006      	str	r6, [r0, #0]
 800861a:	60c6      	str	r6, [r0, #12]
 800861c:	b13c      	cbz	r4, 800862e <_Bfree+0x3a>
 800861e:	69eb      	ldr	r3, [r5, #28]
 8008620:	6862      	ldr	r2, [r4, #4]
 8008622:	68db      	ldr	r3, [r3, #12]
 8008624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008628:	6021      	str	r1, [r4, #0]
 800862a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800862e:	bd70      	pop	{r4, r5, r6, pc}
 8008630:	080098e3 	.word	0x080098e3
 8008634:	08009963 	.word	0x08009963

08008638 <__multadd>:
 8008638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800863c:	4607      	mov	r7, r0
 800863e:	460c      	mov	r4, r1
 8008640:	461e      	mov	r6, r3
 8008642:	2000      	movs	r0, #0
 8008644:	690d      	ldr	r5, [r1, #16]
 8008646:	f101 0c14 	add.w	ip, r1, #20
 800864a:	f8dc 3000 	ldr.w	r3, [ip]
 800864e:	3001      	adds	r0, #1
 8008650:	b299      	uxth	r1, r3
 8008652:	fb02 6101 	mla	r1, r2, r1, r6
 8008656:	0c1e      	lsrs	r6, r3, #16
 8008658:	0c0b      	lsrs	r3, r1, #16
 800865a:	fb02 3306 	mla	r3, r2, r6, r3
 800865e:	b289      	uxth	r1, r1
 8008660:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008664:	4285      	cmp	r5, r0
 8008666:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800866a:	f84c 1b04 	str.w	r1, [ip], #4
 800866e:	dcec      	bgt.n	800864a <__multadd+0x12>
 8008670:	b30e      	cbz	r6, 80086b6 <__multadd+0x7e>
 8008672:	68a3      	ldr	r3, [r4, #8]
 8008674:	42ab      	cmp	r3, r5
 8008676:	dc19      	bgt.n	80086ac <__multadd+0x74>
 8008678:	6861      	ldr	r1, [r4, #4]
 800867a:	4638      	mov	r0, r7
 800867c:	3101      	adds	r1, #1
 800867e:	f7ff ff79 	bl	8008574 <_Balloc>
 8008682:	4680      	mov	r8, r0
 8008684:	b928      	cbnz	r0, 8008692 <__multadd+0x5a>
 8008686:	4602      	mov	r2, r0
 8008688:	21ba      	movs	r1, #186	@ 0xba
 800868a:	4b0c      	ldr	r3, [pc, #48]	@ (80086bc <__multadd+0x84>)
 800868c:	480c      	ldr	r0, [pc, #48]	@ (80086c0 <__multadd+0x88>)
 800868e:	f000 fd29 	bl	80090e4 <__assert_func>
 8008692:	6922      	ldr	r2, [r4, #16]
 8008694:	f104 010c 	add.w	r1, r4, #12
 8008698:	3202      	adds	r2, #2
 800869a:	0092      	lsls	r2, r2, #2
 800869c:	300c      	adds	r0, #12
 800869e:	f000 fd13 	bl	80090c8 <memcpy>
 80086a2:	4621      	mov	r1, r4
 80086a4:	4638      	mov	r0, r7
 80086a6:	f7ff ffa5 	bl	80085f4 <_Bfree>
 80086aa:	4644      	mov	r4, r8
 80086ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80086b0:	3501      	adds	r5, #1
 80086b2:	615e      	str	r6, [r3, #20]
 80086b4:	6125      	str	r5, [r4, #16]
 80086b6:	4620      	mov	r0, r4
 80086b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086bc:	08009952 	.word	0x08009952
 80086c0:	08009963 	.word	0x08009963

080086c4 <__hi0bits>:
 80086c4:	4603      	mov	r3, r0
 80086c6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80086ca:	bf3a      	itte	cc
 80086cc:	0403      	lslcc	r3, r0, #16
 80086ce:	2010      	movcc	r0, #16
 80086d0:	2000      	movcs	r0, #0
 80086d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086d6:	bf3c      	itt	cc
 80086d8:	021b      	lslcc	r3, r3, #8
 80086da:	3008      	addcc	r0, #8
 80086dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80086e0:	bf3c      	itt	cc
 80086e2:	011b      	lslcc	r3, r3, #4
 80086e4:	3004      	addcc	r0, #4
 80086e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086ea:	bf3c      	itt	cc
 80086ec:	009b      	lslcc	r3, r3, #2
 80086ee:	3002      	addcc	r0, #2
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	db05      	blt.n	8008700 <__hi0bits+0x3c>
 80086f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80086f8:	f100 0001 	add.w	r0, r0, #1
 80086fc:	bf08      	it	eq
 80086fe:	2020      	moveq	r0, #32
 8008700:	4770      	bx	lr

08008702 <__lo0bits>:
 8008702:	6803      	ldr	r3, [r0, #0]
 8008704:	4602      	mov	r2, r0
 8008706:	f013 0007 	ands.w	r0, r3, #7
 800870a:	d00b      	beq.n	8008724 <__lo0bits+0x22>
 800870c:	07d9      	lsls	r1, r3, #31
 800870e:	d421      	bmi.n	8008754 <__lo0bits+0x52>
 8008710:	0798      	lsls	r0, r3, #30
 8008712:	bf49      	itett	mi
 8008714:	085b      	lsrmi	r3, r3, #1
 8008716:	089b      	lsrpl	r3, r3, #2
 8008718:	2001      	movmi	r0, #1
 800871a:	6013      	strmi	r3, [r2, #0]
 800871c:	bf5c      	itt	pl
 800871e:	2002      	movpl	r0, #2
 8008720:	6013      	strpl	r3, [r2, #0]
 8008722:	4770      	bx	lr
 8008724:	b299      	uxth	r1, r3
 8008726:	b909      	cbnz	r1, 800872c <__lo0bits+0x2a>
 8008728:	2010      	movs	r0, #16
 800872a:	0c1b      	lsrs	r3, r3, #16
 800872c:	b2d9      	uxtb	r1, r3
 800872e:	b909      	cbnz	r1, 8008734 <__lo0bits+0x32>
 8008730:	3008      	adds	r0, #8
 8008732:	0a1b      	lsrs	r3, r3, #8
 8008734:	0719      	lsls	r1, r3, #28
 8008736:	bf04      	itt	eq
 8008738:	091b      	lsreq	r3, r3, #4
 800873a:	3004      	addeq	r0, #4
 800873c:	0799      	lsls	r1, r3, #30
 800873e:	bf04      	itt	eq
 8008740:	089b      	lsreq	r3, r3, #2
 8008742:	3002      	addeq	r0, #2
 8008744:	07d9      	lsls	r1, r3, #31
 8008746:	d403      	bmi.n	8008750 <__lo0bits+0x4e>
 8008748:	085b      	lsrs	r3, r3, #1
 800874a:	f100 0001 	add.w	r0, r0, #1
 800874e:	d003      	beq.n	8008758 <__lo0bits+0x56>
 8008750:	6013      	str	r3, [r2, #0]
 8008752:	4770      	bx	lr
 8008754:	2000      	movs	r0, #0
 8008756:	4770      	bx	lr
 8008758:	2020      	movs	r0, #32
 800875a:	4770      	bx	lr

0800875c <__i2b>:
 800875c:	b510      	push	{r4, lr}
 800875e:	460c      	mov	r4, r1
 8008760:	2101      	movs	r1, #1
 8008762:	f7ff ff07 	bl	8008574 <_Balloc>
 8008766:	4602      	mov	r2, r0
 8008768:	b928      	cbnz	r0, 8008776 <__i2b+0x1a>
 800876a:	f240 1145 	movw	r1, #325	@ 0x145
 800876e:	4b04      	ldr	r3, [pc, #16]	@ (8008780 <__i2b+0x24>)
 8008770:	4804      	ldr	r0, [pc, #16]	@ (8008784 <__i2b+0x28>)
 8008772:	f000 fcb7 	bl	80090e4 <__assert_func>
 8008776:	2301      	movs	r3, #1
 8008778:	6144      	str	r4, [r0, #20]
 800877a:	6103      	str	r3, [r0, #16]
 800877c:	bd10      	pop	{r4, pc}
 800877e:	bf00      	nop
 8008780:	08009952 	.word	0x08009952
 8008784:	08009963 	.word	0x08009963

08008788 <__multiply>:
 8008788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878c:	4614      	mov	r4, r2
 800878e:	690a      	ldr	r2, [r1, #16]
 8008790:	6923      	ldr	r3, [r4, #16]
 8008792:	460f      	mov	r7, r1
 8008794:	429a      	cmp	r2, r3
 8008796:	bfa2      	ittt	ge
 8008798:	4623      	movge	r3, r4
 800879a:	460c      	movge	r4, r1
 800879c:	461f      	movge	r7, r3
 800879e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80087a2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80087a6:	68a3      	ldr	r3, [r4, #8]
 80087a8:	6861      	ldr	r1, [r4, #4]
 80087aa:	eb0a 0609 	add.w	r6, sl, r9
 80087ae:	42b3      	cmp	r3, r6
 80087b0:	b085      	sub	sp, #20
 80087b2:	bfb8      	it	lt
 80087b4:	3101      	addlt	r1, #1
 80087b6:	f7ff fedd 	bl	8008574 <_Balloc>
 80087ba:	b930      	cbnz	r0, 80087ca <__multiply+0x42>
 80087bc:	4602      	mov	r2, r0
 80087be:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80087c2:	4b43      	ldr	r3, [pc, #268]	@ (80088d0 <__multiply+0x148>)
 80087c4:	4843      	ldr	r0, [pc, #268]	@ (80088d4 <__multiply+0x14c>)
 80087c6:	f000 fc8d 	bl	80090e4 <__assert_func>
 80087ca:	f100 0514 	add.w	r5, r0, #20
 80087ce:	462b      	mov	r3, r5
 80087d0:	2200      	movs	r2, #0
 80087d2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80087d6:	4543      	cmp	r3, r8
 80087d8:	d321      	bcc.n	800881e <__multiply+0x96>
 80087da:	f107 0114 	add.w	r1, r7, #20
 80087de:	f104 0214 	add.w	r2, r4, #20
 80087e2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80087e6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80087ea:	9302      	str	r3, [sp, #8]
 80087ec:	1b13      	subs	r3, r2, r4
 80087ee:	3b15      	subs	r3, #21
 80087f0:	f023 0303 	bic.w	r3, r3, #3
 80087f4:	3304      	adds	r3, #4
 80087f6:	f104 0715 	add.w	r7, r4, #21
 80087fa:	42ba      	cmp	r2, r7
 80087fc:	bf38      	it	cc
 80087fe:	2304      	movcc	r3, #4
 8008800:	9301      	str	r3, [sp, #4]
 8008802:	9b02      	ldr	r3, [sp, #8]
 8008804:	9103      	str	r1, [sp, #12]
 8008806:	428b      	cmp	r3, r1
 8008808:	d80c      	bhi.n	8008824 <__multiply+0x9c>
 800880a:	2e00      	cmp	r6, #0
 800880c:	dd03      	ble.n	8008816 <__multiply+0x8e>
 800880e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008812:	2b00      	cmp	r3, #0
 8008814:	d05a      	beq.n	80088cc <__multiply+0x144>
 8008816:	6106      	str	r6, [r0, #16]
 8008818:	b005      	add	sp, #20
 800881a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881e:	f843 2b04 	str.w	r2, [r3], #4
 8008822:	e7d8      	b.n	80087d6 <__multiply+0x4e>
 8008824:	f8b1 a000 	ldrh.w	sl, [r1]
 8008828:	f1ba 0f00 	cmp.w	sl, #0
 800882c:	d023      	beq.n	8008876 <__multiply+0xee>
 800882e:	46a9      	mov	r9, r5
 8008830:	f04f 0c00 	mov.w	ip, #0
 8008834:	f104 0e14 	add.w	lr, r4, #20
 8008838:	f85e 7b04 	ldr.w	r7, [lr], #4
 800883c:	f8d9 3000 	ldr.w	r3, [r9]
 8008840:	fa1f fb87 	uxth.w	fp, r7
 8008844:	b29b      	uxth	r3, r3
 8008846:	fb0a 330b 	mla	r3, sl, fp, r3
 800884a:	4463      	add	r3, ip
 800884c:	f8d9 c000 	ldr.w	ip, [r9]
 8008850:	0c3f      	lsrs	r7, r7, #16
 8008852:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008856:	fb0a c707 	mla	r7, sl, r7, ip
 800885a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800885e:	b29b      	uxth	r3, r3
 8008860:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008864:	4572      	cmp	r2, lr
 8008866:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800886a:	f849 3b04 	str.w	r3, [r9], #4
 800886e:	d8e3      	bhi.n	8008838 <__multiply+0xb0>
 8008870:	9b01      	ldr	r3, [sp, #4]
 8008872:	f845 c003 	str.w	ip, [r5, r3]
 8008876:	9b03      	ldr	r3, [sp, #12]
 8008878:	3104      	adds	r1, #4
 800887a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800887e:	f1b9 0f00 	cmp.w	r9, #0
 8008882:	d021      	beq.n	80088c8 <__multiply+0x140>
 8008884:	46ae      	mov	lr, r5
 8008886:	f04f 0a00 	mov.w	sl, #0
 800888a:	682b      	ldr	r3, [r5, #0]
 800888c:	f104 0c14 	add.w	ip, r4, #20
 8008890:	f8bc b000 	ldrh.w	fp, [ip]
 8008894:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008898:	b29b      	uxth	r3, r3
 800889a:	fb09 770b 	mla	r7, r9, fp, r7
 800889e:	4457      	add	r7, sl
 80088a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80088a4:	f84e 3b04 	str.w	r3, [lr], #4
 80088a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088b0:	f8be 3000 	ldrh.w	r3, [lr]
 80088b4:	4562      	cmp	r2, ip
 80088b6:	fb09 330a 	mla	r3, r9, sl, r3
 80088ba:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80088be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088c2:	d8e5      	bhi.n	8008890 <__multiply+0x108>
 80088c4:	9f01      	ldr	r7, [sp, #4]
 80088c6:	51eb      	str	r3, [r5, r7]
 80088c8:	3504      	adds	r5, #4
 80088ca:	e79a      	b.n	8008802 <__multiply+0x7a>
 80088cc:	3e01      	subs	r6, #1
 80088ce:	e79c      	b.n	800880a <__multiply+0x82>
 80088d0:	08009952 	.word	0x08009952
 80088d4:	08009963 	.word	0x08009963

080088d8 <__pow5mult>:
 80088d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088dc:	4615      	mov	r5, r2
 80088de:	f012 0203 	ands.w	r2, r2, #3
 80088e2:	4607      	mov	r7, r0
 80088e4:	460e      	mov	r6, r1
 80088e6:	d007      	beq.n	80088f8 <__pow5mult+0x20>
 80088e8:	4c25      	ldr	r4, [pc, #148]	@ (8008980 <__pow5mult+0xa8>)
 80088ea:	3a01      	subs	r2, #1
 80088ec:	2300      	movs	r3, #0
 80088ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088f2:	f7ff fea1 	bl	8008638 <__multadd>
 80088f6:	4606      	mov	r6, r0
 80088f8:	10ad      	asrs	r5, r5, #2
 80088fa:	d03d      	beq.n	8008978 <__pow5mult+0xa0>
 80088fc:	69fc      	ldr	r4, [r7, #28]
 80088fe:	b97c      	cbnz	r4, 8008920 <__pow5mult+0x48>
 8008900:	2010      	movs	r0, #16
 8008902:	f7ff fd81 	bl	8008408 <malloc>
 8008906:	4602      	mov	r2, r0
 8008908:	61f8      	str	r0, [r7, #28]
 800890a:	b928      	cbnz	r0, 8008918 <__pow5mult+0x40>
 800890c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008910:	4b1c      	ldr	r3, [pc, #112]	@ (8008984 <__pow5mult+0xac>)
 8008912:	481d      	ldr	r0, [pc, #116]	@ (8008988 <__pow5mult+0xb0>)
 8008914:	f000 fbe6 	bl	80090e4 <__assert_func>
 8008918:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800891c:	6004      	str	r4, [r0, #0]
 800891e:	60c4      	str	r4, [r0, #12]
 8008920:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008924:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008928:	b94c      	cbnz	r4, 800893e <__pow5mult+0x66>
 800892a:	f240 2171 	movw	r1, #625	@ 0x271
 800892e:	4638      	mov	r0, r7
 8008930:	f7ff ff14 	bl	800875c <__i2b>
 8008934:	2300      	movs	r3, #0
 8008936:	4604      	mov	r4, r0
 8008938:	f8c8 0008 	str.w	r0, [r8, #8]
 800893c:	6003      	str	r3, [r0, #0]
 800893e:	f04f 0900 	mov.w	r9, #0
 8008942:	07eb      	lsls	r3, r5, #31
 8008944:	d50a      	bpl.n	800895c <__pow5mult+0x84>
 8008946:	4631      	mov	r1, r6
 8008948:	4622      	mov	r2, r4
 800894a:	4638      	mov	r0, r7
 800894c:	f7ff ff1c 	bl	8008788 <__multiply>
 8008950:	4680      	mov	r8, r0
 8008952:	4631      	mov	r1, r6
 8008954:	4638      	mov	r0, r7
 8008956:	f7ff fe4d 	bl	80085f4 <_Bfree>
 800895a:	4646      	mov	r6, r8
 800895c:	106d      	asrs	r5, r5, #1
 800895e:	d00b      	beq.n	8008978 <__pow5mult+0xa0>
 8008960:	6820      	ldr	r0, [r4, #0]
 8008962:	b938      	cbnz	r0, 8008974 <__pow5mult+0x9c>
 8008964:	4622      	mov	r2, r4
 8008966:	4621      	mov	r1, r4
 8008968:	4638      	mov	r0, r7
 800896a:	f7ff ff0d 	bl	8008788 <__multiply>
 800896e:	6020      	str	r0, [r4, #0]
 8008970:	f8c0 9000 	str.w	r9, [r0]
 8008974:	4604      	mov	r4, r0
 8008976:	e7e4      	b.n	8008942 <__pow5mult+0x6a>
 8008978:	4630      	mov	r0, r6
 800897a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800897e:	bf00      	nop
 8008980:	080099bc 	.word	0x080099bc
 8008984:	080098e3 	.word	0x080098e3
 8008988:	08009963 	.word	0x08009963

0800898c <__lshift>:
 800898c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008990:	460c      	mov	r4, r1
 8008992:	4607      	mov	r7, r0
 8008994:	4691      	mov	r9, r2
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	6849      	ldr	r1, [r1, #4]
 800899a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800899e:	68a3      	ldr	r3, [r4, #8]
 80089a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80089a4:	f108 0601 	add.w	r6, r8, #1
 80089a8:	42b3      	cmp	r3, r6
 80089aa:	db0b      	blt.n	80089c4 <__lshift+0x38>
 80089ac:	4638      	mov	r0, r7
 80089ae:	f7ff fde1 	bl	8008574 <_Balloc>
 80089b2:	4605      	mov	r5, r0
 80089b4:	b948      	cbnz	r0, 80089ca <__lshift+0x3e>
 80089b6:	4602      	mov	r2, r0
 80089b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80089bc:	4b27      	ldr	r3, [pc, #156]	@ (8008a5c <__lshift+0xd0>)
 80089be:	4828      	ldr	r0, [pc, #160]	@ (8008a60 <__lshift+0xd4>)
 80089c0:	f000 fb90 	bl	80090e4 <__assert_func>
 80089c4:	3101      	adds	r1, #1
 80089c6:	005b      	lsls	r3, r3, #1
 80089c8:	e7ee      	b.n	80089a8 <__lshift+0x1c>
 80089ca:	2300      	movs	r3, #0
 80089cc:	f100 0114 	add.w	r1, r0, #20
 80089d0:	f100 0210 	add.w	r2, r0, #16
 80089d4:	4618      	mov	r0, r3
 80089d6:	4553      	cmp	r3, sl
 80089d8:	db33      	blt.n	8008a42 <__lshift+0xb6>
 80089da:	6920      	ldr	r0, [r4, #16]
 80089dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089e0:	f104 0314 	add.w	r3, r4, #20
 80089e4:	f019 091f 	ands.w	r9, r9, #31
 80089e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089f0:	d02b      	beq.n	8008a4a <__lshift+0xbe>
 80089f2:	468a      	mov	sl, r1
 80089f4:	2200      	movs	r2, #0
 80089f6:	f1c9 0e20 	rsb	lr, r9, #32
 80089fa:	6818      	ldr	r0, [r3, #0]
 80089fc:	fa00 f009 	lsl.w	r0, r0, r9
 8008a00:	4310      	orrs	r0, r2
 8008a02:	f84a 0b04 	str.w	r0, [sl], #4
 8008a06:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a0a:	459c      	cmp	ip, r3
 8008a0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a10:	d8f3      	bhi.n	80089fa <__lshift+0x6e>
 8008a12:	ebac 0304 	sub.w	r3, ip, r4
 8008a16:	3b15      	subs	r3, #21
 8008a18:	f023 0303 	bic.w	r3, r3, #3
 8008a1c:	3304      	adds	r3, #4
 8008a1e:	f104 0015 	add.w	r0, r4, #21
 8008a22:	4584      	cmp	ip, r0
 8008a24:	bf38      	it	cc
 8008a26:	2304      	movcc	r3, #4
 8008a28:	50ca      	str	r2, [r1, r3]
 8008a2a:	b10a      	cbz	r2, 8008a30 <__lshift+0xa4>
 8008a2c:	f108 0602 	add.w	r6, r8, #2
 8008a30:	3e01      	subs	r6, #1
 8008a32:	4638      	mov	r0, r7
 8008a34:	4621      	mov	r1, r4
 8008a36:	612e      	str	r6, [r5, #16]
 8008a38:	f7ff fddc 	bl	80085f4 <_Bfree>
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a42:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a46:	3301      	adds	r3, #1
 8008a48:	e7c5      	b.n	80089d6 <__lshift+0x4a>
 8008a4a:	3904      	subs	r1, #4
 8008a4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a50:	459c      	cmp	ip, r3
 8008a52:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a56:	d8f9      	bhi.n	8008a4c <__lshift+0xc0>
 8008a58:	e7ea      	b.n	8008a30 <__lshift+0xa4>
 8008a5a:	bf00      	nop
 8008a5c:	08009952 	.word	0x08009952
 8008a60:	08009963 	.word	0x08009963

08008a64 <__mcmp>:
 8008a64:	4603      	mov	r3, r0
 8008a66:	690a      	ldr	r2, [r1, #16]
 8008a68:	6900      	ldr	r0, [r0, #16]
 8008a6a:	b530      	push	{r4, r5, lr}
 8008a6c:	1a80      	subs	r0, r0, r2
 8008a6e:	d10e      	bne.n	8008a8e <__mcmp+0x2a>
 8008a70:	3314      	adds	r3, #20
 8008a72:	3114      	adds	r1, #20
 8008a74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008a78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008a7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008a80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008a84:	4295      	cmp	r5, r2
 8008a86:	d003      	beq.n	8008a90 <__mcmp+0x2c>
 8008a88:	d205      	bcs.n	8008a96 <__mcmp+0x32>
 8008a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a8e:	bd30      	pop	{r4, r5, pc}
 8008a90:	42a3      	cmp	r3, r4
 8008a92:	d3f3      	bcc.n	8008a7c <__mcmp+0x18>
 8008a94:	e7fb      	b.n	8008a8e <__mcmp+0x2a>
 8008a96:	2001      	movs	r0, #1
 8008a98:	e7f9      	b.n	8008a8e <__mcmp+0x2a>
	...

08008a9c <__mdiff>:
 8008a9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa0:	4689      	mov	r9, r1
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	4648      	mov	r0, r9
 8008aa8:	4614      	mov	r4, r2
 8008aaa:	f7ff ffdb 	bl	8008a64 <__mcmp>
 8008aae:	1e05      	subs	r5, r0, #0
 8008ab0:	d112      	bne.n	8008ad8 <__mdiff+0x3c>
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	f7ff fd5d 	bl	8008574 <_Balloc>
 8008aba:	4602      	mov	r2, r0
 8008abc:	b928      	cbnz	r0, 8008aca <__mdiff+0x2e>
 8008abe:	f240 2137 	movw	r1, #567	@ 0x237
 8008ac2:	4b3e      	ldr	r3, [pc, #248]	@ (8008bbc <__mdiff+0x120>)
 8008ac4:	483e      	ldr	r0, [pc, #248]	@ (8008bc0 <__mdiff+0x124>)
 8008ac6:	f000 fb0d 	bl	80090e4 <__assert_func>
 8008aca:	2301      	movs	r3, #1
 8008acc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ad0:	4610      	mov	r0, r2
 8008ad2:	b003      	add	sp, #12
 8008ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad8:	bfbc      	itt	lt
 8008ada:	464b      	movlt	r3, r9
 8008adc:	46a1      	movlt	r9, r4
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008ae4:	bfba      	itte	lt
 8008ae6:	461c      	movlt	r4, r3
 8008ae8:	2501      	movlt	r5, #1
 8008aea:	2500      	movge	r5, #0
 8008aec:	f7ff fd42 	bl	8008574 <_Balloc>
 8008af0:	4602      	mov	r2, r0
 8008af2:	b918      	cbnz	r0, 8008afc <__mdiff+0x60>
 8008af4:	f240 2145 	movw	r1, #581	@ 0x245
 8008af8:	4b30      	ldr	r3, [pc, #192]	@ (8008bbc <__mdiff+0x120>)
 8008afa:	e7e3      	b.n	8008ac4 <__mdiff+0x28>
 8008afc:	f100 0b14 	add.w	fp, r0, #20
 8008b00:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008b04:	f109 0310 	add.w	r3, r9, #16
 8008b08:	60c5      	str	r5, [r0, #12]
 8008b0a:	f04f 0c00 	mov.w	ip, #0
 8008b0e:	f109 0514 	add.w	r5, r9, #20
 8008b12:	46d9      	mov	r9, fp
 8008b14:	6926      	ldr	r6, [r4, #16]
 8008b16:	f104 0e14 	add.w	lr, r4, #20
 8008b1a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008b1e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	9b01      	ldr	r3, [sp, #4]
 8008b26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008b2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008b2e:	b281      	uxth	r1, r0
 8008b30:	9301      	str	r3, [sp, #4]
 8008b32:	fa1f f38a 	uxth.w	r3, sl
 8008b36:	1a5b      	subs	r3, r3, r1
 8008b38:	0c00      	lsrs	r0, r0, #16
 8008b3a:	4463      	add	r3, ip
 8008b3c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008b40:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008b4a:	4576      	cmp	r6, lr
 8008b4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008b50:	f849 3b04 	str.w	r3, [r9], #4
 8008b54:	d8e6      	bhi.n	8008b24 <__mdiff+0x88>
 8008b56:	1b33      	subs	r3, r6, r4
 8008b58:	3b15      	subs	r3, #21
 8008b5a:	f023 0303 	bic.w	r3, r3, #3
 8008b5e:	3415      	adds	r4, #21
 8008b60:	3304      	adds	r3, #4
 8008b62:	42a6      	cmp	r6, r4
 8008b64:	bf38      	it	cc
 8008b66:	2304      	movcc	r3, #4
 8008b68:	441d      	add	r5, r3
 8008b6a:	445b      	add	r3, fp
 8008b6c:	461e      	mov	r6, r3
 8008b6e:	462c      	mov	r4, r5
 8008b70:	4544      	cmp	r4, r8
 8008b72:	d30e      	bcc.n	8008b92 <__mdiff+0xf6>
 8008b74:	f108 0103 	add.w	r1, r8, #3
 8008b78:	1b49      	subs	r1, r1, r5
 8008b7a:	f021 0103 	bic.w	r1, r1, #3
 8008b7e:	3d03      	subs	r5, #3
 8008b80:	45a8      	cmp	r8, r5
 8008b82:	bf38      	it	cc
 8008b84:	2100      	movcc	r1, #0
 8008b86:	440b      	add	r3, r1
 8008b88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008b8c:	b199      	cbz	r1, 8008bb6 <__mdiff+0x11a>
 8008b8e:	6117      	str	r7, [r2, #16]
 8008b90:	e79e      	b.n	8008ad0 <__mdiff+0x34>
 8008b92:	46e6      	mov	lr, ip
 8008b94:	f854 1b04 	ldr.w	r1, [r4], #4
 8008b98:	fa1f fc81 	uxth.w	ip, r1
 8008b9c:	44f4      	add	ip, lr
 8008b9e:	0c08      	lsrs	r0, r1, #16
 8008ba0:	4471      	add	r1, lr
 8008ba2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ba6:	b289      	uxth	r1, r1
 8008ba8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008bac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008bb0:	f846 1b04 	str.w	r1, [r6], #4
 8008bb4:	e7dc      	b.n	8008b70 <__mdiff+0xd4>
 8008bb6:	3f01      	subs	r7, #1
 8008bb8:	e7e6      	b.n	8008b88 <__mdiff+0xec>
 8008bba:	bf00      	nop
 8008bbc:	08009952 	.word	0x08009952
 8008bc0:	08009963 	.word	0x08009963

08008bc4 <__d2b>:
 8008bc4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008bc8:	2101      	movs	r1, #1
 8008bca:	4690      	mov	r8, r2
 8008bcc:	4699      	mov	r9, r3
 8008bce:	9e08      	ldr	r6, [sp, #32]
 8008bd0:	f7ff fcd0 	bl	8008574 <_Balloc>
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	b930      	cbnz	r0, 8008be6 <__d2b+0x22>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	f240 310f 	movw	r1, #783	@ 0x30f
 8008bde:	4b23      	ldr	r3, [pc, #140]	@ (8008c6c <__d2b+0xa8>)
 8008be0:	4823      	ldr	r0, [pc, #140]	@ (8008c70 <__d2b+0xac>)
 8008be2:	f000 fa7f 	bl	80090e4 <__assert_func>
 8008be6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008bea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008bee:	b10d      	cbz	r5, 8008bf4 <__d2b+0x30>
 8008bf0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008bf4:	9301      	str	r3, [sp, #4]
 8008bf6:	f1b8 0300 	subs.w	r3, r8, #0
 8008bfa:	d024      	beq.n	8008c46 <__d2b+0x82>
 8008bfc:	4668      	mov	r0, sp
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	f7ff fd7f 	bl	8008702 <__lo0bits>
 8008c04:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008c08:	b1d8      	cbz	r0, 8008c42 <__d2b+0x7e>
 8008c0a:	f1c0 0320 	rsb	r3, r0, #32
 8008c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c12:	430b      	orrs	r3, r1
 8008c14:	40c2      	lsrs	r2, r0
 8008c16:	6163      	str	r3, [r4, #20]
 8008c18:	9201      	str	r2, [sp, #4]
 8008c1a:	9b01      	ldr	r3, [sp, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	bf0c      	ite	eq
 8008c20:	2201      	moveq	r2, #1
 8008c22:	2202      	movne	r2, #2
 8008c24:	61a3      	str	r3, [r4, #24]
 8008c26:	6122      	str	r2, [r4, #16]
 8008c28:	b1ad      	cbz	r5, 8008c56 <__d2b+0x92>
 8008c2a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008c2e:	4405      	add	r5, r0
 8008c30:	6035      	str	r5, [r6, #0]
 8008c32:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008c36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c38:	6018      	str	r0, [r3, #0]
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	b002      	add	sp, #8
 8008c3e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008c42:	6161      	str	r1, [r4, #20]
 8008c44:	e7e9      	b.n	8008c1a <__d2b+0x56>
 8008c46:	a801      	add	r0, sp, #4
 8008c48:	f7ff fd5b 	bl	8008702 <__lo0bits>
 8008c4c:	9b01      	ldr	r3, [sp, #4]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	6163      	str	r3, [r4, #20]
 8008c52:	3020      	adds	r0, #32
 8008c54:	e7e7      	b.n	8008c26 <__d2b+0x62>
 8008c56:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008c5a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008c5e:	6030      	str	r0, [r6, #0]
 8008c60:	6918      	ldr	r0, [r3, #16]
 8008c62:	f7ff fd2f 	bl	80086c4 <__hi0bits>
 8008c66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008c6a:	e7e4      	b.n	8008c36 <__d2b+0x72>
 8008c6c:	08009952 	.word	0x08009952
 8008c70:	08009963 	.word	0x08009963

08008c74 <__ssputs_r>:
 8008c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c78:	461f      	mov	r7, r3
 8008c7a:	688e      	ldr	r6, [r1, #8]
 8008c7c:	4682      	mov	sl, r0
 8008c7e:	42be      	cmp	r6, r7
 8008c80:	460c      	mov	r4, r1
 8008c82:	4690      	mov	r8, r2
 8008c84:	680b      	ldr	r3, [r1, #0]
 8008c86:	d82d      	bhi.n	8008ce4 <__ssputs_r+0x70>
 8008c88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c90:	d026      	beq.n	8008ce0 <__ssputs_r+0x6c>
 8008c92:	6965      	ldr	r5, [r4, #20]
 8008c94:	6909      	ldr	r1, [r1, #16]
 8008c96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c9a:	eba3 0901 	sub.w	r9, r3, r1
 8008c9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ca2:	1c7b      	adds	r3, r7, #1
 8008ca4:	444b      	add	r3, r9
 8008ca6:	106d      	asrs	r5, r5, #1
 8008ca8:	429d      	cmp	r5, r3
 8008caa:	bf38      	it	cc
 8008cac:	461d      	movcc	r5, r3
 8008cae:	0553      	lsls	r3, r2, #21
 8008cb0:	d527      	bpl.n	8008d02 <__ssputs_r+0x8e>
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	f7ff fbd2 	bl	800845c <_malloc_r>
 8008cb8:	4606      	mov	r6, r0
 8008cba:	b360      	cbz	r0, 8008d16 <__ssputs_r+0xa2>
 8008cbc:	464a      	mov	r2, r9
 8008cbe:	6921      	ldr	r1, [r4, #16]
 8008cc0:	f000 fa02 	bl	80090c8 <memcpy>
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cce:	81a3      	strh	r3, [r4, #12]
 8008cd0:	6126      	str	r6, [r4, #16]
 8008cd2:	444e      	add	r6, r9
 8008cd4:	6026      	str	r6, [r4, #0]
 8008cd6:	463e      	mov	r6, r7
 8008cd8:	6165      	str	r5, [r4, #20]
 8008cda:	eba5 0509 	sub.w	r5, r5, r9
 8008cde:	60a5      	str	r5, [r4, #8]
 8008ce0:	42be      	cmp	r6, r7
 8008ce2:	d900      	bls.n	8008ce6 <__ssputs_r+0x72>
 8008ce4:	463e      	mov	r6, r7
 8008ce6:	4632      	mov	r2, r6
 8008ce8:	4641      	mov	r1, r8
 8008cea:	6820      	ldr	r0, [r4, #0]
 8008cec:	f000 f9c2 	bl	8009074 <memmove>
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	68a3      	ldr	r3, [r4, #8]
 8008cf4:	1b9b      	subs	r3, r3, r6
 8008cf6:	60a3      	str	r3, [r4, #8]
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	4433      	add	r3, r6
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d02:	462a      	mov	r2, r5
 8008d04:	f000 fa32 	bl	800916c <_realloc_r>
 8008d08:	4606      	mov	r6, r0
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	d1e0      	bne.n	8008cd0 <__ssputs_r+0x5c>
 8008d0e:	4650      	mov	r0, sl
 8008d10:	6921      	ldr	r1, [r4, #16]
 8008d12:	f7ff fb31 	bl	8008378 <_free_r>
 8008d16:	230c      	movs	r3, #12
 8008d18:	f8ca 3000 	str.w	r3, [sl]
 8008d1c:	89a3      	ldrh	r3, [r4, #12]
 8008d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d26:	81a3      	strh	r3, [r4, #12]
 8008d28:	e7e9      	b.n	8008cfe <__ssputs_r+0x8a>
	...

08008d2c <_svfiprintf_r>:
 8008d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d30:	4698      	mov	r8, r3
 8008d32:	898b      	ldrh	r3, [r1, #12]
 8008d34:	4607      	mov	r7, r0
 8008d36:	061b      	lsls	r3, r3, #24
 8008d38:	460d      	mov	r5, r1
 8008d3a:	4614      	mov	r4, r2
 8008d3c:	b09d      	sub	sp, #116	@ 0x74
 8008d3e:	d510      	bpl.n	8008d62 <_svfiprintf_r+0x36>
 8008d40:	690b      	ldr	r3, [r1, #16]
 8008d42:	b973      	cbnz	r3, 8008d62 <_svfiprintf_r+0x36>
 8008d44:	2140      	movs	r1, #64	@ 0x40
 8008d46:	f7ff fb89 	bl	800845c <_malloc_r>
 8008d4a:	6028      	str	r0, [r5, #0]
 8008d4c:	6128      	str	r0, [r5, #16]
 8008d4e:	b930      	cbnz	r0, 8008d5e <_svfiprintf_r+0x32>
 8008d50:	230c      	movs	r3, #12
 8008d52:	603b      	str	r3, [r7, #0]
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
 8008d58:	b01d      	add	sp, #116	@ 0x74
 8008d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5e:	2340      	movs	r3, #64	@ 0x40
 8008d60:	616b      	str	r3, [r5, #20]
 8008d62:	2300      	movs	r3, #0
 8008d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d66:	2320      	movs	r3, #32
 8008d68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d6c:	2330      	movs	r3, #48	@ 0x30
 8008d6e:	f04f 0901 	mov.w	r9, #1
 8008d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d76:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008f10 <_svfiprintf_r+0x1e4>
 8008d7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d7e:	4623      	mov	r3, r4
 8008d80:	469a      	mov	sl, r3
 8008d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d86:	b10a      	cbz	r2, 8008d8c <_svfiprintf_r+0x60>
 8008d88:	2a25      	cmp	r2, #37	@ 0x25
 8008d8a:	d1f9      	bne.n	8008d80 <_svfiprintf_r+0x54>
 8008d8c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d90:	d00b      	beq.n	8008daa <_svfiprintf_r+0x7e>
 8008d92:	465b      	mov	r3, fp
 8008d94:	4622      	mov	r2, r4
 8008d96:	4629      	mov	r1, r5
 8008d98:	4638      	mov	r0, r7
 8008d9a:	f7ff ff6b 	bl	8008c74 <__ssputs_r>
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f000 80a7 	beq.w	8008ef2 <_svfiprintf_r+0x1c6>
 8008da4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008da6:	445a      	add	r2, fp
 8008da8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008daa:	f89a 3000 	ldrb.w	r3, [sl]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 809f 	beq.w	8008ef2 <_svfiprintf_r+0x1c6>
 8008db4:	2300      	movs	r3, #0
 8008db6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dbe:	f10a 0a01 	add.w	sl, sl, #1
 8008dc2:	9304      	str	r3, [sp, #16]
 8008dc4:	9307      	str	r3, [sp, #28]
 8008dc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008dca:	931a      	str	r3, [sp, #104]	@ 0x68
 8008dcc:	4654      	mov	r4, sl
 8008dce:	2205      	movs	r2, #5
 8008dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd4:	484e      	ldr	r0, [pc, #312]	@ (8008f10 <_svfiprintf_r+0x1e4>)
 8008dd6:	f7fe fc70 	bl	80076ba <memchr>
 8008dda:	9a04      	ldr	r2, [sp, #16]
 8008ddc:	b9d8      	cbnz	r0, 8008e16 <_svfiprintf_r+0xea>
 8008dde:	06d0      	lsls	r0, r2, #27
 8008de0:	bf44      	itt	mi
 8008de2:	2320      	movmi	r3, #32
 8008de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008de8:	0711      	lsls	r1, r2, #28
 8008dea:	bf44      	itt	mi
 8008dec:	232b      	movmi	r3, #43	@ 0x2b
 8008dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008df2:	f89a 3000 	ldrb.w	r3, [sl]
 8008df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008df8:	d015      	beq.n	8008e26 <_svfiprintf_r+0xfa>
 8008dfa:	4654      	mov	r4, sl
 8008dfc:	2000      	movs	r0, #0
 8008dfe:	f04f 0c0a 	mov.w	ip, #10
 8008e02:	9a07      	ldr	r2, [sp, #28]
 8008e04:	4621      	mov	r1, r4
 8008e06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e0a:	3b30      	subs	r3, #48	@ 0x30
 8008e0c:	2b09      	cmp	r3, #9
 8008e0e:	d94b      	bls.n	8008ea8 <_svfiprintf_r+0x17c>
 8008e10:	b1b0      	cbz	r0, 8008e40 <_svfiprintf_r+0x114>
 8008e12:	9207      	str	r2, [sp, #28]
 8008e14:	e014      	b.n	8008e40 <_svfiprintf_r+0x114>
 8008e16:	eba0 0308 	sub.w	r3, r0, r8
 8008e1a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	46a2      	mov	sl, r4
 8008e22:	9304      	str	r3, [sp, #16]
 8008e24:	e7d2      	b.n	8008dcc <_svfiprintf_r+0xa0>
 8008e26:	9b03      	ldr	r3, [sp, #12]
 8008e28:	1d19      	adds	r1, r3, #4
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	9103      	str	r1, [sp, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	bfbb      	ittet	lt
 8008e32:	425b      	neglt	r3, r3
 8008e34:	f042 0202 	orrlt.w	r2, r2, #2
 8008e38:	9307      	strge	r3, [sp, #28]
 8008e3a:	9307      	strlt	r3, [sp, #28]
 8008e3c:	bfb8      	it	lt
 8008e3e:	9204      	strlt	r2, [sp, #16]
 8008e40:	7823      	ldrb	r3, [r4, #0]
 8008e42:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e44:	d10a      	bne.n	8008e5c <_svfiprintf_r+0x130>
 8008e46:	7863      	ldrb	r3, [r4, #1]
 8008e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e4a:	d132      	bne.n	8008eb2 <_svfiprintf_r+0x186>
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	3402      	adds	r4, #2
 8008e50:	1d1a      	adds	r2, r3, #4
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	9203      	str	r2, [sp, #12]
 8008e56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e5a:	9305      	str	r3, [sp, #20]
 8008e5c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008f14 <_svfiprintf_r+0x1e8>
 8008e60:	2203      	movs	r2, #3
 8008e62:	4650      	mov	r0, sl
 8008e64:	7821      	ldrb	r1, [r4, #0]
 8008e66:	f7fe fc28 	bl	80076ba <memchr>
 8008e6a:	b138      	cbz	r0, 8008e7c <_svfiprintf_r+0x150>
 8008e6c:	2240      	movs	r2, #64	@ 0x40
 8008e6e:	9b04      	ldr	r3, [sp, #16]
 8008e70:	eba0 000a 	sub.w	r0, r0, sl
 8008e74:	4082      	lsls	r2, r0
 8008e76:	4313      	orrs	r3, r2
 8008e78:	3401      	adds	r4, #1
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e80:	2206      	movs	r2, #6
 8008e82:	4825      	ldr	r0, [pc, #148]	@ (8008f18 <_svfiprintf_r+0x1ec>)
 8008e84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e88:	f7fe fc17 	bl	80076ba <memchr>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	d036      	beq.n	8008efe <_svfiprintf_r+0x1d2>
 8008e90:	4b22      	ldr	r3, [pc, #136]	@ (8008f1c <_svfiprintf_r+0x1f0>)
 8008e92:	bb1b      	cbnz	r3, 8008edc <_svfiprintf_r+0x1b0>
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	3307      	adds	r3, #7
 8008e98:	f023 0307 	bic.w	r3, r3, #7
 8008e9c:	3308      	adds	r3, #8
 8008e9e:	9303      	str	r3, [sp, #12]
 8008ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea2:	4433      	add	r3, r6
 8008ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea6:	e76a      	b.n	8008d7e <_svfiprintf_r+0x52>
 8008ea8:	460c      	mov	r4, r1
 8008eaa:	2001      	movs	r0, #1
 8008eac:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eb0:	e7a8      	b.n	8008e04 <_svfiprintf_r+0xd8>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f04f 0c0a 	mov.w	ip, #10
 8008eb8:	4619      	mov	r1, r3
 8008eba:	3401      	adds	r4, #1
 8008ebc:	9305      	str	r3, [sp, #20]
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ec4:	3a30      	subs	r2, #48	@ 0x30
 8008ec6:	2a09      	cmp	r2, #9
 8008ec8:	d903      	bls.n	8008ed2 <_svfiprintf_r+0x1a6>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d0c6      	beq.n	8008e5c <_svfiprintf_r+0x130>
 8008ece:	9105      	str	r1, [sp, #20]
 8008ed0:	e7c4      	b.n	8008e5c <_svfiprintf_r+0x130>
 8008ed2:	4604      	mov	r4, r0
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eda:	e7f0      	b.n	8008ebe <_svfiprintf_r+0x192>
 8008edc:	ab03      	add	r3, sp, #12
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	462a      	mov	r2, r5
 8008ee2:	4638      	mov	r0, r7
 8008ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8008f20 <_svfiprintf_r+0x1f4>)
 8008ee6:	a904      	add	r1, sp, #16
 8008ee8:	f7fd fe84 	bl	8006bf4 <_printf_float>
 8008eec:	1c42      	adds	r2, r0, #1
 8008eee:	4606      	mov	r6, r0
 8008ef0:	d1d6      	bne.n	8008ea0 <_svfiprintf_r+0x174>
 8008ef2:	89ab      	ldrh	r3, [r5, #12]
 8008ef4:	065b      	lsls	r3, r3, #25
 8008ef6:	f53f af2d 	bmi.w	8008d54 <_svfiprintf_r+0x28>
 8008efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008efc:	e72c      	b.n	8008d58 <_svfiprintf_r+0x2c>
 8008efe:	ab03      	add	r3, sp, #12
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	462a      	mov	r2, r5
 8008f04:	4638      	mov	r0, r7
 8008f06:	4b06      	ldr	r3, [pc, #24]	@ (8008f20 <_svfiprintf_r+0x1f4>)
 8008f08:	a904      	add	r1, sp, #16
 8008f0a:	f7fe f911 	bl	8007130 <_printf_i>
 8008f0e:	e7ed      	b.n	8008eec <_svfiprintf_r+0x1c0>
 8008f10:	08009ab8 	.word	0x08009ab8
 8008f14:	08009abe 	.word	0x08009abe
 8008f18:	08009ac2 	.word	0x08009ac2
 8008f1c:	08006bf5 	.word	0x08006bf5
 8008f20:	08008c75 	.word	0x08008c75

08008f24 <__sflush_r>:
 8008f24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2a:	0716      	lsls	r6, r2, #28
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	460c      	mov	r4, r1
 8008f30:	d454      	bmi.n	8008fdc <__sflush_r+0xb8>
 8008f32:	684b      	ldr	r3, [r1, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	dc02      	bgt.n	8008f3e <__sflush_r+0x1a>
 8008f38:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	dd48      	ble.n	8008fd0 <__sflush_r+0xac>
 8008f3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f40:	2e00      	cmp	r6, #0
 8008f42:	d045      	beq.n	8008fd0 <__sflush_r+0xac>
 8008f44:	2300      	movs	r3, #0
 8008f46:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f4a:	682f      	ldr	r7, [r5, #0]
 8008f4c:	6a21      	ldr	r1, [r4, #32]
 8008f4e:	602b      	str	r3, [r5, #0]
 8008f50:	d030      	beq.n	8008fb4 <__sflush_r+0x90>
 8008f52:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f54:	89a3      	ldrh	r3, [r4, #12]
 8008f56:	0759      	lsls	r1, r3, #29
 8008f58:	d505      	bpl.n	8008f66 <__sflush_r+0x42>
 8008f5a:	6863      	ldr	r3, [r4, #4]
 8008f5c:	1ad2      	subs	r2, r2, r3
 8008f5e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f60:	b10b      	cbz	r3, 8008f66 <__sflush_r+0x42>
 8008f62:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f64:	1ad2      	subs	r2, r2, r3
 8008f66:	2300      	movs	r3, #0
 8008f68:	4628      	mov	r0, r5
 8008f6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f6c:	6a21      	ldr	r1, [r4, #32]
 8008f6e:	47b0      	blx	r6
 8008f70:	1c43      	adds	r3, r0, #1
 8008f72:	89a3      	ldrh	r3, [r4, #12]
 8008f74:	d106      	bne.n	8008f84 <__sflush_r+0x60>
 8008f76:	6829      	ldr	r1, [r5, #0]
 8008f78:	291d      	cmp	r1, #29
 8008f7a:	d82b      	bhi.n	8008fd4 <__sflush_r+0xb0>
 8008f7c:	4a28      	ldr	r2, [pc, #160]	@ (8009020 <__sflush_r+0xfc>)
 8008f7e:	410a      	asrs	r2, r1
 8008f80:	07d6      	lsls	r6, r2, #31
 8008f82:	d427      	bmi.n	8008fd4 <__sflush_r+0xb0>
 8008f84:	2200      	movs	r2, #0
 8008f86:	6062      	str	r2, [r4, #4]
 8008f88:	6922      	ldr	r2, [r4, #16]
 8008f8a:	04d9      	lsls	r1, r3, #19
 8008f8c:	6022      	str	r2, [r4, #0]
 8008f8e:	d504      	bpl.n	8008f9a <__sflush_r+0x76>
 8008f90:	1c42      	adds	r2, r0, #1
 8008f92:	d101      	bne.n	8008f98 <__sflush_r+0x74>
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	b903      	cbnz	r3, 8008f9a <__sflush_r+0x76>
 8008f98:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f9a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f9c:	602f      	str	r7, [r5, #0]
 8008f9e:	b1b9      	cbz	r1, 8008fd0 <__sflush_r+0xac>
 8008fa0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fa4:	4299      	cmp	r1, r3
 8008fa6:	d002      	beq.n	8008fae <__sflush_r+0x8a>
 8008fa8:	4628      	mov	r0, r5
 8008faa:	f7ff f9e5 	bl	8008378 <_free_r>
 8008fae:	2300      	movs	r3, #0
 8008fb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fb2:	e00d      	b.n	8008fd0 <__sflush_r+0xac>
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	47b0      	blx	r6
 8008fba:	4602      	mov	r2, r0
 8008fbc:	1c50      	adds	r0, r2, #1
 8008fbe:	d1c9      	bne.n	8008f54 <__sflush_r+0x30>
 8008fc0:	682b      	ldr	r3, [r5, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d0c6      	beq.n	8008f54 <__sflush_r+0x30>
 8008fc6:	2b1d      	cmp	r3, #29
 8008fc8:	d001      	beq.n	8008fce <__sflush_r+0xaa>
 8008fca:	2b16      	cmp	r3, #22
 8008fcc:	d11d      	bne.n	800900a <__sflush_r+0xe6>
 8008fce:	602f      	str	r7, [r5, #0]
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	e021      	b.n	8009018 <__sflush_r+0xf4>
 8008fd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fd8:	b21b      	sxth	r3, r3
 8008fda:	e01a      	b.n	8009012 <__sflush_r+0xee>
 8008fdc:	690f      	ldr	r7, [r1, #16]
 8008fde:	2f00      	cmp	r7, #0
 8008fe0:	d0f6      	beq.n	8008fd0 <__sflush_r+0xac>
 8008fe2:	0793      	lsls	r3, r2, #30
 8008fe4:	bf18      	it	ne
 8008fe6:	2300      	movne	r3, #0
 8008fe8:	680e      	ldr	r6, [r1, #0]
 8008fea:	bf08      	it	eq
 8008fec:	694b      	ldreq	r3, [r1, #20]
 8008fee:	1bf6      	subs	r6, r6, r7
 8008ff0:	600f      	str	r7, [r1, #0]
 8008ff2:	608b      	str	r3, [r1, #8]
 8008ff4:	2e00      	cmp	r6, #0
 8008ff6:	ddeb      	ble.n	8008fd0 <__sflush_r+0xac>
 8008ff8:	4633      	mov	r3, r6
 8008ffa:	463a      	mov	r2, r7
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	6a21      	ldr	r1, [r4, #32]
 8009000:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009004:	47e0      	blx	ip
 8009006:	2800      	cmp	r0, #0
 8009008:	dc07      	bgt.n	800901a <__sflush_r+0xf6>
 800900a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800900e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009012:	f04f 30ff 	mov.w	r0, #4294967295
 8009016:	81a3      	strh	r3, [r4, #12]
 8009018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800901a:	4407      	add	r7, r0
 800901c:	1a36      	subs	r6, r6, r0
 800901e:	e7e9      	b.n	8008ff4 <__sflush_r+0xd0>
 8009020:	dfbffffe 	.word	0xdfbffffe

08009024 <_fflush_r>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	690b      	ldr	r3, [r1, #16]
 8009028:	4605      	mov	r5, r0
 800902a:	460c      	mov	r4, r1
 800902c:	b913      	cbnz	r3, 8009034 <_fflush_r+0x10>
 800902e:	2500      	movs	r5, #0
 8009030:	4628      	mov	r0, r5
 8009032:	bd38      	pop	{r3, r4, r5, pc}
 8009034:	b118      	cbz	r0, 800903e <_fflush_r+0x1a>
 8009036:	6a03      	ldr	r3, [r0, #32]
 8009038:	b90b      	cbnz	r3, 800903e <_fflush_r+0x1a>
 800903a:	f7fe fa25 	bl	8007488 <__sinit>
 800903e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d0f3      	beq.n	800902e <_fflush_r+0xa>
 8009046:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009048:	07d0      	lsls	r0, r2, #31
 800904a:	d404      	bmi.n	8009056 <_fflush_r+0x32>
 800904c:	0599      	lsls	r1, r3, #22
 800904e:	d402      	bmi.n	8009056 <_fflush_r+0x32>
 8009050:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009052:	f7fe fb30 	bl	80076b6 <__retarget_lock_acquire_recursive>
 8009056:	4628      	mov	r0, r5
 8009058:	4621      	mov	r1, r4
 800905a:	f7ff ff63 	bl	8008f24 <__sflush_r>
 800905e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009060:	4605      	mov	r5, r0
 8009062:	07da      	lsls	r2, r3, #31
 8009064:	d4e4      	bmi.n	8009030 <_fflush_r+0xc>
 8009066:	89a3      	ldrh	r3, [r4, #12]
 8009068:	059b      	lsls	r3, r3, #22
 800906a:	d4e1      	bmi.n	8009030 <_fflush_r+0xc>
 800906c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800906e:	f7fe fb23 	bl	80076b8 <__retarget_lock_release_recursive>
 8009072:	e7dd      	b.n	8009030 <_fflush_r+0xc>

08009074 <memmove>:
 8009074:	4288      	cmp	r0, r1
 8009076:	b510      	push	{r4, lr}
 8009078:	eb01 0402 	add.w	r4, r1, r2
 800907c:	d902      	bls.n	8009084 <memmove+0x10>
 800907e:	4284      	cmp	r4, r0
 8009080:	4623      	mov	r3, r4
 8009082:	d807      	bhi.n	8009094 <memmove+0x20>
 8009084:	1e43      	subs	r3, r0, #1
 8009086:	42a1      	cmp	r1, r4
 8009088:	d008      	beq.n	800909c <memmove+0x28>
 800908a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800908e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009092:	e7f8      	b.n	8009086 <memmove+0x12>
 8009094:	4601      	mov	r1, r0
 8009096:	4402      	add	r2, r0
 8009098:	428a      	cmp	r2, r1
 800909a:	d100      	bne.n	800909e <memmove+0x2a>
 800909c:	bd10      	pop	{r4, pc}
 800909e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80090a6:	e7f7      	b.n	8009098 <memmove+0x24>

080090a8 <_sbrk_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	2300      	movs	r3, #0
 80090ac:	4d05      	ldr	r5, [pc, #20]	@ (80090c4 <_sbrk_r+0x1c>)
 80090ae:	4604      	mov	r4, r0
 80090b0:	4608      	mov	r0, r1
 80090b2:	602b      	str	r3, [r5, #0]
 80090b4:	f7f8 fa3c 	bl	8001530 <_sbrk>
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	d102      	bne.n	80090c2 <_sbrk_r+0x1a>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	b103      	cbz	r3, 80090c2 <_sbrk_r+0x1a>
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	20001c30 	.word	0x20001c30

080090c8 <memcpy>:
 80090c8:	440a      	add	r2, r1
 80090ca:	4291      	cmp	r1, r2
 80090cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80090d0:	d100      	bne.n	80090d4 <memcpy+0xc>
 80090d2:	4770      	bx	lr
 80090d4:	b510      	push	{r4, lr}
 80090d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090da:	4291      	cmp	r1, r2
 80090dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090e0:	d1f9      	bne.n	80090d6 <memcpy+0xe>
 80090e2:	bd10      	pop	{r4, pc}

080090e4 <__assert_func>:
 80090e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090e6:	4614      	mov	r4, r2
 80090e8:	461a      	mov	r2, r3
 80090ea:	4b09      	ldr	r3, [pc, #36]	@ (8009110 <__assert_func+0x2c>)
 80090ec:	4605      	mov	r5, r0
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68d8      	ldr	r0, [r3, #12]
 80090f2:	b954      	cbnz	r4, 800910a <__assert_func+0x26>
 80090f4:	4b07      	ldr	r3, [pc, #28]	@ (8009114 <__assert_func+0x30>)
 80090f6:	461c      	mov	r4, r3
 80090f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090fc:	9100      	str	r1, [sp, #0]
 80090fe:	462b      	mov	r3, r5
 8009100:	4905      	ldr	r1, [pc, #20]	@ (8009118 <__assert_func+0x34>)
 8009102:	f000 f86f 	bl	80091e4 <fiprintf>
 8009106:	f000 f87f 	bl	8009208 <abort>
 800910a:	4b04      	ldr	r3, [pc, #16]	@ (800911c <__assert_func+0x38>)
 800910c:	e7f4      	b.n	80090f8 <__assert_func+0x14>
 800910e:	bf00      	nop
 8009110:	2000019c 	.word	0x2000019c
 8009114:	0800978e 	.word	0x0800978e
 8009118:	08009ae0 	.word	0x08009ae0
 800911c:	08009ad3 	.word	0x08009ad3

08009120 <_calloc_r>:
 8009120:	b570      	push	{r4, r5, r6, lr}
 8009122:	fba1 5402 	umull	r5, r4, r1, r2
 8009126:	b93c      	cbnz	r4, 8009138 <_calloc_r+0x18>
 8009128:	4629      	mov	r1, r5
 800912a:	f7ff f997 	bl	800845c <_malloc_r>
 800912e:	4606      	mov	r6, r0
 8009130:	b928      	cbnz	r0, 800913e <_calloc_r+0x1e>
 8009132:	2600      	movs	r6, #0
 8009134:	4630      	mov	r0, r6
 8009136:	bd70      	pop	{r4, r5, r6, pc}
 8009138:	220c      	movs	r2, #12
 800913a:	6002      	str	r2, [r0, #0]
 800913c:	e7f9      	b.n	8009132 <_calloc_r+0x12>
 800913e:	462a      	mov	r2, r5
 8009140:	4621      	mov	r1, r4
 8009142:	f7fe fa3a 	bl	80075ba <memset>
 8009146:	e7f5      	b.n	8009134 <_calloc_r+0x14>

08009148 <__ascii_mbtowc>:
 8009148:	b082      	sub	sp, #8
 800914a:	b901      	cbnz	r1, 800914e <__ascii_mbtowc+0x6>
 800914c:	a901      	add	r1, sp, #4
 800914e:	b142      	cbz	r2, 8009162 <__ascii_mbtowc+0x1a>
 8009150:	b14b      	cbz	r3, 8009166 <__ascii_mbtowc+0x1e>
 8009152:	7813      	ldrb	r3, [r2, #0]
 8009154:	600b      	str	r3, [r1, #0]
 8009156:	7812      	ldrb	r2, [r2, #0]
 8009158:	1e10      	subs	r0, r2, #0
 800915a:	bf18      	it	ne
 800915c:	2001      	movne	r0, #1
 800915e:	b002      	add	sp, #8
 8009160:	4770      	bx	lr
 8009162:	4610      	mov	r0, r2
 8009164:	e7fb      	b.n	800915e <__ascii_mbtowc+0x16>
 8009166:	f06f 0001 	mvn.w	r0, #1
 800916a:	e7f8      	b.n	800915e <__ascii_mbtowc+0x16>

0800916c <_realloc_r>:
 800916c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009170:	4680      	mov	r8, r0
 8009172:	4615      	mov	r5, r2
 8009174:	460c      	mov	r4, r1
 8009176:	b921      	cbnz	r1, 8009182 <_realloc_r+0x16>
 8009178:	4611      	mov	r1, r2
 800917a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800917e:	f7ff b96d 	b.w	800845c <_malloc_r>
 8009182:	b92a      	cbnz	r2, 8009190 <_realloc_r+0x24>
 8009184:	f7ff f8f8 	bl	8008378 <_free_r>
 8009188:	2400      	movs	r4, #0
 800918a:	4620      	mov	r0, r4
 800918c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009190:	f000 f841 	bl	8009216 <_malloc_usable_size_r>
 8009194:	4285      	cmp	r5, r0
 8009196:	4606      	mov	r6, r0
 8009198:	d802      	bhi.n	80091a0 <_realloc_r+0x34>
 800919a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800919e:	d8f4      	bhi.n	800918a <_realloc_r+0x1e>
 80091a0:	4629      	mov	r1, r5
 80091a2:	4640      	mov	r0, r8
 80091a4:	f7ff f95a 	bl	800845c <_malloc_r>
 80091a8:	4607      	mov	r7, r0
 80091aa:	2800      	cmp	r0, #0
 80091ac:	d0ec      	beq.n	8009188 <_realloc_r+0x1c>
 80091ae:	42b5      	cmp	r5, r6
 80091b0:	462a      	mov	r2, r5
 80091b2:	4621      	mov	r1, r4
 80091b4:	bf28      	it	cs
 80091b6:	4632      	movcs	r2, r6
 80091b8:	f7ff ff86 	bl	80090c8 <memcpy>
 80091bc:	4621      	mov	r1, r4
 80091be:	4640      	mov	r0, r8
 80091c0:	f7ff f8da 	bl	8008378 <_free_r>
 80091c4:	463c      	mov	r4, r7
 80091c6:	e7e0      	b.n	800918a <_realloc_r+0x1e>

080091c8 <__ascii_wctomb>:
 80091c8:	4603      	mov	r3, r0
 80091ca:	4608      	mov	r0, r1
 80091cc:	b141      	cbz	r1, 80091e0 <__ascii_wctomb+0x18>
 80091ce:	2aff      	cmp	r2, #255	@ 0xff
 80091d0:	d904      	bls.n	80091dc <__ascii_wctomb+0x14>
 80091d2:	228a      	movs	r2, #138	@ 0x8a
 80091d4:	f04f 30ff 	mov.w	r0, #4294967295
 80091d8:	601a      	str	r2, [r3, #0]
 80091da:	4770      	bx	lr
 80091dc:	2001      	movs	r0, #1
 80091de:	700a      	strb	r2, [r1, #0]
 80091e0:	4770      	bx	lr
	...

080091e4 <fiprintf>:
 80091e4:	b40e      	push	{r1, r2, r3}
 80091e6:	b503      	push	{r0, r1, lr}
 80091e8:	4601      	mov	r1, r0
 80091ea:	ab03      	add	r3, sp, #12
 80091ec:	4805      	ldr	r0, [pc, #20]	@ (8009204 <fiprintf+0x20>)
 80091ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80091f2:	6800      	ldr	r0, [r0, #0]
 80091f4:	9301      	str	r3, [sp, #4]
 80091f6:	f000 f83d 	bl	8009274 <_vfiprintf_r>
 80091fa:	b002      	add	sp, #8
 80091fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009200:	b003      	add	sp, #12
 8009202:	4770      	bx	lr
 8009204:	2000019c 	.word	0x2000019c

08009208 <abort>:
 8009208:	2006      	movs	r0, #6
 800920a:	b508      	push	{r3, lr}
 800920c:	f000 fa06 	bl	800961c <raise>
 8009210:	2001      	movs	r0, #1
 8009212:	f7f8 f95f 	bl	80014d4 <_exit>

08009216 <_malloc_usable_size_r>:
 8009216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800921a:	1f18      	subs	r0, r3, #4
 800921c:	2b00      	cmp	r3, #0
 800921e:	bfbc      	itt	lt
 8009220:	580b      	ldrlt	r3, [r1, r0]
 8009222:	18c0      	addlt	r0, r0, r3
 8009224:	4770      	bx	lr

08009226 <__sfputc_r>:
 8009226:	6893      	ldr	r3, [r2, #8]
 8009228:	b410      	push	{r4}
 800922a:	3b01      	subs	r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	6093      	str	r3, [r2, #8]
 8009230:	da07      	bge.n	8009242 <__sfputc_r+0x1c>
 8009232:	6994      	ldr	r4, [r2, #24]
 8009234:	42a3      	cmp	r3, r4
 8009236:	db01      	blt.n	800923c <__sfputc_r+0x16>
 8009238:	290a      	cmp	r1, #10
 800923a:	d102      	bne.n	8009242 <__sfputc_r+0x1c>
 800923c:	bc10      	pop	{r4}
 800923e:	f000 b931 	b.w	80094a4 <__swbuf_r>
 8009242:	6813      	ldr	r3, [r2, #0]
 8009244:	1c58      	adds	r0, r3, #1
 8009246:	6010      	str	r0, [r2, #0]
 8009248:	7019      	strb	r1, [r3, #0]
 800924a:	4608      	mov	r0, r1
 800924c:	bc10      	pop	{r4}
 800924e:	4770      	bx	lr

08009250 <__sfputs_r>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	4606      	mov	r6, r0
 8009254:	460f      	mov	r7, r1
 8009256:	4614      	mov	r4, r2
 8009258:	18d5      	adds	r5, r2, r3
 800925a:	42ac      	cmp	r4, r5
 800925c:	d101      	bne.n	8009262 <__sfputs_r+0x12>
 800925e:	2000      	movs	r0, #0
 8009260:	e007      	b.n	8009272 <__sfputs_r+0x22>
 8009262:	463a      	mov	r2, r7
 8009264:	4630      	mov	r0, r6
 8009266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800926a:	f7ff ffdc 	bl	8009226 <__sfputc_r>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	d1f3      	bne.n	800925a <__sfputs_r+0xa>
 8009272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009274 <_vfiprintf_r>:
 8009274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	460d      	mov	r5, r1
 800927a:	4614      	mov	r4, r2
 800927c:	4698      	mov	r8, r3
 800927e:	4606      	mov	r6, r0
 8009280:	b09d      	sub	sp, #116	@ 0x74
 8009282:	b118      	cbz	r0, 800928c <_vfiprintf_r+0x18>
 8009284:	6a03      	ldr	r3, [r0, #32]
 8009286:	b90b      	cbnz	r3, 800928c <_vfiprintf_r+0x18>
 8009288:	f7fe f8fe 	bl	8007488 <__sinit>
 800928c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800928e:	07d9      	lsls	r1, r3, #31
 8009290:	d405      	bmi.n	800929e <_vfiprintf_r+0x2a>
 8009292:	89ab      	ldrh	r3, [r5, #12]
 8009294:	059a      	lsls	r2, r3, #22
 8009296:	d402      	bmi.n	800929e <_vfiprintf_r+0x2a>
 8009298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800929a:	f7fe fa0c 	bl	80076b6 <__retarget_lock_acquire_recursive>
 800929e:	89ab      	ldrh	r3, [r5, #12]
 80092a0:	071b      	lsls	r3, r3, #28
 80092a2:	d501      	bpl.n	80092a8 <_vfiprintf_r+0x34>
 80092a4:	692b      	ldr	r3, [r5, #16]
 80092a6:	b99b      	cbnz	r3, 80092d0 <_vfiprintf_r+0x5c>
 80092a8:	4629      	mov	r1, r5
 80092aa:	4630      	mov	r0, r6
 80092ac:	f000 f938 	bl	8009520 <__swsetup_r>
 80092b0:	b170      	cbz	r0, 80092d0 <_vfiprintf_r+0x5c>
 80092b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80092b4:	07dc      	lsls	r4, r3, #31
 80092b6:	d504      	bpl.n	80092c2 <_vfiprintf_r+0x4e>
 80092b8:	f04f 30ff 	mov.w	r0, #4294967295
 80092bc:	b01d      	add	sp, #116	@ 0x74
 80092be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092c2:	89ab      	ldrh	r3, [r5, #12]
 80092c4:	0598      	lsls	r0, r3, #22
 80092c6:	d4f7      	bmi.n	80092b8 <_vfiprintf_r+0x44>
 80092c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80092ca:	f7fe f9f5 	bl	80076b8 <__retarget_lock_release_recursive>
 80092ce:	e7f3      	b.n	80092b8 <_vfiprintf_r+0x44>
 80092d0:	2300      	movs	r3, #0
 80092d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80092d4:	2320      	movs	r3, #32
 80092d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80092da:	2330      	movs	r3, #48	@ 0x30
 80092dc:	f04f 0901 	mov.w	r9, #1
 80092e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80092e4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009490 <_vfiprintf_r+0x21c>
 80092e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80092ec:	4623      	mov	r3, r4
 80092ee:	469a      	mov	sl, r3
 80092f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80092f4:	b10a      	cbz	r2, 80092fa <_vfiprintf_r+0x86>
 80092f6:	2a25      	cmp	r2, #37	@ 0x25
 80092f8:	d1f9      	bne.n	80092ee <_vfiprintf_r+0x7a>
 80092fa:	ebba 0b04 	subs.w	fp, sl, r4
 80092fe:	d00b      	beq.n	8009318 <_vfiprintf_r+0xa4>
 8009300:	465b      	mov	r3, fp
 8009302:	4622      	mov	r2, r4
 8009304:	4629      	mov	r1, r5
 8009306:	4630      	mov	r0, r6
 8009308:	f7ff ffa2 	bl	8009250 <__sfputs_r>
 800930c:	3001      	adds	r0, #1
 800930e:	f000 80a7 	beq.w	8009460 <_vfiprintf_r+0x1ec>
 8009312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009314:	445a      	add	r2, fp
 8009316:	9209      	str	r2, [sp, #36]	@ 0x24
 8009318:	f89a 3000 	ldrb.w	r3, [sl]
 800931c:	2b00      	cmp	r3, #0
 800931e:	f000 809f 	beq.w	8009460 <_vfiprintf_r+0x1ec>
 8009322:	2300      	movs	r3, #0
 8009324:	f04f 32ff 	mov.w	r2, #4294967295
 8009328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800932c:	f10a 0a01 	add.w	sl, sl, #1
 8009330:	9304      	str	r3, [sp, #16]
 8009332:	9307      	str	r3, [sp, #28]
 8009334:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009338:	931a      	str	r3, [sp, #104]	@ 0x68
 800933a:	4654      	mov	r4, sl
 800933c:	2205      	movs	r2, #5
 800933e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009342:	4853      	ldr	r0, [pc, #332]	@ (8009490 <_vfiprintf_r+0x21c>)
 8009344:	f7fe f9b9 	bl	80076ba <memchr>
 8009348:	9a04      	ldr	r2, [sp, #16]
 800934a:	b9d8      	cbnz	r0, 8009384 <_vfiprintf_r+0x110>
 800934c:	06d1      	lsls	r1, r2, #27
 800934e:	bf44      	itt	mi
 8009350:	2320      	movmi	r3, #32
 8009352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009356:	0713      	lsls	r3, r2, #28
 8009358:	bf44      	itt	mi
 800935a:	232b      	movmi	r3, #43	@ 0x2b
 800935c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009360:	f89a 3000 	ldrb.w	r3, [sl]
 8009364:	2b2a      	cmp	r3, #42	@ 0x2a
 8009366:	d015      	beq.n	8009394 <_vfiprintf_r+0x120>
 8009368:	4654      	mov	r4, sl
 800936a:	2000      	movs	r0, #0
 800936c:	f04f 0c0a 	mov.w	ip, #10
 8009370:	9a07      	ldr	r2, [sp, #28]
 8009372:	4621      	mov	r1, r4
 8009374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009378:	3b30      	subs	r3, #48	@ 0x30
 800937a:	2b09      	cmp	r3, #9
 800937c:	d94b      	bls.n	8009416 <_vfiprintf_r+0x1a2>
 800937e:	b1b0      	cbz	r0, 80093ae <_vfiprintf_r+0x13a>
 8009380:	9207      	str	r2, [sp, #28]
 8009382:	e014      	b.n	80093ae <_vfiprintf_r+0x13a>
 8009384:	eba0 0308 	sub.w	r3, r0, r8
 8009388:	fa09 f303 	lsl.w	r3, r9, r3
 800938c:	4313      	orrs	r3, r2
 800938e:	46a2      	mov	sl, r4
 8009390:	9304      	str	r3, [sp, #16]
 8009392:	e7d2      	b.n	800933a <_vfiprintf_r+0xc6>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	1d19      	adds	r1, r3, #4
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	9103      	str	r1, [sp, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	bfbb      	ittet	lt
 80093a0:	425b      	neglt	r3, r3
 80093a2:	f042 0202 	orrlt.w	r2, r2, #2
 80093a6:	9307      	strge	r3, [sp, #28]
 80093a8:	9307      	strlt	r3, [sp, #28]
 80093aa:	bfb8      	it	lt
 80093ac:	9204      	strlt	r2, [sp, #16]
 80093ae:	7823      	ldrb	r3, [r4, #0]
 80093b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80093b2:	d10a      	bne.n	80093ca <_vfiprintf_r+0x156>
 80093b4:	7863      	ldrb	r3, [r4, #1]
 80093b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80093b8:	d132      	bne.n	8009420 <_vfiprintf_r+0x1ac>
 80093ba:	9b03      	ldr	r3, [sp, #12]
 80093bc:	3402      	adds	r4, #2
 80093be:	1d1a      	adds	r2, r3, #4
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	9203      	str	r2, [sp, #12]
 80093c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80093c8:	9305      	str	r3, [sp, #20]
 80093ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009494 <_vfiprintf_r+0x220>
 80093ce:	2203      	movs	r2, #3
 80093d0:	4650      	mov	r0, sl
 80093d2:	7821      	ldrb	r1, [r4, #0]
 80093d4:	f7fe f971 	bl	80076ba <memchr>
 80093d8:	b138      	cbz	r0, 80093ea <_vfiprintf_r+0x176>
 80093da:	2240      	movs	r2, #64	@ 0x40
 80093dc:	9b04      	ldr	r3, [sp, #16]
 80093de:	eba0 000a 	sub.w	r0, r0, sl
 80093e2:	4082      	lsls	r2, r0
 80093e4:	4313      	orrs	r3, r2
 80093e6:	3401      	adds	r4, #1
 80093e8:	9304      	str	r3, [sp, #16]
 80093ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ee:	2206      	movs	r2, #6
 80093f0:	4829      	ldr	r0, [pc, #164]	@ (8009498 <_vfiprintf_r+0x224>)
 80093f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80093f6:	f7fe f960 	bl	80076ba <memchr>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d03f      	beq.n	800947e <_vfiprintf_r+0x20a>
 80093fe:	4b27      	ldr	r3, [pc, #156]	@ (800949c <_vfiprintf_r+0x228>)
 8009400:	bb1b      	cbnz	r3, 800944a <_vfiprintf_r+0x1d6>
 8009402:	9b03      	ldr	r3, [sp, #12]
 8009404:	3307      	adds	r3, #7
 8009406:	f023 0307 	bic.w	r3, r3, #7
 800940a:	3308      	adds	r3, #8
 800940c:	9303      	str	r3, [sp, #12]
 800940e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009410:	443b      	add	r3, r7
 8009412:	9309      	str	r3, [sp, #36]	@ 0x24
 8009414:	e76a      	b.n	80092ec <_vfiprintf_r+0x78>
 8009416:	460c      	mov	r4, r1
 8009418:	2001      	movs	r0, #1
 800941a:	fb0c 3202 	mla	r2, ip, r2, r3
 800941e:	e7a8      	b.n	8009372 <_vfiprintf_r+0xfe>
 8009420:	2300      	movs	r3, #0
 8009422:	f04f 0c0a 	mov.w	ip, #10
 8009426:	4619      	mov	r1, r3
 8009428:	3401      	adds	r4, #1
 800942a:	9305      	str	r3, [sp, #20]
 800942c:	4620      	mov	r0, r4
 800942e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009432:	3a30      	subs	r2, #48	@ 0x30
 8009434:	2a09      	cmp	r2, #9
 8009436:	d903      	bls.n	8009440 <_vfiprintf_r+0x1cc>
 8009438:	2b00      	cmp	r3, #0
 800943a:	d0c6      	beq.n	80093ca <_vfiprintf_r+0x156>
 800943c:	9105      	str	r1, [sp, #20]
 800943e:	e7c4      	b.n	80093ca <_vfiprintf_r+0x156>
 8009440:	4604      	mov	r4, r0
 8009442:	2301      	movs	r3, #1
 8009444:	fb0c 2101 	mla	r1, ip, r1, r2
 8009448:	e7f0      	b.n	800942c <_vfiprintf_r+0x1b8>
 800944a:	ab03      	add	r3, sp, #12
 800944c:	9300      	str	r3, [sp, #0]
 800944e:	462a      	mov	r2, r5
 8009450:	4630      	mov	r0, r6
 8009452:	4b13      	ldr	r3, [pc, #76]	@ (80094a0 <_vfiprintf_r+0x22c>)
 8009454:	a904      	add	r1, sp, #16
 8009456:	f7fd fbcd 	bl	8006bf4 <_printf_float>
 800945a:	4607      	mov	r7, r0
 800945c:	1c78      	adds	r0, r7, #1
 800945e:	d1d6      	bne.n	800940e <_vfiprintf_r+0x19a>
 8009460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009462:	07d9      	lsls	r1, r3, #31
 8009464:	d405      	bmi.n	8009472 <_vfiprintf_r+0x1fe>
 8009466:	89ab      	ldrh	r3, [r5, #12]
 8009468:	059a      	lsls	r2, r3, #22
 800946a:	d402      	bmi.n	8009472 <_vfiprintf_r+0x1fe>
 800946c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800946e:	f7fe f923 	bl	80076b8 <__retarget_lock_release_recursive>
 8009472:	89ab      	ldrh	r3, [r5, #12]
 8009474:	065b      	lsls	r3, r3, #25
 8009476:	f53f af1f 	bmi.w	80092b8 <_vfiprintf_r+0x44>
 800947a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800947c:	e71e      	b.n	80092bc <_vfiprintf_r+0x48>
 800947e:	ab03      	add	r3, sp, #12
 8009480:	9300      	str	r3, [sp, #0]
 8009482:	462a      	mov	r2, r5
 8009484:	4630      	mov	r0, r6
 8009486:	4b06      	ldr	r3, [pc, #24]	@ (80094a0 <_vfiprintf_r+0x22c>)
 8009488:	a904      	add	r1, sp, #16
 800948a:	f7fd fe51 	bl	8007130 <_printf_i>
 800948e:	e7e4      	b.n	800945a <_vfiprintf_r+0x1e6>
 8009490:	08009ab8 	.word	0x08009ab8
 8009494:	08009abe 	.word	0x08009abe
 8009498:	08009ac2 	.word	0x08009ac2
 800949c:	08006bf5 	.word	0x08006bf5
 80094a0:	08009251 	.word	0x08009251

080094a4 <__swbuf_r>:
 80094a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a6:	460e      	mov	r6, r1
 80094a8:	4614      	mov	r4, r2
 80094aa:	4605      	mov	r5, r0
 80094ac:	b118      	cbz	r0, 80094b6 <__swbuf_r+0x12>
 80094ae:	6a03      	ldr	r3, [r0, #32]
 80094b0:	b90b      	cbnz	r3, 80094b6 <__swbuf_r+0x12>
 80094b2:	f7fd ffe9 	bl	8007488 <__sinit>
 80094b6:	69a3      	ldr	r3, [r4, #24]
 80094b8:	60a3      	str	r3, [r4, #8]
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	071a      	lsls	r2, r3, #28
 80094be:	d501      	bpl.n	80094c4 <__swbuf_r+0x20>
 80094c0:	6923      	ldr	r3, [r4, #16]
 80094c2:	b943      	cbnz	r3, 80094d6 <__swbuf_r+0x32>
 80094c4:	4621      	mov	r1, r4
 80094c6:	4628      	mov	r0, r5
 80094c8:	f000 f82a 	bl	8009520 <__swsetup_r>
 80094cc:	b118      	cbz	r0, 80094d6 <__swbuf_r+0x32>
 80094ce:	f04f 37ff 	mov.w	r7, #4294967295
 80094d2:	4638      	mov	r0, r7
 80094d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	6922      	ldr	r2, [r4, #16]
 80094da:	b2f6      	uxtb	r6, r6
 80094dc:	1a98      	subs	r0, r3, r2
 80094de:	6963      	ldr	r3, [r4, #20]
 80094e0:	4637      	mov	r7, r6
 80094e2:	4283      	cmp	r3, r0
 80094e4:	dc05      	bgt.n	80094f2 <__swbuf_r+0x4e>
 80094e6:	4621      	mov	r1, r4
 80094e8:	4628      	mov	r0, r5
 80094ea:	f7ff fd9b 	bl	8009024 <_fflush_r>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d1ed      	bne.n	80094ce <__swbuf_r+0x2a>
 80094f2:	68a3      	ldr	r3, [r4, #8]
 80094f4:	3b01      	subs	r3, #1
 80094f6:	60a3      	str	r3, [r4, #8]
 80094f8:	6823      	ldr	r3, [r4, #0]
 80094fa:	1c5a      	adds	r2, r3, #1
 80094fc:	6022      	str	r2, [r4, #0]
 80094fe:	701e      	strb	r6, [r3, #0]
 8009500:	6962      	ldr	r2, [r4, #20]
 8009502:	1c43      	adds	r3, r0, #1
 8009504:	429a      	cmp	r2, r3
 8009506:	d004      	beq.n	8009512 <__swbuf_r+0x6e>
 8009508:	89a3      	ldrh	r3, [r4, #12]
 800950a:	07db      	lsls	r3, r3, #31
 800950c:	d5e1      	bpl.n	80094d2 <__swbuf_r+0x2e>
 800950e:	2e0a      	cmp	r6, #10
 8009510:	d1df      	bne.n	80094d2 <__swbuf_r+0x2e>
 8009512:	4621      	mov	r1, r4
 8009514:	4628      	mov	r0, r5
 8009516:	f7ff fd85 	bl	8009024 <_fflush_r>
 800951a:	2800      	cmp	r0, #0
 800951c:	d0d9      	beq.n	80094d2 <__swbuf_r+0x2e>
 800951e:	e7d6      	b.n	80094ce <__swbuf_r+0x2a>

08009520 <__swsetup_r>:
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	4b29      	ldr	r3, [pc, #164]	@ (80095c8 <__swsetup_r+0xa8>)
 8009524:	4605      	mov	r5, r0
 8009526:	6818      	ldr	r0, [r3, #0]
 8009528:	460c      	mov	r4, r1
 800952a:	b118      	cbz	r0, 8009534 <__swsetup_r+0x14>
 800952c:	6a03      	ldr	r3, [r0, #32]
 800952e:	b90b      	cbnz	r3, 8009534 <__swsetup_r+0x14>
 8009530:	f7fd ffaa 	bl	8007488 <__sinit>
 8009534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009538:	0719      	lsls	r1, r3, #28
 800953a:	d422      	bmi.n	8009582 <__swsetup_r+0x62>
 800953c:	06da      	lsls	r2, r3, #27
 800953e:	d407      	bmi.n	8009550 <__swsetup_r+0x30>
 8009540:	2209      	movs	r2, #9
 8009542:	602a      	str	r2, [r5, #0]
 8009544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009548:	f04f 30ff 	mov.w	r0, #4294967295
 800954c:	81a3      	strh	r3, [r4, #12]
 800954e:	e033      	b.n	80095b8 <__swsetup_r+0x98>
 8009550:	0758      	lsls	r0, r3, #29
 8009552:	d512      	bpl.n	800957a <__swsetup_r+0x5a>
 8009554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009556:	b141      	cbz	r1, 800956a <__swsetup_r+0x4a>
 8009558:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800955c:	4299      	cmp	r1, r3
 800955e:	d002      	beq.n	8009566 <__swsetup_r+0x46>
 8009560:	4628      	mov	r0, r5
 8009562:	f7fe ff09 	bl	8008378 <_free_r>
 8009566:	2300      	movs	r3, #0
 8009568:	6363      	str	r3, [r4, #52]	@ 0x34
 800956a:	89a3      	ldrh	r3, [r4, #12]
 800956c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009570:	81a3      	strh	r3, [r4, #12]
 8009572:	2300      	movs	r3, #0
 8009574:	6063      	str	r3, [r4, #4]
 8009576:	6923      	ldr	r3, [r4, #16]
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	89a3      	ldrh	r3, [r4, #12]
 800957c:	f043 0308 	orr.w	r3, r3, #8
 8009580:	81a3      	strh	r3, [r4, #12]
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	b94b      	cbnz	r3, 800959a <__swsetup_r+0x7a>
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800958c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009590:	d003      	beq.n	800959a <__swsetup_r+0x7a>
 8009592:	4621      	mov	r1, r4
 8009594:	4628      	mov	r0, r5
 8009596:	f000 f882 	bl	800969e <__smakebuf_r>
 800959a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800959e:	f013 0201 	ands.w	r2, r3, #1
 80095a2:	d00a      	beq.n	80095ba <__swsetup_r+0x9a>
 80095a4:	2200      	movs	r2, #0
 80095a6:	60a2      	str	r2, [r4, #8]
 80095a8:	6962      	ldr	r2, [r4, #20]
 80095aa:	4252      	negs	r2, r2
 80095ac:	61a2      	str	r2, [r4, #24]
 80095ae:	6922      	ldr	r2, [r4, #16]
 80095b0:	b942      	cbnz	r2, 80095c4 <__swsetup_r+0xa4>
 80095b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095b6:	d1c5      	bne.n	8009544 <__swsetup_r+0x24>
 80095b8:	bd38      	pop	{r3, r4, r5, pc}
 80095ba:	0799      	lsls	r1, r3, #30
 80095bc:	bf58      	it	pl
 80095be:	6962      	ldrpl	r2, [r4, #20]
 80095c0:	60a2      	str	r2, [r4, #8]
 80095c2:	e7f4      	b.n	80095ae <__swsetup_r+0x8e>
 80095c4:	2000      	movs	r0, #0
 80095c6:	e7f7      	b.n	80095b8 <__swsetup_r+0x98>
 80095c8:	2000019c 	.word	0x2000019c

080095cc <_raise_r>:
 80095cc:	291f      	cmp	r1, #31
 80095ce:	b538      	push	{r3, r4, r5, lr}
 80095d0:	4605      	mov	r5, r0
 80095d2:	460c      	mov	r4, r1
 80095d4:	d904      	bls.n	80095e0 <_raise_r+0x14>
 80095d6:	2316      	movs	r3, #22
 80095d8:	6003      	str	r3, [r0, #0]
 80095da:	f04f 30ff 	mov.w	r0, #4294967295
 80095de:	bd38      	pop	{r3, r4, r5, pc}
 80095e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80095e2:	b112      	cbz	r2, 80095ea <_raise_r+0x1e>
 80095e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095e8:	b94b      	cbnz	r3, 80095fe <_raise_r+0x32>
 80095ea:	4628      	mov	r0, r5
 80095ec:	f000 f830 	bl	8009650 <_getpid_r>
 80095f0:	4622      	mov	r2, r4
 80095f2:	4601      	mov	r1, r0
 80095f4:	4628      	mov	r0, r5
 80095f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095fa:	f000 b817 	b.w	800962c <_kill_r>
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d00a      	beq.n	8009618 <_raise_r+0x4c>
 8009602:	1c59      	adds	r1, r3, #1
 8009604:	d103      	bne.n	800960e <_raise_r+0x42>
 8009606:	2316      	movs	r3, #22
 8009608:	6003      	str	r3, [r0, #0]
 800960a:	2001      	movs	r0, #1
 800960c:	e7e7      	b.n	80095de <_raise_r+0x12>
 800960e:	2100      	movs	r1, #0
 8009610:	4620      	mov	r0, r4
 8009612:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009616:	4798      	blx	r3
 8009618:	2000      	movs	r0, #0
 800961a:	e7e0      	b.n	80095de <_raise_r+0x12>

0800961c <raise>:
 800961c:	4b02      	ldr	r3, [pc, #8]	@ (8009628 <raise+0xc>)
 800961e:	4601      	mov	r1, r0
 8009620:	6818      	ldr	r0, [r3, #0]
 8009622:	f7ff bfd3 	b.w	80095cc <_raise_r>
 8009626:	bf00      	nop
 8009628:	2000019c 	.word	0x2000019c

0800962c <_kill_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	2300      	movs	r3, #0
 8009630:	4d06      	ldr	r5, [pc, #24]	@ (800964c <_kill_r+0x20>)
 8009632:	4604      	mov	r4, r0
 8009634:	4608      	mov	r0, r1
 8009636:	4611      	mov	r1, r2
 8009638:	602b      	str	r3, [r5, #0]
 800963a:	f7f7 ff43 	bl	80014c4 <_kill>
 800963e:	1c43      	adds	r3, r0, #1
 8009640:	d102      	bne.n	8009648 <_kill_r+0x1c>
 8009642:	682b      	ldr	r3, [r5, #0]
 8009644:	b103      	cbz	r3, 8009648 <_kill_r+0x1c>
 8009646:	6023      	str	r3, [r4, #0]
 8009648:	bd38      	pop	{r3, r4, r5, pc}
 800964a:	bf00      	nop
 800964c:	20001c30 	.word	0x20001c30

08009650 <_getpid_r>:
 8009650:	f7f7 bf36 	b.w	80014c0 <_getpid>

08009654 <__swhatbuf_r>:
 8009654:	b570      	push	{r4, r5, r6, lr}
 8009656:	460c      	mov	r4, r1
 8009658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800965c:	4615      	mov	r5, r2
 800965e:	2900      	cmp	r1, #0
 8009660:	461e      	mov	r6, r3
 8009662:	b096      	sub	sp, #88	@ 0x58
 8009664:	da0c      	bge.n	8009680 <__swhatbuf_r+0x2c>
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	2100      	movs	r1, #0
 800966a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800966e:	bf14      	ite	ne
 8009670:	2340      	movne	r3, #64	@ 0x40
 8009672:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009676:	2000      	movs	r0, #0
 8009678:	6031      	str	r1, [r6, #0]
 800967a:	602b      	str	r3, [r5, #0]
 800967c:	b016      	add	sp, #88	@ 0x58
 800967e:	bd70      	pop	{r4, r5, r6, pc}
 8009680:	466a      	mov	r2, sp
 8009682:	f000 f849 	bl	8009718 <_fstat_r>
 8009686:	2800      	cmp	r0, #0
 8009688:	dbed      	blt.n	8009666 <__swhatbuf_r+0x12>
 800968a:	9901      	ldr	r1, [sp, #4]
 800968c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009690:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009694:	4259      	negs	r1, r3
 8009696:	4159      	adcs	r1, r3
 8009698:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800969c:	e7eb      	b.n	8009676 <__swhatbuf_r+0x22>

0800969e <__smakebuf_r>:
 800969e:	898b      	ldrh	r3, [r1, #12]
 80096a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096a2:	079d      	lsls	r5, r3, #30
 80096a4:	4606      	mov	r6, r0
 80096a6:	460c      	mov	r4, r1
 80096a8:	d507      	bpl.n	80096ba <__smakebuf_r+0x1c>
 80096aa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80096ae:	6023      	str	r3, [r4, #0]
 80096b0:	6123      	str	r3, [r4, #16]
 80096b2:	2301      	movs	r3, #1
 80096b4:	6163      	str	r3, [r4, #20]
 80096b6:	b003      	add	sp, #12
 80096b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096ba:	466a      	mov	r2, sp
 80096bc:	ab01      	add	r3, sp, #4
 80096be:	f7ff ffc9 	bl	8009654 <__swhatbuf_r>
 80096c2:	9f00      	ldr	r7, [sp, #0]
 80096c4:	4605      	mov	r5, r0
 80096c6:	4639      	mov	r1, r7
 80096c8:	4630      	mov	r0, r6
 80096ca:	f7fe fec7 	bl	800845c <_malloc_r>
 80096ce:	b948      	cbnz	r0, 80096e4 <__smakebuf_r+0x46>
 80096d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096d4:	059a      	lsls	r2, r3, #22
 80096d6:	d4ee      	bmi.n	80096b6 <__smakebuf_r+0x18>
 80096d8:	f023 0303 	bic.w	r3, r3, #3
 80096dc:	f043 0302 	orr.w	r3, r3, #2
 80096e0:	81a3      	strh	r3, [r4, #12]
 80096e2:	e7e2      	b.n	80096aa <__smakebuf_r+0xc>
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80096ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ee:	81a3      	strh	r3, [r4, #12]
 80096f0:	9b01      	ldr	r3, [sp, #4]
 80096f2:	6020      	str	r0, [r4, #0]
 80096f4:	b15b      	cbz	r3, 800970e <__smakebuf_r+0x70>
 80096f6:	4630      	mov	r0, r6
 80096f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096fc:	f000 f81e 	bl	800973c <_isatty_r>
 8009700:	b128      	cbz	r0, 800970e <__smakebuf_r+0x70>
 8009702:	89a3      	ldrh	r3, [r4, #12]
 8009704:	f023 0303 	bic.w	r3, r3, #3
 8009708:	f043 0301 	orr.w	r3, r3, #1
 800970c:	81a3      	strh	r3, [r4, #12]
 800970e:	89a3      	ldrh	r3, [r4, #12]
 8009710:	431d      	orrs	r5, r3
 8009712:	81a5      	strh	r5, [r4, #12]
 8009714:	e7cf      	b.n	80096b6 <__smakebuf_r+0x18>
	...

08009718 <_fstat_r>:
 8009718:	b538      	push	{r3, r4, r5, lr}
 800971a:	2300      	movs	r3, #0
 800971c:	4d06      	ldr	r5, [pc, #24]	@ (8009738 <_fstat_r+0x20>)
 800971e:	4604      	mov	r4, r0
 8009720:	4608      	mov	r0, r1
 8009722:	4611      	mov	r1, r2
 8009724:	602b      	str	r3, [r5, #0]
 8009726:	f7f7 fefa 	bl	800151e <_fstat>
 800972a:	1c43      	adds	r3, r0, #1
 800972c:	d102      	bne.n	8009734 <_fstat_r+0x1c>
 800972e:	682b      	ldr	r3, [r5, #0]
 8009730:	b103      	cbz	r3, 8009734 <_fstat_r+0x1c>
 8009732:	6023      	str	r3, [r4, #0]
 8009734:	bd38      	pop	{r3, r4, r5, pc}
 8009736:	bf00      	nop
 8009738:	20001c30 	.word	0x20001c30

0800973c <_isatty_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	2300      	movs	r3, #0
 8009740:	4d05      	ldr	r5, [pc, #20]	@ (8009758 <_isatty_r+0x1c>)
 8009742:	4604      	mov	r4, r0
 8009744:	4608      	mov	r0, r1
 8009746:	602b      	str	r3, [r5, #0]
 8009748:	f7f7 feee 	bl	8001528 <_isatty>
 800974c:	1c43      	adds	r3, r0, #1
 800974e:	d102      	bne.n	8009756 <_isatty_r+0x1a>
 8009750:	682b      	ldr	r3, [r5, #0]
 8009752:	b103      	cbz	r3, 8009756 <_isatty_r+0x1a>
 8009754:	6023      	str	r3, [r4, #0]
 8009756:	bd38      	pop	{r3, r4, r5, pc}
 8009758:	20001c30 	.word	0x20001c30

0800975c <_init>:
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	bf00      	nop
 8009760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009762:	bc08      	pop	{r3}
 8009764:	469e      	mov	lr, r3
 8009766:	4770      	bx	lr

08009768 <_fini>:
 8009768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976a:	bf00      	nop
 800976c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800976e:	bc08      	pop	{r3}
 8009770:	469e      	mov	lr, r3
 8009772:	4770      	bx	lr
