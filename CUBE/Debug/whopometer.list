
whopometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb7c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  0800cc90  0800cc90  0000dc90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0a8  0800d0a8  0000f358  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0a8  0800d0a8  0000e0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0b0  0800d0b0  0000f358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0b0  0800d0b0  0000e0b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d0b4  0800d0b4  0000e0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  0800d0b8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b4  20000358  0800d410  0000f358  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000180c  0800d410  0000f80c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014697  00000000  00000000  0000f381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a2a  00000000  00000000  00023a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00027448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e30  00000000  00000000  00028730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba19  00000000  00000000  00029560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c16  00000000  00000000  00044f79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d174  00000000  00000000  0005cb8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9d03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e5c  00000000  00000000  000e9d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000efba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cc74 	.word	0x0800cc74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800cc74 	.word	0x0800cc74

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <h3lis331dl_read_reg>:
  *
  */
int32_t __weak h3lis331dl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	461a      	mov	r2, r3
 8000e18:	460b      	mov	r3, r1
 8000e1a:	72fb      	strb	r3, [r7, #11]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d102      	bne.n	8000e2c <h3lis331dl_read_reg+0x20>
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <h3lis331dl_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	685c      	ldr	r4, [r3, #4]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	68d8      	ldr	r0, [r3, #12]
 8000e34:	893b      	ldrh	r3, [r7, #8]
 8000e36:	7af9      	ldrb	r1, [r7, #11]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	47a0      	blx	r4
 8000e3c:	6178      	str	r0, [r7, #20]

  return ret;
 8000e3e:	697b      	ldr	r3, [r7, #20]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}

08000e48 <h3lis331dl_write_reg>:
  *
  */
int32_t __weak h3lis331dl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	461a      	mov	r2, r3
 8000e54:	460b      	mov	r3, r1
 8000e56:	72fb      	strb	r3, [r7, #11]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <h3lis331dl_write_reg+0x20>
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e009      	b.n	8000e7c <h3lis331dl_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681c      	ldr	r4, [r3, #0]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	68d8      	ldr	r0, [r3, #12]
 8000e70:	893b      	ldrh	r3, [r7, #8]
 8000e72:	7af9      	ldrb	r1, [r7, #11]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	47a0      	blx	r4
 8000e78:	6178      	str	r0, [r7, #20]

  return ret;
 8000e7a:	697b      	ldr	r3, [r7, #20]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	371c      	adds	r7, #28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd90      	pop	{r4, r7, pc}

08000e84 <h3lis331dl_from_fs100_to_mg>:
  * @{
  *
  */

float_t h3lis331dl_from_fs100_to_mg(int16_t lsb)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 3.0625f);
 8000e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff66 	bl	8000d64 <__aeabi_i2f>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4904      	ldr	r1, [pc, #16]	@ (8000eac <h3lis331dl_from_fs100_to_mg+0x28>)
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff f95f 	bl	8000160 <__aeabi_fmul>
 8000ea2:	4603      	mov	r3, r0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40440000 	.word	0x40440000

08000eb0 <h3lis331dl_data_rate_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_data_rate_set(const stmdev_ctx_t *ctx,
                                 h3lis331dl_dr_t val)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
  h3lis331dl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG1,
 8000ebc:	f107 0208 	add.w	r2, r7, #8
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	2120      	movs	r1, #32
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ffa1 	bl	8000e0c <h3lis331dl_read_reg>
 8000eca:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d118      	bne.n	8000f04 <h3lis331dl_data_rate_set+0x54>
  {
    ctrl_reg1.pm = (uint8_t)val & 0x07U;
 8000ed2:	78fb      	ldrb	r3, [r7, #3]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	7a3b      	ldrb	r3, [r7, #8]
 8000edc:	f362 1347 	bfi	r3, r2, #5, #3
 8000ee0:	723b      	strb	r3, [r7, #8]
    ctrl_reg1.dr = ((uint8_t)val & 0x30U) >> 4;
 8000ee2:	78fb      	ldrb	r3, [r7, #3]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	7a3b      	ldrb	r3, [r7, #8]
 8000eee:	f362 03c4 	bfi	r3, r2, #3, #2
 8000ef2:	723b      	strb	r3, [r7, #8]
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG1,
 8000ef4:	f107 0208 	add.w	r2, r7, #8
 8000ef8:	2301      	movs	r3, #1
 8000efa:	2120      	movs	r1, #32
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ffa3 	bl	8000e48 <h3lis331dl_write_reg>
 8000f02:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
 8000f04:	68fb      	ldr	r3, [r7, #12]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <h3lis331dl_full_scale_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_full_scale_set(const stmdev_ctx_t *ctx,
                                  h3lis331dl_fs_t val)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	460b      	mov	r3, r1
 8000f18:	70fb      	strb	r3, [r7, #3]
  h3lis331dl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000f1a:	f107 0208 	add.w	r2, r7, #8
 8000f1e:	2301      	movs	r3, #1
 8000f20:	2123      	movs	r1, #35	@ 0x23
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ff72 	bl	8000e0c <h3lis331dl_read_reg>
 8000f28:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10f      	bne.n	8000f50 <h3lis331dl_full_scale_set+0x42>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	7a3b      	ldrb	r3, [r7, #8]
 8000f3a:	f362 1305 	bfi	r3, r2, #4, #2
 8000f3e:	723b      	strb	r3, [r7, #8]
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000f40:	f107 0208 	add.w	r2, r7, #8
 8000f44:	2301      	movs	r3, #1
 8000f46:	2123      	movs	r1, #35	@ 0x23
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff7d 	bl	8000e48 <h3lis331dl_write_reg>
 8000f4e:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8000f50:	68fb      	ldr	r3, [r7, #12]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <h3lis331dl_block_data_update_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_block_data_update_set(const stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	70fb      	strb	r3, [r7, #3]
  h3lis331dl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000f66:	f107 0208 	add.w	r2, r7, #8
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2123      	movs	r1, #35	@ 0x23
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff4c 	bl	8000e0c <h3lis331dl_read_reg>
 8000f74:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10f      	bne.n	8000f9c <h3lis331dl_block_data_update_set+0x42>
  {
    ctrl_reg4.bdu = val;
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	7a3b      	ldrb	r3, [r7, #8]
 8000f86:	f362 13c7 	bfi	r3, r2, #7, #1
 8000f8a:	723b      	strb	r3, [r7, #8]
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000f8c:	f107 0208 	add.w	r2, r7, #8
 8000f90:	2301      	movs	r3, #1
 8000f92:	2123      	movs	r1, #35	@ 0x23
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff57 	bl	8000e48 <h3lis331dl_write_reg>
 8000f9a:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <h3lis331dl_status_reg_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_status_reg_get(const stmdev_ctx_t *ctx,
                                  h3lis331dl_status_reg_t *val)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_STATUS_REG,
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	2127      	movs	r1, #39	@ 0x27
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff28 	bl	8000e0c <h3lis331dl_read_reg>
 8000fbc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *) val, 1);

  return ret;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <h3lis331dl_acceleration_raw_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_acceleration_raw_get(const stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_OUT_X_L, buff, 6);
 8000fd2:	f107 020c 	add.w	r2, r7, #12
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	2128      	movs	r1, #40	@ 0x28
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ff16 	bl	8000e0c <h3lis331dl_read_reg>
 8000fe0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8000fe2:	7b7b      	ldrb	r3, [r7, #13]
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	7b3a      	ldrb	r2, [r7, #12]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	3302      	adds	r3, #2
 8001008:	b212      	sxth	r2, r2
 800100a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	3302      	adds	r3, #2
 8001010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001014:	b29b      	uxth	r3, r3
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b29b      	uxth	r3, r3
 800101a:	7bba      	ldrb	r2, [r7, #14]
 800101c:	4413      	add	r3, r2
 800101e:	b29a      	uxth	r2, r3
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	3302      	adds	r3, #2
 8001024:	b212      	sxth	r2, r2
 8001026:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001028:	7c7a      	ldrb	r2, [r7, #17]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	3304      	adds	r3, #4
 800102e:	b212      	sxth	r2, r2
 8001030:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	3304      	adds	r3, #4
 8001036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103a:	b29b      	uxth	r3, r3
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	7c3a      	ldrb	r2, [r7, #16]
 8001042:	4413      	add	r3, r2
 8001044:	b29a      	uxth	r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	3304      	adds	r3, #4
 800104a:	b212      	sxth	r2, r2
 800104c:	801a      	strh	r2, [r3, #0]

  return ret;
 800104e:	697b      	ldr	r3, [r7, #20]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <h3lis331dl_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_WHO_AM_I, buff, 1);
 8001062:	2301      	movs	r3, #1
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	210f      	movs	r1, #15
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff fecf 	bl	8000e0c <h3lis331dl_read_reg>
 800106e:	60f8      	str	r0, [r7, #12]

  return ret;
 8001070:	68fb      	ldr	r3, [r7, #12]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <h3lis331dl_hp_path_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_hp_path_set(const stmdev_ctx_t *ctx,
                               h3lis331dl_hpen_t val)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	70fb      	strb	r3, [r7, #3]
  h3lis331dl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG2,
 8001086:	f107 0208 	add.w	r2, r7, #8
 800108a:	2301      	movs	r3, #1
 800108c:	2121      	movs	r1, #33	@ 0x21
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff febc 	bl	8000e0c <h3lis331dl_read_reg>
 8001094:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg2, 1);

  if (ret == 0)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d118      	bne.n	80010ce <h3lis331dl_hp_path_set+0x54>
  {
    ctrl_reg2.hpen = (uint8_t)val & 0x03U;
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	7a3b      	ldrb	r3, [r7, #8]
 80010a6:	f362 0383 	bfi	r3, r2, #2, #2
 80010aa:	723b      	strb	r3, [r7, #8]
    ctrl_reg2.fds = ((uint8_t)val & 0x04U) >> 2;
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	7a3b      	ldrb	r3, [r7, #8]
 80010b8:	f362 1304 	bfi	r3, r2, #4, #1
 80010bc:	723b      	strb	r3, [r7, #8]
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG2,
 80010be:	f107 0208 	add.w	r2, r7, #8
 80010c2:	2301      	movs	r3, #1
 80010c4:	2121      	movs	r1, #33	@ 0x21
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff febe 	bl	8000e48 <h3lis331dl_write_reg>
 80010cc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl_reg2, 1);
  }

  return ret;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <platform_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


// Define platform_write, platform_read, and platform_delay functions for HIG Accel
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af04      	add	r7, sp, #16
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	461a      	mov	r2, r3
 80010e4:	460b      	mov	r3, r1
 80010e6:	72fb      	strb	r3, [r7, #11]
 80010e8:	4613      	mov	r3, r2
 80010ea:	813b      	strh	r3, [r7, #8]
	/* Write multiple command */
	reg |= 0x80;
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010f2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(handle, H3LIS331DL_I2C_ADD_L, reg,
 80010f4:	7afb      	ldrb	r3, [r7, #11]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	893b      	ldrh	r3, [r7, #8]
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2301      	movs	r3, #1
 8001108:	2131      	movs	r1, #49	@ 0x31
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f001 f94c 	bl	80023a8 <HAL_I2C_Mem_Write>
	                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
	return 0;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len){
 800111a:	b580      	push	{r7, lr}
 800111c:	b088      	sub	sp, #32
 800111e:	af04      	add	r7, sp, #16
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	461a      	mov	r2, r3
 8001126:	460b      	mov	r3, r1
 8001128:	72fb      	strb	r3, [r7, #11]
 800112a:	4613      	mov	r3, r2
 800112c:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 800112e:	7afb      	ldrb	r3, [r7, #11]
 8001130:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001134:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read(handle, H3LIS331DL_I2C_ADD_L, reg,
 8001136:	7afb      	ldrb	r3, [r7, #11]
 8001138:	b29a      	uxth	r2, r3
 800113a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	893b      	ldrh	r3, [r7, #8]
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2301      	movs	r3, #1
 800114a:	2131      	movs	r1, #49	@ 0x31
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f001 fa25 	bl	800259c <HAL_I2C_Mem_Read>
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
	return 0;
 8001152:	2300      	movs	r3, #0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <platform_delay>:

/** Optional (may be required by driver) **/
static void platform_delay(uint32_t millisec){
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	HAL_Delay(millisec);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 fd0d 	bl	8001b84 <HAL_Delay>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <main>:

int main(void)
{
 8001174:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001178:	b0a4      	sub	sp, #144	@ 0x90
 800117a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117c:	f000 fca0 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001180:	f000 f8d4 	bl	800132c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001184:	f000 f9f6 	bl	8001574 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001188:	f000 f92c 	bl	80013e4 <MX_I2C1_Init>
  MX_SPI1_Init();
 800118c:	f000 f986 	bl	800149c <MX_SPI1_Init>
  MX_SPI2_Init();
 8001190:	f000 f9ba 	bl	8001508 <MX_SPI2_Init>
  MX_I2C2_Init();
 8001194:	f000 f954 	bl	8001440 <MX_I2C2_Init>
  MX_FATFS_Init();
 8001198:	f006 fe56 	bl	8007e48 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800119c:	f008 fa7c 	bl	8009698 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80011a0:	2064      	movs	r0, #100	@ 0x64
 80011a2:	f000 fcef 	bl	8001b84 <HAL_Delay>
  //MPU6050_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 80011a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011aa:	f000 fceb 	bl	8001b84 <HAL_Delay>

  stmdev_ctx_t dev_ctx;


  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 80011ae:	4b56      	ldr	r3, [pc, #344]	@ (8001308 <main+0x194>)
 80011b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  dev_ctx.read_reg = platform_read;
 80011b2:	4b56      	ldr	r3, [pc, #344]	@ (800130c <main+0x198>)
 80011b4:	673b      	str	r3, [r7, #112]	@ 0x70
  dev_ctx.mdelay = platform_delay;
 80011b6:	4b56      	ldr	r3, [pc, #344]	@ (8001310 <main+0x19c>)
 80011b8:	677b      	str	r3, [r7, #116]	@ 0x74
  dev_ctx.handle = &SENSOR_BUS;
 80011ba:	4b56      	ldr	r3, [pc, #344]	@ (8001314 <main+0x1a0>)
 80011bc:	67bb      	str	r3, [r7, #120]	@ 0x78
  whoamI = 0;
 80011be:	4b56      	ldr	r3, [pc, #344]	@ (8001318 <main+0x1a4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]



  h3lis331dl_device_id_get(&dev_ctx, &whoamI);
 80011c4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80011c8:	4953      	ldr	r1, [pc, #332]	@ (8001318 <main+0x1a4>)
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff ff44 	bl	8001058 <h3lis331dl_device_id_get>
  if ( whoamI != H3LIS331DL_ID ){
 80011d0:	4b51      	ldr	r3, [pc, #324]	@ (8001318 <main+0x1a4>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b32      	cmp	r3, #50	@ 0x32
 80011d6:	d01e      	beq.n	8001216 <main+0xa2>
 	 while(1){
 		uint8_t *yikes = "\nWho am I is not H3LIS331DL_ID \n";
 80011d8:	4b50      	ldr	r3, [pc, #320]	@ (800131c <main+0x1a8>)
 80011da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 		CDC_Transmit_FS(yikes, strlen(yikes));
 80011dc:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80011de:	f7fe ffb7 	bl	8000150 <strlen>
 80011e2:	4603      	mov	r3, r0
 80011e4:	4619      	mov	r1, r3
 80011e6:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 80011e8:	f008 fb14 	bl	8009814 <CDC_Transmit_FS>
 		HAL_Delay(100);
 80011ec:	2064      	movs	r0, #100	@ 0x64
 80011ee:	f000 fcc9 	bl	8001b84 <HAL_Delay>
 		CDC_Transmit_FS((uint8_t *) whoamI, strlen(whoamI));
 80011f2:	4b49      	ldr	r3, [pc, #292]	@ (8001318 <main+0x1a4>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461c      	mov	r4, r3
 80011f8:	4b47      	ldr	r3, [pc, #284]	@ (8001318 <main+0x1a4>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7fe ffa7 	bl	8000150 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	4619      	mov	r1, r3
 8001206:	4620      	mov	r0, r4
 8001208:	f008 fb04 	bl	8009814 <CDC_Transmit_FS>
 		HAL_Delay(100);
 800120c:	2064      	movs	r0, #100	@ 0x64
 800120e:	f000 fcb9 	bl	8001b84 <HAL_Delay>
 	 while(1){
 8001212:	bf00      	nop
 8001214:	e7e0      	b.n	80011d8 <main+0x64>
 	 }
  }


  /* Enable Block Data Update */
  h3lis331dl_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8001216:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800121a:	2101      	movs	r1, #1
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fe9c 	bl	8000f5a <h3lis331dl_block_data_update_set>
  /* Set full scale */
  h3lis331dl_full_scale_set(&dev_ctx, H3LIS331DL_100g);
 8001222:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fe70 	bl	8000f0e <h3lis331dl_full_scale_set>
  /* Configure filtering chain */
  h3lis331dl_hp_path_set(&dev_ctx, H3LIS331DL_HP_DISABLE);
 800122e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff20 	bl	800107a <h3lis331dl_hp_path_set>
  //h3lis331dl_hp_path_set(&dev_ctx, H3LIS331DL_HP_ON_OUT);
  //h3lis331dl_hp_reset_get(&dev_ctx);
  /* Set Output Data Rate */
  h3lis331dl_data_rate_set(&dev_ctx, H3LIS331DL_ODR_400Hz);
 800123a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800123e:	2121      	movs	r1, #33	@ 0x21
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fe35 	bl	8000eb0 <h3lis331dl_data_rate_set>

  /* Read samples in polling mode (no int) */
  while (1) {
    /* Read output only if new value is available */
    h3lis331dl_reg_t reg;
    h3lis331dl_status_reg_get(&dev_ctx, &reg.status_reg);
 8001246:	1d3a      	adds	r2, r7, #4
 8001248:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fea9 	bl	8000fa6 <h3lis331dl_status_reg_get>
	//HAL_Delay(1);
	//uint8_t *looped = "\nLooping that\n";
	//CDC_Transmit_FS(looped, strlen(looped));
    if (reg.status_reg.zyxda) {
 8001254:	793b      	ldrb	r3, [r7, #4]
 8001256:	f003 0308 	and.w	r3, r3, #8
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f2      	beq.n	8001246 <main+0xd2>
      /* Read acceleration data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001260:	2206      	movs	r2, #6
 8001262:	2100      	movs	r1, #0
 8001264:	482e      	ldr	r0, [pc, #184]	@ (8001320 <main+0x1ac>)
 8001266:	f009 fc34 	bl	800aad2 <memset>
      h3lis331dl_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 800126a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800126e:	492c      	ldr	r1, [pc, #176]	@ (8001320 <main+0x1ac>)
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fea9 	bl	8000fc8 <h3lis331dl_acceleration_raw_get>
      acceleration_mg[0] = h3lis331dl_from_fs100_to_mg(
 8001276:	4b2a      	ldr	r3, [pc, #168]	@ (8001320 <main+0x1ac>)
 8001278:	f9b3 3000 	ldrsh.w	r3, [r3]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff fe01 	bl	8000e84 <h3lis331dl_from_fs100_to_mg>
 8001282:	4603      	mov	r3, r0
 8001284:	4a27      	ldr	r2, [pc, #156]	@ (8001324 <main+0x1b0>)
 8001286:	6013      	str	r3, [r2, #0]
                             data_raw_acceleration[0]);
      acceleration_mg[1] = h3lis331dl_from_fs100_to_mg(
 8001288:	4b25      	ldr	r3, [pc, #148]	@ (8001320 <main+0x1ac>)
 800128a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fdf8 	bl	8000e84 <h3lis331dl_from_fs100_to_mg>
 8001294:	4603      	mov	r3, r0
 8001296:	4a23      	ldr	r2, [pc, #140]	@ (8001324 <main+0x1b0>)
 8001298:	6053      	str	r3, [r2, #4]
                             data_raw_acceleration[1]);
      acceleration_mg[2] = h3lis331dl_from_fs100_to_mg(
 800129a:	4b21      	ldr	r3, [pc, #132]	@ (8001320 <main+0x1ac>)
 800129c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fdef 	bl	8000e84 <h3lis331dl_from_fs100_to_mg>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001324 <main+0x1b0>)
 80012aa:	6093      	str	r3, [r2, #8]
                             data_raw_acceleration[2]);
      sprintf(acm, "\n%.2f %.2f %.2f", acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 80012ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001324 <main+0x1b0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f96d 	bl	8000590 <__aeabi_f2d>
 80012b6:	4680      	mov	r8, r0
 80012b8:	4689      	mov	r9, r1
 80012ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <main+0x1b0>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f966 	bl	8000590 <__aeabi_f2d>
 80012c4:	4604      	mov	r4, r0
 80012c6:	460d      	mov	r5, r1
 80012c8:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <main+0x1b0>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f95f 	bl	8000590 <__aeabi_f2d>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	f107 0008 	add.w	r0, r7, #8
 80012da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012de:	e9cd 4500 	strd	r4, r5, [sp]
 80012e2:	4642      	mov	r2, r8
 80012e4:	464b      	mov	r3, r9
 80012e6:	4910      	ldr	r1, [pc, #64]	@ (8001328 <main+0x1b4>)
 80012e8:	f009 fb90 	bl	800aa0c <siprintf>
      CDC_Transmit_FS(acm, strlen(acm));
 80012ec:	f107 0308 	add.w	r3, r7, #8
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7fe ff2d 	bl	8000150 <strlen>
 80012f6:	4602      	mov	r2, r0
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f008 fa88 	bl	8009814 <CDC_Transmit_FS>
  while (1) {
 8001304:	e79f      	b.n	8001246 <main+0xd2>
 8001306:	bf00      	nop
 8001308:	080010d9 	.word	0x080010d9
 800130c:	0800111b 	.word	0x0800111b
 8001310:	0800115d 	.word	0x0800115d
 8001314:	2000038c 	.word	0x2000038c
 8001318:	20000388 	.word	0x20000388
 800131c:	0800cc90 	.word	0x0800cc90
 8001320:	20000374 	.word	0x20000374
 8001324:	2000037c 	.word	0x2000037c
 8001328:	0800ccb4 	.word	0x0800ccb4

0800132c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b094      	sub	sp, #80	@ 0x50
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001336:	2228      	movs	r2, #40	@ 0x28
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f009 fbc9 	bl	800aad2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800135c:	2301      	movs	r3, #1
 800135e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001360:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001366:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800136a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800136c:	2301      	movs	r3, #1
 800136e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001370:	2302      	movs	r3, #2
 8001372:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001374:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001378:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800137a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800137e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001380:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001384:	4618      	mov	r0, r3
 8001386:	f003 fc91 	bl	8004cac <HAL_RCC_OscConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001390:	f000 f948 	bl	8001624 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001394:	230f      	movs	r3, #15
 8001396:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001398:	2302      	movs	r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013aa:	f107 0314 	add.w	r3, r7, #20
 80013ae:	2102      	movs	r1, #2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 fefd 	bl	80051b0 <HAL_RCC_ClockConfig>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013bc:	f000 f932 	bl	8001624 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80013c0:	2310      	movs	r3, #16
 80013c2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	4618      	mov	r0, r3
 80013cc:	f004 f86c 	bl	80054a8 <HAL_RCCEx_PeriphCLKConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013d6:	f000 f925 	bl	8001624 <Error_Handler>
  }
}
 80013da:	bf00      	nop
 80013dc:	3750      	adds	r7, #80	@ 0x50
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <MX_I2C1_Init+0x50>)
 80013ea:	4a13      	ldr	r2, [pc, #76]	@ (8001438 <MX_I2C1_Init+0x54>)
 80013ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_I2C1_Init+0x50>)
 80013f0:	4a12      	ldr	r2, [pc, #72]	@ (800143c <MX_I2C1_Init+0x58>)
 80013f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <MX_I2C1_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <MX_I2C1_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <MX_I2C1_Init+0x50>)
 8001402:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001406:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001408:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <MX_I2C1_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <MX_I2C1_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001414:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <MX_I2C1_Init+0x50>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <MX_I2C1_Init+0x50>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001420:	4804      	ldr	r0, [pc, #16]	@ (8001434 <MX_I2C1_Init+0x50>)
 8001422:	f000 fe7d 	bl	8002120 <HAL_I2C_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800142c:	f000 f8fa 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	2000038c 	.word	0x2000038c
 8001438:	40005400 	.word	0x40005400
 800143c:	000186a0 	.word	0x000186a0

08001440 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <MX_I2C2_Init+0x50>)
 8001446:	4a13      	ldr	r2, [pc, #76]	@ (8001494 <MX_I2C2_Init+0x54>)
 8001448:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <MX_I2C2_Init+0x50>)
 800144c:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <MX_I2C2_Init+0x58>)
 800144e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001450:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <MX_I2C2_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <MX_I2C2_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <MX_I2C2_Init+0x50>)
 800145e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001462:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001464:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <MX_I2C2_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <MX_I2C2_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001470:	4b07      	ldr	r3, [pc, #28]	@ (8001490 <MX_I2C2_Init+0x50>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <MX_I2C2_Init+0x50>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	@ (8001490 <MX_I2C2_Init+0x50>)
 800147e:	f000 fe4f 	bl	8002120 <HAL_I2C_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001488:	f000 f8cc 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200003e0 	.word	0x200003e0
 8001494:	40005800 	.word	0x40005800
 8001498:	000186a0 	.word	0x000186a0

0800149c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014a0:	4b17      	ldr	r3, [pc, #92]	@ (8001500 <MX_SPI1_Init+0x64>)
 80014a2:	4a18      	ldr	r2, [pc, #96]	@ (8001504 <MX_SPI1_Init+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014a6:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <MX_SPI1_Init+0x64>)
 80014a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ae:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <MX_SPI1_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b4:	4b12      	ldr	r3, [pc, #72]	@ (8001500 <MX_SPI1_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ba:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <MX_SPI1_Init+0x64>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <MX_SPI1_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001500 <MX_SPI1_Init+0x64>)
 80014c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <MX_SPI1_Init+0x64>)
 80014d0:	2230      	movs	r2, #48	@ 0x30
 80014d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <MX_SPI1_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014da:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <MX_SPI1_Init+0x64>)
 80014dc:	2200      	movs	r2, #0
 80014de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e0:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <MX_SPI1_Init+0x64>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <MX_SPI1_Init+0x64>)
 80014e8:	220a      	movs	r2, #10
 80014ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	@ (8001500 <MX_SPI1_Init+0x64>)
 80014ee:	f004 f891 	bl	8005614 <HAL_SPI_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014f8:	f000 f894 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20000434 	.word	0x20000434
 8001504:	40013000 	.word	0x40013000

08001508 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800150c:	4b17      	ldr	r3, [pc, #92]	@ (800156c <MX_SPI2_Init+0x64>)
 800150e:	4a18      	ldr	r2, [pc, #96]	@ (8001570 <MX_SPI2_Init+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001512:	4b16      	ldr	r3, [pc, #88]	@ (800156c <MX_SPI2_Init+0x64>)
 8001514:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001518:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800151a:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_SPI2_Init+0x64>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <MX_SPI2_Init+0x64>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_SPI2_Init+0x64>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_SPI2_Init+0x64>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_SPI2_Init+0x64>)
 8001534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001538:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_SPI2_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <MX_SPI2_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_SPI2_Init+0x64>)
 8001548:	2200      	movs	r2, #0
 800154a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <MX_SPI2_Init+0x64>)
 800154e:	2200      	movs	r2, #0
 8001550:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_SPI2_Init+0x64>)
 8001554:	220a      	movs	r2, #10
 8001556:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	@ (800156c <MX_SPI2_Init+0x64>)
 800155a:	f004 f85b 	bl	8005614 <HAL_SPI_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001564:	f000 f85e 	bl	8001624 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000048c 	.word	0x2000048c
 8001570:	40003800 	.word	0x40003800

08001574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001588:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <MX_GPIO_Init+0xa4>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a22      	ldr	r2, [pc, #136]	@ (8001618 <MX_GPIO_Init+0xa4>)
 800158e:	f043 0320 	orr.w	r3, r3, #32
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b20      	ldr	r3, [pc, #128]	@ (8001618 <MX_GPIO_Init+0xa4>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0320 	and.w	r3, r3, #32
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001618 <MX_GPIO_Init+0xa4>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001618 <MX_GPIO_Init+0xa4>)
 80015a6:	f043 0304 	orr.w	r3, r3, #4
 80015aa:	6193      	str	r3, [r2, #24]
 80015ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <MX_GPIO_Init+0xa4>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b8:	4b17      	ldr	r3, [pc, #92]	@ (8001618 <MX_GPIO_Init+0xa4>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	4a16      	ldr	r2, [pc, #88]	@ (8001618 <MX_GPIO_Init+0xa4>)
 80015be:	f043 0308 	orr.w	r3, r3, #8
 80015c2:	6193      	str	r3, [r2, #24]
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <MX_GPIO_Init+0xa4>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	f003 0308 	and.w	r3, r3, #8
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80015d0:	2200      	movs	r2, #0
 80015d2:	2110      	movs	r1, #16
 80015d4:	4811      	ldr	r0, [pc, #68]	@ (800161c <MX_GPIO_Init+0xa8>)
 80015d6:	f000 fd8b 	bl	80020f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80015da:	2310      	movs	r3, #16
 80015dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	2301      	movs	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	4619      	mov	r1, r3
 80015f0:	480a      	ldr	r0, [pc, #40]	@ (800161c <MX_GPIO_Init+0xa8>)
 80015f2:	f000 fbf9 	bl	8001de8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80015f6:	2314      	movs	r3, #20
 80015f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 0310 	add.w	r3, r7, #16
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_GPIO_Init+0xac>)
 800160a:	f000 fbed 	bl	8001de8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800160e:	bf00      	nop
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	40010800 	.word	0x40010800
 8001620:	40010c00 	.word	0x40010c00

08001624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001628:	b672      	cpsid	i
}
 800162a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <Error_Handler+0x8>

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <HAL_MspInit+0x5c>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	4a14      	ldr	r2, [pc, #80]	@ (800168c <HAL_MspInit+0x5c>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6193      	str	r3, [r2, #24]
 8001642:	4b12      	ldr	r3, [pc, #72]	@ (800168c <HAL_MspInit+0x5c>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <HAL_MspInit+0x5c>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a0e      	ldr	r2, [pc, #56]	@ (800168c <HAL_MspInit+0x5c>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <HAL_MspInit+0x5c>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001666:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <HAL_MspInit+0x60>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	4a04      	ldr	r2, [pc, #16]	@ (8001690 <HAL_MspInit+0x60>)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	40021000 	.word	0x40021000
 8001690:	40010000 	.word	0x40010000

08001694 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	@ 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0318 	add.w	r3, r7, #24
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a2b      	ldr	r2, [pc, #172]	@ (800175c <HAL_I2C_MspInit+0xc8>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d124      	bne.n	80016fe <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001760 <HAL_I2C_MspInit+0xcc>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a29      	ldr	r2, [pc, #164]	@ (8001760 <HAL_I2C_MspInit+0xcc>)
 80016ba:	f043 0308 	orr.w	r3, r3, #8
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b27      	ldr	r3, [pc, #156]	@ (8001760 <HAL_I2C_MspInit+0xcc>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016cc:	23c0      	movs	r3, #192	@ 0xc0
 80016ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d0:	2312      	movs	r3, #18
 80016d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d8:	f107 0318 	add.w	r3, r7, #24
 80016dc:	4619      	mov	r1, r3
 80016de:	4821      	ldr	r0, [pc, #132]	@ (8001764 <HAL_I2C_MspInit+0xd0>)
 80016e0:	f000 fb82 	bl	8001de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <HAL_I2C_MspInit+0xcc>)
 80016e6:	69db      	ldr	r3, [r3, #28]
 80016e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001760 <HAL_I2C_MspInit+0xcc>)
 80016ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ee:	61d3      	str	r3, [r2, #28]
 80016f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001760 <HAL_I2C_MspInit+0xcc>)
 80016f2:	69db      	ldr	r3, [r3, #28]
 80016f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016fc:	e029      	b.n	8001752 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a19      	ldr	r2, [pc, #100]	@ (8001768 <HAL_I2C_MspInit+0xd4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d124      	bne.n	8001752 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001708:	4b15      	ldr	r3, [pc, #84]	@ (8001760 <HAL_I2C_MspInit+0xcc>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a14      	ldr	r2, [pc, #80]	@ (8001760 <HAL_I2C_MspInit+0xcc>)
 800170e:	f043 0308 	orr.w	r3, r3, #8
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <HAL_I2C_MspInit+0xcc>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001720:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001726:	2312      	movs	r3, #18
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172a:	2303      	movs	r3, #3
 800172c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172e:	f107 0318 	add.w	r3, r7, #24
 8001732:	4619      	mov	r1, r3
 8001734:	480b      	ldr	r0, [pc, #44]	@ (8001764 <HAL_I2C_MspInit+0xd0>)
 8001736:	f000 fb57 	bl	8001de8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800173a:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <HAL_I2C_MspInit+0xcc>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	4a08      	ldr	r2, [pc, #32]	@ (8001760 <HAL_I2C_MspInit+0xcc>)
 8001740:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001744:	61d3      	str	r3, [r2, #28]
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <HAL_I2C_MspInit+0xcc>)
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	@ 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40005400 	.word	0x40005400
 8001760:	40021000 	.word	0x40021000
 8001764:	40010c00 	.word	0x40010c00
 8001768:	40005800 	.word	0x40005800

0800176c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	@ 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0318 	add.w	r3, r7, #24
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a37      	ldr	r2, [pc, #220]	@ (8001864 <HAL_SPI_MspInit+0xf8>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d130      	bne.n	80017ee <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800178c:	4b36      	ldr	r3, [pc, #216]	@ (8001868 <HAL_SPI_MspInit+0xfc>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a35      	ldr	r2, [pc, #212]	@ (8001868 <HAL_SPI_MspInit+0xfc>)
 8001792:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b33      	ldr	r3, [pc, #204]	@ (8001868 <HAL_SPI_MspInit+0xfc>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	4b30      	ldr	r3, [pc, #192]	@ (8001868 <HAL_SPI_MspInit+0xfc>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	4a2f      	ldr	r2, [pc, #188]	@ (8001868 <HAL_SPI_MspInit+0xfc>)
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	6193      	str	r3, [r2, #24]
 80017b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001868 <HAL_SPI_MspInit+0xfc>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017bc:	23a0      	movs	r3, #160	@ 0xa0
 80017be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 0318 	add.w	r3, r7, #24
 80017cc:	4619      	mov	r1, r3
 80017ce:	4827      	ldr	r0, [pc, #156]	@ (800186c <HAL_SPI_MspInit+0x100>)
 80017d0:	f000 fb0a 	bl	8001de8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017d4:	2340      	movs	r3, #64	@ 0x40
 80017d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 0318 	add.w	r3, r7, #24
 80017e4:	4619      	mov	r1, r3
 80017e6:	4821      	ldr	r0, [pc, #132]	@ (800186c <HAL_SPI_MspInit+0x100>)
 80017e8:	f000 fafe 	bl	8001de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80017ec:	e036      	b.n	800185c <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001870 <HAL_SPI_MspInit+0x104>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d131      	bne.n	800185c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001868 <HAL_SPI_MspInit+0xfc>)
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001868 <HAL_SPI_MspInit+0xfc>)
 80017fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001802:	61d3      	str	r3, [r2, #28]
 8001804:	4b18      	ldr	r3, [pc, #96]	@ (8001868 <HAL_SPI_MspInit+0xfc>)
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001810:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <HAL_SPI_MspInit+0xfc>)
 8001812:	699b      	ldr	r3, [r3, #24]
 8001814:	4a14      	ldr	r2, [pc, #80]	@ (8001868 <HAL_SPI_MspInit+0xfc>)
 8001816:	f043 0308 	orr.w	r3, r3, #8
 800181a:	6193      	str	r3, [r2, #24]
 800181c:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_SPI_MspInit+0xfc>)
 800181e:	699b      	ldr	r3, [r3, #24]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001828:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800182c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2302      	movs	r3, #2
 8001830:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001832:	2303      	movs	r3, #3
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	f107 0318 	add.w	r3, r7, #24
 800183a:	4619      	mov	r1, r3
 800183c:	480d      	ldr	r0, [pc, #52]	@ (8001874 <HAL_SPI_MspInit+0x108>)
 800183e:	f000 fad3 	bl	8001de8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001842:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0318 	add.w	r3, r7, #24
 8001854:	4619      	mov	r1, r3
 8001856:	4807      	ldr	r0, [pc, #28]	@ (8001874 <HAL_SPI_MspInit+0x108>)
 8001858:	f000 fac6 	bl	8001de8 <HAL_GPIO_Init>
}
 800185c:	bf00      	nop
 800185e:	3728      	adds	r7, #40	@ 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40013000 	.word	0x40013000
 8001868:	40021000 	.word	0x40021000
 800186c:	40010800 	.word	0x40010800
 8001870:	40003800 	.word	0x40003800
 8001874:	40010c00 	.word	0x40010c00

08001878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <NMI_Handler+0x4>

08001880 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <MemManage_Handler+0x4>

08001890 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <UsageFault_Handler+0x4>

080018a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr

080018ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c8:	f000 f940 	bl	8001b4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80018d6:	f001 fda4 	bl	8003422 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200011c8 	.word	0x200011c8

080018e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return 1;
 80018e8:	2301      	movs	r3, #1
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr

080018f2 <_kill>:

int _kill(int pid, int sig)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018fc:	f009 f93c 	bl	800ab78 <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	2216      	movs	r2, #22
 8001904:	601a      	str	r2, [r3, #0]
  return -1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <_exit>:

void _exit (int status)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800191a:	f04f 31ff 	mov.w	r1, #4294967295
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffe7 	bl	80018f2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001924:	bf00      	nop
 8001926:	e7fd      	b.n	8001924 <_exit+0x12>

08001928 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e00a      	b.n	8001950 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800193a:	f3af 8000 	nop.w
 800193e:	4601      	mov	r1, r0
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	60ba      	str	r2, [r7, #8]
 8001946:	b2ca      	uxtb	r2, r1
 8001948:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697a      	ldr	r2, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	429a      	cmp	r2, r3
 8001956:	dbf0      	blt.n	800193a <_read+0x12>
  }

  return len;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b086      	sub	sp, #24
 8001966:	af00      	add	r7, sp, #0
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	e009      	b.n	8001988 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	60ba      	str	r2, [r7, #8]
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	429a      	cmp	r2, r3
 800198e:	dbf1      	blt.n	8001974 <_write+0x12>
  }
  return len;
 8001990:	687b      	ldr	r3, [r7, #4]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <_close>:

int _close(int file)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019c0:	605a      	str	r2, [r3, #4]
  return 0;
 80019c2:	2300      	movs	r3, #0
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <_isatty>:

int _isatty(int file)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b085      	sub	sp, #20
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	60f8      	str	r0, [r7, #12]
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr
	...

080019fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a04:	4a14      	ldr	r2, [pc, #80]	@ (8001a58 <_sbrk+0x5c>)
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <_sbrk+0x60>)
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a10:	4b13      	ldr	r3, [pc, #76]	@ (8001a60 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a18:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <_sbrk+0x64>)
 8001a1a:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <_sbrk+0x68>)
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1e:	4b10      	ldr	r3, [pc, #64]	@ (8001a60 <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d207      	bcs.n	8001a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a2c:	f009 f8a4 	bl	800ab78 <__errno>
 8001a30:	4603      	mov	r3, r0
 8001a32:	220c      	movs	r2, #12
 8001a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	e009      	b.n	8001a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a42:	4b07      	ldr	r3, [pc, #28]	@ (8001a60 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a05      	ldr	r2, [pc, #20]	@ (8001a60 <_sbrk+0x64>)
 8001a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20005000 	.word	0x20005000
 8001a5c:	00000400 	.word	0x00000400
 8001a60:	200004e4 	.word	0x200004e4
 8001a64:	20001810 	.word	0x20001810

08001a68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a74:	f7ff fff8 	bl	8001a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a78:	480b      	ldr	r0, [pc, #44]	@ (8001aa8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a7a:	490c      	ldr	r1, [pc, #48]	@ (8001aac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a7c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a80:	e002      	b.n	8001a88 <LoopCopyDataInit>

08001a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a86:	3304      	adds	r3, #4

08001a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a8c:	d3f9      	bcc.n	8001a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a8e:	4a09      	ldr	r2, [pc, #36]	@ (8001ab4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a90:	4c09      	ldr	r4, [pc, #36]	@ (8001ab8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a94:	e001      	b.n	8001a9a <LoopFillZerobss>

08001a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a98:	3204      	adds	r2, #4

08001a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a9c:	d3fb      	bcc.n	8001a96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a9e:	f009 f871 	bl	800ab84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aa2:	f7ff fb67 	bl	8001174 <main>
  bx lr
 8001aa6:	4770      	bx	lr
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8001ab0:	0800d0b8 	.word	0x0800d0b8
  ldr r2, =_sbss
 8001ab4:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8001ab8:	2000180c 	.word	0x2000180c

08001abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_2_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	@ (8001ae8 <HAL_Init+0x28>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	@ (8001ae8 <HAL_Init+0x28>)
 8001aca:	f043 0310 	orr.w	r3, r3, #16
 8001ace:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f947 	bl	8001d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	200f      	movs	r0, #15
 8001ad8:	f000 f808 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fda8 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af4:	4b12      	ldr	r3, [pc, #72]	@ (8001b40 <HAL_InitTick+0x54>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_InitTick+0x58>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f95f 	bl	8001dce <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00e      	b.n	8001b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d80a      	bhi.n	8001b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f000 f927 	bl	8001d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b2c:	4a06      	ldr	r2, [pc, #24]	@ (8001b48 <HAL_InitTick+0x5c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000000 	.word	0x20000000
 8001b44:	20000008 	.word	0x20000008
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <HAL_IncTick+0x1c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b05      	ldr	r3, [pc, #20]	@ (8001b6c <HAL_IncTick+0x20>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a03      	ldr	r2, [pc, #12]	@ (8001b6c <HAL_IncTick+0x20>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	200004e8 	.word	0x200004e8

08001b70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b02      	ldr	r3, [pc, #8]	@ (8001b80 <HAL_GetTick+0x10>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	200004e8 	.word	0x200004e8

08001b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b8c:	f7ff fff0 	bl	8001b70 <HAL_GetTick>
 8001b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b9c:	d005      	beq.n	8001baa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc8 <HAL_Delay+0x44>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001baa:	bf00      	nop
 8001bac:	f7ff ffe0 	bl	8001b70 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d8f7      	bhi.n	8001bac <HAL_Delay+0x28>
  {
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000008 	.word	0x20000008

08001bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001be8:	4013      	ands	r3, r2
 8001bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bfe:	4a04      	ldr	r2, [pc, #16]	@ (8001c10 <__NVIC_SetPriorityGrouping+0x44>)
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	60d3      	str	r3, [r2, #12]
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c18:	4b04      	ldr	r3, [pc, #16]	@ (8001c2c <__NVIC_GetPriorityGrouping+0x18>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	0a1b      	lsrs	r3, r3, #8
 8001c1e:	f003 0307 	and.w	r3, r3, #7
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	db0b      	blt.n	8001c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	f003 021f 	and.w	r2, r3, #31
 8001c48:	4906      	ldr	r1, [pc, #24]	@ (8001c64 <__NVIC_EnableIRQ+0x34>)
 8001c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c4e:	095b      	lsrs	r3, r3, #5
 8001c50:	2001      	movs	r0, #1
 8001c52:	fa00 f202 	lsl.w	r2, r0, r2
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100

08001c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	db0a      	blt.n	8001c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	490c      	ldr	r1, [pc, #48]	@ (8001cb4 <__NVIC_SetPriority+0x4c>)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	b2d2      	uxtb	r2, r2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c90:	e00a      	b.n	8001ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	b2da      	uxtb	r2, r3
 8001c96:	4908      	ldr	r1, [pc, #32]	@ (8001cb8 <__NVIC_SetPriority+0x50>)
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	f003 030f 	and.w	r3, r3, #15
 8001c9e:	3b04      	subs	r3, #4
 8001ca0:	0112      	lsls	r2, r2, #4
 8001ca2:	b2d2      	uxtb	r2, r2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	761a      	strb	r2, [r3, #24]
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc80      	pop	{r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	@ 0x24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f1c3 0307 	rsb	r3, r3, #7
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	bf28      	it	cs
 8001cda:	2304      	movcs	r3, #4
 8001cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3304      	adds	r3, #4
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d902      	bls.n	8001cec <NVIC_EncodePriority+0x30>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	3b03      	subs	r3, #3
 8001cea:	e000      	b.n	8001cee <NVIC_EncodePriority+0x32>
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43da      	mvns	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	401a      	ands	r2, r3
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	4313      	orrs	r3, r2
         );
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3724      	adds	r7, #36	@ 0x24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr

08001d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d30:	d301      	bcc.n	8001d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00f      	b.n	8001d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d36:	4a0a      	ldr	r2, [pc, #40]	@ (8001d60 <SysTick_Config+0x40>)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d3e:	210f      	movs	r1, #15
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295
 8001d44:	f7ff ff90 	bl	8001c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <SysTick_Config+0x40>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d4e:	4b04      	ldr	r3, [pc, #16]	@ (8001d60 <SysTick_Config+0x40>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	e000e010 	.word	0xe000e010

08001d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff2d 	bl	8001bcc <__NVIC_SetPriorityGrouping>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b086      	sub	sp, #24
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	4603      	mov	r3, r0
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d8c:	f7ff ff42 	bl	8001c14 <__NVIC_GetPriorityGrouping>
 8001d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	68b9      	ldr	r1, [r7, #8]
 8001d96:	6978      	ldr	r0, [r7, #20]
 8001d98:	f7ff ff90 	bl	8001cbc <NVIC_EncodePriority>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff ff5f 	bl	8001c68 <__NVIC_SetPriority>
}
 8001daa:	bf00      	nop
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	4603      	mov	r3, r0
 8001dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff35 	bl	8001c30 <__NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ffa2 	bl	8001d20 <SysTick_Config>
 8001ddc:	4603      	mov	r3, r0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b08b      	sub	sp, #44	@ 0x2c
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001df6:	2300      	movs	r3, #0
 8001df8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dfa:	e169      	b.n	80020d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	69fa      	ldr	r2, [r7, #28]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	f040 8158 	bne.w	80020ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4a9a      	ldr	r2, [pc, #616]	@ (8002088 <HAL_GPIO_Init+0x2a0>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d05e      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e24:	4a98      	ldr	r2, [pc, #608]	@ (8002088 <HAL_GPIO_Init+0x2a0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d875      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e2a:	4a98      	ldr	r2, [pc, #608]	@ (800208c <HAL_GPIO_Init+0x2a4>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d058      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e30:	4a96      	ldr	r2, [pc, #600]	@ (800208c <HAL_GPIO_Init+0x2a4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d86f      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e36:	4a96      	ldr	r2, [pc, #600]	@ (8002090 <HAL_GPIO_Init+0x2a8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d052      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e3c:	4a94      	ldr	r2, [pc, #592]	@ (8002090 <HAL_GPIO_Init+0x2a8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d869      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e42:	4a94      	ldr	r2, [pc, #592]	@ (8002094 <HAL_GPIO_Init+0x2ac>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d04c      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e48:	4a92      	ldr	r2, [pc, #584]	@ (8002094 <HAL_GPIO_Init+0x2ac>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d863      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e4e:	4a92      	ldr	r2, [pc, #584]	@ (8002098 <HAL_GPIO_Init+0x2b0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d046      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
 8001e54:	4a90      	ldr	r2, [pc, #576]	@ (8002098 <HAL_GPIO_Init+0x2b0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d85d      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e5a:	2b12      	cmp	r3, #18
 8001e5c:	d82a      	bhi.n	8001eb4 <HAL_GPIO_Init+0xcc>
 8001e5e:	2b12      	cmp	r3, #18
 8001e60:	d859      	bhi.n	8001f16 <HAL_GPIO_Init+0x12e>
 8001e62:	a201      	add	r2, pc, #4	@ (adr r2, 8001e68 <HAL_GPIO_Init+0x80>)
 8001e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e68:	08001ee3 	.word	0x08001ee3
 8001e6c:	08001ebd 	.word	0x08001ebd
 8001e70:	08001ecf 	.word	0x08001ecf
 8001e74:	08001f11 	.word	0x08001f11
 8001e78:	08001f17 	.word	0x08001f17
 8001e7c:	08001f17 	.word	0x08001f17
 8001e80:	08001f17 	.word	0x08001f17
 8001e84:	08001f17 	.word	0x08001f17
 8001e88:	08001f17 	.word	0x08001f17
 8001e8c:	08001f17 	.word	0x08001f17
 8001e90:	08001f17 	.word	0x08001f17
 8001e94:	08001f17 	.word	0x08001f17
 8001e98:	08001f17 	.word	0x08001f17
 8001e9c:	08001f17 	.word	0x08001f17
 8001ea0:	08001f17 	.word	0x08001f17
 8001ea4:	08001f17 	.word	0x08001f17
 8001ea8:	08001f17 	.word	0x08001f17
 8001eac:	08001ec5 	.word	0x08001ec5
 8001eb0:	08001ed9 	.word	0x08001ed9
 8001eb4:	4a79      	ldr	r2, [pc, #484]	@ (800209c <HAL_GPIO_Init+0x2b4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d013      	beq.n	8001ee2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eba:	e02c      	b.n	8001f16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	623b      	str	r3, [r7, #32]
          break;
 8001ec2:	e029      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	3304      	adds	r3, #4
 8001eca:	623b      	str	r3, [r7, #32]
          break;
 8001ecc:	e024      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	3308      	adds	r3, #8
 8001ed4:	623b      	str	r3, [r7, #32]
          break;
 8001ed6:	e01f      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	330c      	adds	r3, #12
 8001ede:	623b      	str	r3, [r7, #32]
          break;
 8001ee0:	e01a      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d102      	bne.n	8001ef0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001eea:	2304      	movs	r3, #4
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e013      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d105      	bne.n	8001f04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69fa      	ldr	r2, [r7, #28]
 8001f00:	611a      	str	r2, [r3, #16]
          break;
 8001f02:	e009      	b.n	8001f18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f04:	2308      	movs	r3, #8
 8001f06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	615a      	str	r2, [r3, #20]
          break;
 8001f0e:	e003      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f10:	2300      	movs	r3, #0
 8001f12:	623b      	str	r3, [r7, #32]
          break;
 8001f14:	e000      	b.n	8001f18 <HAL_GPIO_Init+0x130>
          break;
 8001f16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	2bff      	cmp	r3, #255	@ 0xff
 8001f1c:	d801      	bhi.n	8001f22 <HAL_GPIO_Init+0x13a>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	e001      	b.n	8001f26 <HAL_GPIO_Init+0x13e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3304      	adds	r3, #4
 8001f26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2bff      	cmp	r3, #255	@ 0xff
 8001f2c:	d802      	bhi.n	8001f34 <HAL_GPIO_Init+0x14c>
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	e002      	b.n	8001f3a <HAL_GPIO_Init+0x152>
 8001f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f36:	3b08      	subs	r3, #8
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	210f      	movs	r1, #15
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	fa01 f303 	lsl.w	r3, r1, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	6a39      	ldr	r1, [r7, #32]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	431a      	orrs	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80b1 	beq.w	80020ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f68:	4b4d      	ldr	r3, [pc, #308]	@ (80020a0 <HAL_GPIO_Init+0x2b8>)
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	4a4c      	ldr	r2, [pc, #304]	@ (80020a0 <HAL_GPIO_Init+0x2b8>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6193      	str	r3, [r2, #24]
 8001f74:	4b4a      	ldr	r3, [pc, #296]	@ (80020a0 <HAL_GPIO_Init+0x2b8>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f80:	4a48      	ldr	r2, [pc, #288]	@ (80020a4 <HAL_GPIO_Init+0x2bc>)
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	3302      	adds	r3, #2
 8001f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	f003 0303 	and.w	r3, r3, #3
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	220f      	movs	r2, #15
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a40      	ldr	r2, [pc, #256]	@ (80020a8 <HAL_GPIO_Init+0x2c0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d013      	beq.n	8001fd4 <HAL_GPIO_Init+0x1ec>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3f      	ldr	r2, [pc, #252]	@ (80020ac <HAL_GPIO_Init+0x2c4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00d      	beq.n	8001fd0 <HAL_GPIO_Init+0x1e8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3e      	ldr	r2, [pc, #248]	@ (80020b0 <HAL_GPIO_Init+0x2c8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d007      	beq.n	8001fcc <HAL_GPIO_Init+0x1e4>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3d      	ldr	r2, [pc, #244]	@ (80020b4 <HAL_GPIO_Init+0x2cc>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d101      	bne.n	8001fc8 <HAL_GPIO_Init+0x1e0>
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e006      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fc8:	2304      	movs	r3, #4
 8001fca:	e004      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_GPIO_Init+0x1ee>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fd8:	f002 0203 	and.w	r2, r2, #3
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	4093      	lsls	r3, r2
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fe6:	492f      	ldr	r1, [pc, #188]	@ (80020a4 <HAL_GPIO_Init+0x2bc>)
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d006      	beq.n	800200e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002000:	4b2d      	ldr	r3, [pc, #180]	@ (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	492c      	ldr	r1, [pc, #176]	@ (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	608b      	str	r3, [r1, #8]
 800200c:	e006      	b.n	800201c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800200e:	4b2a      	ldr	r3, [pc, #168]	@ (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	43db      	mvns	r3, r3
 8002016:	4928      	ldr	r1, [pc, #160]	@ (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002018:	4013      	ands	r3, r2
 800201a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d006      	beq.n	8002036 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002028:	4b23      	ldr	r3, [pc, #140]	@ (80020b8 <HAL_GPIO_Init+0x2d0>)
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	4922      	ldr	r1, [pc, #136]	@ (80020b8 <HAL_GPIO_Init+0x2d0>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	60cb      	str	r3, [r1, #12]
 8002034:	e006      	b.n	8002044 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002036:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	43db      	mvns	r3, r3
 800203e:	491e      	ldr	r1, [pc, #120]	@ (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002040:	4013      	ands	r3, r2
 8002042:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800204c:	2b00      	cmp	r3, #0
 800204e:	d006      	beq.n	800205e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002050:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002052:	685a      	ldr	r2, [r3, #4]
 8002054:	4918      	ldr	r1, [pc, #96]	@ (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800205e:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	43db      	mvns	r3, r3
 8002066:	4914      	ldr	r1, [pc, #80]	@ (80020b8 <HAL_GPIO_Init+0x2d0>)
 8002068:	4013      	ands	r3, r2
 800206a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d021      	beq.n	80020bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002078:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <HAL_GPIO_Init+0x2d0>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	490e      	ldr	r1, [pc, #56]	@ (80020b8 <HAL_GPIO_Init+0x2d0>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]
 8002084:	e021      	b.n	80020ca <HAL_GPIO_Init+0x2e2>
 8002086:	bf00      	nop
 8002088:	10320000 	.word	0x10320000
 800208c:	10310000 	.word	0x10310000
 8002090:	10220000 	.word	0x10220000
 8002094:	10210000 	.word	0x10210000
 8002098:	10120000 	.word	0x10120000
 800209c:	10110000 	.word	0x10110000
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40010000 	.word	0x40010000
 80020a8:	40010800 	.word	0x40010800
 80020ac:	40010c00 	.word	0x40010c00
 80020b0:	40011000 	.word	0x40011000
 80020b4:	40011400 	.word	0x40011400
 80020b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020bc:	4b0b      	ldr	r3, [pc, #44]	@ (80020ec <HAL_GPIO_Init+0x304>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	43db      	mvns	r3, r3
 80020c4:	4909      	ldr	r1, [pc, #36]	@ (80020ec <HAL_GPIO_Init+0x304>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	3301      	adds	r3, #1
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d6:	fa22 f303 	lsr.w	r3, r2, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f47f ae8e 	bne.w	8001dfc <HAL_GPIO_Init+0x14>
  }
}
 80020e0:	bf00      	nop
 80020e2:	bf00      	nop
 80020e4:	372c      	adds	r7, #44	@ 0x2c
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr
 80020ec:	40010400 	.word	0x40010400

080020f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
 80020fc:	4613      	mov	r3, r2
 80020fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002100:	787b      	ldrb	r3, [r7, #1]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002106:	887a      	ldrh	r2, [r7, #2]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800210c:	e003      	b.n	8002116 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800210e:	887b      	ldrh	r3, [r7, #2]
 8002110:	041a      	lsls	r2, r3, #16
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	611a      	str	r2, [r3, #16]
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr

08002120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e12b      	b.n	800238a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d106      	bne.n	800214c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff faa4 	bl	8001694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2224      	movs	r2, #36	@ 0x24
 8002150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 0201 	bic.w	r2, r2, #1
 8002162:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002172:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002182:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002184:	f003 f95e 	bl	8005444 <HAL_RCC_GetPCLK1Freq>
 8002188:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	4a81      	ldr	r2, [pc, #516]	@ (8002394 <HAL_I2C_Init+0x274>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d807      	bhi.n	80021a4 <HAL_I2C_Init+0x84>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4a80      	ldr	r2, [pc, #512]	@ (8002398 <HAL_I2C_Init+0x278>)
 8002198:	4293      	cmp	r3, r2
 800219a:	bf94      	ite	ls
 800219c:	2301      	movls	r3, #1
 800219e:	2300      	movhi	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	e006      	b.n	80021b2 <HAL_I2C_Init+0x92>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a7d      	ldr	r2, [pc, #500]	@ (800239c <HAL_I2C_Init+0x27c>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	bf94      	ite	ls
 80021ac:	2301      	movls	r3, #1
 80021ae:	2300      	movhi	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e0e7      	b.n	800238a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	4a78      	ldr	r2, [pc, #480]	@ (80023a0 <HAL_I2C_Init+0x280>)
 80021be:	fba2 2303 	umull	r2, r3, r2, r3
 80021c2:	0c9b      	lsrs	r3, r3, #18
 80021c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002394 <HAL_I2C_Init+0x274>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d802      	bhi.n	80021f4 <HAL_I2C_Init+0xd4>
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	3301      	adds	r3, #1
 80021f2:	e009      	b.n	8002208 <HAL_I2C_Init+0xe8>
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021fa:	fb02 f303 	mul.w	r3, r2, r3
 80021fe:	4a69      	ldr	r2, [pc, #420]	@ (80023a4 <HAL_I2C_Init+0x284>)
 8002200:	fba2 2303 	umull	r2, r3, r2, r3
 8002204:	099b      	lsrs	r3, r3, #6
 8002206:	3301      	adds	r3, #1
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	6812      	ldr	r2, [r2, #0]
 800220c:	430b      	orrs	r3, r1
 800220e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800221a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	495c      	ldr	r1, [pc, #368]	@ (8002394 <HAL_I2C_Init+0x274>)
 8002224:	428b      	cmp	r3, r1
 8002226:	d819      	bhi.n	800225c <HAL_I2C_Init+0x13c>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	1e59      	subs	r1, r3, #1
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fbb1 f3f3 	udiv	r3, r1, r3
 8002236:	1c59      	adds	r1, r3, #1
 8002238:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800223c:	400b      	ands	r3, r1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_I2C_Init+0x138>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1e59      	subs	r1, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002250:	3301      	adds	r3, #1
 8002252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002256:	e051      	b.n	80022fc <HAL_I2C_Init+0x1dc>
 8002258:	2304      	movs	r3, #4
 800225a:	e04f      	b.n	80022fc <HAL_I2C_Init+0x1dc>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d111      	bne.n	8002288 <HAL_I2C_Init+0x168>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1e58      	subs	r0, r3, #1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	440b      	add	r3, r1
 8002272:	fbb0 f3f3 	udiv	r3, r0, r3
 8002276:	3301      	adds	r3, #1
 8002278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800227c:	2b00      	cmp	r3, #0
 800227e:	bf0c      	ite	eq
 8002280:	2301      	moveq	r3, #1
 8002282:	2300      	movne	r3, #0
 8002284:	b2db      	uxtb	r3, r3
 8002286:	e012      	b.n	80022ae <HAL_I2C_Init+0x18e>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1e58      	subs	r0, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	0099      	lsls	r1, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	fbb0 f3f3 	udiv	r3, r0, r3
 800229e:	3301      	adds	r3, #1
 80022a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf0c      	ite	eq
 80022a8:	2301      	moveq	r3, #1
 80022aa:	2300      	movne	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Init+0x196>
 80022b2:	2301      	movs	r3, #1
 80022b4:	e022      	b.n	80022fc <HAL_I2C_Init+0x1dc>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10e      	bne.n	80022dc <HAL_I2C_Init+0x1bc>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1e58      	subs	r0, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6859      	ldr	r1, [r3, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	440b      	add	r3, r1
 80022cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022da:	e00f      	b.n	80022fc <HAL_I2C_Init+0x1dc>
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1e58      	subs	r0, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	0099      	lsls	r1, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80022f2:	3301      	adds	r3, #1
 80022f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	6809      	ldr	r1, [r1, #0]
 8002300:	4313      	orrs	r3, r2
 8002302:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69da      	ldr	r2, [r3, #28]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	430a      	orrs	r2, r1
 800231e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800232a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6911      	ldr	r1, [r2, #16]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68d2      	ldr	r2, [r2, #12]
 8002336:	4311      	orrs	r1, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	430b      	orrs	r3, r1
 800233e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2220      	movs	r2, #32
 8002376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	000186a0 	.word	0x000186a0
 8002398:	001e847f 	.word	0x001e847f
 800239c:	003d08ff 	.word	0x003d08ff
 80023a0:	431bde83 	.word	0x431bde83
 80023a4:	10624dd3 	.word	0x10624dd3

080023a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	4608      	mov	r0, r1
 80023b2:	4611      	mov	r1, r2
 80023b4:	461a      	mov	r2, r3
 80023b6:	4603      	mov	r3, r0
 80023b8:	817b      	strh	r3, [r7, #10]
 80023ba:	460b      	mov	r3, r1
 80023bc:	813b      	strh	r3, [r7, #8]
 80023be:	4613      	mov	r3, r2
 80023c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023c2:	f7ff fbd5 	bl	8001b70 <HAL_GetTick>
 80023c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	f040 80d9 	bne.w	8002588 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2319      	movs	r3, #25
 80023dc:	2201      	movs	r2, #1
 80023de:	496d      	ldr	r1, [pc, #436]	@ (8002594 <HAL_I2C_Mem_Write+0x1ec>)
 80023e0:	68f8      	ldr	r0, [r7, #12]
 80023e2:	f000 fccd 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80023ec:	2302      	movs	r3, #2
 80023ee:	e0cc      	b.n	800258a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_I2C_Mem_Write+0x56>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e0c5      	b.n	800258a <HAL_I2C_Mem_Write+0x1e2>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d007      	beq.n	8002424 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002432:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2221      	movs	r2, #33	@ 0x21
 8002438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2240      	movs	r2, #64	@ 0x40
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a3a      	ldr	r2, [r7, #32]
 800244e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002454:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800245a:	b29a      	uxth	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	4a4d      	ldr	r2, [pc, #308]	@ (8002598 <HAL_I2C_Mem_Write+0x1f0>)
 8002464:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002466:	88f8      	ldrh	r0, [r7, #6]
 8002468:	893a      	ldrh	r2, [r7, #8]
 800246a:	8979      	ldrh	r1, [r7, #10]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	4603      	mov	r3, r0
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fb04 	bl	8002a84 <I2C_RequestMemoryWrite>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d052      	beq.n	8002528 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e081      	b.n	800258a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800248a:	68f8      	ldr	r0, [r7, #12]
 800248c:	f000 fd92 	bl	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00d      	beq.n	80024b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249a:	2b04      	cmp	r3, #4
 800249c:	d107      	bne.n	80024ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e06b      	b.n	800258a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c2:	1c5a      	adds	r2, r3, #1
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	3b01      	subs	r3, #1
 80024dc:	b29a      	uxth	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d11b      	bne.n	8002528 <HAL_I2C_Mem_Write+0x180>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d017      	beq.n	8002528 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fc:	781a      	ldrb	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002508:	1c5a      	adds	r2, r3, #1
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	3b01      	subs	r3, #1
 8002522:	b29a      	uxth	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1aa      	bne.n	8002486 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fd85 	bl	8003044 <I2C_WaitOnBTFFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00d      	beq.n	800255c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002544:	2b04      	cmp	r3, #4
 8002546:	d107      	bne.n	8002558 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002556:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e016      	b.n	800258a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800256a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	e000      	b.n	800258a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002588:	2302      	movs	r3, #2
  }
}
 800258a:	4618      	mov	r0, r3
 800258c:	3718      	adds	r7, #24
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	00100002 	.word	0x00100002
 8002598:	ffff0000 	.word	0xffff0000

0800259c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08c      	sub	sp, #48	@ 0x30
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	4608      	mov	r0, r1
 80025a6:	4611      	mov	r1, r2
 80025a8:	461a      	mov	r2, r3
 80025aa:	4603      	mov	r3, r0
 80025ac:	817b      	strh	r3, [r7, #10]
 80025ae:	460b      	mov	r3, r1
 80025b0:	813b      	strh	r3, [r7, #8]
 80025b2:	4613      	mov	r3, r2
 80025b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025ba:	f7ff fad9 	bl	8001b70 <HAL_GetTick>
 80025be:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b20      	cmp	r3, #32
 80025ca:	f040 8250 	bne.w	8002a6e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2319      	movs	r3, #25
 80025d4:	2201      	movs	r2, #1
 80025d6:	4982      	ldr	r1, [pc, #520]	@ (80027e0 <HAL_I2C_Mem_Read+0x244>)
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fbd1 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80025e4:	2302      	movs	r3, #2
 80025e6:	e243      	b.n	8002a70 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <HAL_I2C_Mem_Read+0x5a>
 80025f2:	2302      	movs	r3, #2
 80025f4:	e23c      	b.n	8002a70 <HAL_I2C_Mem_Read+0x4d4>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b01      	cmp	r3, #1
 800260a:	d007      	beq.n	800261c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800262a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2222      	movs	r2, #34	@ 0x22
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2240      	movs	r2, #64	@ 0x40
 8002638:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002646:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800264c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002652:	b29a      	uxth	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4a62      	ldr	r2, [pc, #392]	@ (80027e4 <HAL_I2C_Mem_Read+0x248>)
 800265c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800265e:	88f8      	ldrh	r0, [r7, #6]
 8002660:	893a      	ldrh	r2, [r7, #8]
 8002662:	8979      	ldrh	r1, [r7, #10]
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	4603      	mov	r3, r0
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 fa9e 	bl	8002bb0 <I2C_RequestMemoryRead>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e1f8      	b.n	8002a70 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002682:	2b00      	cmp	r3, #0
 8002684:	d113      	bne.n	80026ae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	e1cc      	b.n	8002a48 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d11e      	bne.n	80026f4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80026c6:	b672      	cpsid	i
}
 80026c8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80026f0:	b662      	cpsie	i
}
 80026f2:	e035      	b.n	8002760 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d11e      	bne.n	800273a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800270a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800270c:	b672      	cpsid	i
}
 800270e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002734:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002736:	b662      	cpsie	i
}
 8002738:	e012      	b.n	8002760 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002748:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002760:	e172      	b.n	8002a48 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002766:	2b03      	cmp	r3, #3
 8002768:	f200 811f 	bhi.w	80029aa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002770:	2b01      	cmp	r3, #1
 8002772:	d123      	bne.n	80027bc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002776:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 fcab 	bl	80030d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e173      	b.n	8002a70 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	3b01      	subs	r3, #1
 80027b4:	b29a      	uxth	r2, r3
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80027ba:	e145      	b.n	8002a48 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d152      	bne.n	800286a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80027c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ca:	2200      	movs	r2, #0
 80027cc:	4906      	ldr	r1, [pc, #24]	@ (80027e8 <HAL_I2C_Mem_Read+0x24c>)
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 fad6 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d008      	beq.n	80027ec <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e148      	b.n	8002a70 <HAL_I2C_Mem_Read+0x4d4>
 80027de:	bf00      	nop
 80027e0:	00100002 	.word	0x00100002
 80027e4:	ffff0000 	.word	0xffff0000
 80027e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80027ec:	b672      	cpsid	i
}
 80027ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002832:	b662      	cpsie	i
}
 8002834:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	691a      	ldr	r2, [r3, #16]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002868:	e0ee      	b.n	8002a48 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002870:	2200      	movs	r2, #0
 8002872:	4981      	ldr	r1, [pc, #516]	@ (8002a78 <HAL_I2C_Mem_Read+0x4dc>)
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fa83 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0f5      	b.n	8002a70 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002892:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002894:	b672      	cpsid	i
}
 8002896:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691a      	ldr	r2, [r3, #16]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80028ca:	4b6c      	ldr	r3, [pc, #432]	@ (8002a7c <HAL_I2C_Mem_Read+0x4e0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	08db      	lsrs	r3, r3, #3
 80028d0:	4a6b      	ldr	r2, [pc, #428]	@ (8002a80 <HAL_I2C_Mem_Read+0x4e4>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0a1a      	lsrs	r2, r3, #8
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	00da      	lsls	r2, r3, #3
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80028e4:	6a3b      	ldr	r3, [r7, #32]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d118      	bne.n	8002922 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	f043 0220 	orr.w	r2, r3, #32
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002912:	b662      	cpsie	i
}
 8002914:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e0a6      	b.n	8002a70 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b04      	cmp	r3, #4
 800292e:	d1d9      	bne.n	80028e4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800293e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	691a      	ldr	r2, [r3, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800294a:	b2d2      	uxtb	r2, r2
 800294c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295c:	3b01      	subs	r3, #1
 800295e:	b29a      	uxth	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002968:	b29b      	uxth	r3, r3
 800296a:	3b01      	subs	r3, #1
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002972:	b662      	cpsie	i
}
 8002974:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299e:	b29b      	uxth	r3, r3
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029a8:	e04e      	b.n	8002a48 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fb90 	bl	80030d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e058      	b.n	8002a70 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	f003 0304 	and.w	r3, r3, #4
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d124      	bne.n	8002a48 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d107      	bne.n	8002a16 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a14:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a32:	3b01      	subs	r3, #1
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f47f ae88 	bne.w	8002762 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e000      	b.n	8002a70 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
  }
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3728      	adds	r7, #40	@ 0x28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	00010004 	.word	0x00010004
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	14f8b589 	.word	0x14f8b589

08002a84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	4611      	mov	r1, r2
 8002a90:	461a      	mov	r2, r3
 8002a92:	4603      	mov	r3, r0
 8002a94:	817b      	strh	r3, [r7, #10]
 8002a96:	460b      	mov	r3, r1
 8002a98:	813b      	strh	r3, [r7, #8]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	6a3b      	ldr	r3, [r7, #32]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 f960 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00d      	beq.n	8002ae2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ad4:	d103      	bne.n	8002ade <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002adc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e05f      	b.n	8002ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ae2:	897b      	ldrh	r3, [r7, #10]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002af0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af4:	6a3a      	ldr	r2, [r7, #32]
 8002af6:	492d      	ldr	r1, [pc, #180]	@ (8002bac <I2C_RequestMemoryWrite+0x128>)
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f9bb 	bl	8002e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e04c      	b.n	8002ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b20:	6a39      	ldr	r1, [r7, #32]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 fa46 	bl	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00d      	beq.n	8002b4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d107      	bne.n	8002b46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e02b      	b.n	8002ba2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b4a:	88fb      	ldrh	r3, [r7, #6]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d105      	bne.n	8002b5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b50:	893b      	ldrh	r3, [r7, #8]
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	611a      	str	r2, [r3, #16]
 8002b5a:	e021      	b.n	8002ba0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b5c:	893b      	ldrh	r3, [r7, #8]
 8002b5e:	0a1b      	lsrs	r3, r3, #8
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b6c:	6a39      	ldr	r1, [r7, #32]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fa20 	bl	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00d      	beq.n	8002b96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d107      	bne.n	8002b92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e005      	b.n	8002ba2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b96:	893b      	ldrh	r3, [r7, #8]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	00010002 	.word	0x00010002

08002bb0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	4608      	mov	r0, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	817b      	strh	r3, [r7, #10]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	813b      	strh	r3, [r7, #8]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002be8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f8c2 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00d      	beq.n	8002c1e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c10:	d103      	bne.n	8002c1a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c18:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e0aa      	b.n	8002d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c1e:	897b      	ldrh	r3, [r7, #10]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	461a      	mov	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c30:	6a3a      	ldr	r2, [r7, #32]
 8002c32:	4952      	ldr	r1, [pc, #328]	@ (8002d7c <I2C_RequestMemoryRead+0x1cc>)
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f91d 	bl	8002e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e097      	b.n	8002d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	617b      	str	r3, [r7, #20]
 8002c58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c5c:	6a39      	ldr	r1, [r7, #32]
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 f9a8 	bl	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00d      	beq.n	8002c86 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d107      	bne.n	8002c82 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e076      	b.n	8002d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d105      	bne.n	8002c98 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c8c:	893b      	ldrh	r3, [r7, #8]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	611a      	str	r2, [r3, #16]
 8002c96:	e021      	b.n	8002cdc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c98:	893b      	ldrh	r3, [r7, #8]
 8002c9a:	0a1b      	lsrs	r3, r3, #8
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ca8:	6a39      	ldr	r1, [r7, #32]
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 f982 	bl	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00d      	beq.n	8002cd2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d107      	bne.n	8002cce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ccc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e050      	b.n	8002d74 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cd2:	893b      	ldrh	r3, [r7, #8]
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cde:	6a39      	ldr	r1, [r7, #32]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f967 	bl	8002fb4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00d      	beq.n	8002d08 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d107      	bne.n	8002d04 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d02:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e035      	b.n	8002d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d16:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f82b 	bl	8002d80 <I2C_WaitOnFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00d      	beq.n	8002d4c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d3e:	d103      	bne.n	8002d48 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e013      	b.n	8002d74 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d4c:	897b      	ldrh	r3, [r7, #10]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5e:	6a3a      	ldr	r2, [r7, #32]
 8002d60:	4906      	ldr	r1, [pc, #24]	@ (8002d7c <I2C_RequestMemoryRead+0x1cc>)
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f886 	bl	8002e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	00010002 	.word	0x00010002

08002d80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d90:	e048      	b.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d044      	beq.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9a:	f7fe fee9 	bl	8001b70 <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d302      	bcc.n	8002db0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d139      	bne.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	0c1b      	lsrs	r3, r3, #16
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d10d      	bne.n	8002dd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bf0c      	ite	eq
 8002dcc:	2301      	moveq	r3, #1
 8002dce:	2300      	movne	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	e00c      	b.n	8002df0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	43da      	mvns	r2, r3
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	4013      	ands	r3, r2
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf0c      	ite	eq
 8002de8:	2301      	moveq	r3, #1
 8002dea:	2300      	movne	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	79fb      	ldrb	r3, [r7, #7]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d116      	bne.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e10:	f043 0220 	orr.w	r2, r3, #32
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e023      	b.n	8002e6c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	0c1b      	lsrs	r3, r3, #16
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d10d      	bne.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	43da      	mvns	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	e00c      	b.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	43da      	mvns	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4013      	ands	r3, r2
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d093      	beq.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e82:	e071      	b.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e92:	d123      	bne.n	8002edc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002eac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e067      	b.n	8002fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee2:	d041      	beq.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee4:	f7fe fe44 	bl	8001b70 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d302      	bcc.n	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d136      	bne.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	0c1b      	lsrs	r3, r3, #16
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d10c      	bne.n	8002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	43da      	mvns	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	bf14      	ite	ne
 8002f16:	2301      	movne	r3, #1
 8002f18:	2300      	moveq	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	e00b      	b.n	8002f36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	43da      	mvns	r2, r3
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	bf14      	ite	ne
 8002f30:	2301      	movne	r3, #1
 8002f32:	2300      	moveq	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d016      	beq.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	f043 0220 	orr.w	r2, r3, #32
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e021      	b.n	8002fac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	0c1b      	lsrs	r3, r3, #16
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d10c      	bne.n	8002f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	43da      	mvns	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf14      	ite	ne
 8002f84:	2301      	movne	r3, #1
 8002f86:	2300      	moveq	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e00b      	b.n	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	43da      	mvns	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4013      	ands	r3, r2
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf14      	ite	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	2300      	moveq	r3, #0
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f47f af6d 	bne.w	8002e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fc0:	e034      	b.n	800302c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f8e3 	bl	800318e <I2C_IsAcknowledgeFailed>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e034      	b.n	800303c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d028      	beq.n	800302c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fda:	f7fe fdc9 	bl	8001b70 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d302      	bcc.n	8002ff0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d11d      	bne.n	800302c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffa:	2b80      	cmp	r3, #128	@ 0x80
 8002ffc:	d016      	beq.n	800302c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	f043 0220 	orr.w	r2, r3, #32
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e007      	b.n	800303c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003036:	2b80      	cmp	r3, #128	@ 0x80
 8003038:	d1c3      	bne.n	8002fc2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003050:	e034      	b.n	80030bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f000 f89b 	bl	800318e <I2C_IsAcknowledgeFailed>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e034      	b.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d028      	beq.n	80030bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306a:	f7fe fd81 	bl	8001b70 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	68ba      	ldr	r2, [r7, #8]
 8003076:	429a      	cmp	r2, r3
 8003078:	d302      	bcc.n	8003080 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d11d      	bne.n	80030bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	2b04      	cmp	r3, #4
 800308c:	d016      	beq.n	80030bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e007      	b.n	80030cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d1c3      	bne.n	8003052 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030e0:	e049      	b.n	8003176 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	695b      	ldr	r3, [r3, #20]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b10      	cmp	r3, #16
 80030ee:	d119      	bne.n	8003124 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0210 	mvn.w	r2, #16
 80030f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e030      	b.n	8003186 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003124:	f7fe fd24 	bl	8001b70 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	429a      	cmp	r2, r3
 8003132:	d302      	bcc.n	800313a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d11d      	bne.n	8003176 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003144:	2b40      	cmp	r3, #64	@ 0x40
 8003146:	d016      	beq.n	8003176 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2220      	movs	r2, #32
 8003152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	f043 0220 	orr.w	r2, r3, #32
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e007      	b.n	8003186 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003180:	2b40      	cmp	r3, #64	@ 0x40
 8003182:	d1ae      	bne.n	80030e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a4:	d11b      	bne.n	80031de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2220      	movs	r2, #32
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	f043 0204 	orr.w	r2, r3, #4
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e000      	b.n	80031e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0e8      	b.n	80033ce <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f006 fc33 	bl	8009a7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2203      	movs	r2, #3
 800321a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f002 fa9a 	bl	8005762 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3304      	adds	r3, #4
 8003236:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003238:	f002 fa70 	bl	800571c <USB_CoreInit>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d005      	beq.n	800324e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e0bf      	b.n	80033ce <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2100      	movs	r1, #0
 8003254:	4618      	mov	r0, r3
 8003256:	f002 fa9e 	bl	8005796 <USB_SetCurrentMode>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0b0      	b.n	80033ce <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]
 8003270:	e03e      	b.n	80032f0 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003272:	7bfa      	ldrb	r2, [r7, #15]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	440b      	add	r3, r1
 8003280:	3311      	adds	r3, #17
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003286:	7bfa      	ldrb	r2, [r7, #15]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	440b      	add	r3, r1
 8003294:	3310      	adds	r3, #16
 8003296:	7bfa      	ldrb	r2, [r7, #15]
 8003298:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	00db      	lsls	r3, r3, #3
 80032a6:	440b      	add	r3, r1
 80032a8:	3313      	adds	r3, #19
 80032aa:	2200      	movs	r2, #0
 80032ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	440b      	add	r3, r1
 80032bc:	3320      	adds	r3, #32
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032c2:	7bfa      	ldrb	r2, [r7, #15]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	440b      	add	r3, r1
 80032d0:	3324      	adds	r3, #36	@ 0x24
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	1c5a      	adds	r2, r3, #1
 80032dc:	4613      	mov	r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	440b      	add	r3, r1
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
 80032ec:	3301      	adds	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	791b      	ldrb	r3, [r3, #4]
 80032f4:	7bfa      	ldrb	r2, [r7, #15]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d3bb      	bcc.n	8003272 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032fa:	2300      	movs	r3, #0
 80032fc:	73fb      	strb	r3, [r7, #15]
 80032fe:	e044      	b.n	800338a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003300:	7bfa      	ldrb	r2, [r7, #15]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	440b      	add	r3, r1
 800330e:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	440b      	add	r3, r1
 8003324:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	440b      	add	r3, r1
 800333a:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	4413      	add	r3, r2
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	440b      	add	r3, r1
 8003350:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	4413      	add	r3, r2
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	440b      	add	r3, r1
 8003366:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	4413      	add	r3, r2
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	440b      	add	r3, r1
 800337c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003384:	7bfb      	ldrb	r3, [r7, #15]
 8003386:	3301      	adds	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	791b      	ldrb	r3, [r3, #4]
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	429a      	cmp	r2, r3
 8003392:	d3b5      	bcc.n	8003300 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3304      	adds	r3, #4
 800339c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800339e:	f002 fa06 	bl	80057ae <USB_DevInit>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e00c      	b.n	80033ce <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f004 fc85 	bl	8007cd6 <USB_DevDisconnect>

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_PCD_Start+0x16>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e016      	b.n	800341a <HAL_PCD_Start+0x44>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f002 f99c 	bl	8005736 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80033fe:	2101      	movs	r1, #1
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f006 fdae 	bl	8009f62 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f004 fc59 	bl	8007cc2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b088      	sub	sp, #32
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f004 fc5b 	bl	8007cea <USB_ReadInterrupts>
 8003434:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 fb1a 	bl	8003a7a <PCD_EP_ISR_Handler>

    return;
 8003446:	e119      	b.n	800367c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003448:	69bb      	ldr	r3, [r7, #24]
 800344a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344e:	2b00      	cmp	r3, #0
 8003450:	d013      	beq.n	800347a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800345a:	b29a      	uxth	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003464:	b292      	uxth	r2, r2
 8003466:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f006 fb81 	bl	8009b72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003470:	2100      	movs	r1, #0
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f905 	bl	8003682 <HAL_PCD_SetAddress>

    return;
 8003478:	e100      	b.n	800367c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00c      	beq.n	800349e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800348c:	b29a      	uxth	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003496:	b292      	uxth	r2, r2
 8003498:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800349c:	e0ee      	b.n	800367c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00c      	beq.n	80034c2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034ba:	b292      	uxth	r2, r2
 80034bc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80034c0:	e0dc      	b.n	800367c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d027      	beq.n	800351c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0204 	bic.w	r2, r2, #4
 80034de:	b292      	uxth	r2, r2
 80034e0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0208 	bic.w	r2, r2, #8
 80034f6:	b292      	uxth	r2, r2
 80034f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	f006 fb71 	bl	8009be4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800350a:	b29a      	uxth	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003514:	b292      	uxth	r2, r2
 8003516:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800351a:	e0af      	b.n	800367c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 8083 	beq.w	800362e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003528:	2300      	movs	r3, #0
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e010      	b.n	8003550 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	7ffb      	ldrb	r3, [r7, #31]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	441a      	add	r2, r3
 800353a:	7ffb      	ldrb	r3, [r7, #31]
 800353c:	8812      	ldrh	r2, [r2, #0]
 800353e:	b292      	uxth	r2, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	3320      	adds	r3, #32
 8003544:	443b      	add	r3, r7
 8003546:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 800354a:	7ffb      	ldrb	r3, [r7, #31]
 800354c:	3301      	adds	r3, #1
 800354e:	77fb      	strb	r3, [r7, #31]
 8003550:	7ffb      	ldrb	r3, [r7, #31]
 8003552:	2b07      	cmp	r3, #7
 8003554:	d9eb      	bls.n	800352e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800355e:	b29a      	uxth	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f042 0201 	orr.w	r2, r2, #1
 8003568:	b292      	uxth	r2, r2
 800356a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003576:	b29a      	uxth	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0201 	bic.w	r2, r2, #1
 8003580:	b292      	uxth	r2, r2
 8003582:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003586:	bf00      	nop
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003590:	b29b      	uxth	r3, r3
 8003592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f6      	beq.n	8003588 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035ac:	b292      	uxth	r2, r2
 80035ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80035b2:	2300      	movs	r3, #0
 80035b4:	77fb      	strb	r3, [r7, #31]
 80035b6:	e00f      	b.n	80035d8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80035b8:	7ffb      	ldrb	r3, [r7, #31]
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6812      	ldr	r2, [r2, #0]
 80035be:	4611      	mov	r1, r2
 80035c0:	7ffa      	ldrb	r2, [r7, #31]
 80035c2:	0092      	lsls	r2, r2, #2
 80035c4:	440a      	add	r2, r1
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	3320      	adds	r3, #32
 80035ca:	443b      	add	r3, r7
 80035cc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80035d0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80035d2:	7ffb      	ldrb	r3, [r7, #31]
 80035d4:	3301      	adds	r3, #1
 80035d6:	77fb      	strb	r3, [r7, #31]
 80035d8:	7ffb      	ldrb	r3, [r7, #31]
 80035da:	2b07      	cmp	r3, #7
 80035dc:	d9ec      	bls.n	80035b8 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f042 0208 	orr.w	r2, r2, #8
 80035f0:	b292      	uxth	r2, r2
 80035f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035fe:	b29a      	uxth	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003608:	b292      	uxth	r2, r2
 800360a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003616:	b29a      	uxth	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0204 	orr.w	r2, r2, #4
 8003620:	b292      	uxth	r2, r2
 8003622:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f006 fac2 	bl	8009bb0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800362c:	e026      	b.n	800367c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00f      	beq.n	8003658 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003640:	b29a      	uxth	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800364a:	b292      	uxth	r2, r2
 800364c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f006 fa80 	bl	8009b56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003656:	e011      	b.n	800367c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00c      	beq.n	800367c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800366a:	b29a      	uxth	r2, r3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003674:	b292      	uxth	r2, r2
 8003676:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800367a:	bf00      	nop
  }
}
 800367c:	3720      	adds	r7, #32
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
 800368a:	460b      	mov	r3, r1
 800368c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <HAL_PCD_SetAddress+0x1a>
 8003698:	2302      	movs	r3, #2
 800369a:	e012      	b.n	80036c2 <HAL_PCD_SetAddress+0x40>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	78fa      	ldrb	r2, [r7, #3]
 80036b0:	4611      	mov	r1, r2
 80036b2:	4618      	mov	r0, r3
 80036b4:	f004 faf2 	bl	8007c9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b084      	sub	sp, #16
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	4608      	mov	r0, r1
 80036d4:	4611      	mov	r1, r2
 80036d6:	461a      	mov	r2, r3
 80036d8:	4603      	mov	r3, r0
 80036da:	70fb      	strb	r3, [r7, #3]
 80036dc:	460b      	mov	r3, r1
 80036de:	803b      	strh	r3, [r7, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	da0e      	bge.n	800370e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	f003 0207 	and.w	r2, r3, #7
 80036f6:	4613      	mov	r3, r2
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	3310      	adds	r3, #16
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	4413      	add	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	705a      	strb	r2, [r3, #1]
 800370c:	e00e      	b.n	800372c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	f003 0207 	and.w	r2, r3, #7
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	4413      	add	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	f003 0307 	and.w	r3, r3, #7
 8003732:	b2da      	uxtb	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003738:	883a      	ldrh	r2, [r7, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	78ba      	ldrb	r2, [r7, #2]
 8003742:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003744:	78bb      	ldrb	r3, [r7, #2]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d102      	bne.n	8003750 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003756:	2b01      	cmp	r3, #1
 8003758:	d101      	bne.n	800375e <HAL_PCD_EP_Open+0x94>
 800375a:	2302      	movs	r3, #2
 800375c:	e00e      	b.n	800377c <HAL_PCD_EP_Open+0xb2>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68f9      	ldr	r1, [r7, #12]
 800376c:	4618      	mov	r0, r3
 800376e:	f002 f83b 	bl	80057e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800377a:	7afb      	ldrb	r3, [r7, #11]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	460b      	mov	r3, r1
 800378e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003790:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003794:	2b00      	cmp	r3, #0
 8003796:	da0e      	bge.n	80037b6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003798:	78fb      	ldrb	r3, [r7, #3]
 800379a:	f003 0207 	and.w	r2, r3, #7
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	3310      	adds	r3, #16
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	4413      	add	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2201      	movs	r2, #1
 80037b2:	705a      	strb	r2, [r3, #1]
 80037b4:	e00e      	b.n	80037d4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037b6:	78fb      	ldrb	r3, [r7, #3]
 80037b8:	f003 0207 	and.w	r2, r3, #7
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	4413      	add	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_PCD_EP_Close+0x6a>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e00e      	b.n	800380c <HAL_PCD_EP_Close+0x88>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68f9      	ldr	r1, [r7, #12]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f002 fbb3 	bl	8005f68 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	460b      	mov	r3, r1
 8003822:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003824:	7afb      	ldrb	r3, [r7, #11]
 8003826:	f003 0207 	and.w	r2, r3, #7
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4413      	add	r3, r2
 800383a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	2200      	movs	r2, #0
 800384c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	2200      	movs	r2, #0
 8003852:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003854:	7afb      	ldrb	r3, [r7, #11]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	b2da      	uxtb	r2, r3
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6979      	ldr	r1, [r7, #20]
 8003866:	4618      	mov	r0, r3
 8003868:	f002 fd6a 	bl	8006340 <USB_EPStartXfer>

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	f003 0207 	and.w	r2, r3, #7
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	440b      	add	r3, r1
 8003894:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8003898:	681b      	ldr	r3, [r3, #0]
}
 800389a:	4618      	mov	r0, r3
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	607a      	str	r2, [r7, #4]
 80038ae:	603b      	str	r3, [r7, #0]
 80038b0:	460b      	mov	r3, r1
 80038b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038b4:	7afb      	ldrb	r3, [r7, #11]
 80038b6:	f003 0207 	and.w	r2, r3, #7
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	3310      	adds	r3, #16
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	683a      	ldr	r2, [r7, #0]
 80038e2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2200      	movs	r2, #0
 80038e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2201      	movs	r2, #1
 80038ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038f0:	7afb      	ldrb	r3, [r7, #11]
 80038f2:	f003 0307 	and.w	r3, r3, #7
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6979      	ldr	r1, [r7, #20]
 8003902:	4618      	mov	r0, r3
 8003904:	f002 fd1c 	bl	8006340 <USB_EPStartXfer>

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	7912      	ldrb	r2, [r2, #4]
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e04c      	b.n	80039ca <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003934:	2b00      	cmp	r3, #0
 8003936:	da0e      	bge.n	8003956 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003938:	78fb      	ldrb	r3, [r7, #3]
 800393a:	f003 0207 	and.w	r2, r3, #7
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	3310      	adds	r3, #16
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	4413      	add	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2201      	movs	r2, #1
 8003952:	705a      	strb	r2, [r3, #1]
 8003954:	e00c      	b.n	8003970 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	4613      	mov	r3, r2
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	4413      	add	r3, r2
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	4413      	add	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2201      	movs	r2, #1
 8003974:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003976:	78fb      	ldrb	r3, [r7, #3]
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	b2da      	uxtb	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003988:	2b01      	cmp	r3, #1
 800398a:	d101      	bne.n	8003990 <HAL_PCD_EP_SetStall+0x7e>
 800398c:	2302      	movs	r3, #2
 800398e:	e01c      	b.n	80039ca <HAL_PCD_EP_SetStall+0xb8>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68f9      	ldr	r1, [r7, #12]
 800399e:	4618      	mov	r0, r3
 80039a0:	f004 f87f 	bl	8007aa2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d108      	bne.n	80039c0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80039b8:	4619      	mov	r1, r3
 80039ba:	4610      	mov	r0, r2
 80039bc:	f004 f9a4 	bl	8007d08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	460b      	mov	r3, r1
 80039dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	7912      	ldrb	r2, [r2, #4]
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d901      	bls.n	80039f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e040      	b.n	8003a72 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	da0e      	bge.n	8003a16 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f8:	78fb      	ldrb	r3, [r7, #3]
 80039fa:	f003 0207 	and.w	r2, r3, #7
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	3310      	adds	r3, #16
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	705a      	strb	r2, [r3, #1]
 8003a14:	e00e      	b.n	8003a34 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	f003 0207 	and.w	r2, r3, #7
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_PCD_EP_ClrStall+0x82>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e00e      	b.n	8003a72 <HAL_PCD_EP_ClrStall+0xa0>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68f9      	ldr	r1, [r7, #12]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f004 f86d 	bl	8007b42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b096      	sub	sp, #88	@ 0x58
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a82:	e3bb      	b.n	80041fc <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a8c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003a90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003a9e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f040 8175 	bne.w	8003d92 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003aa8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003aac:	f003 0310 	and.w	r3, r3, #16
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d14e      	bne.n	8003b52 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	881b      	ldrh	r3, [r3, #0]
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003ac0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ac4:	81fb      	strh	r3, [r7, #14]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	89fb      	ldrh	r3, [r7, #14]
 8003acc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ad0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3310      	adds	r3, #16
 8003adc:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	461a      	mov	r2, r3
 8003aea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	4413      	add	r3, r2
 8003af2:	3302      	adds	r3, #2
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b08:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b0c:	695a      	ldr	r2, [r3, #20]
 8003b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b10:	69db      	ldr	r3, [r3, #28]
 8003b12:	441a      	add	r2, r3
 8003b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b16:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003b18:	2100      	movs	r1, #0
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f006 f801 	bl	8009b22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	7b5b      	ldrb	r3, [r3, #13]
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f000 8368 	beq.w	80041fc <PCD_EP_ISR_Handler+0x782>
 8003b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f040 8363 	bne.w	80041fc <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	7b5b      	ldrb	r3, [r3, #13]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b40:	b2da      	uxtb	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	735a      	strb	r2, [r3, #13]
 8003b50:	e354      	b.n	80041fc <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b58:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003b64:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003b68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d034      	beq.n	8003bda <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	4413      	add	r3, r2
 8003b84:	3306      	adds	r3, #6
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6818      	ldr	r0, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bac:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	f004 f8fa 	bl	8007da8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	823b      	strh	r3, [r7, #16]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	8a3a      	ldrh	r2, [r7, #16]
 8003bca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bce:	b292      	uxth	r2, r2
 8003bd0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f005 ff78 	bl	8009ac8 <HAL_PCD_SetupStageCallback>
 8003bd8:	e310      	b.n	80041fc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003bda:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f280 830c 	bge.w	80041fc <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	881b      	ldrh	r3, [r3, #0]
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	83fb      	strh	r3, [r7, #30]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	8bfa      	ldrh	r2, [r7, #30]
 8003bfa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003bfe:	b292      	uxth	r2, r2
 8003c00:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	4413      	add	r3, r2
 8003c16:	3306      	adds	r3, #6
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c24:	881b      	ldrh	r3, [r3, #0]
 8003c26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c2c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d019      	beq.n	8003c6a <PCD_EP_ISR_Handler+0x1f0>
 8003c36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d015      	beq.n	8003c6a <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c44:	6959      	ldr	r1, [r3, #20]
 8003c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c48:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f004 f8aa 	bl	8007da8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c56:	695a      	ldr	r2, [r3, #20]
 8003c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c5a:	69db      	ldr	r3, [r3, #28]
 8003c5c:	441a      	add	r2, r3
 8003c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c60:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003c62:	2100      	movs	r1, #0
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f005 ff41 	bl	8009aec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003c74:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f040 82bd 	bne.w	80041fc <PCD_EP_ISR_Handler+0x782>
 8003c82:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003c86:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003c8a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003c8e:	f000 82b5 	beq.w	80041fc <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	801a      	strh	r2, [r3, #0]
 8003cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cc8:	d91d      	bls.n	8003d06 <PCD_EP_ISR_Handler+0x28c>
 8003cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	095b      	lsrs	r3, r3, #5
 8003cd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	f003 031f 	and.w	r3, r3, #31
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <PCD_EP_ISR_Handler+0x26a>
 8003cde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	881b      	ldrh	r3, [r3, #0]
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	029b      	lsls	r3, r3, #10
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	801a      	strh	r2, [r3, #0]
 8003d04:	e026      	b.n	8003d54 <PCD_EP_ISR_Handler+0x2da>
 8003d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <PCD_EP_ISR_Handler+0x2aa>
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	881b      	ldrh	r3, [r3, #0]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	801a      	strh	r2, [r3, #0]
 8003d22:	e017      	b.n	8003d54 <PCD_EP_ISR_Handler+0x2da>
 8003d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <PCD_EP_ISR_Handler+0x2c4>
 8003d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	029b      	lsls	r3, r3, #10
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d64:	827b      	strh	r3, [r7, #18]
 8003d66:	8a7b      	ldrh	r3, [r7, #18]
 8003d68:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003d6c:	827b      	strh	r3, [r7, #18]
 8003d6e:	8a7b      	ldrh	r3, [r7, #18]
 8003d70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003d74:	827b      	strh	r3, [r7, #18]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	8a7b      	ldrh	r3, [r7, #18]
 8003d7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003d80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003d84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	8013      	strh	r3, [r2, #0]
 8003d90:	e234      	b.n	80041fc <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003da6:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f280 80fc 	bge.w	8003fa8 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	461a      	mov	r2, r3
 8003db6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003dde:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003de2:	b292      	uxth	r2, r2
 8003de4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003de6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003dea:	4613      	mov	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	4413      	add	r3, r2
 8003dfa:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003dfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfe:	7b1b      	ldrb	r3, [r3, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d125      	bne.n	8003e50 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	4413      	add	r3, r2
 8003e18:	3306      	adds	r3, #6
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e2c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003e30:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 8092 	beq.w	8003f5e <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6818      	ldr	r0, [r3, #0]
 8003e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e40:	6959      	ldr	r1, [r3, #20]
 8003e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e44:	88da      	ldrh	r2, [r3, #6]
 8003e46:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003e4a:	f003 ffad 	bl	8007da8 <USB_ReadPMA>
 8003e4e:	e086      	b.n	8003f5e <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e52:	78db      	ldrb	r3, [r3, #3]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d10a      	bne.n	8003e6e <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003e58:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f9d9 	bl	8004218 <HAL_PCD_EP_DB_Receive>
 8003e66:	4603      	mov	r3, r0
 8003e68:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003e6c:	e077      	b.n	8003f5e <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	4413      	add	r3, r2
 8003e7c:	881b      	ldrh	r3, [r3, #0]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e88:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	461a      	mov	r2, r3
 8003e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	441a      	add	r2, r3
 8003e9a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003e9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ea2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ea6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eaa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d024      	beq.n	8003f16 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	4413      	add	r3, r2
 8003ee0:	3302      	adds	r3, #2
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ef4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003ef8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d02e      	beq.n	8003f5e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f06:	6959      	ldr	r1, [r3, #20]
 8003f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0a:	891a      	ldrh	r2, [r3, #8]
 8003f0c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f10:	f003 ff4a 	bl	8007da8 <USB_ReadPMA>
 8003f14:	e023      	b.n	8003f5e <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	461a      	mov	r2, r3
 8003f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	4413      	add	r3, r2
 8003f2a:	3306      	adds	r3, #6
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	6812      	ldr	r2, [r2, #0]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f3e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003f42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d009      	beq.n	8003f5e <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f50:	6959      	ldr	r1, [r3, #20]
 8003f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f54:	895a      	ldrh	r2, [r3, #10]
 8003f56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f5a:	f003 ff25 	bl	8007da8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003f5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f60:	69da      	ldr	r2, [r3, #28]
 8003f62:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f66:	441a      	add	r2, r3
 8003f68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f6a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003f6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f74:	441a      	add	r2, r3
 8003f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f78:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <PCD_EP_ISR_Handler+0x514>
 8003f82:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d206      	bcs.n	8003f9c <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f005 fda9 	bl	8009aec <HAL_PCD_DataOutStageCallback>
 8003f9a:	e005      	b.n	8003fa8 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f002 f9cc 	bl	8006340 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003fa8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 8123 	beq.w	80041fc <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003fb6:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003fba:	4613      	mov	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	3310      	adds	r3, #16
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	881b      	ldrh	r3, [r3, #0]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	441a      	add	r2, r3
 8003ff6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003ffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004002:	b29b      	uxth	r3, r3
 8004004:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004008:	78db      	ldrb	r3, [r3, #3]
 800400a:	2b01      	cmp	r3, #1
 800400c:	f040 80a2 	bne.w	8004154 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004012:	2200      	movs	r2, #0
 8004014:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004018:	7b1b      	ldrb	r3, [r3, #12]
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 8093 	beq.w	8004146 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004020:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d046      	beq.n	80040ba <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800402c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800402e:	785b      	ldrb	r3, [r3, #1]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d126      	bne.n	8004082 <PCD_EP_ISR_Handler+0x608>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004042:	b29b      	uxth	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	4413      	add	r3, r2
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
 800404c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	011a      	lsls	r2, r3, #4
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	4413      	add	r3, r2
 8004056:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800405a:	623b      	str	r3, [r7, #32]
 800405c:	6a3b      	ldr	r3, [r7, #32]
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	b29b      	uxth	r3, r3
 8004062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004066:	b29a      	uxth	r2, r3
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800407a:	b29a      	uxth	r2, r3
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	801a      	strh	r2, [r3, #0]
 8004080:	e061      	b.n	8004146 <PCD_EP_ISR_Handler+0x6cc>
 8004082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004084:	785b      	ldrb	r3, [r3, #1]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d15d      	bne.n	8004146 <PCD_EP_ISR_Handler+0x6cc>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004098:	b29b      	uxth	r3, r3
 800409a:	461a      	mov	r2, r3
 800409c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800409e:	4413      	add	r3, r2
 80040a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	011a      	lsls	r2, r3, #4
 80040a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040aa:	4413      	add	r3, r2
 80040ac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b4:	2200      	movs	r2, #0
 80040b6:	801a      	strh	r2, [r3, #0]
 80040b8:	e045      	b.n	8004146 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c2:	785b      	ldrb	r3, [r3, #1]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d126      	bne.n	8004116 <PCD_EP_ISR_Handler+0x69c>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	461a      	mov	r2, r3
 80040da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040dc:	4413      	add	r3, r2
 80040de:	637b      	str	r3, [r7, #52]	@ 0x34
 80040e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	011a      	lsls	r2, r3, #4
 80040e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e8:	4413      	add	r3, r2
 80040ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80040f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f2:	881b      	ldrh	r3, [r3, #0]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fe:	801a      	strh	r2, [r3, #0]
 8004100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800410a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800410e:	b29a      	uxth	r2, r3
 8004110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004112:	801a      	strh	r2, [r3, #0]
 8004114:	e017      	b.n	8004146 <PCD_EP_ISR_Handler+0x6cc>
 8004116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004118:	785b      	ldrb	r3, [r3, #1]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d113      	bne.n	8004146 <PCD_EP_ISR_Handler+0x6cc>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004126:	b29b      	uxth	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800412c:	4413      	add	r3, r2
 800412e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	011a      	lsls	r2, r3, #4
 8004136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004138:	4413      	add	r3, r2
 800413a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800413e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004142:	2200      	movs	r2, #0
 8004144:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004146:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	4619      	mov	r1, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f005 fce8 	bl	8009b22 <HAL_PCD_DataInStageCallback>
 8004152:	e053      	b.n	80041fc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004154:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800415c:	2b00      	cmp	r3, #0
 800415e:	d146      	bne.n	80041ee <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004168:	b29b      	uxth	r3, r3
 800416a:	461a      	mov	r2, r3
 800416c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	4413      	add	r3, r2
 8004174:	3302      	adds	r3, #2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004188:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800418c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800418e:	699a      	ldr	r2, [r3, #24]
 8004190:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004194:	429a      	cmp	r2, r3
 8004196:	d907      	bls.n	80041a8 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8004198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800419a:	699a      	ldr	r2, [r3, #24]
 800419c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80041a0:	1ad2      	subs	r2, r2, r3
 80041a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a4:	619a      	str	r2, [r3, #24]
 80041a6:	e002      	b.n	80041ae <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80041a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041aa:	2200      	movs	r2, #0
 80041ac:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80041ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	4619      	mov	r1, r3
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f005 fcb0 	bl	8009b22 <HAL_PCD_DataInStageCallback>
 80041c2:	e01b      	b.n	80041fc <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80041c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c6:	695a      	ldr	r2, [r3, #20]
 80041c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80041cc:	441a      	add	r2, r3
 80041ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80041d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80041da:	441a      	add	r2, r3
 80041dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041de:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041e6:	4618      	mov	r0, r3
 80041e8:	f002 f8aa 	bl	8006340 <USB_EPStartXfer>
 80041ec:	e006      	b.n	80041fc <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80041ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80041f2:	461a      	mov	r2, r3
 80041f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f91b 	bl	8004432 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004204:	b29b      	uxth	r3, r3
 8004206:	b21b      	sxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	f6ff ac3b 	blt.w	8003a84 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3758      	adds	r7, #88	@ 0x58
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	4613      	mov	r3, r2
 8004224:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004226:	88fb      	ldrh	r3, [r7, #6]
 8004228:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d07e      	beq.n	800432e <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004238:	b29b      	uxth	r3, r3
 800423a:	461a      	mov	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4413      	add	r3, r2
 8004244:	3302      	adds	r3, #2
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	6812      	ldr	r2, [r2, #0]
 800424c:	4413      	add	r3, r2
 800424e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004258:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	699a      	ldr	r2, [r3, #24]
 800425e:	8b7b      	ldrh	r3, [r7, #26]
 8004260:	429a      	cmp	r2, r3
 8004262:	d306      	bcc.n	8004272 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	8b7b      	ldrh	r3, [r7, #26]
 800426a:	1ad2      	subs	r2, r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	619a      	str	r2, [r3, #24]
 8004270:	e002      	b.n	8004278 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	2200      	movs	r2, #0
 8004276:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d123      	bne.n	80042c8 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	461a      	mov	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800429a:	833b      	strh	r3, [r7, #24]
 800429c:	8b3b      	ldrh	r3, [r7, #24]
 800429e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80042a2:	833b      	strh	r3, [r7, #24]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	441a      	add	r2, r3
 80042b2:	8b3b      	ldrh	r3, [r7, #24]
 80042b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80042b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80042bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01f      	beq.n	8004312 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	4413      	add	r3, r2
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ec:	82fb      	strh	r3, [r7, #22]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	441a      	add	r2, r3
 80042fc:	8afb      	ldrh	r3, [r7, #22]
 80042fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004302:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004306:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800430a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800430e:	b29b      	uxth	r3, r3
 8004310:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004312:	8b7b      	ldrh	r3, [r7, #26]
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8087 	beq.w	8004428 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6959      	ldr	r1, [r3, #20]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	891a      	ldrh	r2, [r3, #8]
 8004326:	8b7b      	ldrh	r3, [r7, #26]
 8004328:	f003 fd3e 	bl	8007da8 <USB_ReadPMA>
 800432c:	e07c      	b.n	8004428 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004336:	b29b      	uxth	r3, r3
 8004338:	461a      	mov	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	3306      	adds	r3, #6
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004350:	881b      	ldrh	r3, [r3, #0]
 8004352:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004356:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	8b7b      	ldrh	r3, [r7, #26]
 800435e:	429a      	cmp	r2, r3
 8004360:	d306      	bcc.n	8004370 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	8b7b      	ldrh	r3, [r7, #26]
 8004368:	1ad2      	subs	r2, r2, r3
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	619a      	str	r2, [r3, #24]
 800436e:	e002      	b.n	8004376 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2200      	movs	r2, #0
 8004374:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d123      	bne.n	80043c6 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	461a      	mov	r2, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004394:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004398:	83fb      	strh	r3, [r7, #30]
 800439a:	8bfb      	ldrh	r3, [r7, #30]
 800439c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80043a0:	83fb      	strh	r3, [r7, #30]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	461a      	mov	r2, r3
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	441a      	add	r2, r3
 80043b0:	8bfb      	ldrh	r3, [r7, #30]
 80043b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80043b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80043ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80043c6:	88fb      	ldrh	r3, [r7, #6]
 80043c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d11f      	bne.n	8004410 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ea:	83bb      	strh	r3, [r7, #28]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	461a      	mov	r2, r3
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	441a      	add	r2, r3
 80043fa:	8bbb      	ldrh	r3, [r7, #28]
 80043fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004400:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004408:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800440c:	b29b      	uxth	r3, r3
 800440e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004410:	8b7b      	ldrh	r3, [r7, #26]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	6959      	ldr	r1, [r3, #20]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	895a      	ldrh	r2, [r3, #10]
 8004422:	8b7b      	ldrh	r3, [r7, #26]
 8004424:	f003 fcc0 	bl	8007da8 <USB_ReadPMA>
    }
  }

  return count;
 8004428:	8b7b      	ldrh	r3, [r7, #26]
}
 800442a:	4618      	mov	r0, r3
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004432:	b580      	push	{r7, lr}
 8004434:	b0a4      	sub	sp, #144	@ 0x90
 8004436:	af00      	add	r7, sp, #0
 8004438:	60f8      	str	r0, [r7, #12]
 800443a:	60b9      	str	r1, [r7, #8]
 800443c:	4613      	mov	r3, r2
 800443e:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	f000 81dd 	beq.w	8004806 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004454:	b29b      	uxth	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	3302      	adds	r3, #2
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004474:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	699a      	ldr	r2, [r3, #24]
 800447c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004480:	429a      	cmp	r2, r3
 8004482:	d907      	bls.n	8004494 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	699a      	ldr	r2, [r3, #24]
 8004488:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800448c:	1ad2      	subs	r2, r2, r3
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	619a      	str	r2, [r3, #24]
 8004492:	e002      	b.n	800449a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2200      	movs	r2, #0
 8004498:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	f040 80b9 	bne.w	8004616 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	785b      	ldrb	r3, [r3, #1]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d126      	bne.n	80044fa <HAL_PCD_EP_DB_Transmit+0xc8>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	461a      	mov	r2, r3
 80044be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c0:	4413      	add	r3, r2
 80044c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	011a      	lsls	r2, r3, #4
 80044ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044cc:	4413      	add	r3, r2
 80044ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80044d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d6:	881b      	ldrh	r3, [r3, #0]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044de:	b29a      	uxth	r2, r3
 80044e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e2:	801a      	strh	r2, [r3, #0]
 80044e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f6:	801a      	strh	r2, [r3, #0]
 80044f8:	e01a      	b.n	8004530 <HAL_PCD_EP_DB_Transmit+0xfe>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	785b      	ldrb	r3, [r3, #1]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d116      	bne.n	8004530 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	637b      	str	r3, [r7, #52]	@ 0x34
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004510:	b29b      	uxth	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004516:	4413      	add	r3, r2
 8004518:	637b      	str	r3, [r7, #52]	@ 0x34
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	011a      	lsls	r2, r3, #4
 8004520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004522:	4413      	add	r3, r2
 8004524:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004528:	633b      	str	r3, [r7, #48]	@ 0x30
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	2200      	movs	r2, #0
 800452e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	627b      	str	r3, [r7, #36]	@ 0x24
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	785b      	ldrb	r3, [r3, #1]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d126      	bne.n	800458c <HAL_PCD_EP_DB_Transmit+0x15a>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800454c:	b29b      	uxth	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	011a      	lsls	r2, r3, #4
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	4413      	add	r3, r2
 8004560:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	881b      	ldrh	r3, [r3, #0]
 800456a:	b29b      	uxth	r3, r3
 800456c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004570:	b29a      	uxth	r2, r3
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	801a      	strh	r2, [r3, #0]
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	881b      	ldrh	r3, [r3, #0]
 800457a:	b29b      	uxth	r3, r3
 800457c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004580:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004584:	b29a      	uxth	r2, r3
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	801a      	strh	r2, [r3, #0]
 800458a:	e017      	b.n	80045bc <HAL_PCD_EP_DB_Transmit+0x18a>
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	785b      	ldrb	r3, [r3, #1]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d113      	bne.n	80045bc <HAL_PCD_EP_DB_Transmit+0x18a>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800459c:	b29b      	uxth	r3, r3
 800459e:	461a      	mov	r2, r3
 80045a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a2:	4413      	add	r3, r2
 80045a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	011a      	lsls	r2, r3, #4
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	4413      	add	r3, r2
 80045b0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045b4:	623b      	str	r3, [r7, #32]
 80045b6:	6a3b      	ldr	r3, [r7, #32]
 80045b8:	2200      	movs	r2, #0
 80045ba:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	4619      	mov	r1, r3
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f005 faad 	bl	8009b22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045c8:	88fb      	ldrh	r3, [r7, #6]
 80045ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 82fc 	beq.w	8004bcc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ee:	82fb      	strh	r3, [r7, #22]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	441a      	add	r2, r3
 80045fe:	8afb      	ldrh	r3, [r7, #22]
 8004600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004608:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800460c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004610:	b29b      	uxth	r3, r3
 8004612:	8013      	strh	r3, [r2, #0]
 8004614:	e2da      	b.n	8004bcc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004616:	88fb      	ldrh	r3, [r7, #6]
 8004618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d021      	beq.n	8004664 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	881b      	ldrh	r3, [r3, #0]
 8004630:	b29b      	uxth	r3, r3
 8004632:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	461a      	mov	r2, r3
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	441a      	add	r2, r3
 800464c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8004650:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004654:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004658:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800465c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004660:	b29b      	uxth	r3, r3
 8004662:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800466a:	2b01      	cmp	r3, #1
 800466c:	f040 82ae 	bne.w	8004bcc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	695a      	ldr	r2, [r3, #20]
 8004674:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004678:	441a      	add	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	69da      	ldr	r2, [r3, #28]
 8004682:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004686:	441a      	add	r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	6a1a      	ldr	r2, [r3, #32]
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	429a      	cmp	r2, r3
 8004696:	d30b      	bcc.n	80046b0 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	6a1a      	ldr	r2, [r3, #32]
 80046a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80046a8:	1ad2      	subs	r2, r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	621a      	str	r2, [r3, #32]
 80046ae:	e017      	b.n	80046e0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	6a1b      	ldr	r3, [r3, #32]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d108      	bne.n	80046ca <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 80046b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80046c8:	e00a      	b.n	80046e0 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2200      	movs	r2, #0
 80046de:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	785b      	ldrb	r3, [r3, #1]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d165      	bne.n	80047b4 <HAL_PCD_EP_DB_Transmit+0x382>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046fc:	4413      	add	r3, r2
 80046fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	011a      	lsls	r2, r3, #4
 8004706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004708:	4413      	add	r3, r2
 800470a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800470e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	b29b      	uxth	r3, r3
 8004716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800471a:	b29a      	uxth	r2, r3
 800471c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471e:	801a      	strh	r2, [r3, #0]
 8004720:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004724:	2b3e      	cmp	r3, #62	@ 0x3e
 8004726:	d91d      	bls.n	8004764 <HAL_PCD_EP_DB_Transmit+0x332>
 8004728:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800472c:	095b      	lsrs	r3, r3, #5
 800472e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004730:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	2b00      	cmp	r3, #0
 800473a:	d102      	bne.n	8004742 <HAL_PCD_EP_DB_Transmit+0x310>
 800473c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800473e:	3b01      	subs	r3, #1
 8004740:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	b29a      	uxth	r2, r3
 8004748:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800474a:	b29b      	uxth	r3, r3
 800474c:	029b      	lsls	r3, r3, #10
 800474e:	b29b      	uxth	r3, r3
 8004750:	4313      	orrs	r3, r2
 8004752:	b29b      	uxth	r3, r3
 8004754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800475c:	b29a      	uxth	r2, r3
 800475e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004760:	801a      	strh	r2, [r3, #0]
 8004762:	e044      	b.n	80047ee <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004764:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <HAL_PCD_EP_DB_Transmit+0x350>
 800476c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800476e:	881b      	ldrh	r3, [r3, #0]
 8004770:	b29b      	uxth	r3, r3
 8004772:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004776:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800477a:	b29a      	uxth	r2, r3
 800477c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477e:	801a      	strh	r2, [r3, #0]
 8004780:	e035      	b.n	80047ee <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004782:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004786:	085b      	lsrs	r3, r3, #1
 8004788:	64bb      	str	r3, [r7, #72]	@ 0x48
 800478a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <HAL_PCD_EP_DB_Transmit+0x36a>
 8004796:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004798:	3301      	adds	r3, #1
 800479a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800479c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479e:	881b      	ldrh	r3, [r3, #0]
 80047a0:	b29a      	uxth	r2, r3
 80047a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	029b      	lsls	r3, r3, #10
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	4313      	orrs	r3, r2
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b0:	801a      	strh	r2, [r3, #0]
 80047b2:	e01c      	b.n	80047ee <HAL_PCD_EP_DB_Transmit+0x3bc>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	785b      	ldrb	r3, [r3, #1]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d118      	bne.n	80047ee <HAL_PCD_EP_DB_Transmit+0x3bc>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	461a      	mov	r2, r3
 80047ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047d0:	4413      	add	r3, r2
 80047d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	011a      	lsls	r2, r3, #4
 80047da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047dc:	4413      	add	r3, r2
 80047de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80047e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80047e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047ec:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6818      	ldr	r0, [r3, #0]
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6959      	ldr	r1, [r3, #20]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	891a      	ldrh	r2, [r3, #8]
 80047fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047fe:	b29b      	uxth	r3, r3
 8004800:	f003 fa8d 	bl	8007d1e <USB_WritePMA>
 8004804:	e1e2      	b.n	8004bcc <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800480e:	b29b      	uxth	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	4413      	add	r3, r2
 800481a:	3306      	adds	r3, #6
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	6812      	ldr	r2, [r2, #0]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800482e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	699a      	ldr	r2, [r3, #24]
 8004836:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800483a:	429a      	cmp	r2, r3
 800483c:	d307      	bcc.n	800484e <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	699a      	ldr	r2, [r3, #24]
 8004842:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004846:	1ad2      	subs	r2, r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	619a      	str	r2, [r3, #24]
 800484c:	e002      	b.n	8004854 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2200      	movs	r2, #0
 8004852:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f040 80c0 	bne.w	80049de <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	785b      	ldrb	r3, [r3, #1]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d126      	bne.n	80048b4 <HAL_PCD_EP_DB_Transmit+0x482>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004874:	b29b      	uxth	r3, r3
 8004876:	461a      	mov	r2, r3
 8004878:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800487a:	4413      	add	r3, r2
 800487c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	011a      	lsls	r2, r3, #4
 8004884:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004886:	4413      	add	r3, r2
 8004888:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800488c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800488e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004898:	b29a      	uxth	r2, r3
 800489a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048a0:	881b      	ldrh	r3, [r3, #0]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048b0:	801a      	strh	r2, [r3, #0]
 80048b2:	e01a      	b.n	80048ea <HAL_PCD_EP_DB_Transmit+0x4b8>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	785b      	ldrb	r3, [r3, #1]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d116      	bne.n	80048ea <HAL_PCD_EP_DB_Transmit+0x4b8>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	461a      	mov	r2, r3
 80048ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048d0:	4413      	add	r3, r2
 80048d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80048d4:	68bb      	ldr	r3, [r7, #8]
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	011a      	lsls	r2, r3, #4
 80048da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048dc:	4413      	add	r3, r2
 80048de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80048e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80048e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048e6:	2200      	movs	r2, #0
 80048e8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	785b      	ldrb	r3, [r3, #1]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d12b      	bne.n	8004950 <HAL_PCD_EP_DB_Transmit+0x51e>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004906:	b29b      	uxth	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800490c:	4413      	add	r3, r2
 800490e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	011a      	lsls	r2, r3, #4
 8004916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004918:	4413      	add	r3, r2
 800491a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800491e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004922:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	b29b      	uxth	r3, r3
 800492a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800492e:	b29a      	uxth	r2, r3
 8004930:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004934:	801a      	strh	r2, [r3, #0]
 8004936:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	b29b      	uxth	r3, r3
 800493e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004946:	b29a      	uxth	r2, r3
 8004948:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800494c:	801a      	strh	r2, [r3, #0]
 800494e:	e017      	b.n	8004980 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d113      	bne.n	8004980 <HAL_PCD_EP_DB_Transmit+0x54e>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004960:	b29b      	uxth	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004966:	4413      	add	r3, r2
 8004968:	677b      	str	r3, [r7, #116]	@ 0x74
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	011a      	lsls	r2, r3, #4
 8004970:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004972:	4413      	add	r3, r2
 8004974:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004978:	673b      	str	r3, [r7, #112]	@ 0x70
 800497a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800497c:	2200      	movs	r2, #0
 800497e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	4619      	mov	r1, r3
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f005 f8cb 	bl	8009b22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800498c:	88fb      	ldrh	r3, [r7, #6]
 800498e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004992:	2b00      	cmp	r3, #0
 8004994:	f040 811a 	bne.w	8004bcc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	461a      	mov	r2, r3
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	4413      	add	r3, r2
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049b2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	441a      	add	r2, r3
 80049c4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80049c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049d8:	b29b      	uxth	r3, r3
 80049da:	8013      	strh	r3, [r2, #0]
 80049dc:	e0f6      	b.n	8004bcc <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d121      	bne.n	8004a2c <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a02:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	441a      	add	r2, r3
 8004a14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004a18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	f040 80ca 	bne.w	8004bcc <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	695a      	ldr	r2, [r3, #20]
 8004a3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a40:	441a      	add	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	69da      	ldr	r2, [r3, #28]
 8004a4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a4e:	441a      	add	r2, r3
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6a1a      	ldr	r2, [r3, #32]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d30b      	bcc.n	8004a78 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	6a1a      	ldr	r2, [r3, #32]
 8004a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a70:	1ad2      	subs	r2, r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	621a      	str	r2, [r3, #32]
 8004a76:	e017      	b.n	8004aa8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d108      	bne.n	8004a92 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004a80:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004a90:	e00a      	b.n	8004aa8 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	657b      	str	r3, [r7, #84]	@ 0x54
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	785b      	ldrb	r3, [r3, #1]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d165      	bne.n	8004b82 <HAL_PCD_EP_DB_Transmit+0x750>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aca:	4413      	add	r3, r2
 8004acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	011a      	lsls	r2, r3, #4
 8004ad4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004adc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ade:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aec:	801a      	strh	r2, [r3, #0]
 8004aee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004af2:	2b3e      	cmp	r3, #62	@ 0x3e
 8004af4:	d91d      	bls.n	8004b32 <HAL_PCD_EP_DB_Transmit+0x700>
 8004af6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004afa:	095b      	lsrs	r3, r3, #5
 8004afc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004afe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b02:	f003 031f 	and.w	r3, r3, #31
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d102      	bne.n	8004b10 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004b0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b12:	881b      	ldrh	r3, [r3, #0]
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	029b      	lsls	r3, r3, #10
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b2e:	801a      	strh	r2, [r3, #0]
 8004b30:	e041      	b.n	8004bb6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004b32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004b3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b4c:	801a      	strh	r2, [r3, #0]
 8004b4e:	e032      	b.n	8004bb6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b54:	085b      	lsrs	r3, r3, #1
 8004b56:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <HAL_PCD_EP_DB_Transmit+0x738>
 8004b64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b66:	3301      	adds	r3, #1
 8004b68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b6c:	881b      	ldrh	r3, [r3, #0]
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	029b      	lsls	r3, r3, #10
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b7e:	801a      	strh	r2, [r3, #0]
 8004b80:	e019      	b.n	8004bb6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	785b      	ldrb	r3, [r3, #1]
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d115      	bne.n	8004bb6 <HAL_PCD_EP_DB_Transmit+0x784>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	461a      	mov	r2, r3
 8004b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b98:	4413      	add	r3, r2
 8004b9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	011a      	lsls	r2, r3, #4
 8004ba2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004baa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bb4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6818      	ldr	r0, [r3, #0]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6959      	ldr	r1, [r3, #20]
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	895a      	ldrh	r2, [r3, #10]
 8004bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	f003 f8a9 	bl	8007d1e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	881b      	ldrh	r3, [r3, #0]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004be2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004be6:	82bb      	strh	r3, [r7, #20]
 8004be8:	8abb      	ldrh	r3, [r7, #20]
 8004bea:	f083 0310 	eor.w	r3, r3, #16
 8004bee:	82bb      	strh	r3, [r7, #20]
 8004bf0:	8abb      	ldrh	r3, [r7, #20]
 8004bf2:	f083 0320 	eor.w	r3, r3, #32
 8004bf6:	82bb      	strh	r3, [r7, #20]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	441a      	add	r2, r3
 8004c06:	8abb      	ldrh	r3, [r7, #20]
 8004c08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3790      	adds	r7, #144	@ 0x90
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b087      	sub	sp, #28
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	60f8      	str	r0, [r7, #12]
 8004c2e:	607b      	str	r3, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	817b      	strh	r3, [r7, #10]
 8004c34:	4613      	mov	r3, r2
 8004c36:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004c38:	897b      	ldrh	r3, [r7, #10]
 8004c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00b      	beq.n	8004c5c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c44:	897b      	ldrh	r3, [r7, #10]
 8004c46:	f003 0207 	and.w	r2, r3, #7
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	3310      	adds	r3, #16
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4413      	add	r3, r2
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	e009      	b.n	8004c70 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c5c:	897a      	ldrh	r2, [r7, #10]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	00db      	lsls	r3, r3, #3
 8004c66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004c70:	893b      	ldrh	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d107      	bne.n	8004c86 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	80da      	strh	r2, [r3, #6]
 8004c84:	e00b      	b.n	8004c9e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	0c1b      	lsrs	r3, r3, #16
 8004c98:	b29a      	uxth	r2, r3
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bc80      	pop	{r7}
 8004ca8:	4770      	bx	lr
	...

08004cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d101      	bne.n	8004cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e272      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	f000 8087 	beq.w	8004dda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ccc:	4b92      	ldr	r3, [pc, #584]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 030c 	and.w	r3, r3, #12
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	d00c      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004cd8:	4b8f      	ldr	r3, [pc, #572]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f003 030c 	and.w	r3, r3, #12
 8004ce0:	2b08      	cmp	r3, #8
 8004ce2:	d112      	bne.n	8004d0a <HAL_RCC_OscConfig+0x5e>
 8004ce4:	4b8c      	ldr	r3, [pc, #560]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cf0:	d10b      	bne.n	8004d0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf2:	4b89      	ldr	r3, [pc, #548]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d06c      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x12c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d168      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e24c      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d12:	d106      	bne.n	8004d22 <HAL_RCC_OscConfig+0x76>
 8004d14:	4b80      	ldr	r3, [pc, #512]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a7f      	ldr	r2, [pc, #508]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	e02e      	b.n	8004d80 <HAL_RCC_OscConfig+0xd4>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10c      	bne.n	8004d44 <HAL_RCC_OscConfig+0x98>
 8004d2a:	4b7b      	ldr	r3, [pc, #492]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a7a      	ldr	r2, [pc, #488]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004d30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	4b78      	ldr	r3, [pc, #480]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a77      	ldr	r2, [pc, #476]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d40:	6013      	str	r3, [r2, #0]
 8004d42:	e01d      	b.n	8004d80 <HAL_RCC_OscConfig+0xd4>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d4c:	d10c      	bne.n	8004d68 <HAL_RCC_OscConfig+0xbc>
 8004d4e:	4b72      	ldr	r3, [pc, #456]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a71      	ldr	r2, [pc, #452]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004d54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d58:	6013      	str	r3, [r2, #0]
 8004d5a:	4b6f      	ldr	r3, [pc, #444]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a6e      	ldr	r2, [pc, #440]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	e00b      	b.n	8004d80 <HAL_RCC_OscConfig+0xd4>
 8004d68:	4b6b      	ldr	r3, [pc, #428]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a6a      	ldr	r2, [pc, #424]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004d6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	4b68      	ldr	r3, [pc, #416]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a67      	ldr	r2, [pc, #412]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004d7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d013      	beq.n	8004db0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d88:	f7fc fef2 	bl	8001b70 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d90:	f7fc feee 	bl	8001b70 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b64      	cmp	r3, #100	@ 0x64
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e200      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004da2:	4b5d      	ldr	r3, [pc, #372]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d0f0      	beq.n	8004d90 <HAL_RCC_OscConfig+0xe4>
 8004dae:	e014      	b.n	8004dda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db0:	f7fc fede 	bl	8001b70 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db8:	f7fc feda 	bl	8001b70 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b64      	cmp	r3, #100	@ 0x64
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e1ec      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dca:	4b53      	ldr	r3, [pc, #332]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x10c>
 8004dd6:	e000      	b.n	8004dda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d063      	beq.n	8004eae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004de6:	4b4c      	ldr	r3, [pc, #304]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00b      	beq.n	8004e0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004df2:	4b49      	ldr	r3, [pc, #292]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f003 030c 	and.w	r3, r3, #12
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d11c      	bne.n	8004e38 <HAL_RCC_OscConfig+0x18c>
 8004dfe:	4b46      	ldr	r3, [pc, #280]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d116      	bne.n	8004e38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e0a:	4b43      	ldr	r3, [pc, #268]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <HAL_RCC_OscConfig+0x176>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d001      	beq.n	8004e22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e1c0      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e22:	4b3d      	ldr	r3, [pc, #244]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	4939      	ldr	r1, [pc, #228]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e36:	e03a      	b.n	8004eae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d020      	beq.n	8004e82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e40:	4b36      	ldr	r3, [pc, #216]	@ (8004f1c <HAL_RCC_OscConfig+0x270>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e46:	f7fc fe93 	bl	8001b70 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e4e:	f7fc fe8f 	bl	8001b70 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e1a1      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e60:	4b2d      	ldr	r3, [pc, #180]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0f0      	beq.n	8004e4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4927      	ldr	r1, [pc, #156]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	600b      	str	r3, [r1, #0]
 8004e80:	e015      	b.n	8004eae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e82:	4b26      	ldr	r3, [pc, #152]	@ (8004f1c <HAL_RCC_OscConfig+0x270>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e88:	f7fc fe72 	bl	8001b70 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e90:	f7fc fe6e 	bl	8001b70 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e180      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1f0      	bne.n	8004e90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0308 	and.w	r3, r3, #8
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d03a      	beq.n	8004f30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d019      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ec2:	4b17      	ldr	r3, [pc, #92]	@ (8004f20 <HAL_RCC_OscConfig+0x274>)
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec8:	f7fc fe52 	bl	8001b70 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed0:	f7fc fe4e 	bl	8001b70 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e160      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8004f18 <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d0f0      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004eee:	2001      	movs	r0, #1
 8004ef0:	f000 fabc 	bl	800546c <RCC_Delay>
 8004ef4:	e01c      	b.n	8004f30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f20 <HAL_RCC_OscConfig+0x274>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004efc:	f7fc fe38 	bl	8001b70 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f02:	e00f      	b.n	8004f24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f04:	f7fc fe34 	bl	8001b70 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d908      	bls.n	8004f24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e146      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
 8004f16:	bf00      	nop
 8004f18:	40021000 	.word	0x40021000
 8004f1c:	42420000 	.word	0x42420000
 8004f20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f24:	4b92      	ldr	r3, [pc, #584]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8004f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e9      	bne.n	8004f04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 80a6 	beq.w	800508a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f42:	4b8b      	ldr	r3, [pc, #556]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10d      	bne.n	8004f6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f4e:	4b88      	ldr	r3, [pc, #544]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	4a87      	ldr	r2, [pc, #540]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8004f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f58:	61d3      	str	r3, [r2, #28]
 8004f5a:	4b85      	ldr	r3, [pc, #532]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f62:	60bb      	str	r3, [r7, #8]
 8004f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f66:	2301      	movs	r3, #1
 8004f68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f6a:	4b82      	ldr	r3, [pc, #520]	@ (8005174 <HAL_RCC_OscConfig+0x4c8>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d118      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f76:	4b7f      	ldr	r3, [pc, #508]	@ (8005174 <HAL_RCC_OscConfig+0x4c8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a7e      	ldr	r2, [pc, #504]	@ (8005174 <HAL_RCC_OscConfig+0x4c8>)
 8004f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f82:	f7fc fdf5 	bl	8001b70 <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f8a:	f7fc fdf1 	bl	8001b70 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b64      	cmp	r3, #100	@ 0x64
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e103      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f9c:	4b75      	ldr	r3, [pc, #468]	@ (8005174 <HAL_RCC_OscConfig+0x4c8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d106      	bne.n	8004fbe <HAL_RCC_OscConfig+0x312>
 8004fb0:	4b6f      	ldr	r3, [pc, #444]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	4a6e      	ldr	r2, [pc, #440]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	6213      	str	r3, [r2, #32]
 8004fbc:	e02d      	b.n	800501a <HAL_RCC_OscConfig+0x36e>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10c      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x334>
 8004fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	4a69      	ldr	r2, [pc, #420]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8004fcc:	f023 0301 	bic.w	r3, r3, #1
 8004fd0:	6213      	str	r3, [r2, #32]
 8004fd2:	4b67      	ldr	r3, [pc, #412]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	4a66      	ldr	r2, [pc, #408]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8004fd8:	f023 0304 	bic.w	r3, r3, #4
 8004fdc:	6213      	str	r3, [r2, #32]
 8004fde:	e01c      	b.n	800501a <HAL_RCC_OscConfig+0x36e>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	2b05      	cmp	r3, #5
 8004fe6:	d10c      	bne.n	8005002 <HAL_RCC_OscConfig+0x356>
 8004fe8:	4b61      	ldr	r3, [pc, #388]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	4a60      	ldr	r2, [pc, #384]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8004fee:	f043 0304 	orr.w	r3, r3, #4
 8004ff2:	6213      	str	r3, [r2, #32]
 8004ff4:	4b5e      	ldr	r3, [pc, #376]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	4a5d      	ldr	r2, [pc, #372]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8004ffa:	f043 0301 	orr.w	r3, r3, #1
 8004ffe:	6213      	str	r3, [r2, #32]
 8005000:	e00b      	b.n	800501a <HAL_RCC_OscConfig+0x36e>
 8005002:	4b5b      	ldr	r3, [pc, #364]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	4a5a      	ldr	r2, [pc, #360]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8005008:	f023 0301 	bic.w	r3, r3, #1
 800500c:	6213      	str	r3, [r2, #32]
 800500e:	4b58      	ldr	r3, [pc, #352]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	4a57      	ldr	r2, [pc, #348]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8005014:	f023 0304 	bic.w	r3, r3, #4
 8005018:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d015      	beq.n	800504e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005022:	f7fc fda5 	bl	8001b70 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005028:	e00a      	b.n	8005040 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800502a:	f7fc fda1 	bl	8001b70 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005038:	4293      	cmp	r3, r2
 800503a:	d901      	bls.n	8005040 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e0b1      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005040:	4b4b      	ldr	r3, [pc, #300]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d0ee      	beq.n	800502a <HAL_RCC_OscConfig+0x37e>
 800504c:	e014      	b.n	8005078 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800504e:	f7fc fd8f 	bl	8001b70 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005054:	e00a      	b.n	800506c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005056:	f7fc fd8b 	bl	8001b70 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005064:	4293      	cmp	r3, r2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e09b      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800506c:	4b40      	ldr	r3, [pc, #256]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	f003 0302 	and.w	r3, r3, #2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1ee      	bne.n	8005056 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005078:	7dfb      	ldrb	r3, [r7, #23]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d105      	bne.n	800508a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800507e:	4b3c      	ldr	r3, [pc, #240]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	4a3b      	ldr	r2, [pc, #236]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8005084:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005088:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 8087 	beq.w	80051a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005094:	4b36      	ldr	r3, [pc, #216]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f003 030c 	and.w	r3, r3, #12
 800509c:	2b08      	cmp	r3, #8
 800509e:	d061      	beq.n	8005164 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d146      	bne.n	8005136 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a8:	4b33      	ldr	r3, [pc, #204]	@ (8005178 <HAL_RCC_OscConfig+0x4cc>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ae:	f7fc fd5f 	bl	8001b70 <HAL_GetTick>
 80050b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050b4:	e008      	b.n	80050c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b6:	f7fc fd5b 	bl	8001b70 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d901      	bls.n	80050c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80050c4:	2303      	movs	r3, #3
 80050c6:	e06d      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050c8:	4b29      	ldr	r3, [pc, #164]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1f0      	bne.n	80050b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050dc:	d108      	bne.n	80050f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80050de:	4b24      	ldr	r3, [pc, #144]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	4921      	ldr	r1, [pc, #132]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80050f0:	4b1f      	ldr	r3, [pc, #124]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a19      	ldr	r1, [r3, #32]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005100:	430b      	orrs	r3, r1
 8005102:	491b      	ldr	r1, [pc, #108]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8005104:	4313      	orrs	r3, r2
 8005106:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005108:	4b1b      	ldr	r3, [pc, #108]	@ (8005178 <HAL_RCC_OscConfig+0x4cc>)
 800510a:	2201      	movs	r2, #1
 800510c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800510e:	f7fc fd2f 	bl	8001b70 <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005116:	f7fc fd2b 	bl	8001b70 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e03d      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005128:	4b11      	ldr	r3, [pc, #68]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0f0      	beq.n	8005116 <HAL_RCC_OscConfig+0x46a>
 8005134:	e035      	b.n	80051a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005136:	4b10      	ldr	r3, [pc, #64]	@ (8005178 <HAL_RCC_OscConfig+0x4cc>)
 8005138:	2200      	movs	r2, #0
 800513a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800513c:	f7fc fd18 	bl	8001b70 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005144:	f7fc fd14 	bl	8001b70 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e026      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005156:	4b06      	ldr	r3, [pc, #24]	@ (8005170 <HAL_RCC_OscConfig+0x4c4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x498>
 8005162:	e01e      	b.n	80051a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	69db      	ldr	r3, [r3, #28]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d107      	bne.n	800517c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	e019      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
 8005170:	40021000 	.word	0x40021000
 8005174:	40007000 	.word	0x40007000
 8005178:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800517c:	4b0b      	ldr	r3, [pc, #44]	@ (80051ac <HAL_RCC_OscConfig+0x500>)
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a1b      	ldr	r3, [r3, #32]
 800518c:	429a      	cmp	r2, r3
 800518e:	d106      	bne.n	800519e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800519a:	429a      	cmp	r2, r3
 800519c:	d001      	beq.n	80051a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	40021000 	.word	0x40021000

080051b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e0d0      	b.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051c4:	4b6a      	ldr	r3, [pc, #424]	@ (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d910      	bls.n	80051f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051d2:	4b67      	ldr	r3, [pc, #412]	@ (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f023 0207 	bic.w	r2, r3, #7
 80051da:	4965      	ldr	r1, [pc, #404]	@ (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	4313      	orrs	r3, r2
 80051e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e2:	4b63      	ldr	r3, [pc, #396]	@ (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d001      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e0b8      	b.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d020      	beq.n	8005242 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	2b00      	cmp	r3, #0
 800520a:	d005      	beq.n	8005218 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800520c:	4b59      	ldr	r3, [pc, #356]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	4a58      	ldr	r2, [pc, #352]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005212:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005216:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0308 	and.w	r3, r3, #8
 8005220:	2b00      	cmp	r3, #0
 8005222:	d005      	beq.n	8005230 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005224:	4b53      	ldr	r3, [pc, #332]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	4a52      	ldr	r2, [pc, #328]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800522a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800522e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005230:	4b50      	ldr	r3, [pc, #320]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	494d      	ldr	r1, [pc, #308]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800523e:	4313      	orrs	r3, r2
 8005240:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d040      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d107      	bne.n	8005266 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005256:	4b47      	ldr	r3, [pc, #284]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d115      	bne.n	800528e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e07f      	b.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d107      	bne.n	800527e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800526e:	4b41      	ldr	r3, [pc, #260]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d109      	bne.n	800528e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e073      	b.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800527e:	4b3d      	ldr	r3, [pc, #244]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e06b      	b.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800528e:	4b39      	ldr	r3, [pc, #228]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f023 0203 	bic.w	r2, r3, #3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	4936      	ldr	r1, [pc, #216]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800529c:	4313      	orrs	r3, r2
 800529e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052a0:	f7fc fc66 	bl	8001b70 <HAL_GetTick>
 80052a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052a6:	e00a      	b.n	80052be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052a8:	f7fc fc62 	bl	8001b70 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d901      	bls.n	80052be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e053      	b.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052be:	4b2d      	ldr	r3, [pc, #180]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f003 020c 	and.w	r2, r3, #12
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d1eb      	bne.n	80052a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052d0:	4b27      	ldr	r3, [pc, #156]	@ (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d210      	bcs.n	8005300 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052de:	4b24      	ldr	r3, [pc, #144]	@ (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f023 0207 	bic.w	r2, r3, #7
 80052e6:	4922      	ldr	r1, [pc, #136]	@ (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ee:	4b20      	ldr	r3, [pc, #128]	@ (8005370 <HAL_RCC_ClockConfig+0x1c0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d001      	beq.n	8005300 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e032      	b.n	8005366 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800530c:	4b19      	ldr	r3, [pc, #100]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	4916      	ldr	r1, [pc, #88]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800531a:	4313      	orrs	r3, r2
 800531c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d009      	beq.n	800533e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800532a:	4b12      	ldr	r3, [pc, #72]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	490e      	ldr	r1, [pc, #56]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 800533a:	4313      	orrs	r3, r2
 800533c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800533e:	f000 f821 	bl	8005384 <HAL_RCC_GetSysClockFreq>
 8005342:	4602      	mov	r2, r0
 8005344:	4b0b      	ldr	r3, [pc, #44]	@ (8005374 <HAL_RCC_ClockConfig+0x1c4>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	091b      	lsrs	r3, r3, #4
 800534a:	f003 030f 	and.w	r3, r3, #15
 800534e:	490a      	ldr	r1, [pc, #40]	@ (8005378 <HAL_RCC_ClockConfig+0x1c8>)
 8005350:	5ccb      	ldrb	r3, [r1, r3]
 8005352:	fa22 f303 	lsr.w	r3, r2, r3
 8005356:	4a09      	ldr	r2, [pc, #36]	@ (800537c <HAL_RCC_ClockConfig+0x1cc>)
 8005358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800535a:	4b09      	ldr	r3, [pc, #36]	@ (8005380 <HAL_RCC_ClockConfig+0x1d0>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f7fc fbc4 	bl	8001aec <HAL_InitTick>

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3710      	adds	r7, #16
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40022000 	.word	0x40022000
 8005374:	40021000 	.word	0x40021000
 8005378:	0800cd0c 	.word	0x0800cd0c
 800537c:	20000000 	.word	0x20000000
 8005380:	20000004 	.word	0x20000004

08005384 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	2300      	movs	r3, #0
 8005390:	60bb      	str	r3, [r7, #8]
 8005392:	2300      	movs	r3, #0
 8005394:	617b      	str	r3, [r7, #20]
 8005396:	2300      	movs	r3, #0
 8005398:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800539e:	4b1e      	ldr	r3, [pc, #120]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x94>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 030c 	and.w	r3, r3, #12
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	d002      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0x30>
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d003      	beq.n	80053ba <HAL_RCC_GetSysClockFreq+0x36>
 80053b2:	e027      	b.n	8005404 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80053b4:	4b19      	ldr	r3, [pc, #100]	@ (800541c <HAL_RCC_GetSysClockFreq+0x98>)
 80053b6:	613b      	str	r3, [r7, #16]
      break;
 80053b8:	e027      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	0c9b      	lsrs	r3, r3, #18
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	4a17      	ldr	r2, [pc, #92]	@ (8005420 <HAL_RCC_GetSysClockFreq+0x9c>)
 80053c4:	5cd3      	ldrb	r3, [r2, r3]
 80053c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d010      	beq.n	80053f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80053d2:	4b11      	ldr	r3, [pc, #68]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x94>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	0c5b      	lsrs	r3, r3, #17
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	4a11      	ldr	r2, [pc, #68]	@ (8005424 <HAL_RCC_GetSysClockFreq+0xa0>)
 80053de:	5cd3      	ldrb	r3, [r2, r3]
 80053e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a0d      	ldr	r2, [pc, #52]	@ (800541c <HAL_RCC_GetSysClockFreq+0x98>)
 80053e6:	fb03 f202 	mul.w	r2, r3, r2
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	e004      	b.n	80053fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a0c      	ldr	r2, [pc, #48]	@ (8005428 <HAL_RCC_GetSysClockFreq+0xa4>)
 80053f8:	fb02 f303 	mul.w	r3, r2, r3
 80053fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	613b      	str	r3, [r7, #16]
      break;
 8005402:	e002      	b.n	800540a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005404:	4b09      	ldr	r3, [pc, #36]	@ (800542c <HAL_RCC_GetSysClockFreq+0xa8>)
 8005406:	613b      	str	r3, [r7, #16]
      break;
 8005408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800540a:	693b      	ldr	r3, [r7, #16]
}
 800540c:	4618      	mov	r0, r3
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	bc80      	pop	{r7}
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40021000 	.word	0x40021000
 800541c:	00f42400 	.word	0x00f42400
 8005420:	0800cd24 	.word	0x0800cd24
 8005424:	0800cd34 	.word	0x0800cd34
 8005428:	003d0900 	.word	0x003d0900
 800542c:	007a1200 	.word	0x007a1200

08005430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005434:	4b02      	ldr	r3, [pc, #8]	@ (8005440 <HAL_RCC_GetHCLKFreq+0x10>)
 8005436:	681b      	ldr	r3, [r3, #0]
}
 8005438:	4618      	mov	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr
 8005440:	20000000 	.word	0x20000000

08005444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005448:	f7ff fff2 	bl	8005430 <HAL_RCC_GetHCLKFreq>
 800544c:	4602      	mov	r2, r0
 800544e:	4b05      	ldr	r3, [pc, #20]	@ (8005464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	0a1b      	lsrs	r3, r3, #8
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	4903      	ldr	r1, [pc, #12]	@ (8005468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800545a:	5ccb      	ldrb	r3, [r1, r3]
 800545c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005460:	4618      	mov	r0, r3
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40021000 	.word	0x40021000
 8005468:	0800cd1c 	.word	0x0800cd1c

0800546c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005474:	4b0a      	ldr	r3, [pc, #40]	@ (80054a0 <RCC_Delay+0x34>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a0a      	ldr	r2, [pc, #40]	@ (80054a4 <RCC_Delay+0x38>)
 800547a:	fba2 2303 	umull	r2, r3, r2, r3
 800547e:	0a5b      	lsrs	r3, r3, #9
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	fb02 f303 	mul.w	r3, r2, r3
 8005486:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005488:	bf00      	nop
  }
  while (Delay --);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	1e5a      	subs	r2, r3, #1
 800548e:	60fa      	str	r2, [r7, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1f9      	bne.n	8005488 <RCC_Delay+0x1c>
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr
 80054a0:	20000000 	.word	0x20000000
 80054a4:	10624dd3 	.word	0x10624dd3

080054a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	613b      	str	r3, [r7, #16]
 80054b4:	2300      	movs	r3, #0
 80054b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d07d      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80054c4:	2300      	movs	r3, #0
 80054c6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d10d      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d4:	4b4c      	ldr	r3, [pc, #304]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	4a4b      	ldr	r2, [pc, #300]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054de:	61d3      	str	r3, [r2, #28]
 80054e0:	4b49      	ldr	r3, [pc, #292]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f0:	4b46      	ldr	r3, [pc, #280]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d118      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054fc:	4b43      	ldr	r3, [pc, #268]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a42      	ldr	r2, [pc, #264]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005502:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005506:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005508:	f7fc fb32 	bl	8001b70 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800550e:	e008      	b.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005510:	f7fc fb2e 	bl	8001b70 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b64      	cmp	r3, #100	@ 0x64
 800551c:	d901      	bls.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e06d      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005522:	4b3a      	ldr	r3, [pc, #232]	@ (800560c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f0      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800552e:	4b36      	ldr	r3, [pc, #216]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005536:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d02e      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	429a      	cmp	r2, r3
 800554a:	d027      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800554c:	4b2e      	ldr	r3, [pc, #184]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800554e:	6a1b      	ldr	r3, [r3, #32]
 8005550:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005554:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005556:	4b2e      	ldr	r3, [pc, #184]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005558:	2201      	movs	r2, #1
 800555a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800555c:	4b2c      	ldr	r3, [pc, #176]	@ (8005610 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800555e:	2200      	movs	r2, #0
 8005560:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005562:	4a29      	ldr	r2, [pc, #164]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d014      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005572:	f7fc fafd 	bl	8001b70 <HAL_GetTick>
 8005576:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005578:	e00a      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800557a:	f7fc faf9 	bl	8001b70 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005588:	4293      	cmp	r3, r2
 800558a:	d901      	bls.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e036      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005590:	4b1d      	ldr	r3, [pc, #116]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0ee      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800559c:	4b1a      	ldr	r3, [pc, #104]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	4917      	ldr	r1, [pc, #92]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d105      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b4:	4b14      	ldr	r3, [pc, #80]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	4a13      	ldr	r2, [pc, #76]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d008      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	490b      	ldr	r1, [pc, #44]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055da:	4313      	orrs	r3, r2
 80055dc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f003 0310 	and.w	r3, r3, #16
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d008      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055ea:	4b07      	ldr	r3, [pc, #28]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	4904      	ldr	r1, [pc, #16]	@ (8005608 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3718      	adds	r7, #24
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40021000 	.word	0x40021000
 800560c:	40007000 	.word	0x40007000
 8005610:	42420440 	.word	0x42420440

08005614 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e076      	b.n	8005714 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562a:	2b00      	cmp	r3, #0
 800562c:	d108      	bne.n	8005640 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005636:	d009      	beq.n	800564c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	61da      	str	r2, [r3, #28]
 800563e:	e005      	b.n	800564c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fc f880 	bl	800176c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005682:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d0:	ea42 0103 	orr.w	r1, r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	0c1a      	lsrs	r2, r3, #16
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f002 0204 	and.w	r2, r2, #4
 80056f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69da      	ldr	r2, [r3, #28]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005702:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	4638      	mov	r0, r7
 8005726:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	bc80      	pop	{r7}
 8005734:	4770      	bx	lr

08005736 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005736:	b480      	push	{r7}
 8005738:	b085      	sub	sp, #20
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005746:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800574a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	b29a      	uxth	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr

08005762 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005762:	b480      	push	{r7}
 8005764:	b085      	sub	sp, #20
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800576a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 800576e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	b29b      	uxth	r3, r3
 800577c:	43db      	mvns	r3, r3
 800577e:	b29b      	uxth	r3, r3
 8005780:	4013      	ands	r3, r2
 8005782:	b29a      	uxth	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3714      	adds	r7, #20
 8005790:	46bd      	mov	sp, r7
 8005792:	bc80      	pop	{r7}
 8005794:	4770      	bx	lr

08005796 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
 800579e:	460b      	mov	r3, r1
 80057a0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bc80      	pop	{r7}
 80057ac:	4770      	bx	lr

080057ae <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b085      	sub	sp, #20
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	4638      	mov	r0, r7
 80057b8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2201      	movs	r2, #1
 80057c0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr

080057e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b09d      	sub	sp, #116	@ 0x74
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800580a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800580e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	78db      	ldrb	r3, [r3, #3]
 8005816:	2b03      	cmp	r3, #3
 8005818:	d81f      	bhi.n	800585a <USB_ActivateEndpoint+0x72>
 800581a:	a201      	add	r2, pc, #4	@ (adr r2, 8005820 <USB_ActivateEndpoint+0x38>)
 800581c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005820:	08005831 	.word	0x08005831
 8005824:	0800584d 	.word	0x0800584d
 8005828:	08005863 	.word	0x08005863
 800582c:	0800583f 	.word	0x0800583f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005830:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005834:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005838:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800583c:	e012      	b.n	8005864 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800583e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005842:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005846:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800584a:	e00b      	b.n	8005864 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800584c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005850:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005854:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005858:	e004      	b.n	8005864 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005860:	e000      	b.n	8005864 <USB_ActivateEndpoint+0x7c>
      break;
 8005862:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	441a      	add	r2, r3
 800586e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005872:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005876:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800587a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800587e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005882:	b29b      	uxth	r3, r3
 8005884:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	881b      	ldrh	r3, [r3, #0]
 8005892:	b29b      	uxth	r3, r3
 8005894:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800589c:	b29b      	uxth	r3, r3
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	7812      	ldrb	r2, [r2, #0]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	441a      	add	r2, r3
 80058b2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80058b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	7b1b      	ldrb	r3, [r3, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f040 8178 	bne.w	8005bc4 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f000 8084 	beq.w	80059e6 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	461a      	mov	r2, r3
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	4413      	add	r3, r2
 80058f0:	61bb      	str	r3, [r7, #24]
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	011a      	lsls	r2, r3, #4
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	4413      	add	r3, r2
 80058fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	88db      	ldrh	r3, [r3, #6]
 8005906:	085b      	lsrs	r3, r3, #1
 8005908:	b29b      	uxth	r3, r3
 800590a:	005b      	lsls	r3, r3, #1
 800590c:	b29a      	uxth	r2, r3
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	827b      	strh	r3, [r7, #18]
 8005920:	8a7b      	ldrh	r3, [r7, #18]
 8005922:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d01b      	beq.n	8005962 <USB_ActivateEndpoint+0x17a>
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	881b      	ldrh	r3, [r3, #0]
 8005936:	b29b      	uxth	r3, r3
 8005938:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800593c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005940:	823b      	strh	r3, [r7, #16]
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	441a      	add	r2, r3
 800594c:	8a3b      	ldrh	r3, [r7, #16]
 800594e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005952:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800595a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800595e:	b29b      	uxth	r3, r3
 8005960:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	78db      	ldrb	r3, [r3, #3]
 8005966:	2b01      	cmp	r3, #1
 8005968:	d020      	beq.n	80059ac <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	881b      	ldrh	r3, [r3, #0]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800597c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005980:	81bb      	strh	r3, [r7, #12]
 8005982:	89bb      	ldrh	r3, [r7, #12]
 8005984:	f083 0320 	eor.w	r3, r3, #32
 8005988:	81bb      	strh	r3, [r7, #12]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	441a      	add	r2, r3
 8005994:	89bb      	ldrh	r3, [r7, #12]
 8005996:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800599a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800599e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	8013      	strh	r3, [r2, #0]
 80059aa:	e2d5      	b.n	8005f58 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059c2:	81fb      	strh	r3, [r7, #14]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	441a      	add	r2, r3
 80059ce:	89fb      	ldrh	r3, [r7, #14]
 80059d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	8013      	strh	r3, [r2, #0]
 80059e4:	e2b8      	b.n	8005f58 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f6:	4413      	add	r3, r2
 80059f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	011a      	lsls	r2, r3, #4
 8005a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	88db      	ldrh	r3, [r3, #6]
 8005a0e:	085b      	lsrs	r3, r3, #1
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	005b      	lsls	r3, r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a18:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2a:	4413      	add	r3, r2
 8005a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	011a      	lsls	r2, r3, #4
 8005a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a36:	4413      	add	r3, r2
 8005a38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a4c:	801a      	strh	r2, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a54:	d91d      	bls.n	8005a92 <USB_ActivateEndpoint+0x2aa>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	095b      	lsrs	r3, r3, #5
 8005a5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f003 031f 	and.w	r3, r3, #31
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d102      	bne.n	8005a70 <USB_ActivateEndpoint+0x288>
 8005a6a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	881b      	ldrh	r3, [r3, #0]
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	029b      	lsls	r3, r3, #10
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8e:	801a      	strh	r2, [r3, #0]
 8005a90:	e026      	b.n	8005ae0 <USB_ActivateEndpoint+0x2f8>
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10a      	bne.n	8005ab0 <USB_ActivateEndpoint+0x2c8>
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa8:	b29a      	uxth	r2, r3
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aac:	801a      	strh	r2, [r3, #0]
 8005aae:	e017      	b.n	8005ae0 <USB_ActivateEndpoint+0x2f8>
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	085b      	lsrs	r3, r3, #1
 8005ab6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d002      	beq.n	8005aca <USB_ActivateEndpoint+0x2e2>
 8005ac4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	029b      	lsls	r3, r3, #10
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ade:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005aee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d01b      	beq.n	8005b30 <USB_ActivateEndpoint+0x348>
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	881b      	ldrh	r3, [r3, #0]
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b0e:	843b      	strh	r3, [r7, #32]
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	441a      	add	r2, r3
 8005b1a:	8c3b      	ldrh	r3, [r7, #32]
 8005b1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d124      	bne.n	8005b82 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	881b      	ldrh	r3, [r3, #0]
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4e:	83bb      	strh	r3, [r7, #28]
 8005b50:	8bbb      	ldrh	r3, [r7, #28]
 8005b52:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005b56:	83bb      	strh	r3, [r7, #28]
 8005b58:	8bbb      	ldrh	r3, [r7, #28]
 8005b5a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005b5e:	83bb      	strh	r3, [r7, #28]
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	441a      	add	r2, r3
 8005b6a:	8bbb      	ldrh	r3, [r7, #28]
 8005b6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	8013      	strh	r3, [r2, #0]
 8005b80:	e1ea      	b.n	8005f58 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b98:	83fb      	strh	r3, [r7, #30]
 8005b9a:	8bfb      	ldrh	r3, [r7, #30]
 8005b9c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ba0:	83fb      	strh	r3, [r7, #30]
 8005ba2:	687a      	ldr	r2, [r7, #4]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	441a      	add	r2, r3
 8005bac:	8bfb      	ldrh	r3, [r7, #30]
 8005bae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	8013      	strh	r3, [r2, #0]
 8005bc2:	e1c9      	b.n	8005f58 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	78db      	ldrb	r3, [r3, #3]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d11e      	bne.n	8005c0a <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005be2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	441a      	add	r2, r3
 8005bf0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005bf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bfc:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	8013      	strh	r3, [r2, #0]
 8005c08:	e01d      	b.n	8005c46 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c20:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	441a      	add	r2, r3
 8005c2e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005c32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	461a      	mov	r2, r3
 8005c54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c56:	4413      	add	r3, r2
 8005c58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	011a      	lsls	r2, r3, #4
 8005c60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	891b      	ldrh	r3, [r3, #8]
 8005c6e:	085b      	lsrs	r3, r3, #1
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c78:	801a      	strh	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	461a      	mov	r2, r3
 8005c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c8a:	4413      	add	r3, r2
 8005c8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	011a      	lsls	r2, r3, #4
 8005c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005c9c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	895b      	ldrh	r3, [r3, #10]
 8005ca2:	085b      	lsrs	r3, r3, #1
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cac:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f040 8093 	bne.w	8005dde <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	4413      	add	r3, r2
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005cc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005ccc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01b      	beq.n	8005d0c <USB_ActivateEndpoint+0x524>
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4413      	add	r3, r2
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ce6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	441a      	add	r2, r3
 8005cf6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005cf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d00:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	881b      	ldrh	r3, [r3, #0]
 8005d18:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005d1a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d01b      	beq.n	8005d5c <USB_ActivateEndpoint+0x574>
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d3a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	441a      	add	r2, r3
 8005d46:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005d48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d72:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005d74:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d76:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005d7a:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005d7c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d7e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d82:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	009b      	lsls	r3, r3, #2
 8005d8c:	441a      	add	r2, r3
 8005d8e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005d90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4413      	add	r3, r2
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005db6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dba:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	441a      	add	r2, r3
 8005dc6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005dc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	8013      	strh	r3, [r2, #0]
 8005ddc:	e0bc      	b.n	8005f58 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	881b      	ldrh	r3, [r3, #0]
 8005dea:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005dee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005df2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d01d      	beq.n	8005e36 <USB_ActivateEndpoint+0x64e>
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	881b      	ldrh	r3, [r3, #0]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e10:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	441a      	add	r2, r3
 8005e1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005e22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4413      	add	r3, r2
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005e46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d01d      	beq.n	8005e8e <USB_ActivateEndpoint+0x6a6>
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e68:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	781b      	ldrb	r3, [r3, #0]
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	441a      	add	r2, r3
 8005e76:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005e7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	78db      	ldrb	r3, [r3, #3]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d024      	beq.n	8005ee0 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ea8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eac:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005eb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005eb4:	f083 0320 	eor.w	r3, r3, #32
 8005eb8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	441a      	add	r2, r3
 8005ec6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005eca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ece:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	8013      	strh	r3, [r2, #0]
 8005ede:	e01d      	b.n	8005f1c <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ef2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ef6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	441a      	add	r2, r3
 8005f04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005f08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f32:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	441a      	add	r2, r3
 8005f40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005f44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005f58:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3774      	adds	r7, #116	@ 0x74
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bc80      	pop	{r7}
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop

08005f68 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b08d      	sub	sp, #52	@ 0x34
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	7b1b      	ldrb	r3, [r3, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f040 808e 	bne.w	8006098 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	785b      	ldrb	r3, [r3, #1]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d044      	beq.n	800600e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	881b      	ldrh	r3, [r3, #0]
 8005f90:	81bb      	strh	r3, [r7, #12]
 8005f92:	89bb      	ldrh	r3, [r7, #12]
 8005f94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01b      	beq.n	8005fd4 <USB_DeactivateEndpoint+0x6c>
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	881b      	ldrh	r3, [r3, #0]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fb2:	817b      	strh	r3, [r7, #10]
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	441a      	add	r2, r3
 8005fbe:	897b      	ldrh	r3, [r7, #10]
 8005fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fcc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fea:	813b      	strh	r3, [r7, #8]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	441a      	add	r2, r3
 8005ff6:	893b      	ldrh	r3, [r7, #8]
 8005ff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006000:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006008:	b29b      	uxth	r3, r3
 800600a:	8013      	strh	r3, [r2, #0]
 800600c:	e192      	b.n	8006334 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4413      	add	r3, r2
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	827b      	strh	r3, [r7, #18]
 800601c:	8a7b      	ldrh	r3, [r7, #18]
 800601e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d01b      	beq.n	800605e <USB_DeactivateEndpoint+0xf6>
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	4413      	add	r3, r2
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	b29b      	uxth	r3, r3
 8006034:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800603c:	823b      	strh	r3, [r7, #16]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	441a      	add	r2, r3
 8006048:	8a3b      	ldrh	r3, [r7, #16]
 800604a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800604e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006052:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800605a:	b29b      	uxth	r3, r3
 800605c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006074:	81fb      	strh	r3, [r7, #14]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	441a      	add	r2, r3
 8006080:	89fb      	ldrh	r3, [r7, #14]
 8006082:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006086:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800608a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800608e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006092:	b29b      	uxth	r3, r3
 8006094:	8013      	strh	r3, [r2, #0]
 8006096:	e14d      	b.n	8006334 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	785b      	ldrb	r3, [r3, #1]
 800609c:	2b00      	cmp	r3, #0
 800609e:	f040 80a5 	bne.w	80061ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	4413      	add	r3, r2
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	843b      	strh	r3, [r7, #32]
 80060b0:	8c3b      	ldrh	r3, [r7, #32]
 80060b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d01b      	beq.n	80060f2 <USB_DeactivateEndpoint+0x18a>
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4413      	add	r3, r2
 80060c4:	881b      	ldrh	r3, [r3, #0]
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060d0:	83fb      	strh	r3, [r7, #30]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	441a      	add	r2, r3
 80060dc:	8bfb      	ldrh	r3, [r7, #30]
 80060de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	83bb      	strh	r3, [r7, #28]
 8006100:	8bbb      	ldrh	r3, [r7, #28]
 8006102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006106:	2b00      	cmp	r3, #0
 8006108:	d01b      	beq.n	8006142 <USB_DeactivateEndpoint+0x1da>
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	4413      	add	r3, r2
 8006114:	881b      	ldrh	r3, [r3, #0]
 8006116:	b29b      	uxth	r3, r3
 8006118:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800611c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006120:	837b      	strh	r3, [r7, #26]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	441a      	add	r2, r3
 800612c:	8b7b      	ldrh	r3, [r7, #26]
 800612e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006132:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800613a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800613e:	b29b      	uxth	r3, r3
 8006140:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	b29b      	uxth	r3, r3
 8006150:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006158:	833b      	strh	r3, [r7, #24]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	441a      	add	r2, r3
 8006164:	8b3b      	ldrh	r3, [r7, #24]
 8006166:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800616a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800616e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006172:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006176:	b29b      	uxth	r3, r3
 8006178:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	b29b      	uxth	r3, r3
 8006188:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800618c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006190:	82fb      	strh	r3, [r7, #22]
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	441a      	add	r2, r3
 800619c:	8afb      	ldrh	r3, [r7, #22]
 800619e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061c8:	82bb      	strh	r3, [r7, #20]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	441a      	add	r2, r3
 80061d4:	8abb      	ldrh	r3, [r7, #20]
 80061d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	8013      	strh	r3, [r2, #0]
 80061ea:	e0a3      	b.n	8006334 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80061fa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80061fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d01b      	beq.n	800623c <USB_DeactivateEndpoint+0x2d4>
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4413      	add	r3, r2
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800621a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	441a      	add	r2, r3
 8006226:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006228:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800622c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006230:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006234:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006238:	b29b      	uxth	r3, r3
 800623a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800624a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800624c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01b      	beq.n	800628c <USB_DeactivateEndpoint+0x324>
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	441a      	add	r2, r3
 8006276:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800627c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006284:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006288:	b29b      	uxth	r3, r3
 800628a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800629e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062a2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	441a      	add	r2, r3
 80062ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80062b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062da:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	441a      	add	r2, r3
 80062e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800630e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006312:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	441a      	add	r2, r3
 800631e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006320:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006324:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006328:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800632c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006330:	b29b      	uxth	r3, r3
 8006332:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3734      	adds	r7, #52	@ 0x34
 800633a:	46bd      	mov	sp, r7
 800633c:	bc80      	pop	{r7}
 800633e:	4770      	bx	lr

08006340 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b0c2      	sub	sp, #264	@ 0x108
 8006344:	af00      	add	r7, sp, #0
 8006346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800634a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800634e:	6018      	str	r0, [r3, #0]
 8006350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006358:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800635a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800635e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	785b      	ldrb	r3, [r3, #1]
 8006366:	2b01      	cmp	r3, #1
 8006368:	f040 86b7 	bne.w	80070da <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800636c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	699a      	ldr	r2, [r3, #24]
 8006378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800637c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	429a      	cmp	r2, r3
 8006386:	d908      	bls.n	800639a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800638c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006398:	e007      	b.n	80063aa <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800639a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80063aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	7b1b      	ldrb	r3, [r3, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d13a      	bne.n	8006430 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80063ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6959      	ldr	r1, [r3, #20]
 80063c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	88da      	ldrh	r2, [r3, #6]
 80063d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80063dc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80063e0:	6800      	ldr	r0, [r0, #0]
 80063e2:	f001 fc9c 	bl	8007d1e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	613b      	str	r3, [r7, #16]
 80063f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006400:	b29b      	uxth	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	4413      	add	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
 800640a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800640e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	011a      	lsls	r2, r3, #4
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	4413      	add	r3, r2
 800641c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006420:	60fb      	str	r3, [r7, #12]
 8006422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006426:	b29a      	uxth	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	801a      	strh	r2, [r3, #0]
 800642c:	f000 be1f 	b.w	800706e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	78db      	ldrb	r3, [r3, #3]
 800643c:	2b02      	cmp	r3, #2
 800643e:	f040 8462 	bne.w	8006d06 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	6a1a      	ldr	r2, [r3, #32]
 800644e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	429a      	cmp	r2, r3
 800645c:	f240 83df 	bls.w	8006c1e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006464:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006486:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800648a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	441a      	add	r2, r3
 80064a4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80064a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064b0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80064b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80064bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6a1a      	ldr	r2, [r3, #32]
 80064c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064cc:	1ad2      	subs	r2, r2, r3
 80064ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80064da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 81c7 	beq.w	8006890 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006506:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	633b      	str	r3, [r7, #48]	@ 0x30
 800650e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	785b      	ldrb	r3, [r3, #1]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d177      	bne.n	800660e <USB_EPStartXfer+0x2ce>
 800651e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006522:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	62bb      	str	r3, [r7, #40]	@ 0x28
 800652a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800652e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006538:	b29b      	uxth	r3, r3
 800653a:	461a      	mov	r2, r3
 800653c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653e:	4413      	add	r3, r2
 8006540:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	011a      	lsls	r2, r3, #4
 8006550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006552:	4413      	add	r3, r2
 8006554:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006558:	627b      	str	r3, [r7, #36]	@ 0x24
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	b29b      	uxth	r3, r3
 8006560:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006564:	b29a      	uxth	r2, r3
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	801a      	strh	r2, [r3, #0]
 800656a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006570:	d921      	bls.n	80065b6 <USB_EPStartXfer+0x276>
 8006572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006576:	095b      	lsrs	r3, r3, #5
 8006578:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800657c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006580:	f003 031f 	and.w	r3, r3, #31
 8006584:	2b00      	cmp	r3, #0
 8006586:	d104      	bne.n	8006592 <USB_EPStartXfer+0x252>
 8006588:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800658c:	3b01      	subs	r3, #1
 800658e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	881b      	ldrh	r3, [r3, #0]
 8006596:	b29a      	uxth	r2, r3
 8006598:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800659c:	b29b      	uxth	r3, r3
 800659e:	029b      	lsls	r3, r3, #10
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	4313      	orrs	r3, r2
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b2:	801a      	strh	r2, [r3, #0]
 80065b4:	e050      	b.n	8006658 <USB_EPStartXfer+0x318>
 80065b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d10a      	bne.n	80065d4 <USB_EPStartXfer+0x294>
 80065be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c0:	881b      	ldrh	r3, [r3, #0]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	801a      	strh	r2, [r3, #0]
 80065d2:	e041      	b.n	8006658 <USB_EPStartXfer+0x318>
 80065d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d8:	085b      	lsrs	r3, r3, #1
 80065da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80065de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e2:	f003 0301 	and.w	r3, r3, #1
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d004      	beq.n	80065f4 <USB_EPStartXfer+0x2b4>
 80065ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80065ee:	3301      	adds	r3, #1
 80065f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80065f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f6:	881b      	ldrh	r3, [r3, #0]
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80065fe:	b29b      	uxth	r3, r3
 8006600:	029b      	lsls	r3, r3, #10
 8006602:	b29b      	uxth	r3, r3
 8006604:	4313      	orrs	r3, r2
 8006606:	b29a      	uxth	r2, r3
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	801a      	strh	r2, [r3, #0]
 800660c:	e024      	b.n	8006658 <USB_EPStartXfer+0x318>
 800660e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	785b      	ldrb	r3, [r3, #1]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d11c      	bne.n	8006658 <USB_EPStartXfer+0x318>
 800661e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006622:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800662c:	b29b      	uxth	r3, r3
 800662e:	461a      	mov	r2, r3
 8006630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006632:	4413      	add	r3, r2
 8006634:	633b      	str	r3, [r7, #48]	@ 0x30
 8006636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800663a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	011a      	lsls	r2, r3, #4
 8006644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006646:	4413      	add	r3, r2
 8006648:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800664c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800664e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006652:	b29a      	uxth	r2, r3
 8006654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006656:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800665c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	895b      	ldrh	r3, [r3, #10]
 8006664:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	6959      	ldr	r1, [r3, #20]
 8006674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006678:	b29b      	uxth	r3, r3
 800667a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800667e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006682:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006686:	6800      	ldr	r0, [r0, #0]
 8006688:	f001 fb49 	bl	8007d1e <USB_WritePMA>
            ep->xfer_buff += len;
 800668c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	695a      	ldr	r2, [r3, #20]
 8006698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800669c:	441a      	add	r2, r3
 800669e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80066aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	6a1a      	ldr	r2, [r3, #32]
 80066b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d90f      	bls.n	80066e6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80066c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6a1a      	ldr	r2, [r3, #32]
 80066d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d6:	1ad2      	subs	r2, r2, r3
 80066d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	621a      	str	r2, [r3, #32]
 80066e4:	e00e      	b.n	8006704 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80066e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80066f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2200      	movs	r2, #0
 8006702:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	785b      	ldrb	r3, [r3, #1]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d177      	bne.n	8006804 <USB_EPStartXfer+0x4c4>
 8006714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006718:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	61bb      	str	r3, [r7, #24]
 8006720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006724:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800672e:	b29b      	uxth	r3, r3
 8006730:	461a      	mov	r2, r3
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	4413      	add	r3, r2
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	011a      	lsls	r2, r3, #4
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	4413      	add	r3, r2
 800674a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	881b      	ldrh	r3, [r3, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800675a:	b29a      	uxth	r2, r3
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	801a      	strh	r2, [r3, #0]
 8006760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006764:	2b3e      	cmp	r3, #62	@ 0x3e
 8006766:	d921      	bls.n	80067ac <USB_EPStartXfer+0x46c>
 8006768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676c:	095b      	lsrs	r3, r3, #5
 800676e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006776:	f003 031f 	and.w	r3, r3, #31
 800677a:	2b00      	cmp	r3, #0
 800677c:	d104      	bne.n	8006788 <USB_EPStartXfer+0x448>
 800677e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006782:	3b01      	subs	r3, #1
 8006784:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29a      	uxth	r2, r3
 800678e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006792:	b29b      	uxth	r3, r3
 8006794:	029b      	lsls	r3, r3, #10
 8006796:	b29b      	uxth	r3, r3
 8006798:	4313      	orrs	r3, r2
 800679a:	b29b      	uxth	r3, r3
 800679c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	801a      	strh	r2, [r3, #0]
 80067aa:	e056      	b.n	800685a <USB_EPStartXfer+0x51a>
 80067ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <USB_EPStartXfer+0x48a>
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	881b      	ldrh	r3, [r3, #0]
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	801a      	strh	r2, [r3, #0]
 80067c8:	e047      	b.n	800685a <USB_EPStartXfer+0x51a>
 80067ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80067d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d8:	f003 0301 	and.w	r3, r3, #1
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d004      	beq.n	80067ea <USB_EPStartXfer+0x4aa>
 80067e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067e4:	3301      	adds	r3, #1
 80067e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	881b      	ldrh	r3, [r3, #0]
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	029b      	lsls	r3, r3, #10
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	4313      	orrs	r3, r2
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	801a      	strh	r2, [r3, #0]
 8006802:	e02a      	b.n	800685a <USB_EPStartXfer+0x51a>
 8006804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	785b      	ldrb	r3, [r3, #1]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d122      	bne.n	800685a <USB_EPStartXfer+0x51a>
 8006814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006818:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	623b      	str	r3, [r7, #32]
 8006820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006824:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800682e:	b29b      	uxth	r3, r3
 8006830:	461a      	mov	r2, r3
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	4413      	add	r3, r2
 8006836:	623b      	str	r3, [r7, #32]
 8006838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800683c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	011a      	lsls	r2, r3, #4
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	4413      	add	r3, r2
 800684a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800684e:	61fb      	str	r3, [r7, #28]
 8006850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006854:	b29a      	uxth	r2, r3
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800685a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800685e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	891b      	ldrh	r3, [r3, #8]
 8006866:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800686a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800686e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	6959      	ldr	r1, [r3, #20]
 8006876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687a:	b29b      	uxth	r3, r3
 800687c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006880:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006884:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006888:	6800      	ldr	r0, [r0, #0]
 800688a:	f001 fa48 	bl	8007d1e <USB_WritePMA>
 800688e:	e3ee      	b.n	800706e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006894:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d177      	bne.n	8006990 <USB_EPStartXfer+0x650>
 80068a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	461a      	mov	r2, r3
 80068be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068c0:	4413      	add	r3, r2
 80068c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	011a      	lsls	r2, r3, #4
 80068d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068d4:	4413      	add	r3, r2
 80068d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068da:	647b      	str	r3, [r7, #68]	@ 0x44
 80068dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068de:	881b      	ldrh	r3, [r3, #0]
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ea:	801a      	strh	r2, [r3, #0]
 80068ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80068f2:	d921      	bls.n	8006938 <USB_EPStartXfer+0x5f8>
 80068f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80068fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	2b00      	cmp	r3, #0
 8006908:	d104      	bne.n	8006914 <USB_EPStartXfer+0x5d4>
 800690a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800690e:	3b01      	subs	r3, #1
 8006910:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	b29a      	uxth	r2, r3
 800691a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800691e:	b29b      	uxth	r3, r3
 8006920:	029b      	lsls	r3, r3, #10
 8006922:	b29b      	uxth	r3, r3
 8006924:	4313      	orrs	r3, r2
 8006926:	b29b      	uxth	r3, r3
 8006928:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800692c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006930:	b29a      	uxth	r2, r3
 8006932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006934:	801a      	strh	r2, [r3, #0]
 8006936:	e056      	b.n	80069e6 <USB_EPStartXfer+0x6a6>
 8006938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <USB_EPStartXfer+0x616>
 8006940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	b29b      	uxth	r3, r3
 8006946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800694a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800694e:	b29a      	uxth	r2, r3
 8006950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006952:	801a      	strh	r2, [r3, #0]
 8006954:	e047      	b.n	80069e6 <USB_EPStartXfer+0x6a6>
 8006956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695a:	085b      	lsrs	r3, r3, #1
 800695c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006964:	f003 0301 	and.w	r3, r3, #1
 8006968:	2b00      	cmp	r3, #0
 800696a:	d004      	beq.n	8006976 <USB_EPStartXfer+0x636>
 800696c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006970:	3301      	adds	r3, #1
 8006972:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006976:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006978:	881b      	ldrh	r3, [r3, #0]
 800697a:	b29a      	uxth	r2, r3
 800697c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006980:	b29b      	uxth	r3, r3
 8006982:	029b      	lsls	r3, r3, #10
 8006984:	b29b      	uxth	r3, r3
 8006986:	4313      	orrs	r3, r2
 8006988:	b29a      	uxth	r2, r3
 800698a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800698c:	801a      	strh	r2, [r3, #0]
 800698e:	e02a      	b.n	80069e6 <USB_EPStartXfer+0x6a6>
 8006990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	785b      	ldrb	r3, [r3, #1]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d122      	bne.n	80069e6 <USB_EPStartXfer+0x6a6>
 80069a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80069ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	461a      	mov	r2, r3
 80069be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069c0:	4413      	add	r3, r2
 80069c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80069c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	011a      	lsls	r2, r3, #4
 80069d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069d4:	4413      	add	r3, r2
 80069d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80069e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	891b      	ldrh	r3, [r3, #8]
 80069f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6959      	ldr	r1, [r3, #20]
 8006a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a0c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a10:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a14:	6800      	ldr	r0, [r0, #0]
 8006a16:	f001 f982 	bl	8007d1e <USB_WritePMA>
            ep->xfer_buff += len;
 8006a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	695a      	ldr	r2, [r3, #20]
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2a:	441a      	add	r2, r3
 8006a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6a1a      	ldr	r2, [r3, #32]
 8006a44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d90f      	bls.n	8006a74 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	6a1a      	ldr	r2, [r3, #32]
 8006a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a64:	1ad2      	subs	r2, r2, r3
 8006a66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	621a      	str	r2, [r3, #32]
 8006a72:	e00e      	b.n	8006a92 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	785b      	ldrb	r3, [r3, #1]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d177      	bne.n	8006b9e <USB_EPStartXfer+0x85e>
 8006aae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006abe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	461a      	mov	r2, r3
 8006acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ace:	4413      	add	r3, r2
 8006ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	011a      	lsls	r2, r3, #4
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aec:	881b      	ldrh	r3, [r3, #0]
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006af8:	801a      	strh	r2, [r3, #0]
 8006afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006afe:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b00:	d921      	bls.n	8006b46 <USB_EPStartXfer+0x806>
 8006b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b06:	095b      	lsrs	r3, r3, #5
 8006b08:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b10:	f003 031f 	and.w	r3, r3, #31
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d104      	bne.n	8006b22 <USB_EPStartXfer+0x7e2>
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b24:	881b      	ldrh	r3, [r3, #0]
 8006b26:	b29a      	uxth	r2, r3
 8006b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	029b      	lsls	r3, r3, #10
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	4313      	orrs	r3, r2
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b42:	801a      	strh	r2, [r3, #0]
 8006b44:	e050      	b.n	8006be8 <USB_EPStartXfer+0x8a8>
 8006b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10a      	bne.n	8006b64 <USB_EPStartXfer+0x824>
 8006b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b50:	881b      	ldrh	r3, [r3, #0]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b60:	801a      	strh	r2, [r3, #0]
 8006b62:	e041      	b.n	8006be8 <USB_EPStartXfer+0x8a8>
 8006b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b68:	085b      	lsrs	r3, r3, #1
 8006b6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d004      	beq.n	8006b84 <USB_EPStartXfer+0x844>
 8006b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b7e:	3301      	adds	r3, #1
 8006b80:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	029b      	lsls	r3, r3, #10
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	4313      	orrs	r3, r2
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b9a:	801a      	strh	r2, [r3, #0]
 8006b9c:	e024      	b.n	8006be8 <USB_EPStartXfer+0x8a8>
 8006b9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	785b      	ldrb	r3, [r3, #1]
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d11c      	bne.n	8006be8 <USB_EPStartXfer+0x8a8>
 8006bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bc2:	4413      	add	r3, r2
 8006bc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	011a      	lsls	r2, r3, #4
 8006bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006be6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	895b      	ldrh	r3, [r3, #10]
 8006bf4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006bf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6959      	ldr	r1, [r3, #20]
 8006c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c08:	b29b      	uxth	r3, r3
 8006c0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c0e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c12:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c16:	6800      	ldr	r0, [r0, #0]
 8006c18:	f001 f881 	bl	8007d1e <USB_WritePMA>
 8006c1c:	e227      	b.n	800706e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006c2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4413      	add	r3, r2
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006c50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c54:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006c58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	009b      	lsls	r3, r3, #2
 8006c70:	441a      	add	r2, r3
 8006c72:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006c76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006c7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006c8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006caa:	4413      	add	r3, r2
 8006cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	011a      	lsls	r2, r3, #4
 8006cbc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006cce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	891b      	ldrh	r3, [r3, #8]
 8006cdc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	6959      	ldr	r1, [r3, #20]
 8006cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006cf6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cfa:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cfe:	6800      	ldr	r0, [r0, #0]
 8006d00:	f001 f80d 	bl	8007d1e <USB_WritePMA>
 8006d04:	e1b3      	b.n	800706e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6a1a      	ldr	r2, [r3, #32]
 8006d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	881b      	ldrh	r3, [r3, #0]
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 80c6 	beq.w	8006ed8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	785b      	ldrb	r3, [r3, #1]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d177      	bne.n	8006e58 <USB_EPStartXfer+0xb18>
 8006d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	461a      	mov	r2, r3
 8006d86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d88:	4413      	add	r3, r2
 8006d8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	011a      	lsls	r2, r3, #4
 8006d9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006da2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006da4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006db2:	801a      	strh	r2, [r3, #0]
 8006db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dba:	d921      	bls.n	8006e00 <USB_EPStartXfer+0xac0>
 8006dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc0:	095b      	lsrs	r3, r3, #5
 8006dc2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dca:	f003 031f 	and.w	r3, r3, #31
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d104      	bne.n	8006ddc <USB_EPStartXfer+0xa9c>
 8006dd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006ddc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	029b      	lsls	r3, r3, #10
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	4313      	orrs	r3, r2
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dfc:	801a      	strh	r2, [r3, #0]
 8006dfe:	e050      	b.n	8006ea2 <USB_EPStartXfer+0xb62>
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10a      	bne.n	8006e1e <USB_EPStartXfer+0xade>
 8006e08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e0a:	881b      	ldrh	r3, [r3, #0]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e1a:	801a      	strh	r2, [r3, #0]
 8006e1c:	e041      	b.n	8006ea2 <USB_EPStartXfer+0xb62>
 8006e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e22:	085b      	lsrs	r3, r3, #1
 8006e24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d004      	beq.n	8006e3e <USB_EPStartXfer+0xafe>
 8006e34:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e38:	3301      	adds	r3, #1
 8006e3a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e40:	881b      	ldrh	r3, [r3, #0]
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	029b      	lsls	r3, r3, #10
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e54:	801a      	strh	r2, [r3, #0]
 8006e56:	e024      	b.n	8006ea2 <USB_EPStartXfer+0xb62>
 8006e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	785b      	ldrb	r3, [r3, #1]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d11c      	bne.n	8006ea2 <USB_EPStartXfer+0xb62>
 8006e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e7c:	4413      	add	r3, r2
 8006e7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	011a      	lsls	r2, r3, #4
 8006e8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e90:	4413      	add	r3, r2
 8006e92:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ea0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	895b      	ldrh	r3, [r3, #10]
 8006eae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6959      	ldr	r1, [r3, #20]
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ec8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ecc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ed0:	6800      	ldr	r0, [r0, #0]
 8006ed2:	f000 ff24 	bl	8007d1e <USB_WritePMA>
 8006ed6:	e0ca      	b.n	800706e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d177      	bne.n	8006fd8 <USB_EPStartXfer+0xc98>
 8006ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f08:	4413      	add	r3, r2
 8006f0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	011a      	lsls	r2, r3, #4
 8006f1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f38:	2b3e      	cmp	r3, #62	@ 0x3e
 8006f3a:	d921      	bls.n	8006f80 <USB_EPStartXfer+0xc40>
 8006f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f40:	095b      	lsrs	r3, r3, #5
 8006f42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d104      	bne.n	8006f5c <USB_EPStartXfer+0xc1c>
 8006f52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f56:	3b01      	subs	r3, #1
 8006f58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006f5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	029b      	lsls	r3, r3, #10
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f7c:	801a      	strh	r2, [r3, #0]
 8006f7e:	e05c      	b.n	800703a <USB_EPStartXfer+0xcfa>
 8006f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <USB_EPStartXfer+0xc5e>
 8006f88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f96:	b29a      	uxth	r2, r3
 8006f98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f9a:	801a      	strh	r2, [r3, #0]
 8006f9c:	e04d      	b.n	800703a <USB_EPStartXfer+0xcfa>
 8006f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fa2:	085b      	lsrs	r3, r3, #1
 8006fa4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d004      	beq.n	8006fbe <USB_EPStartXfer+0xc7e>
 8006fb4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006fb8:	3301      	adds	r3, #1
 8006fba:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006fbe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fc0:	881b      	ldrh	r3, [r3, #0]
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	029b      	lsls	r3, r3, #10
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fd4:	801a      	strh	r2, [r3, #0]
 8006fd6:	e030      	b.n	800703a <USB_EPStartXfer+0xcfa>
 8006fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	785b      	ldrb	r3, [r3, #1]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d128      	bne.n	800703a <USB_EPStartXfer+0xcfa>
 8006fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007004:	b29b      	uxth	r3, r3
 8007006:	461a      	mov	r2, r3
 8007008:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800700c:	4413      	add	r3, r2
 800700e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	011a      	lsls	r2, r3, #4
 8007020:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007024:	4413      	add	r3, r2
 8007026:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800702a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800702e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007032:	b29a      	uxth	r2, r3
 8007034:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007038:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800703a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	891b      	ldrh	r3, [r3, #8]
 8007046:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800704a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6959      	ldr	r1, [r3, #20]
 8007056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705a:	b29b      	uxth	r3, r3
 800705c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007060:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007064:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007068:	6800      	ldr	r0, [r0, #0]
 800706a:	f000 fe58 	bl	8007d1e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800706e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007072:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800707c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007090:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007094:	817b      	strh	r3, [r7, #10]
 8007096:	897b      	ldrh	r3, [r7, #10]
 8007098:	f083 0310 	eor.w	r3, r3, #16
 800709c:	817b      	strh	r3, [r7, #10]
 800709e:	897b      	ldrh	r3, [r7, #10]
 80070a0:	f083 0320 	eor.w	r3, r3, #32
 80070a4:	817b      	strh	r3, [r7, #10]
 80070a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	441a      	add	r2, r3
 80070c0:	897b      	ldrh	r3, [r7, #10]
 80070c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	8013      	strh	r3, [r2, #0]
 80070d6:	f000 bcde 	b.w	8007a96 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80070da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	7b1b      	ldrb	r3, [r3, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	f040 80bb 	bne.w	8007262 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80070ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	699a      	ldr	r2, [r3, #24]
 80070f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	429a      	cmp	r2, r3
 8007106:	d917      	bls.n	8007138 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007128:	1ad2      	subs	r2, r2, r3
 800712a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800712e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	619a      	str	r2, [r3, #24]
 8007136:	e00e      	b.n	8007156 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800713c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007148:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800714c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2200      	movs	r2, #0
 8007154:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007164:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007168:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007172:	b29b      	uxth	r3, r3
 8007174:	461a      	mov	r2, r3
 8007176:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800717a:	4413      	add	r3, r2
 800717c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	011a      	lsls	r2, r3, #4
 800718e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007192:	4413      	add	r3, r2
 8007194:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007198:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800719c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071ae:	801a      	strh	r2, [r3, #0]
 80071b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80071b6:	d924      	bls.n	8007202 <USB_EPStartXfer+0xec2>
 80071b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071bc:	095b      	lsrs	r3, r3, #5
 80071be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071c6:	f003 031f 	and.w	r3, r3, #31
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d104      	bne.n	80071d8 <USB_EPStartXfer+0xe98>
 80071ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071d2:	3b01      	subs	r3, #1
 80071d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071dc:	881b      	ldrh	r3, [r3, #0]
 80071de:	b29a      	uxth	r2, r3
 80071e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	029b      	lsls	r3, r3, #10
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	4313      	orrs	r3, r2
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071fc:	801a      	strh	r2, [r3, #0]
 80071fe:	f000 bc10 	b.w	8007a22 <USB_EPStartXfer+0x16e2>
 8007202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10c      	bne.n	8007224 <USB_EPStartXfer+0xee4>
 800720a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	b29b      	uxth	r3, r3
 8007212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800721a:	b29a      	uxth	r2, r3
 800721c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007220:	801a      	strh	r2, [r3, #0]
 8007222:	e3fe      	b.n	8007a22 <USB_EPStartXfer+0x16e2>
 8007224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007228:	085b      	lsrs	r3, r3, #1
 800722a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800722e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	2b00      	cmp	r3, #0
 8007238:	d004      	beq.n	8007244 <USB_EPStartXfer+0xf04>
 800723a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800723e:	3301      	adds	r3, #1
 8007240:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007244:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007248:	881b      	ldrh	r3, [r3, #0]
 800724a:	b29a      	uxth	r2, r3
 800724c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007250:	b29b      	uxth	r3, r3
 8007252:	029b      	lsls	r3, r3, #10
 8007254:	b29b      	uxth	r3, r3
 8007256:	4313      	orrs	r3, r2
 8007258:	b29a      	uxth	r2, r3
 800725a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800725e:	801a      	strh	r2, [r3, #0]
 8007260:	e3df      	b.n	8007a22 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	78db      	ldrb	r3, [r3, #3]
 800726e:	2b02      	cmp	r3, #2
 8007270:	f040 8218 	bne.w	80076a4 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	785b      	ldrb	r3, [r3, #1]
 8007280:	2b00      	cmp	r3, #0
 8007282:	f040 809d 	bne.w	80073c0 <USB_EPStartXfer+0x1080>
 8007286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072aa:	4413      	add	r3, r2
 80072ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	011a      	lsls	r2, r3, #4
 80072be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80072c2:	4413      	add	r3, r2
 80072c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072d8:	b29a      	uxth	r2, r3
 80072da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80072de:	801a      	strh	r2, [r3, #0]
 80072e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80072ee:	d92b      	bls.n	8007348 <USB_EPStartXfer+0x1008>
 80072f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	095b      	lsrs	r3, r3, #5
 80072fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	f003 031f 	and.w	r3, r3, #31
 8007312:	2b00      	cmp	r3, #0
 8007314:	d104      	bne.n	8007320 <USB_EPStartXfer+0xfe0>
 8007316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800731a:	3b01      	subs	r3, #1
 800731c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007320:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007324:	881b      	ldrh	r3, [r3, #0]
 8007326:	b29a      	uxth	r2, r3
 8007328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800732c:	b29b      	uxth	r3, r3
 800732e:	029b      	lsls	r3, r3, #10
 8007330:	b29b      	uxth	r3, r3
 8007332:	4313      	orrs	r3, r2
 8007334:	b29b      	uxth	r3, r3
 8007336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800733a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800733e:	b29a      	uxth	r2, r3
 8007340:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007344:	801a      	strh	r2, [r3, #0]
 8007346:	e070      	b.n	800742a <USB_EPStartXfer+0x10ea>
 8007348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10c      	bne.n	8007372 <USB_EPStartXfer+0x1032>
 8007358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007364:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007368:	b29a      	uxth	r2, r3
 800736a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800736e:	801a      	strh	r2, [r3, #0]
 8007370:	e05b      	b.n	800742a <USB_EPStartXfer+0x10ea>
 8007372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	085b      	lsrs	r3, r3, #1
 8007380:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d004      	beq.n	80073a2 <USB_EPStartXfer+0x1062>
 8007398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800739c:	3301      	adds	r3, #1
 800739e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073a6:	881b      	ldrh	r3, [r3, #0]
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	029b      	lsls	r3, r3, #10
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	4313      	orrs	r3, r2
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073bc:	801a      	strh	r2, [r3, #0]
 80073be:	e034      	b.n	800742a <USB_EPStartXfer+0x10ea>
 80073c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	785b      	ldrb	r3, [r3, #1]
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d12c      	bne.n	800742a <USB_EPStartXfer+0x10ea>
 80073d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073ec:	b29b      	uxth	r3, r3
 80073ee:	461a      	mov	r2, r3
 80073f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073f4:	4413      	add	r3, r2
 80073f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	011a      	lsls	r2, r3, #4
 8007408:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800740c:	4413      	add	r3, r2
 800740e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007416:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	b29a      	uxth	r2, r3
 8007424:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007428:	801a      	strh	r2, [r3, #0]
 800742a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800742e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	785b      	ldrb	r3, [r3, #1]
 8007444:	2b00      	cmp	r3, #0
 8007446:	f040 809d 	bne.w	8007584 <USB_EPStartXfer+0x1244>
 800744a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800744e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800745c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007466:	b29b      	uxth	r3, r3
 8007468:	461a      	mov	r2, r3
 800746a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800746e:	4413      	add	r3, r2
 8007470:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007478:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	011a      	lsls	r2, r3, #4
 8007482:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007486:	4413      	add	r3, r2
 8007488:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800748c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007490:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007494:	881b      	ldrh	r3, [r3, #0]
 8007496:	b29b      	uxth	r3, r3
 8007498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800749c:	b29a      	uxth	r2, r3
 800749e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074a2:	801a      	strh	r2, [r3, #0]
 80074a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80074b2:	d92b      	bls.n	800750c <USB_EPStartXfer+0x11cc>
 80074b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	095b      	lsrs	r3, r3, #5
 80074c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f003 031f 	and.w	r3, r3, #31
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d104      	bne.n	80074e4 <USB_EPStartXfer+0x11a4>
 80074da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074de:	3b01      	subs	r3, #1
 80074e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074e8:	881b      	ldrh	r3, [r3, #0]
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	029b      	lsls	r3, r3, #10
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	4313      	orrs	r3, r2
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007502:	b29a      	uxth	r2, r3
 8007504:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007508:	801a      	strh	r2, [r3, #0]
 800750a:	e069      	b.n	80075e0 <USB_EPStartXfer+0x12a0>
 800750c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10c      	bne.n	8007536 <USB_EPStartXfer+0x11f6>
 800751c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007520:	881b      	ldrh	r3, [r3, #0]
 8007522:	b29b      	uxth	r3, r3
 8007524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800752c:	b29a      	uxth	r2, r3
 800752e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007532:	801a      	strh	r2, [r3, #0]
 8007534:	e054      	b.n	80075e0 <USB_EPStartXfer+0x12a0>
 8007536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	085b      	lsrs	r3, r3, #1
 8007544:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800754c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	f003 0301 	and.w	r3, r3, #1
 8007558:	2b00      	cmp	r3, #0
 800755a:	d004      	beq.n	8007566 <USB_EPStartXfer+0x1226>
 800755c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007560:	3301      	adds	r3, #1
 8007562:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007566:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	b29a      	uxth	r2, r3
 800756e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007572:	b29b      	uxth	r3, r3
 8007574:	029b      	lsls	r3, r3, #10
 8007576:	b29b      	uxth	r3, r3
 8007578:	4313      	orrs	r3, r2
 800757a:	b29a      	uxth	r2, r3
 800757c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007580:	801a      	strh	r2, [r3, #0]
 8007582:	e02d      	b.n	80075e0 <USB_EPStartXfer+0x12a0>
 8007584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	785b      	ldrb	r3, [r3, #1]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d125      	bne.n	80075e0 <USB_EPStartXfer+0x12a0>
 8007594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007598:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	461a      	mov	r2, r3
 80075a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075aa:	4413      	add	r3, r2
 80075ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80075b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	011a      	lsls	r2, r3, #4
 80075be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80075c2:	4413      	add	r3, r2
 80075c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80075c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80075cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	b29a      	uxth	r2, r3
 80075da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075de:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80075e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 8218 	beq.w	8007a22 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80075f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007612:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800761a:	2b00      	cmp	r3, #0
 800761c:	d005      	beq.n	800762a <USB_EPStartXfer+0x12ea>
 800761e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007622:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10d      	bne.n	8007646 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800762a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800762e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007632:	2b00      	cmp	r3, #0
 8007634:	f040 81f5 	bne.w	8007a22 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007638:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800763c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007640:	2b00      	cmp	r3, #0
 8007642:	f040 81ee 	bne.w	8007a22 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	4413      	add	r3, r2
 8007660:	881b      	ldrh	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007668:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800766c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007674:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800767e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	441a      	add	r2, r3
 800768a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800768e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800769a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800769e:	b29b      	uxth	r3, r3
 80076a0:	8013      	strh	r3, [r2, #0]
 80076a2:	e1be      	b.n	8007a22 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80076a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	78db      	ldrb	r3, [r3, #3]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	f040 81b4 	bne.w	8007a1e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80076b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699a      	ldr	r2, [r3, #24]
 80076c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d917      	bls.n	8007702 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80076d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80076e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	699a      	ldr	r2, [r3, #24]
 80076ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f2:	1ad2      	subs	r2, r2, r3
 80076f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	619a      	str	r2, [r3, #24]
 8007700:	e00e      	b.n	8007720 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2200      	movs	r2, #0
 800771e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	785b      	ldrb	r3, [r3, #1]
 800772c:	2b00      	cmp	r3, #0
 800772e:	f040 8085 	bne.w	800783c <USB_EPStartXfer+0x14fc>
 8007732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007736:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007744:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800774e:	b29b      	uxth	r3, r3
 8007750:	461a      	mov	r2, r3
 8007752:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007756:	4413      	add	r3, r2
 8007758:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800775c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007760:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	011a      	lsls	r2, r3, #4
 800776a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800776e:	4413      	add	r3, r2
 8007770:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007774:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007778:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	b29b      	uxth	r3, r3
 8007780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007784:	b29a      	uxth	r2, r3
 8007786:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800778a:	801a      	strh	r2, [r3, #0]
 800778c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007790:	2b3e      	cmp	r3, #62	@ 0x3e
 8007792:	d923      	bls.n	80077dc <USB_EPStartXfer+0x149c>
 8007794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007798:	095b      	lsrs	r3, r3, #5
 800779a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800779e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a2:	f003 031f 	and.w	r3, r3, #31
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d104      	bne.n	80077b4 <USB_EPStartXfer+0x1474>
 80077aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077ae:	3b01      	subs	r3, #1
 80077b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80077b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	b29a      	uxth	r2, r3
 80077bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077c0:	b29b      	uxth	r3, r3
 80077c2:	029b      	lsls	r3, r3, #10
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	4313      	orrs	r3, r2
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077d8:	801a      	strh	r2, [r3, #0]
 80077da:	e060      	b.n	800789e <USB_EPStartXfer+0x155e>
 80077dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d10c      	bne.n	80077fe <USB_EPStartXfer+0x14be>
 80077e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077e8:	881b      	ldrh	r3, [r3, #0]
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077fa:	801a      	strh	r2, [r3, #0]
 80077fc:	e04f      	b.n	800789e <USB_EPStartXfer+0x155e>
 80077fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007802:	085b      	lsrs	r3, r3, #1
 8007804:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	2b00      	cmp	r3, #0
 8007812:	d004      	beq.n	800781e <USB_EPStartXfer+0x14de>
 8007814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007818:	3301      	adds	r3, #1
 800781a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800781e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	b29a      	uxth	r2, r3
 8007826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800782a:	b29b      	uxth	r3, r3
 800782c:	029b      	lsls	r3, r3, #10
 800782e:	b29b      	uxth	r3, r3
 8007830:	4313      	orrs	r3, r2
 8007832:	b29a      	uxth	r2, r3
 8007834:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007838:	801a      	strh	r2, [r3, #0]
 800783a:	e030      	b.n	800789e <USB_EPStartXfer+0x155e>
 800783c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	785b      	ldrb	r3, [r3, #1]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d128      	bne.n	800789e <USB_EPStartXfer+0x155e>
 800784c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007850:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800785a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007868:	b29b      	uxth	r3, r3
 800786a:	461a      	mov	r2, r3
 800786c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007870:	4413      	add	r3, r2
 8007872:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	011a      	lsls	r2, r3, #4
 8007884:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007888:	4413      	add	r3, r2
 800788a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800788e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007896:	b29a      	uxth	r2, r3
 8007898:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800789c:	801a      	strh	r2, [r3, #0]
 800789e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80078ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	f040 8085 	bne.w	80079c8 <USB_EPStartXfer+0x1688>
 80078be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80078cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078da:	b29b      	uxth	r3, r3
 80078dc:	461a      	mov	r2, r3
 80078de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078e2:	4413      	add	r3, r2
 80078e4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80078e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	011a      	lsls	r2, r3, #4
 80078f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80078fa:	4413      	add	r3, r2
 80078fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007900:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007904:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007908:	881b      	ldrh	r3, [r3, #0]
 800790a:	b29b      	uxth	r3, r3
 800790c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007910:	b29a      	uxth	r2, r3
 8007912:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007916:	801a      	strh	r2, [r3, #0]
 8007918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800791c:	2b3e      	cmp	r3, #62	@ 0x3e
 800791e:	d923      	bls.n	8007968 <USB_EPStartXfer+0x1628>
 8007920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007924:	095b      	lsrs	r3, r3, #5
 8007926:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800792a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800792e:	f003 031f 	and.w	r3, r3, #31
 8007932:	2b00      	cmp	r3, #0
 8007934:	d104      	bne.n	8007940 <USB_EPStartXfer+0x1600>
 8007936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800793a:	3b01      	subs	r3, #1
 800793c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007940:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007944:	881b      	ldrh	r3, [r3, #0]
 8007946:	b29a      	uxth	r2, r3
 8007948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800794c:	b29b      	uxth	r3, r3
 800794e:	029b      	lsls	r3, r3, #10
 8007950:	b29b      	uxth	r3, r3
 8007952:	4313      	orrs	r3, r2
 8007954:	b29b      	uxth	r3, r3
 8007956:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800795a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800795e:	b29a      	uxth	r2, r3
 8007960:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007964:	801a      	strh	r2, [r3, #0]
 8007966:	e05c      	b.n	8007a22 <USB_EPStartXfer+0x16e2>
 8007968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10c      	bne.n	800798a <USB_EPStartXfer+0x164a>
 8007970:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	b29b      	uxth	r3, r3
 8007978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800797c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007980:	b29a      	uxth	r2, r3
 8007982:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007986:	801a      	strh	r2, [r3, #0]
 8007988:	e04b      	b.n	8007a22 <USB_EPStartXfer+0x16e2>
 800798a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800798e:	085b      	lsrs	r3, r3, #1
 8007990:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d004      	beq.n	80079aa <USB_EPStartXfer+0x166a>
 80079a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079a4:	3301      	adds	r3, #1
 80079a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079ae:	881b      	ldrh	r3, [r3, #0]
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	029b      	lsls	r3, r3, #10
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	4313      	orrs	r3, r2
 80079be:	b29a      	uxth	r2, r3
 80079c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079c4:	801a      	strh	r2, [r3, #0]
 80079c6:	e02c      	b.n	8007a22 <USB_EPStartXfer+0x16e2>
 80079c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	785b      	ldrb	r3, [r3, #1]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d124      	bne.n	8007a22 <USB_EPStartXfer+0x16e2>
 80079d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079e6:	b29b      	uxth	r3, r3
 80079e8:	461a      	mov	r2, r3
 80079ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079ee:	4413      	add	r3, r2
 80079f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80079f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	011a      	lsls	r2, r3, #4
 8007a02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a06:	4413      	add	r3, r2
 8007a08:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a14:	b29a      	uxth	r2, r3
 8007a16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a1a:	801a      	strh	r2, [r3, #0]
 8007a1c:	e001      	b.n	8007a22 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e03a      	b.n	8007a98 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a48:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a50:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007a54:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a5c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007a60:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	441a      	add	r2, r3
 8007a7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b085      	sub	sp, #20
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	785b      	ldrb	r3, [r3, #1]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d020      	beq.n	8007af6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	881b      	ldrh	r3, [r3, #0]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ac6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007aca:	81bb      	strh	r3, [r7, #12]
 8007acc:	89bb      	ldrh	r3, [r7, #12]
 8007ace:	f083 0310 	eor.w	r3, r3, #16
 8007ad2:	81bb      	strh	r3, [r7, #12]
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	441a      	add	r2, r3
 8007ade:	89bb      	ldrh	r3, [r7, #12]
 8007ae0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ae4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ae8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	8013      	strh	r3, [r2, #0]
 8007af4:	e01f      	b.n	8007b36 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	881b      	ldrh	r3, [r3, #0]
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b0c:	81fb      	strh	r3, [r7, #14]
 8007b0e:	89fb      	ldrh	r3, [r7, #14]
 8007b10:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b14:	81fb      	strh	r3, [r7, #14]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	441a      	add	r2, r3
 8007b20:	89fb      	ldrh	r3, [r7, #14]
 8007b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bc80      	pop	{r7}
 8007b40:	4770      	bx	lr

08007b42 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b087      	sub	sp, #28
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	7b1b      	ldrb	r3, [r3, #12]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f040 809d 	bne.w	8007c90 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d04c      	beq.n	8007bf8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	881b      	ldrh	r3, [r3, #0]
 8007b6a:	823b      	strh	r3, [r7, #16]
 8007b6c:	8a3b      	ldrh	r3, [r7, #16]
 8007b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d01b      	beq.n	8007bae <USB_EPClearStall+0x6c>
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	b29b      	uxth	r3, r3
 8007b84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b8c:	81fb      	strh	r3, [r7, #14]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	441a      	add	r2, r3
 8007b98:	89fb      	ldrh	r3, [r7, #14]
 8007b9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ba2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ba6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	78db      	ldrb	r3, [r3, #3]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d06c      	beq.n	8007c90 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	881b      	ldrh	r3, [r3, #0]
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bc8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bcc:	81bb      	strh	r3, [r7, #12]
 8007bce:	89bb      	ldrh	r3, [r7, #12]
 8007bd0:	f083 0320 	eor.w	r3, r3, #32
 8007bd4:	81bb      	strh	r3, [r7, #12]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	441a      	add	r2, r3
 8007be0:	89bb      	ldrh	r3, [r7, #12]
 8007be2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007be6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	8013      	strh	r3, [r2, #0]
 8007bf6:	e04b      	b.n	8007c90 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	82fb      	strh	r3, [r7, #22]
 8007c06:	8afb      	ldrh	r3, [r7, #22]
 8007c08:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d01b      	beq.n	8007c48 <USB_EPClearStall+0x106>
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	009b      	lsls	r3, r3, #2
 8007c18:	4413      	add	r3, r2
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c26:	82bb      	strh	r3, [r7, #20]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	441a      	add	r2, r3
 8007c32:	8abb      	ldrh	r3, [r7, #20]
 8007c34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c3c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	781b      	ldrb	r3, [r3, #0]
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c5e:	827b      	strh	r3, [r7, #18]
 8007c60:	8a7b      	ldrh	r3, [r7, #18]
 8007c62:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007c66:	827b      	strh	r3, [r7, #18]
 8007c68:	8a7b      	ldrh	r3, [r7, #18]
 8007c6a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007c6e:	827b      	strh	r3, [r7, #18]
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	441a      	add	r2, r3
 8007c7a:	8a7b      	ldrh	r3, [r7, #18]
 8007c7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	371c      	adds	r7, #28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bc80      	pop	{r7}
 8007c9a:	4770      	bx	lr

08007c9c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007ca8:	78fb      	ldrb	r3, [r7, #3]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d103      	bne.n	8007cb6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2280      	movs	r2, #128	@ 0x80
 8007cb2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bc80      	pop	{r7}
 8007cc0:	4770      	bx	lr

08007cc2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bc80      	pop	{r7}
 8007cd4:	4770      	bx	lr

08007cd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bc80      	pop	{r7}
 8007ce8:	4770      	bx	lr

08007cea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b085      	sub	sp, #20
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3714      	adds	r7, #20
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bc80      	pop	{r7}
 8007d06:	4770      	bx	lr

08007d08 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	370c      	adds	r7, #12
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bc80      	pop	{r7}
 8007d1c:	4770      	bx	lr

08007d1e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b08b      	sub	sp, #44	@ 0x2c
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	60f8      	str	r0, [r7, #12]
 8007d26:	60b9      	str	r1, [r7, #8]
 8007d28:	4611      	mov	r1, r2
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	80fb      	strh	r3, [r7, #6]
 8007d30:	4613      	mov	r3, r2
 8007d32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007d34:	88bb      	ldrh	r3, [r7, #4]
 8007d36:	3301      	adds	r3, #1
 8007d38:	085b      	lsrs	r3, r3, #1
 8007d3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007d44:	88fb      	ldrh	r3, [r7, #6]
 8007d46:	005a      	lsls	r2, r3, #1
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d50:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d56:	e01e      	b.n	8007d96 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	3301      	adds	r3, #1
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	b21a      	sxth	r2, r3
 8007d68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	b21b      	sxth	r3, r3
 8007d70:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	8a7a      	ldrh	r2, [r7, #18]
 8007d76:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	3302      	adds	r3, #2
 8007d7c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	3302      	adds	r3, #2
 8007d82:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007d84:	69fb      	ldr	r3, [r7, #28]
 8007d86:	3301      	adds	r3, #1
 8007d88:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d92:	3b01      	subs	r3, #1
 8007d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1dd      	bne.n	8007d58 <USB_WritePMA+0x3a>
  }
}
 8007d9c:	bf00      	nop
 8007d9e:	bf00      	nop
 8007da0:	372c      	adds	r7, #44	@ 0x2c
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bc80      	pop	{r7}
 8007da6:	4770      	bx	lr

08007da8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b08b      	sub	sp, #44	@ 0x2c
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4611      	mov	r1, r2
 8007db4:	461a      	mov	r2, r3
 8007db6:	460b      	mov	r3, r1
 8007db8:	80fb      	strh	r3, [r7, #6]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007dbe:	88bb      	ldrh	r3, [r7, #4]
 8007dc0:	085b      	lsrs	r3, r3, #1
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dce:	88fb      	ldrh	r3, [r7, #6]
 8007dd0:	005a      	lsls	r2, r3, #1
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dda:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8007de0:	e01b      	b.n	8007e1a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	881b      	ldrh	r3, [r3, #0]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007dea:	6a3b      	ldr	r3, [r7, #32]
 8007dec:	3302      	adds	r3, #2
 8007dee:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	0a1b      	lsrs	r3, r3, #8
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e0e:	6a3b      	ldr	r3, [r7, #32]
 8007e10:	3302      	adds	r3, #2
 8007e12:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e16:	3b01      	subs	r3, #1
 8007e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e0      	bne.n	8007de2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007e20:	88bb      	ldrh	r3, [r7, #4]
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d007      	beq.n	8007e3c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	881b      	ldrh	r3, [r3, #0]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	b2da      	uxtb	r2, r3
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	701a      	strb	r2, [r3, #0]
  }
}
 8007e3c:	bf00      	nop
 8007e3e:	372c      	adds	r7, #44	@ 0x2c
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bc80      	pop	{r7}
 8007e44:	4770      	bx	lr
	...

08007e48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007e4c:	4904      	ldr	r1, [pc, #16]	@ (8007e60 <MX_FATFS_Init+0x18>)
 8007e4e:	4805      	ldr	r0, [pc, #20]	@ (8007e64 <MX_FATFS_Init+0x1c>)
 8007e50:	f001 fc12 	bl	8009678 <FATFS_LinkDriver>
 8007e54:	4603      	mov	r3, r0
 8007e56:	461a      	mov	r2, r3
 8007e58:	4b03      	ldr	r3, [pc, #12]	@ (8007e68 <MX_FATFS_Init+0x20>)
 8007e5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007e5c:	bf00      	nop
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	200004f0 	.word	0x200004f0
 8007e64:	2000000c 	.word	0x2000000c
 8007e68:	200004ec 	.word	0x200004ec

08007e6c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	4603      	mov	r3, r0
 8007e74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007e76:	4b05      	ldr	r3, [pc, #20]	@ (8007e8c <USER_initialize+0x20>)
 8007e78:	2201      	movs	r2, #1
 8007e7a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007e7c:	4b03      	ldr	r3, [pc, #12]	@ (8007e8c <USER_initialize+0x20>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bc80      	pop	{r7}
 8007e8a:	4770      	bx	lr
 8007e8c:	20000009 	.word	0x20000009

08007e90 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007e9a:	4b05      	ldr	r3, [pc, #20]	@ (8007eb0 <USER_status+0x20>)
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007ea0:	4b03      	ldr	r3, [pc, #12]	@ (8007eb0 <USER_status+0x20>)
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bc80      	pop	{r7}
 8007eae:	4770      	bx	lr
 8007eb0:	20000009 	.word	0x20000009

08007eb4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	607a      	str	r2, [r7, #4]
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007ec4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bc80      	pop	{r7}
 8007ece:	4770      	bx	lr

08007ed0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60b9      	str	r1, [r7, #8]
 8007ed8:	607a      	str	r2, [r7, #4]
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	4603      	mov	r3, r0
 8007ede:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007ee0:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bc80      	pop	{r7}
 8007eea:	4770      	bx	lr

08007eec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	603a      	str	r2, [r7, #0]
 8007ef6:	71fb      	strb	r3, [r7, #7]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	73fb      	strb	r3, [r7, #15]
    return res;
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bc80      	pop	{r7}
 8007f0a:	4770      	bx	lr

08007f0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	7c1b      	ldrb	r3, [r3, #16]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d115      	bne.n	8007f50 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f28:	2202      	movs	r2, #2
 8007f2a:	2181      	movs	r1, #129	@ 0x81
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f001 fedc 	bl	8009cea <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	2101      	movs	r1, #1
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f001 fed2 	bl	8009cea <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2201      	movs	r2, #1
 8007f4a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007f4e:	e012      	b.n	8007f76 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f50:	2340      	movs	r3, #64	@ 0x40
 8007f52:	2202      	movs	r2, #2
 8007f54:	2181      	movs	r1, #129	@ 0x81
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 fec7 	bl	8009cea <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f62:	2340      	movs	r3, #64	@ 0x40
 8007f64:	2202      	movs	r2, #2
 8007f66:	2101      	movs	r1, #1
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f001 febe 	bl	8009cea <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f76:	2308      	movs	r3, #8
 8007f78:	2203      	movs	r2, #3
 8007f7a:	2182      	movs	r1, #130	@ 0x82
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f001 feb4 	bl	8009cea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2201      	movs	r2, #1
 8007f86:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f88:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007f8c:	f001 ffd4 	bl	8009f38 <USBD_static_malloc>
 8007f90:	4602      	mov	r2, r0
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d102      	bne.n	8007fa8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	73fb      	strb	r3, [r7, #15]
 8007fa6:	e026      	b.n	8007ff6 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fae:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	7c1b      	ldrb	r3, [r3, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d109      	bne.n	8007fe6 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007fd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fdc:	2101      	movs	r1, #1
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f001 ff73 	bl	8009eca <USBD_LL_PrepareReceive>
 8007fe4:	e007      	b.n	8007ff6 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007fec:	2340      	movs	r3, #64	@ 0x40
 8007fee:	2101      	movs	r1, #1
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 ff6a 	bl	8009eca <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008010:	2181      	movs	r1, #129	@ 0x81
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f001 fe8f 	bl	8009d36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800801e:	2101      	movs	r1, #1
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f001 fe88 	bl	8009d36 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800802e:	2182      	movs	r1, #130	@ 0x82
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 fe80 	bl	8009d36 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2200      	movs	r2, #0
 800803a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00e      	beq.n	8008064 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008056:	4618      	mov	r0, r3
 8008058:	f001 ff7a 	bl	8009f50 <USBD_static_free>
    pdev->pClassData = NULL;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2200      	movs	r2, #0
 8008060:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8008064:	7bfb      	ldrb	r3, [r7, #15]
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b086      	sub	sp, #24
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
 8008076:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800807e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008094:	2b00      	cmp	r3, #0
 8008096:	d039      	beq.n	800810c <USBD_CDC_Setup+0x9e>
 8008098:	2b20      	cmp	r3, #32
 800809a:	d17f      	bne.n	800819c <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	88db      	ldrh	r3, [r3, #6]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d029      	beq.n	80080f8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	b25b      	sxtb	r3, r3
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	da11      	bge.n	80080d2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80080ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080bc:	683a      	ldr	r2, [r7, #0]
 80080be:	88d2      	ldrh	r2, [r2, #6]
 80080c0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80080c2:	6939      	ldr	r1, [r7, #16]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	88db      	ldrh	r3, [r3, #6]
 80080c8:	461a      	mov	r2, r3
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f001 fa06 	bl	80094dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80080d0:	e06b      	b.n	80081aa <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	785a      	ldrb	r2, [r3, #1]
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	88db      	ldrh	r3, [r3, #6]
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80080e8:	6939      	ldr	r1, [r7, #16]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	88db      	ldrh	r3, [r3, #6]
 80080ee:	461a      	mov	r2, r3
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f001 fa21 	bl	8009538 <USBD_CtlPrepareRx>
      break;
 80080f6:	e058      	b.n	80081aa <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	683a      	ldr	r2, [r7, #0]
 8008102:	7850      	ldrb	r0, [r2, #1]
 8008104:	2200      	movs	r2, #0
 8008106:	6839      	ldr	r1, [r7, #0]
 8008108:	4798      	blx	r3
      break;
 800810a:	e04e      	b.n	80081aa <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	785b      	ldrb	r3, [r3, #1]
 8008110:	2b0b      	cmp	r3, #11
 8008112:	d02e      	beq.n	8008172 <USBD_CDC_Setup+0x104>
 8008114:	2b0b      	cmp	r3, #11
 8008116:	dc38      	bgt.n	800818a <USBD_CDC_Setup+0x11c>
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <USBD_CDC_Setup+0xb4>
 800811c:	2b0a      	cmp	r3, #10
 800811e:	d014      	beq.n	800814a <USBD_CDC_Setup+0xdc>
 8008120:	e033      	b.n	800818a <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008128:	2b03      	cmp	r3, #3
 800812a:	d107      	bne.n	800813c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800812c:	f107 030c 	add.w	r3, r7, #12
 8008130:	2202      	movs	r2, #2
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 f9d1 	bl	80094dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800813a:	e02e      	b.n	800819a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f001 f962 	bl	8009408 <USBD_CtlError>
            ret = USBD_FAIL;
 8008144:	2302      	movs	r3, #2
 8008146:	75fb      	strb	r3, [r7, #23]
          break;
 8008148:	e027      	b.n	800819a <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008150:	2b03      	cmp	r3, #3
 8008152:	d107      	bne.n	8008164 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8008154:	f107 030f 	add.w	r3, r7, #15
 8008158:	2201      	movs	r2, #1
 800815a:	4619      	mov	r1, r3
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f001 f9bd 	bl	80094dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008162:	e01a      	b.n	800819a <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 f94e 	bl	8009408 <USBD_CtlError>
            ret = USBD_FAIL;
 800816c:	2302      	movs	r3, #2
 800816e:	75fb      	strb	r3, [r7, #23]
          break;
 8008170:	e013      	b.n	800819a <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008178:	2b03      	cmp	r3, #3
 800817a:	d00d      	beq.n	8008198 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 f942 	bl	8009408 <USBD_CtlError>
            ret = USBD_FAIL;
 8008184:	2302      	movs	r3, #2
 8008186:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008188:	e006      	b.n	8008198 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800818a:	6839      	ldr	r1, [r7, #0]
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 f93b 	bl	8009408 <USBD_CtlError>
          ret = USBD_FAIL;
 8008192:	2302      	movs	r3, #2
 8008194:	75fb      	strb	r3, [r7, #23]
          break;
 8008196:	e000      	b.n	800819a <USBD_CDC_Setup+0x12c>
          break;
 8008198:	bf00      	nop
      }
      break;
 800819a:	e006      	b.n	80081aa <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800819c:	6839      	ldr	r1, [r7, #0]
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f001 f932 	bl	8009408 <USBD_CtlError>
      ret = USBD_FAIL;
 80081a4:	2302      	movs	r3, #2
 80081a6:	75fb      	strb	r3, [r7, #23]
      break;
 80081a8:	bf00      	nop
  }

  return ret;
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3718      	adds	r7, #24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80081ce:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d03a      	beq.n	8008250 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80081da:	78fa      	ldrb	r2, [r7, #3]
 80081dc:	6879      	ldr	r1, [r7, #4]
 80081de:	4613      	mov	r3, r2
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	440b      	add	r3, r1
 80081e8:	331c      	adds	r3, #28
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d029      	beq.n	8008244 <USBD_CDC_DataIn+0x90>
 80081f0:	78fa      	ldrb	r2, [r7, #3]
 80081f2:	6879      	ldr	r1, [r7, #4]
 80081f4:	4613      	mov	r3, r2
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	440b      	add	r3, r1
 80081fe:	331c      	adds	r3, #28
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	78f9      	ldrb	r1, [r7, #3]
 8008204:	68b8      	ldr	r0, [r7, #8]
 8008206:	460b      	mov	r3, r1
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	440b      	add	r3, r1
 800820c:	00db      	lsls	r3, r3, #3
 800820e:	4403      	add	r3, r0
 8008210:	3320      	adds	r3, #32
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	fbb2 f1f3 	udiv	r1, r2, r3
 8008218:	fb01 f303 	mul.w	r3, r1, r3
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	2b00      	cmp	r3, #0
 8008220:	d110      	bne.n	8008244 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008222:	78fa      	ldrb	r2, [r7, #3]
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	4613      	mov	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	440b      	add	r3, r1
 8008230:	331c      	adds	r3, #28
 8008232:	2200      	movs	r2, #0
 8008234:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008236:	78f9      	ldrb	r1, [r7, #3]
 8008238:	2300      	movs	r3, #0
 800823a:	2200      	movs	r2, #0
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	f001 fe21 	bl	8009e84 <USBD_LL_Transmit>
 8008242:	e003      	b.n	800824c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	e000      	b.n	8008252 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8008250:	2302      	movs	r3, #2
  }
}
 8008252:	4618      	mov	r0, r3
 8008254:	3710      	adds	r7, #16
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b084      	sub	sp, #16
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	460b      	mov	r3, r1
 8008264:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800826c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800826e:	78fb      	ldrb	r3, [r7, #3]
 8008270:	4619      	mov	r1, r3
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f001 fe4c 	bl	8009f10 <USBD_LL_GetRxDataSize>
 8008278:	4602      	mov	r2, r0
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008286:	2b00      	cmp	r3, #0
 8008288:	d00d      	beq.n	80082a6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800829e:	4611      	mov	r1, r2
 80082a0:	4798      	blx	r3

    return USBD_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	e000      	b.n	80082a8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80082a6:	2302      	movs	r3, #2
  }
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082be:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d014      	beq.n	80082f4 <USBD_CDC_EP0_RxReady+0x44>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80082d0:	2bff      	cmp	r3, #255	@ 0xff
 80082d2:	d00f      	beq.n	80082f4 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80082e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80082ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	22ff      	movs	r2, #255	@ 0xff
 80082f0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
	...

08008300 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2243      	movs	r2, #67	@ 0x43
 800830c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800830e:	4b03      	ldr	r3, [pc, #12]	@ (800831c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	bc80      	pop	{r7}
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	200000a8 	.word	0x200000a8

08008320 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008320:	b480      	push	{r7}
 8008322:	b083      	sub	sp, #12
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2243      	movs	r2, #67	@ 0x43
 800832c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800832e:	4b03      	ldr	r3, [pc, #12]	@ (800833c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008330:	4618      	mov	r0, r3
 8008332:	370c      	adds	r7, #12
 8008334:	46bd      	mov	sp, r7
 8008336:	bc80      	pop	{r7}
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	20000064 	.word	0x20000064

08008340 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2243      	movs	r2, #67	@ 0x43
 800834c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800834e:	4b03      	ldr	r3, [pc, #12]	@ (800835c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008350:	4618      	mov	r0, r3
 8008352:	370c      	adds	r7, #12
 8008354:	46bd      	mov	sp, r7
 8008356:	bc80      	pop	{r7}
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	200000ec 	.word	0x200000ec

08008360 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	220a      	movs	r2, #10
 800836c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800836e:	4b03      	ldr	r3, [pc, #12]	@ (800837c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	bc80      	pop	{r7}
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	20000020 	.word	0x20000020

08008380 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800838a:	2302      	movs	r3, #2
 800838c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d005      	beq.n	80083a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	683a      	ldr	r2, [r7, #0]
 8008398:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr

080083ac <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b087      	sub	sp, #28
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083c0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	68ba      	ldr	r2, [r7, #8]
 80083c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80083ca:	88fa      	ldrh	r2, [r7, #6]
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	371c      	adds	r7, #28
 80083d8:	46bd      	mov	sp, r7
 80083da:	bc80      	pop	{r7}
 80083dc:	4770      	bx	lr

080083de <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80083de:	b480      	push	{r7}
 80083e0:	b085      	sub	sp, #20
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ee:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	bc80      	pop	{r7}
 8008402:	4770      	bx	lr

08008404 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008412:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800841a:	2b00      	cmp	r3, #0
 800841c:	d01c      	beq.n	8008458 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008424:	2b00      	cmp	r3, #0
 8008426:	d115      	bne.n	8008454 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2201      	movs	r2, #1
 800842c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008446:	b29b      	uxth	r3, r3
 8008448:	2181      	movs	r1, #129	@ 0x81
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f001 fd1a 	bl	8009e84 <USBD_LL_Transmit>

      return USBD_OK;
 8008450:	2300      	movs	r3, #0
 8008452:	e002      	b.n	800845a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008454:	2301      	movs	r3, #1
 8008456:	e000      	b.n	800845a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008458:	2302      	movs	r3, #2
  }
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b084      	sub	sp, #16
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008470:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008478:	2b00      	cmp	r3, #0
 800847a:	d017      	beq.n	80084ac <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	7c1b      	ldrb	r3, [r3, #16]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d109      	bne.n	8008498 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800848a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800848e:	2101      	movs	r1, #1
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f001 fd1a 	bl	8009eca <USBD_LL_PrepareReceive>
 8008496:	e007      	b.n	80084a8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800849e:	2340      	movs	r3, #64	@ 0x40
 80084a0:	2101      	movs	r1, #1
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 fd11 	bl	8009eca <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	e000      	b.n	80084ae <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80084ac:	2302      	movs	r3, #2
  }
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	60f8      	str	r0, [r7, #12]
 80084be:	60b9      	str	r1, [r7, #8]
 80084c0:	4613      	mov	r3, r2
 80084c2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80084ca:	2302      	movs	r3, #2
 80084cc:	e01a      	b.n	8008504 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d003      	beq.n	80084e0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2200      	movs	r2, #0
 80084dc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d003      	beq.n	80084ee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	79fa      	ldrb	r2, [r7, #7]
 80084fa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f001 fb7f 	bl	8009c00 <USBD_LL_Init>

  return USBD_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3710      	adds	r7, #16
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d006      	beq.n	800852e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]
 800852c:	e001      	b.n	8008532 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800852e:	2302      	movs	r3, #2
 8008530:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008532:	7bfb      	ldrb	r3, [r7, #15]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	bc80      	pop	{r7}
 800853c:	4770      	bx	lr

0800853e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b082      	sub	sp, #8
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f001 fbb4 	bl	8009cb4 <USBD_LL_Start>

  return USBD_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008556:	b480      	push	{r7}
 8008558:	b083      	sub	sp, #12
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	bc80      	pop	{r7}
 8008568:	4770      	bx	lr

0800856a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	460b      	mov	r3, r1
 8008574:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008576:	2302      	movs	r3, #2
 8008578:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00c      	beq.n	800859e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	78fa      	ldrb	r2, [r7, #3]
 800858e:	4611      	mov	r1, r2
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	4798      	blx	r3
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800859e:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	78fa      	ldrb	r2, [r7, #3]
 80085be:	4611      	mov	r1, r2
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4798      	blx	r3

  return USBD_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b082      	sub	sp, #8
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80085de:	6839      	ldr	r1, [r7, #0]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 fed8 	bl	8009396 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80085f4:	461a      	mov	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008602:	f003 031f 	and.w	r3, r3, #31
 8008606:	2b02      	cmp	r3, #2
 8008608:	d016      	beq.n	8008638 <USBD_LL_SetupStage+0x6a>
 800860a:	2b02      	cmp	r3, #2
 800860c:	d81c      	bhi.n	8008648 <USBD_LL_SetupStage+0x7a>
 800860e:	2b00      	cmp	r3, #0
 8008610:	d002      	beq.n	8008618 <USBD_LL_SetupStage+0x4a>
 8008612:	2b01      	cmp	r3, #1
 8008614:	d008      	beq.n	8008628 <USBD_LL_SetupStage+0x5a>
 8008616:	e017      	b.n	8008648 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f9cb 	bl	80089bc <USBD_StdDevReq>
      break;
 8008626:	e01a      	b.n	800865e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fa2d 	bl	8008a90 <USBD_StdItfReq>
      break;
 8008636:	e012      	b.n	800865e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fa6d 	bl	8008b20 <USBD_StdEPReq>
      break;
 8008646:	e00a      	b.n	800865e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800864e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008652:	b2db      	uxtb	r3, r3
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f001 fb8c 	bl	8009d74 <USBD_LL_StallEP>
      break;
 800865c:	bf00      	nop
  }

  return USBD_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	460b      	mov	r3, r1
 8008672:	607a      	str	r2, [r7, #4]
 8008674:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008676:	7afb      	ldrb	r3, [r7, #11]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d14b      	bne.n	8008714 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008682:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800868a:	2b03      	cmp	r3, #3
 800868c:	d134      	bne.n	80086f8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	68da      	ldr	r2, [r3, #12]
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	429a      	cmp	r2, r3
 8008698:	d919      	bls.n	80086ce <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	68da      	ldr	r2, [r3, #12]
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	1ad2      	subs	r2, r2, r3
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	68da      	ldr	r2, [r3, #12]
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d203      	bcs.n	80086bc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	e002      	b.n	80086c2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	461a      	mov	r2, r3
 80086c4:	6879      	ldr	r1, [r7, #4]
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f000 ff54 	bl	8009574 <USBD_CtlContinueRx>
 80086cc:	e038      	b.n	8008740 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80086e0:	2b03      	cmp	r3, #3
 80086e2:	d105      	bne.n	80086f0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	68f8      	ldr	r0, [r7, #12]
 80086ee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f000 ff51 	bl	8009598 <USBD_CtlSendStatus>
 80086f6:	e023      	b.n	8008740 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086fe:	2b05      	cmp	r3, #5
 8008700:	d11e      	bne.n	8008740 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800870a:	2100      	movs	r1, #0
 800870c:	68f8      	ldr	r0, [r7, #12]
 800870e:	f001 fb31 	bl	8009d74 <USBD_LL_StallEP>
 8008712:	e015      	b.n	8008740 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00d      	beq.n	800873c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008726:	2b03      	cmp	r3, #3
 8008728:	d108      	bne.n	800873c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	7afa      	ldrb	r2, [r7, #11]
 8008734:	4611      	mov	r1, r2
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	4798      	blx	r3
 800873a:	e001      	b.n	8008740 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800873c:	2302      	movs	r3, #2
 800873e:	e000      	b.n	8008742 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b086      	sub	sp, #24
 800874e:	af00      	add	r7, sp, #0
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	460b      	mov	r3, r1
 8008754:	607a      	str	r2, [r7, #4]
 8008756:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008758:	7afb      	ldrb	r3, [r7, #11]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d17f      	bne.n	800885e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	3314      	adds	r3, #20
 8008762:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800876a:	2b02      	cmp	r3, #2
 800876c:	d15c      	bne.n	8008828 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	68da      	ldr	r2, [r3, #12]
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	429a      	cmp	r2, r3
 8008778:	d915      	bls.n	80087a6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	68da      	ldr	r2, [r3, #12]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	1ad2      	subs	r2, r2, r3
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	b29b      	uxth	r3, r3
 800878e:	461a      	mov	r2, r3
 8008790:	6879      	ldr	r1, [r7, #4]
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f000 febe 	bl	8009514 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008798:	2300      	movs	r3, #0
 800879a:	2200      	movs	r2, #0
 800879c:	2100      	movs	r1, #0
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f001 fb93 	bl	8009eca <USBD_LL_PrepareReceive>
 80087a4:	e04e      	b.n	8008844 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	6912      	ldr	r2, [r2, #16]
 80087ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80087b2:	fb01 f202 	mul.w	r2, r1, r2
 80087b6:	1a9b      	subs	r3, r3, r2
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d11c      	bne.n	80087f6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	689a      	ldr	r2, [r3, #8]
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d316      	bcc.n	80087f6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	689a      	ldr	r2, [r3, #8]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d20f      	bcs.n	80087f6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087d6:	2200      	movs	r2, #0
 80087d8:	2100      	movs	r1, #0
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f000 fe9a 	bl	8009514 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087e8:	2300      	movs	r3, #0
 80087ea:	2200      	movs	r2, #0
 80087ec:	2100      	movs	r1, #0
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f001 fb6b 	bl	8009eca <USBD_LL_PrepareReceive>
 80087f4:	e026      	b.n	8008844 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008808:	2b03      	cmp	r3, #3
 800880a:	d105      	bne.n	8008818 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008818:	2180      	movs	r1, #128	@ 0x80
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f001 faaa 	bl	8009d74 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 fecc 	bl	80095be <USBD_CtlReceiveStatus>
 8008826:	e00d      	b.n	8008844 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800882e:	2b04      	cmp	r3, #4
 8008830:	d004      	beq.n	800883c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008838:	2b00      	cmp	r3, #0
 800883a:	d103      	bne.n	8008844 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800883c:	2180      	movs	r1, #128	@ 0x80
 800883e:	68f8      	ldr	r0, [r7, #12]
 8008840:	f001 fa98 	bl	8009d74 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800884a:	2b01      	cmp	r3, #1
 800884c:	d11d      	bne.n	800888a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f7ff fe81 	bl	8008556 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800885c:	e015      	b.n	800888a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008864:	695b      	ldr	r3, [r3, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00d      	beq.n	8008886 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008870:	2b03      	cmp	r3, #3
 8008872:	d108      	bne.n	8008886 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800887a:	695b      	ldr	r3, [r3, #20]
 800887c:	7afa      	ldrb	r2, [r7, #11]
 800887e:	4611      	mov	r1, r2
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	4798      	blx	r3
 8008884:	e001      	b.n	800888a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008886:	2302      	movs	r3, #2
 8008888:	e000      	b.n	800888c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3718      	adds	r7, #24
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800889c:	2340      	movs	r3, #64	@ 0x40
 800889e:	2200      	movs	r2, #0
 80088a0:	2100      	movs	r1, #0
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f001 fa21 	bl	8009cea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2240      	movs	r2, #64	@ 0x40
 80088b4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088b8:	2340      	movs	r3, #64	@ 0x40
 80088ba:	2200      	movs	r2, #0
 80088bc:	2180      	movs	r1, #128	@ 0x80
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f001 fa13 	bl	8009cea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2240      	movs	r2, #64	@ 0x40
 80088ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d009      	beq.n	800890c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	687a      	ldr	r2, [r7, #4]
 8008902:	6852      	ldr	r2, [r2, #4]
 8008904:	b2d2      	uxtb	r2, r2
 8008906:	4611      	mov	r1, r2
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	4798      	blx	r3
  }

  return USBD_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	460b      	mov	r3, r1
 8008920:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	78fa      	ldrb	r2, [r7, #3]
 8008926:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	bc80      	pop	{r7}
 8008932:	4770      	bx	lr

08008934 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2204      	movs	r2, #4
 800894c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008950:	2300      	movs	r3, #0
}
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	bc80      	pop	{r7}
 800895a:	4770      	bx	lr

0800895c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800896a:	2b04      	cmp	r3, #4
 800896c:	d105      	bne.n	800897a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	bc80      	pop	{r7}
 8008984:	4770      	bx	lr

08008986 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b082      	sub	sp, #8
 800898a:	af00      	add	r7, sp, #0
 800898c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008994:	2b03      	cmp	r3, #3
 8008996:	d10b      	bne.n	80089b0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800899e:	69db      	ldr	r3, [r3, #28]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d005      	beq.n	80089b0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089aa:	69db      	ldr	r3, [r3, #28]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
	...

080089bc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089d2:	2b40      	cmp	r3, #64	@ 0x40
 80089d4:	d005      	beq.n	80089e2 <USBD_StdDevReq+0x26>
 80089d6:	2b40      	cmp	r3, #64	@ 0x40
 80089d8:	d84f      	bhi.n	8008a7a <USBD_StdDevReq+0xbe>
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d009      	beq.n	80089f2 <USBD_StdDevReq+0x36>
 80089de:	2b20      	cmp	r3, #32
 80089e0:	d14b      	bne.n	8008a7a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089e8:	689b      	ldr	r3, [r3, #8]
 80089ea:	6839      	ldr	r1, [r7, #0]
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	4798      	blx	r3
      break;
 80089f0:	e048      	b.n	8008a84 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	785b      	ldrb	r3, [r3, #1]
 80089f6:	2b09      	cmp	r3, #9
 80089f8:	d839      	bhi.n	8008a6e <USBD_StdDevReq+0xb2>
 80089fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008a00 <USBD_StdDevReq+0x44>)
 80089fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a00:	08008a51 	.word	0x08008a51
 8008a04:	08008a65 	.word	0x08008a65
 8008a08:	08008a6f 	.word	0x08008a6f
 8008a0c:	08008a5b 	.word	0x08008a5b
 8008a10:	08008a6f 	.word	0x08008a6f
 8008a14:	08008a33 	.word	0x08008a33
 8008a18:	08008a29 	.word	0x08008a29
 8008a1c:	08008a6f 	.word	0x08008a6f
 8008a20:	08008a47 	.word	0x08008a47
 8008a24:	08008a3d 	.word	0x08008a3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a28:	6839      	ldr	r1, [r7, #0]
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 f9dc 	bl	8008de8 <USBD_GetDescriptor>
          break;
 8008a30:	e022      	b.n	8008a78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a32:	6839      	ldr	r1, [r7, #0]
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 fb3f 	bl	80090b8 <USBD_SetAddress>
          break;
 8008a3a:	e01d      	b.n	8008a78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008a3c:	6839      	ldr	r1, [r7, #0]
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fb7e 	bl	8009140 <USBD_SetConfig>
          break;
 8008a44:	e018      	b.n	8008a78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a46:	6839      	ldr	r1, [r7, #0]
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 fc07 	bl	800925c <USBD_GetConfig>
          break;
 8008a4e:	e013      	b.n	8008a78 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fc37 	bl	80092c6 <USBD_GetStatus>
          break;
 8008a58:	e00e      	b.n	8008a78 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a5a:	6839      	ldr	r1, [r7, #0]
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fc65 	bl	800932c <USBD_SetFeature>
          break;
 8008a62:	e009      	b.n	8008a78 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fc74 	bl	8009354 <USBD_ClrFeature>
          break;
 8008a6c:	e004      	b.n	8008a78 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fcc9 	bl	8009408 <USBD_CtlError>
          break;
 8008a76:	bf00      	nop
      }
      break;
 8008a78:	e004      	b.n	8008a84 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008a7a:	6839      	ldr	r1, [r7, #0]
 8008a7c:	6878      	ldr	r0, [r7, #4]
 8008a7e:	f000 fcc3 	bl	8009408 <USBD_CtlError>
      break;
 8008a82:	bf00      	nop
  }

  return ret;
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop

08008a90 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008aa6:	2b40      	cmp	r3, #64	@ 0x40
 8008aa8:	d005      	beq.n	8008ab6 <USBD_StdItfReq+0x26>
 8008aaa:	2b40      	cmp	r3, #64	@ 0x40
 8008aac:	d82e      	bhi.n	8008b0c <USBD_StdItfReq+0x7c>
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d001      	beq.n	8008ab6 <USBD_StdItfReq+0x26>
 8008ab2:	2b20      	cmp	r3, #32
 8008ab4:	d12a      	bne.n	8008b0c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008abc:	3b01      	subs	r3, #1
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d81d      	bhi.n	8008afe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	889b      	ldrh	r3, [r3, #4]
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d813      	bhi.n	8008af4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	6839      	ldr	r1, [r7, #0]
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	4798      	blx	r3
 8008ada:	4603      	mov	r3, r0
 8008adc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	88db      	ldrh	r3, [r3, #6]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d110      	bne.n	8008b08 <USBD_StdItfReq+0x78>
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d10d      	bne.n	8008b08 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fd53 	bl	8009598 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008af2:	e009      	b.n	8008b08 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fc86 	bl	8009408 <USBD_CtlError>
          break;
 8008afc:	e004      	b.n	8008b08 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fc81 	bl	8009408 <USBD_CtlError>
          break;
 8008b06:	e000      	b.n	8008b0a <USBD_StdItfReq+0x7a>
          break;
 8008b08:	bf00      	nop
      }
      break;
 8008b0a:	e004      	b.n	8008b16 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fc7a 	bl	8009408 <USBD_CtlError>
      break;
 8008b14:	bf00      	nop
  }

  return USBD_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b084      	sub	sp, #16
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	889b      	ldrh	r3, [r3, #4]
 8008b32:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b3c:	2b40      	cmp	r3, #64	@ 0x40
 8008b3e:	d007      	beq.n	8008b50 <USBD_StdEPReq+0x30>
 8008b40:	2b40      	cmp	r3, #64	@ 0x40
 8008b42:	f200 8146 	bhi.w	8008dd2 <USBD_StdEPReq+0x2b2>
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00a      	beq.n	8008b60 <USBD_StdEPReq+0x40>
 8008b4a:	2b20      	cmp	r3, #32
 8008b4c:	f040 8141 	bne.w	8008dd2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	6839      	ldr	r1, [r7, #0]
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	4798      	blx	r3
      break;
 8008b5e:	e13d      	b.n	8008ddc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b68:	2b20      	cmp	r3, #32
 8008b6a:	d10a      	bne.n	8008b82 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	4798      	blx	r3
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	e12d      	b.n	8008dde <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	785b      	ldrb	r3, [r3, #1]
 8008b86:	2b03      	cmp	r3, #3
 8008b88:	d007      	beq.n	8008b9a <USBD_StdEPReq+0x7a>
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	f300 811b 	bgt.w	8008dc6 <USBD_StdEPReq+0x2a6>
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d072      	beq.n	8008c7a <USBD_StdEPReq+0x15a>
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d03a      	beq.n	8008c0e <USBD_StdEPReq+0xee>
 8008b98:	e115      	b.n	8008dc6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d002      	beq.n	8008baa <USBD_StdEPReq+0x8a>
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d015      	beq.n	8008bd4 <USBD_StdEPReq+0xb4>
 8008ba8:	e02b      	b.n	8008c02 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00c      	beq.n	8008bca <USBD_StdEPReq+0xaa>
 8008bb0:	7bbb      	ldrb	r3, [r7, #14]
 8008bb2:	2b80      	cmp	r3, #128	@ 0x80
 8008bb4:	d009      	beq.n	8008bca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f001 f8da 	bl	8009d74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008bc0:	2180      	movs	r1, #128	@ 0x80
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f001 f8d6 	bl	8009d74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008bc8:	e020      	b.n	8008c0c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008bca:	6839      	ldr	r1, [r7, #0]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fc1b 	bl	8009408 <USBD_CtlError>
              break;
 8008bd2:	e01b      	b.n	8008c0c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	885b      	ldrh	r3, [r3, #2]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10e      	bne.n	8008bfa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008bdc:	7bbb      	ldrb	r3, [r7, #14]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00b      	beq.n	8008bfa <USBD_StdEPReq+0xda>
 8008be2:	7bbb      	ldrb	r3, [r7, #14]
 8008be4:	2b80      	cmp	r3, #128	@ 0x80
 8008be6:	d008      	beq.n	8008bfa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	88db      	ldrh	r3, [r3, #6]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d104      	bne.n	8008bfa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f001 f8bd 	bl	8009d74 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 fccc 	bl	8009598 <USBD_CtlSendStatus>

              break;
 8008c00:	e004      	b.n	8008c0c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fbff 	bl	8009408 <USBD_CtlError>
              break;
 8008c0a:	bf00      	nop
          }
          break;
 8008c0c:	e0e0      	b.n	8008dd0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d002      	beq.n	8008c1e <USBD_StdEPReq+0xfe>
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d015      	beq.n	8008c48 <USBD_StdEPReq+0x128>
 8008c1c:	e026      	b.n	8008c6c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00c      	beq.n	8008c3e <USBD_StdEPReq+0x11e>
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	2b80      	cmp	r3, #128	@ 0x80
 8008c28:	d009      	beq.n	8008c3e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f001 f8a0 	bl	8009d74 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c34:	2180      	movs	r1, #128	@ 0x80
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f001 f89c 	bl	8009d74 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c3c:	e01c      	b.n	8008c78 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fbe1 	bl	8009408 <USBD_CtlError>
              break;
 8008c46:	e017      	b.n	8008c78 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	885b      	ldrh	r3, [r3, #2]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d112      	bne.n	8008c76 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d004      	beq.n	8008c64 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008c5a:	7bbb      	ldrb	r3, [r7, #14]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f001 f8a7 	bl	8009db2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fc97 	bl	8009598 <USBD_CtlSendStatus>
              }
              break;
 8008c6a:	e004      	b.n	8008c76 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fbca 	bl	8009408 <USBD_CtlError>
              break;
 8008c74:	e000      	b.n	8008c78 <USBD_StdEPReq+0x158>
              break;
 8008c76:	bf00      	nop
          }
          break;
 8008c78:	e0aa      	b.n	8008dd0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d002      	beq.n	8008c8a <USBD_StdEPReq+0x16a>
 8008c84:	2b03      	cmp	r3, #3
 8008c86:	d032      	beq.n	8008cee <USBD_StdEPReq+0x1ce>
 8008c88:	e097      	b.n	8008dba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d007      	beq.n	8008ca0 <USBD_StdEPReq+0x180>
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	2b80      	cmp	r3, #128	@ 0x80
 8008c94:	d004      	beq.n	8008ca0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fbb5 	bl	8009408 <USBD_CtlError>
                break;
 8008c9e:	e091      	b.n	8008dc4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ca0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	da0b      	bge.n	8008cc0 <USBD_StdEPReq+0x1a0>
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cae:	4613      	mov	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	4413      	add	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	3310      	adds	r3, #16
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	4413      	add	r3, r2
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	e00b      	b.n	8008cd8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008cc0:	7bbb      	ldrb	r3, [r7, #14]
 8008cc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	009b      	lsls	r3, r3, #2
 8008cce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008cd2:	687a      	ldr	r2, [r7, #4]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	3304      	adds	r3, #4
 8008cd8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fbf8 	bl	80094dc <USBD_CtlSendData>
              break;
 8008cec:	e06a      	b.n	8008dc4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008cee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	da11      	bge.n	8008d1a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008cf6:	7bbb      	ldrb	r3, [r7, #14]
 8008cf8:	f003 020f 	and.w	r2, r3, #15
 8008cfc:	6879      	ldr	r1, [r7, #4]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	4413      	add	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	440b      	add	r3, r1
 8008d08:	3318      	adds	r3, #24
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d117      	bne.n	8008d40 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fb78 	bl	8009408 <USBD_CtlError>
                  break;
 8008d18:	e054      	b.n	8008dc4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	f003 020f 	and.w	r2, r3, #15
 8008d20:	6879      	ldr	r1, [r7, #4]
 8008d22:	4613      	mov	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	440b      	add	r3, r1
 8008d2c:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d104      	bne.n	8008d40 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fb65 	bl	8009408 <USBD_CtlError>
                  break;
 8008d3e:	e041      	b.n	8008dc4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	da0b      	bge.n	8008d60 <USBD_StdEPReq+0x240>
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d4e:	4613      	mov	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	3310      	adds	r3, #16
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	e00b      	b.n	8008d78 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d60:	7bbb      	ldrb	r3, [r7, #14]
 8008d62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	4413      	add	r3, r2
 8008d76:	3304      	adds	r3, #4
 8008d78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008d7a:	7bbb      	ldrb	r3, [r7, #14]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d002      	beq.n	8008d86 <USBD_StdEPReq+0x266>
 8008d80:	7bbb      	ldrb	r3, [r7, #14]
 8008d82:	2b80      	cmp	r3, #128	@ 0x80
 8008d84:	d103      	bne.n	8008d8e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	601a      	str	r2, [r3, #0]
 8008d8c:	e00e      	b.n	8008dac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f001 f82c 	bl	8009df0 <USBD_LL_IsStallEP>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	2201      	movs	r2, #1
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	e002      	b.n	8008dac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2200      	movs	r2, #0
 8008daa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	2202      	movs	r2, #2
 8008db0:	4619      	mov	r1, r3
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fb92 	bl	80094dc <USBD_CtlSendData>
              break;
 8008db8:	e004      	b.n	8008dc4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008dba:	6839      	ldr	r1, [r7, #0]
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 fb23 	bl	8009408 <USBD_CtlError>
              break;
 8008dc2:	bf00      	nop
          }
          break;
 8008dc4:	e004      	b.n	8008dd0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fb1d 	bl	8009408 <USBD_CtlError>
          break;
 8008dce:	bf00      	nop
      }
      break;
 8008dd0:	e004      	b.n	8008ddc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fb17 	bl	8009408 <USBD_CtlError>
      break;
 8008dda:	bf00      	nop
  }

  return ret;
 8008ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
	...

08008de8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008df2:	2300      	movs	r3, #0
 8008df4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	885b      	ldrh	r3, [r3, #2]
 8008e02:	0a1b      	lsrs	r3, r3, #8
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	3b01      	subs	r3, #1
 8008e08:	2b06      	cmp	r3, #6
 8008e0a:	f200 8128 	bhi.w	800905e <USBD_GetDescriptor+0x276>
 8008e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008e14 <USBD_GetDescriptor+0x2c>)
 8008e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e14:	08008e31 	.word	0x08008e31
 8008e18:	08008e49 	.word	0x08008e49
 8008e1c:	08008e89 	.word	0x08008e89
 8008e20:	0800905f 	.word	0x0800905f
 8008e24:	0800905f 	.word	0x0800905f
 8008e28:	08008fff 	.word	0x08008fff
 8008e2c:	0800902b 	.word	0x0800902b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	7c12      	ldrb	r2, [r2, #16]
 8008e3c:	f107 0108 	add.w	r1, r7, #8
 8008e40:	4610      	mov	r0, r2
 8008e42:	4798      	blx	r3
 8008e44:	60f8      	str	r0, [r7, #12]
      break;
 8008e46:	e112      	b.n	800906e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	7c1b      	ldrb	r3, [r3, #16]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10d      	bne.n	8008e6c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e58:	f107 0208 	add.w	r2, r7, #8
 8008e5c:	4610      	mov	r0, r2
 8008e5e:	4798      	blx	r3
 8008e60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3301      	adds	r3, #1
 8008e66:	2202      	movs	r2, #2
 8008e68:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008e6a:	e100      	b.n	800906e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e74:	f107 0208 	add.w	r2, r7, #8
 8008e78:	4610      	mov	r0, r2
 8008e7a:	4798      	blx	r3
 8008e7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3301      	adds	r3, #1
 8008e82:	2202      	movs	r2, #2
 8008e84:	701a      	strb	r2, [r3, #0]
      break;
 8008e86:	e0f2      	b.n	800906e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	885b      	ldrh	r3, [r3, #2]
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b05      	cmp	r3, #5
 8008e90:	f200 80ac 	bhi.w	8008fec <USBD_GetDescriptor+0x204>
 8008e94:	a201      	add	r2, pc, #4	@ (adr r2, 8008e9c <USBD_GetDescriptor+0xb4>)
 8008e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9a:	bf00      	nop
 8008e9c:	08008eb5 	.word	0x08008eb5
 8008ea0:	08008ee9 	.word	0x08008ee9
 8008ea4:	08008f1d 	.word	0x08008f1d
 8008ea8:	08008f51 	.word	0x08008f51
 8008eac:	08008f85 	.word	0x08008f85
 8008eb0:	08008fb9 	.word	0x08008fb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00b      	beq.n	8008ed8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	7c12      	ldrb	r2, [r2, #16]
 8008ecc:	f107 0108 	add.w	r1, r7, #8
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	4798      	blx	r3
 8008ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ed6:	e091      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fa94 	bl	8009408 <USBD_CtlError>
            err++;
 8008ee0:	7afb      	ldrb	r3, [r7, #11]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ee6:	e089      	b.n	8008ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00b      	beq.n	8008f0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	7c12      	ldrb	r2, [r2, #16]
 8008f00:	f107 0108 	add.w	r1, r7, #8
 8008f04:	4610      	mov	r0, r2
 8008f06:	4798      	blx	r3
 8008f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f0a:	e077      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fa7a 	bl	8009408 <USBD_CtlError>
            err++;
 8008f14:	7afb      	ldrb	r3, [r7, #11]
 8008f16:	3301      	adds	r3, #1
 8008f18:	72fb      	strb	r3, [r7, #11]
          break;
 8008f1a:	e06f      	b.n	8008ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f22:	68db      	ldr	r3, [r3, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00b      	beq.n	8008f40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	7c12      	ldrb	r2, [r2, #16]
 8008f34:	f107 0108 	add.w	r1, r7, #8
 8008f38:	4610      	mov	r0, r2
 8008f3a:	4798      	blx	r3
 8008f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f3e:	e05d      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f40:	6839      	ldr	r1, [r7, #0]
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fa60 	bl	8009408 <USBD_CtlError>
            err++;
 8008f48:	7afb      	ldrb	r3, [r7, #11]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f4e:	e055      	b.n	8008ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00b      	beq.n	8008f74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	7c12      	ldrb	r2, [r2, #16]
 8008f68:	f107 0108 	add.w	r1, r7, #8
 8008f6c:	4610      	mov	r0, r2
 8008f6e:	4798      	blx	r3
 8008f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f72:	e043      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f74:	6839      	ldr	r1, [r7, #0]
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fa46 	bl	8009408 <USBD_CtlError>
            err++;
 8008f7c:	7afb      	ldrb	r3, [r7, #11]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	72fb      	strb	r3, [r7, #11]
          break;
 8008f82:	e03b      	b.n	8008ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00b      	beq.n	8008fa8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	7c12      	ldrb	r2, [r2, #16]
 8008f9c:	f107 0108 	add.w	r1, r7, #8
 8008fa0:	4610      	mov	r0, r2
 8008fa2:	4798      	blx	r3
 8008fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fa6:	e029      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fa2c 	bl	8009408 <USBD_CtlError>
            err++;
 8008fb0:	7afb      	ldrb	r3, [r7, #11]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fb6:	e021      	b.n	8008ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00b      	beq.n	8008fdc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	7c12      	ldrb	r2, [r2, #16]
 8008fd0:	f107 0108 	add.w	r1, r7, #8
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	4798      	blx	r3
 8008fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fda:	e00f      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fdc:	6839      	ldr	r1, [r7, #0]
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fa12 	bl	8009408 <USBD_CtlError>
            err++;
 8008fe4:	7afb      	ldrb	r3, [r7, #11]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fea:	e007      	b.n	8008ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fa0a 	bl	8009408 <USBD_CtlError>
          err++;
 8008ff4:	7afb      	ldrb	r3, [r7, #11]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008ffa:	e038      	b.n	800906e <USBD_GetDescriptor+0x286>
 8008ffc:	e037      	b.n	800906e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	7c1b      	ldrb	r3, [r3, #16]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d109      	bne.n	800901a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800900c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800900e:	f107 0208 	add.w	r2, r7, #8
 8009012:	4610      	mov	r0, r2
 8009014:	4798      	blx	r3
 8009016:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009018:	e029      	b.n	800906e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800901a:	6839      	ldr	r1, [r7, #0]
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 f9f3 	bl	8009408 <USBD_CtlError>
        err++;
 8009022:	7afb      	ldrb	r3, [r7, #11]
 8009024:	3301      	adds	r3, #1
 8009026:	72fb      	strb	r3, [r7, #11]
      break;
 8009028:	e021      	b.n	800906e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	7c1b      	ldrb	r3, [r3, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10d      	bne.n	800904e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800903a:	f107 0208 	add.w	r2, r7, #8
 800903e:	4610      	mov	r0, r2
 8009040:	4798      	blx	r3
 8009042:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	3301      	adds	r3, #1
 8009048:	2207      	movs	r2, #7
 800904a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800904c:	e00f      	b.n	800906e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800904e:	6839      	ldr	r1, [r7, #0]
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f9d9 	bl	8009408 <USBD_CtlError>
        err++;
 8009056:	7afb      	ldrb	r3, [r7, #11]
 8009058:	3301      	adds	r3, #1
 800905a:	72fb      	strb	r3, [r7, #11]
      break;
 800905c:	e007      	b.n	800906e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800905e:	6839      	ldr	r1, [r7, #0]
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f9d1 	bl	8009408 <USBD_CtlError>
      err++;
 8009066:	7afb      	ldrb	r3, [r7, #11]
 8009068:	3301      	adds	r3, #1
 800906a:	72fb      	strb	r3, [r7, #11]
      break;
 800906c:	bf00      	nop
  }

  if (err != 0U)
 800906e:	7afb      	ldrb	r3, [r7, #11]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d11c      	bne.n	80090ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009074:	893b      	ldrh	r3, [r7, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d011      	beq.n	800909e <USBD_GetDescriptor+0x2b6>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	88db      	ldrh	r3, [r3, #6]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00d      	beq.n	800909e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	88da      	ldrh	r2, [r3, #6]
 8009086:	893b      	ldrh	r3, [r7, #8]
 8009088:	4293      	cmp	r3, r2
 800908a:	bf28      	it	cs
 800908c:	4613      	movcs	r3, r2
 800908e:	b29b      	uxth	r3, r3
 8009090:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009092:	893b      	ldrh	r3, [r7, #8]
 8009094:	461a      	mov	r2, r3
 8009096:	68f9      	ldr	r1, [r7, #12]
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fa1f 	bl	80094dc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	88db      	ldrh	r3, [r3, #6]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d104      	bne.n	80090b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fa76 	bl	8009598 <USBD_CtlSendStatus>
 80090ac:	e000      	b.n	80090b0 <USBD_GetDescriptor+0x2c8>
    return;
 80090ae:	bf00      	nop
    }
  }
}
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}
 80090b6:	bf00      	nop

080090b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b084      	sub	sp, #16
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	889b      	ldrh	r3, [r3, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d130      	bne.n	800912c <USBD_SetAddress+0x74>
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	88db      	ldrh	r3, [r3, #6]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d12c      	bne.n	800912c <USBD_SetAddress+0x74>
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	885b      	ldrh	r3, [r3, #2]
 80090d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80090d8:	d828      	bhi.n	800912c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	885b      	ldrh	r3, [r3, #2]
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090ec:	2b03      	cmp	r3, #3
 80090ee:	d104      	bne.n	80090fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f988 	bl	8009408 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f8:	e01d      	b.n	8009136 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	7bfa      	ldrb	r2, [r7, #15]
 80090fe:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009102:	7bfb      	ldrb	r3, [r7, #15]
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fe9d 	bl	8009e46 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fa43 	bl	8009598 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009112:	7bfb      	ldrb	r3, [r7, #15]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d004      	beq.n	8009122 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2202      	movs	r2, #2
 800911c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009120:	e009      	b.n	8009136 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2201      	movs	r2, #1
 8009126:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800912a:	e004      	b.n	8009136 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800912c:	6839      	ldr	r1, [r7, #0]
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 f96a 	bl	8009408 <USBD_CtlError>
  }
}
 8009134:	bf00      	nop
 8009136:	bf00      	nop
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
	...

08009140 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	885b      	ldrh	r3, [r3, #2]
 800914e:	b2da      	uxtb	r2, r3
 8009150:	4b41      	ldr	r3, [pc, #260]	@ (8009258 <USBD_SetConfig+0x118>)
 8009152:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009154:	4b40      	ldr	r3, [pc, #256]	@ (8009258 <USBD_SetConfig+0x118>)
 8009156:	781b      	ldrb	r3, [r3, #0]
 8009158:	2b01      	cmp	r3, #1
 800915a:	d904      	bls.n	8009166 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800915c:	6839      	ldr	r1, [r7, #0]
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 f952 	bl	8009408 <USBD_CtlError>
 8009164:	e075      	b.n	8009252 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800916c:	2b02      	cmp	r3, #2
 800916e:	d002      	beq.n	8009176 <USBD_SetConfig+0x36>
 8009170:	2b03      	cmp	r3, #3
 8009172:	d023      	beq.n	80091bc <USBD_SetConfig+0x7c>
 8009174:	e062      	b.n	800923c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009176:	4b38      	ldr	r3, [pc, #224]	@ (8009258 <USBD_SetConfig+0x118>)
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d01a      	beq.n	80091b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800917e:	4b36      	ldr	r3, [pc, #216]	@ (8009258 <USBD_SetConfig+0x118>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2203      	movs	r2, #3
 800918c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009190:	4b31      	ldr	r3, [pc, #196]	@ (8009258 <USBD_SetConfig+0x118>)
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	4619      	mov	r1, r3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f7ff f9e7 	bl	800856a <USBD_SetClassConfig>
 800919c:	4603      	mov	r3, r0
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d104      	bne.n	80091ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f92f 	bl	8009408 <USBD_CtlError>
            return;
 80091aa:	e052      	b.n	8009252 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f9f3 	bl	8009598 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80091b2:	e04e      	b.n	8009252 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f9ef 	bl	8009598 <USBD_CtlSendStatus>
        break;
 80091ba:	e04a      	b.n	8009252 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80091bc:	4b26      	ldr	r3, [pc, #152]	@ (8009258 <USBD_SetConfig+0x118>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d112      	bne.n	80091ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2202      	movs	r2, #2
 80091c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80091cc:	4b22      	ldr	r3, [pc, #136]	@ (8009258 <USBD_SetConfig+0x118>)
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	461a      	mov	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80091d6:	4b20      	ldr	r3, [pc, #128]	@ (8009258 <USBD_SetConfig+0x118>)
 80091d8:	781b      	ldrb	r3, [r3, #0]
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff f9e3 	bl	80085a8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f9d8 	bl	8009598 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80091e8:	e033      	b.n	8009252 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80091ea:	4b1b      	ldr	r3, [pc, #108]	@ (8009258 <USBD_SetConfig+0x118>)
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	461a      	mov	r2, r3
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d01d      	beq.n	8009234 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	4619      	mov	r1, r3
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7ff f9d1 	bl	80085a8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8009206:	4b14      	ldr	r3, [pc, #80]	@ (8009258 <USBD_SetConfig+0x118>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009210:	4b11      	ldr	r3, [pc, #68]	@ (8009258 <USBD_SetConfig+0x118>)
 8009212:	781b      	ldrb	r3, [r3, #0]
 8009214:	4619      	mov	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f7ff f9a7 	bl	800856a <USBD_SetClassConfig>
 800921c:	4603      	mov	r3, r0
 800921e:	2b02      	cmp	r3, #2
 8009220:	d104      	bne.n	800922c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009222:	6839      	ldr	r1, [r7, #0]
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f8ef 	bl	8009408 <USBD_CtlError>
            return;
 800922a:	e012      	b.n	8009252 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f9b3 	bl	8009598 <USBD_CtlSendStatus>
        break;
 8009232:	e00e      	b.n	8009252 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 f9af 	bl	8009598 <USBD_CtlSendStatus>
        break;
 800923a:	e00a      	b.n	8009252 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800923c:	6839      	ldr	r1, [r7, #0]
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f8e2 	bl	8009408 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009244:	4b04      	ldr	r3, [pc, #16]	@ (8009258 <USBD_SetConfig+0x118>)
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	4619      	mov	r1, r3
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f7ff f9ac 	bl	80085a8 <USBD_ClrClassConfig>
        break;
 8009250:	bf00      	nop
    }
  }
}
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}
 8009258:	200004f4 	.word	0x200004f4

0800925c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	88db      	ldrh	r3, [r3, #6]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d004      	beq.n	8009278 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f8c9 	bl	8009408 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009276:	e022      	b.n	80092be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800927e:	2b02      	cmp	r3, #2
 8009280:	dc02      	bgt.n	8009288 <USBD_GetConfig+0x2c>
 8009282:	2b00      	cmp	r3, #0
 8009284:	dc03      	bgt.n	800928e <USBD_GetConfig+0x32>
 8009286:	e015      	b.n	80092b4 <USBD_GetConfig+0x58>
 8009288:	2b03      	cmp	r3, #3
 800928a:	d00b      	beq.n	80092a4 <USBD_GetConfig+0x48>
 800928c:	e012      	b.n	80092b4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3308      	adds	r3, #8
 8009298:	2201      	movs	r2, #1
 800929a:	4619      	mov	r1, r3
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f91d 	bl	80094dc <USBD_CtlSendData>
        break;
 80092a2:	e00c      	b.n	80092be <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	3304      	adds	r3, #4
 80092a8:	2201      	movs	r2, #1
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f915 	bl	80094dc <USBD_CtlSendData>
        break;
 80092b2:	e004      	b.n	80092be <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f8a6 	bl	8009408 <USBD_CtlError>
        break;
 80092bc:	bf00      	nop
}
 80092be:	bf00      	nop
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}

080092c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092d6:	3b01      	subs	r3, #1
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d81e      	bhi.n	800931a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	88db      	ldrh	r3, [r3, #6]
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	d004      	beq.n	80092ee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f88e 	bl	8009408 <USBD_CtlError>
        break;
 80092ec:	e01a      	b.n	8009324 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2201      	movs	r2, #1
 80092f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d005      	beq.n	800930a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	f043 0202 	orr.w	r2, r3, #2
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	330c      	adds	r3, #12
 800930e:	2202      	movs	r2, #2
 8009310:	4619      	mov	r1, r3
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f8e2 	bl	80094dc <USBD_CtlSendData>
      break;
 8009318:	e004      	b.n	8009324 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f873 	bl	8009408 <USBD_CtlError>
      break;
 8009322:	bf00      	nop
  }
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	885b      	ldrh	r3, [r3, #2]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d106      	bne.n	800934c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2201      	movs	r2, #1
 8009342:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f926 	bl	8009598 <USBD_CtlSendStatus>
  }
}
 800934c:	bf00      	nop
 800934e:	3708      	adds	r7, #8
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
 800935c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009364:	3b01      	subs	r3, #1
 8009366:	2b02      	cmp	r3, #2
 8009368:	d80b      	bhi.n	8009382 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	885b      	ldrh	r3, [r3, #2]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d10c      	bne.n	800938c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f90c 	bl	8009598 <USBD_CtlSendStatus>
      }
      break;
 8009380:	e004      	b.n	800938c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f83f 	bl	8009408 <USBD_CtlError>
      break;
 800938a:	e000      	b.n	800938e <USBD_ClrFeature+0x3a>
      break;
 800938c:	bf00      	nop
  }
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009396:	b480      	push	{r7}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	781a      	ldrb	r2, [r3, #0]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	785a      	ldrb	r2, [r3, #1]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	3302      	adds	r3, #2
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	461a      	mov	r2, r3
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	3303      	adds	r3, #3
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	021b      	lsls	r3, r3, #8
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	4413      	add	r3, r2
 80093c4:	b29a      	uxth	r2, r3
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	3304      	adds	r3, #4
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	461a      	mov	r2, r3
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	3305      	adds	r3, #5
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	021b      	lsls	r3, r3, #8
 80093da:	b29b      	uxth	r3, r3
 80093dc:	4413      	add	r3, r2
 80093de:	b29a      	uxth	r2, r3
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	3306      	adds	r3, #6
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	461a      	mov	r2, r3
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	3307      	adds	r3, #7
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	021b      	lsls	r3, r3, #8
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	4413      	add	r3, r2
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	80da      	strh	r2, [r3, #6]

}
 80093fe:	bf00      	nop
 8009400:	370c      	adds	r7, #12
 8009402:	46bd      	mov	sp, r7
 8009404:	bc80      	pop	{r7}
 8009406:	4770      	bx	lr

08009408 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
 8009410:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009412:	2180      	movs	r1, #128	@ 0x80
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 fcad 	bl	8009d74 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800941a:	2100      	movs	r1, #0
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 fca9 	bl	8009d74 <USBD_LL_StallEP>
}
 8009422:	bf00      	nop
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b086      	sub	sp, #24
 800942e:	af00      	add	r7, sp, #0
 8009430:	60f8      	str	r0, [r7, #12]
 8009432:	60b9      	str	r1, [r7, #8]
 8009434:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009436:	2300      	movs	r3, #0
 8009438:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d032      	beq.n	80094a6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f000 f834 	bl	80094ae <USBD_GetLen>
 8009446:	4603      	mov	r3, r0
 8009448:	3301      	adds	r3, #1
 800944a:	b29b      	uxth	r3, r3
 800944c:	005b      	lsls	r3, r3, #1
 800944e:	b29a      	uxth	r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8009454:	7dfb      	ldrb	r3, [r7, #23]
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	75fa      	strb	r2, [r7, #23]
 800945a:	461a      	mov	r2, r3
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	4413      	add	r3, r2
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	7812      	ldrb	r2, [r2, #0]
 8009464:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009466:	7dfb      	ldrb	r3, [r7, #23]
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	75fa      	strb	r2, [r7, #23]
 800946c:	461a      	mov	r2, r3
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	4413      	add	r3, r2
 8009472:	2203      	movs	r2, #3
 8009474:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009476:	e012      	b.n	800949e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	60fa      	str	r2, [r7, #12]
 800947e:	7dfa      	ldrb	r2, [r7, #23]
 8009480:	1c51      	adds	r1, r2, #1
 8009482:	75f9      	strb	r1, [r7, #23]
 8009484:	4611      	mov	r1, r2
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	440a      	add	r2, r1
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800948e:	7dfb      	ldrb	r3, [r7, #23]
 8009490:	1c5a      	adds	r2, r3, #1
 8009492:	75fa      	strb	r2, [r7, #23]
 8009494:	461a      	mov	r2, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	4413      	add	r3, r2
 800949a:	2200      	movs	r2, #0
 800949c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1e8      	bne.n	8009478 <USBD_GetString+0x4e>
    }
  }
}
 80094a6:	bf00      	nop
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80094ae:	b480      	push	{r7}
 80094b0:	b085      	sub	sp, #20
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80094b6:	2300      	movs	r3, #0
 80094b8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80094ba:	e005      	b.n	80094c8 <USBD_GetLen+0x1a>
  {
    len++;
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	3301      	adds	r3, #1
 80094c0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	3301      	adds	r3, #1
 80094c6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d1f5      	bne.n	80094bc <USBD_GetLen+0xe>
  }

  return len;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bc80      	pop	{r7}
 80094da:	4770      	bx	lr

080094dc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	4613      	mov	r3, r2
 80094e8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2202      	movs	r2, #2
 80094ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80094f2:	88fa      	ldrh	r2, [r7, #6]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80094f8:	88fa      	ldrh	r2, [r7, #6]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80094fe:	88fb      	ldrh	r3, [r7, #6]
 8009500:	68ba      	ldr	r2, [r7, #8]
 8009502:	2100      	movs	r1, #0
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 fcbd 	bl	8009e84 <USBD_LL_Transmit>

  return USBD_OK;
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	4613      	mov	r3, r2
 8009520:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009522:	88fb      	ldrh	r3, [r7, #6]
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	2100      	movs	r1, #0
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 fcab 	bl	8009e84 <USBD_LL_Transmit>

  return USBD_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	3710      	adds	r7, #16
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b084      	sub	sp, #16
 800953c:	af00      	add	r7, sp, #0
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	4613      	mov	r3, r2
 8009544:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2203      	movs	r2, #3
 800954a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800954e:	88fa      	ldrh	r2, [r7, #6]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009556:	88fa      	ldrh	r2, [r7, #6]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800955e:	88fb      	ldrh	r3, [r7, #6]
 8009560:	68ba      	ldr	r2, [r7, #8]
 8009562:	2100      	movs	r1, #0
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	f000 fcb0 	bl	8009eca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	4613      	mov	r3, r2
 8009580:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009582:	88fb      	ldrh	r3, [r7, #6]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	2100      	movs	r1, #0
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 fc9e 	bl	8009eca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2204      	movs	r2, #4
 80095a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80095a8:	2300      	movs	r3, #0
 80095aa:	2200      	movs	r2, #0
 80095ac:	2100      	movs	r1, #0
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fc68 	bl	8009e84 <USBD_LL_Transmit>

  return USBD_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b082      	sub	sp, #8
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2205      	movs	r2, #5
 80095ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80095ce:	2300      	movs	r3, #0
 80095d0:	2200      	movs	r2, #0
 80095d2:	2100      	movs	r1, #0
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fc78 	bl	8009eca <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095da:	2300      	movs	r3, #0
}
 80095dc:	4618      	mov	r0, r3
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b087      	sub	sp, #28
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	4613      	mov	r3, r2
 80095f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80095f2:	2301      	movs	r3, #1
 80095f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 80095fa:	4b1e      	ldr	r3, [pc, #120]	@ (8009674 <FATFS_LinkDriverEx+0x90>)
 80095fc:	7a5b      	ldrb	r3, [r3, #9]
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b01      	cmp	r3, #1
 8009602:	d831      	bhi.n	8009668 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009604:	4b1b      	ldr	r3, [pc, #108]	@ (8009674 <FATFS_LinkDriverEx+0x90>)
 8009606:	7a5b      	ldrb	r3, [r3, #9]
 8009608:	b2db      	uxtb	r3, r3
 800960a:	461a      	mov	r2, r3
 800960c:	4b19      	ldr	r3, [pc, #100]	@ (8009674 <FATFS_LinkDriverEx+0x90>)
 800960e:	2100      	movs	r1, #0
 8009610:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009612:	4b18      	ldr	r3, [pc, #96]	@ (8009674 <FATFS_LinkDriverEx+0x90>)
 8009614:	7a5b      	ldrb	r3, [r3, #9]
 8009616:	b2db      	uxtb	r3, r3
 8009618:	4a16      	ldr	r2, [pc, #88]	@ (8009674 <FATFS_LinkDriverEx+0x90>)
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009622:	4b14      	ldr	r3, [pc, #80]	@ (8009674 <FATFS_LinkDriverEx+0x90>)
 8009624:	7a5b      	ldrb	r3, [r3, #9]
 8009626:	b2db      	uxtb	r3, r3
 8009628:	461a      	mov	r2, r3
 800962a:	4b12      	ldr	r3, [pc, #72]	@ (8009674 <FATFS_LinkDriverEx+0x90>)
 800962c:	4413      	add	r3, r2
 800962e:	79fa      	ldrb	r2, [r7, #7]
 8009630:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009632:	4b10      	ldr	r3, [pc, #64]	@ (8009674 <FATFS_LinkDriverEx+0x90>)
 8009634:	7a5b      	ldrb	r3, [r3, #9]
 8009636:	b2db      	uxtb	r3, r3
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	b2d1      	uxtb	r1, r2
 800963c:	4a0d      	ldr	r2, [pc, #52]	@ (8009674 <FATFS_LinkDriverEx+0x90>)
 800963e:	7251      	strb	r1, [r2, #9]
 8009640:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009642:	7dbb      	ldrb	r3, [r7, #22]
 8009644:	3330      	adds	r3, #48	@ 0x30
 8009646:	b2da      	uxtb	r2, r3
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	3301      	adds	r3, #1
 8009650:	223a      	movs	r2, #58	@ 0x3a
 8009652:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	3302      	adds	r3, #2
 8009658:	222f      	movs	r2, #47	@ 0x2f
 800965a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	3303      	adds	r3, #3
 8009660:	2200      	movs	r2, #0
 8009662:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009664:	2300      	movs	r3, #0
 8009666:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8009668:	7dfb      	ldrb	r3, [r7, #23]
}
 800966a:	4618      	mov	r0, r3
 800966c:	371c      	adds	r7, #28
 800966e:	46bd      	mov	sp, r7
 8009670:	bc80      	pop	{r7}
 8009672:	4770      	bx	lr
 8009674:	200004f8 	.word	0x200004f8

08009678 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009682:	2200      	movs	r2, #0
 8009684:	6839      	ldr	r1, [r7, #0]
 8009686:	6878      	ldr	r0, [r7, #4]
 8009688:	f7ff ffac 	bl	80095e4 <FATFS_LinkDriverEx>
 800968c:	4603      	mov	r3, r0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
	...

08009698 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800969c:	2200      	movs	r2, #0
 800969e:	4912      	ldr	r1, [pc, #72]	@ (80096e8 <MX_USB_DEVICE_Init+0x50>)
 80096a0:	4812      	ldr	r0, [pc, #72]	@ (80096ec <MX_USB_DEVICE_Init+0x54>)
 80096a2:	f7fe ff08 	bl	80084b6 <USBD_Init>
 80096a6:	4603      	mov	r3, r0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d001      	beq.n	80096b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80096ac:	f7f7 ffba 	bl	8001624 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80096b0:	490f      	ldr	r1, [pc, #60]	@ (80096f0 <MX_USB_DEVICE_Init+0x58>)
 80096b2:	480e      	ldr	r0, [pc, #56]	@ (80096ec <MX_USB_DEVICE_Init+0x54>)
 80096b4:	f7fe ff2a 	bl	800850c <USBD_RegisterClass>
 80096b8:	4603      	mov	r3, r0
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80096be:	f7f7 ffb1 	bl	8001624 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80096c2:	490c      	ldr	r1, [pc, #48]	@ (80096f4 <MX_USB_DEVICE_Init+0x5c>)
 80096c4:	4809      	ldr	r0, [pc, #36]	@ (80096ec <MX_USB_DEVICE_Init+0x54>)
 80096c6:	f7fe fe5b 	bl	8008380 <USBD_CDC_RegisterInterface>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80096d0:	f7f7 ffa8 	bl	8001624 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80096d4:	4805      	ldr	r0, [pc, #20]	@ (80096ec <MX_USB_DEVICE_Init+0x54>)
 80096d6:	f7fe ff32 	bl	800853e <USBD_Start>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80096e0:	f7f7 ffa0 	bl	8001624 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80096e4:	bf00      	nop
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	20000140 	.word	0x20000140
 80096ec:	20000504 	.word	0x20000504
 80096f0:	2000002c 	.word	0x2000002c
 80096f4:	20000130 	.word	0x20000130

080096f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80096fc:	2200      	movs	r2, #0
 80096fe:	4905      	ldr	r1, [pc, #20]	@ (8009714 <CDC_Init_FS+0x1c>)
 8009700:	4805      	ldr	r0, [pc, #20]	@ (8009718 <CDC_Init_FS+0x20>)
 8009702:	f7fe fe53 	bl	80083ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009706:	4905      	ldr	r1, [pc, #20]	@ (800971c <CDC_Init_FS+0x24>)
 8009708:	4803      	ldr	r0, [pc, #12]	@ (8009718 <CDC_Init_FS+0x20>)
 800970a:	f7fe fe68 	bl	80083de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800970e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009710:	4618      	mov	r0, r3
 8009712:	bd80      	pop	{r7, pc}
 8009714:	20000bc8 	.word	0x20000bc8
 8009718:	20000504 	.word	0x20000504
 800971c:	200007c8 	.word	0x200007c8

08009720 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009720:	b480      	push	{r7}
 8009722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009724:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009726:	4618      	mov	r0, r3
 8009728:	46bd      	mov	sp, r7
 800972a:	bc80      	pop	{r7}
 800972c:	4770      	bx	lr
	...

08009730 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	6039      	str	r1, [r7, #0]
 800973a:	71fb      	strb	r3, [r7, #7]
 800973c:	4613      	mov	r3, r2
 800973e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	2b23      	cmp	r3, #35	@ 0x23
 8009744:	d84a      	bhi.n	80097dc <CDC_Control_FS+0xac>
 8009746:	a201      	add	r2, pc, #4	@ (adr r2, 800974c <CDC_Control_FS+0x1c>)
 8009748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800974c:	080097dd 	.word	0x080097dd
 8009750:	080097dd 	.word	0x080097dd
 8009754:	080097dd 	.word	0x080097dd
 8009758:	080097dd 	.word	0x080097dd
 800975c:	080097dd 	.word	0x080097dd
 8009760:	080097dd 	.word	0x080097dd
 8009764:	080097dd 	.word	0x080097dd
 8009768:	080097dd 	.word	0x080097dd
 800976c:	080097dd 	.word	0x080097dd
 8009770:	080097dd 	.word	0x080097dd
 8009774:	080097dd 	.word	0x080097dd
 8009778:	080097dd 	.word	0x080097dd
 800977c:	080097dd 	.word	0x080097dd
 8009780:	080097dd 	.word	0x080097dd
 8009784:	080097dd 	.word	0x080097dd
 8009788:	080097dd 	.word	0x080097dd
 800978c:	080097dd 	.word	0x080097dd
 8009790:	080097dd 	.word	0x080097dd
 8009794:	080097dd 	.word	0x080097dd
 8009798:	080097dd 	.word	0x080097dd
 800979c:	080097dd 	.word	0x080097dd
 80097a0:	080097dd 	.word	0x080097dd
 80097a4:	080097dd 	.word	0x080097dd
 80097a8:	080097dd 	.word	0x080097dd
 80097ac:	080097dd 	.word	0x080097dd
 80097b0:	080097dd 	.word	0x080097dd
 80097b4:	080097dd 	.word	0x080097dd
 80097b8:	080097dd 	.word	0x080097dd
 80097bc:	080097dd 	.word	0x080097dd
 80097c0:	080097dd 	.word	0x080097dd
 80097c4:	080097dd 	.word	0x080097dd
 80097c8:	080097dd 	.word	0x080097dd
 80097cc:	080097dd 	.word	0x080097dd
 80097d0:	080097dd 	.word	0x080097dd
 80097d4:	080097dd 	.word	0x080097dd
 80097d8:	080097dd 	.word	0x080097dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80097dc:	bf00      	nop
  }

  return (USBD_OK);
 80097de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bc80      	pop	{r7}
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop

080097ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80097f6:	6879      	ldr	r1, [r7, #4]
 80097f8:	4805      	ldr	r0, [pc, #20]	@ (8009810 <CDC_Receive_FS+0x24>)
 80097fa:	f7fe fdf0 	bl	80083de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80097fe:	4804      	ldr	r0, [pc, #16]	@ (8009810 <CDC_Receive_FS+0x24>)
 8009800:	f7fe fe2f 	bl	8008462 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009804:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009806:	4618      	mov	r0, r3
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20000504 	.word	0x20000504

08009814 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009824:	4b0d      	ldr	r3, [pc, #52]	@ (800985c <CDC_Transmit_FS+0x48>)
 8009826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800982a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009836:	2301      	movs	r3, #1
 8009838:	e00b      	b.n	8009852 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800983a:	887b      	ldrh	r3, [r7, #2]
 800983c:	461a      	mov	r2, r3
 800983e:	6879      	ldr	r1, [r7, #4]
 8009840:	4806      	ldr	r0, [pc, #24]	@ (800985c <CDC_Transmit_FS+0x48>)
 8009842:	f7fe fdb3 	bl	80083ac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009846:	4805      	ldr	r0, [pc, #20]	@ (800985c <CDC_Transmit_FS+0x48>)
 8009848:	f7fe fddc 	bl	8008404 <USBD_CDC_TransmitPacket>
 800984c:	4603      	mov	r3, r0
 800984e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009850:	7bfb      	ldrb	r3, [r7, #15]
}
 8009852:	4618      	mov	r0, r3
 8009854:	3710      	adds	r7, #16
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	20000504 	.word	0x20000504

08009860 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	6039      	str	r1, [r7, #0]
 800986a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	2212      	movs	r2, #18
 8009870:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009872:	4b03      	ldr	r3, [pc, #12]	@ (8009880 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009874:	4618      	mov	r0, r3
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	bc80      	pop	{r7}
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	2000015c 	.word	0x2000015c

08009884 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	4603      	mov	r3, r0
 800988c:	6039      	str	r1, [r7, #0]
 800988e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	2204      	movs	r2, #4
 8009894:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009896:	4b03      	ldr	r3, [pc, #12]	@ (80098a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009898:	4618      	mov	r0, r3
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	bc80      	pop	{r7}
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20000170 	.word	0x20000170

080098a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	4603      	mov	r3, r0
 80098b0:	6039      	str	r1, [r7, #0]
 80098b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098b4:	79fb      	ldrb	r3, [r7, #7]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d105      	bne.n	80098c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098ba:	683a      	ldr	r2, [r7, #0]
 80098bc:	4907      	ldr	r1, [pc, #28]	@ (80098dc <USBD_FS_ProductStrDescriptor+0x34>)
 80098be:	4808      	ldr	r0, [pc, #32]	@ (80098e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80098c0:	f7ff fdb3 	bl	800942a <USBD_GetString>
 80098c4:	e004      	b.n	80098d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	4904      	ldr	r1, [pc, #16]	@ (80098dc <USBD_FS_ProductStrDescriptor+0x34>)
 80098ca:	4805      	ldr	r0, [pc, #20]	@ (80098e0 <USBD_FS_ProductStrDescriptor+0x38>)
 80098cc:	f7ff fdad 	bl	800942a <USBD_GetString>
  }
  return USBD_StrDesc;
 80098d0:	4b02      	ldr	r3, [pc, #8]	@ (80098dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	20000fc8 	.word	0x20000fc8
 80098e0:	0800ccc4 	.word	0x0800ccc4

080098e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	6039      	str	r1, [r7, #0]
 80098ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	4904      	ldr	r1, [pc, #16]	@ (8009904 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80098f4:	4804      	ldr	r0, [pc, #16]	@ (8009908 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80098f6:	f7ff fd98 	bl	800942a <USBD_GetString>
  return USBD_StrDesc;
 80098fa:	4b02      	ldr	r3, [pc, #8]	@ (8009904 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	20000fc8 	.word	0x20000fc8
 8009908:	0800ccdc 	.word	0x0800ccdc

0800990c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	4603      	mov	r3, r0
 8009914:	6039      	str	r1, [r7, #0]
 8009916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	221a      	movs	r2, #26
 800991c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800991e:	f000 f843 	bl	80099a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009922:	4b02      	ldr	r3, [pc, #8]	@ (800992c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009924:	4618      	mov	r0, r3
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	20000174 	.word	0x20000174

08009930 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	4603      	mov	r3, r0
 8009938:	6039      	str	r1, [r7, #0]
 800993a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800993c:	79fb      	ldrb	r3, [r7, #7]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d105      	bne.n	800994e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009942:	683a      	ldr	r2, [r7, #0]
 8009944:	4907      	ldr	r1, [pc, #28]	@ (8009964 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009946:	4808      	ldr	r0, [pc, #32]	@ (8009968 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009948:	f7ff fd6f 	bl	800942a <USBD_GetString>
 800994c:	e004      	b.n	8009958 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	4904      	ldr	r1, [pc, #16]	@ (8009964 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009952:	4805      	ldr	r0, [pc, #20]	@ (8009968 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009954:	f7ff fd69 	bl	800942a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009958:	4b02      	ldr	r3, [pc, #8]	@ (8009964 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800995a:	4618      	mov	r0, r3
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	20000fc8 	.word	0x20000fc8
 8009968:	0800ccf0 	.word	0x0800ccf0

0800996c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800996c:	b580      	push	{r7, lr}
 800996e:	b082      	sub	sp, #8
 8009970:	af00      	add	r7, sp, #0
 8009972:	4603      	mov	r3, r0
 8009974:	6039      	str	r1, [r7, #0]
 8009976:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009978:	79fb      	ldrb	r3, [r7, #7]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d105      	bne.n	800998a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	4907      	ldr	r1, [pc, #28]	@ (80099a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009982:	4808      	ldr	r0, [pc, #32]	@ (80099a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009984:	f7ff fd51 	bl	800942a <USBD_GetString>
 8009988:	e004      	b.n	8009994 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	4904      	ldr	r1, [pc, #16]	@ (80099a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800998e:	4805      	ldr	r0, [pc, #20]	@ (80099a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009990:	f7ff fd4b 	bl	800942a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009994:	4b02      	ldr	r3, [pc, #8]	@ (80099a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009996:	4618      	mov	r0, r3
 8009998:	3708      	adds	r7, #8
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	20000fc8 	.word	0x20000fc8
 80099a4:	0800ccfc 	.word	0x0800ccfc

080099a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80099ae:	4b0f      	ldr	r3, [pc, #60]	@ (80099ec <Get_SerialNum+0x44>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80099b4:	4b0e      	ldr	r3, [pc, #56]	@ (80099f0 <Get_SerialNum+0x48>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80099ba:	4b0e      	ldr	r3, [pc, #56]	@ (80099f4 <Get_SerialNum+0x4c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4413      	add	r3, r2
 80099c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d009      	beq.n	80099e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80099ce:	2208      	movs	r2, #8
 80099d0:	4909      	ldr	r1, [pc, #36]	@ (80099f8 <Get_SerialNum+0x50>)
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 f814 	bl	8009a00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80099d8:	2204      	movs	r2, #4
 80099da:	4908      	ldr	r1, [pc, #32]	@ (80099fc <Get_SerialNum+0x54>)
 80099dc:	68b8      	ldr	r0, [r7, #8]
 80099de:	f000 f80f 	bl	8009a00 <IntToUnicode>
  }
}
 80099e2:	bf00      	nop
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	1ffff7e8 	.word	0x1ffff7e8
 80099f0:	1ffff7ec 	.word	0x1ffff7ec
 80099f4:	1ffff7f0 	.word	0x1ffff7f0
 80099f8:	20000176 	.word	0x20000176
 80099fc:	20000186 	.word	0x20000186

08009a00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b087      	sub	sp, #28
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a12:	2300      	movs	r3, #0
 8009a14:	75fb      	strb	r3, [r7, #23]
 8009a16:	e027      	b.n	8009a68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	0f1b      	lsrs	r3, r3, #28
 8009a1c:	2b09      	cmp	r3, #9
 8009a1e:	d80b      	bhi.n	8009a38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	0f1b      	lsrs	r3, r3, #28
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	7dfb      	ldrb	r3, [r7, #23]
 8009a28:	005b      	lsls	r3, r3, #1
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	440b      	add	r3, r1
 8009a30:	3230      	adds	r2, #48	@ 0x30
 8009a32:	b2d2      	uxtb	r2, r2
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	e00a      	b.n	8009a4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	0f1b      	lsrs	r3, r3, #28
 8009a3c:	b2da      	uxtb	r2, r3
 8009a3e:	7dfb      	ldrb	r3, [r7, #23]
 8009a40:	005b      	lsls	r3, r3, #1
 8009a42:	4619      	mov	r1, r3
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	440b      	add	r3, r1
 8009a48:	3237      	adds	r2, #55	@ 0x37
 8009a4a:	b2d2      	uxtb	r2, r2
 8009a4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	011b      	lsls	r3, r3, #4
 8009a52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a54:	7dfb      	ldrb	r3, [r7, #23]
 8009a56:	005b      	lsls	r3, r3, #1
 8009a58:	3301      	adds	r3, #1
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	4413      	add	r3, r2
 8009a5e:	2200      	movs	r2, #0
 8009a60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
 8009a64:	3301      	adds	r3, #1
 8009a66:	75fb      	strb	r3, [r7, #23]
 8009a68:	7dfa      	ldrb	r2, [r7, #23]
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d3d3      	bcc.n	8009a18 <IntToUnicode+0x18>
  }
}
 8009a70:	bf00      	nop
 8009a72:	bf00      	nop
 8009a74:	371c      	adds	r7, #28
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bc80      	pop	{r7}
 8009a7a:	4770      	bx	lr

08009a7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a0d      	ldr	r2, [pc, #52]	@ (8009ac0 <HAL_PCD_MspInit+0x44>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d113      	bne.n	8009ab6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac4 <HAL_PCD_MspInit+0x48>)
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	4a0c      	ldr	r2, [pc, #48]	@ (8009ac4 <HAL_PCD_MspInit+0x48>)
 8009a94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a98:	61d3      	str	r3, [r2, #28]
 8009a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac4 <HAL_PCD_MspInit+0x48>)
 8009a9c:	69db      	ldr	r3, [r3, #28]
 8009a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009aa2:	60fb      	str	r3, [r7, #12]
 8009aa4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	2100      	movs	r1, #0
 8009aaa:	2014      	movs	r0, #20
 8009aac:	f7f8 f965 	bl	8001d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009ab0:	2014      	movs	r0, #20
 8009ab2:	f7f8 f97e 	bl	8001db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009ab6:	bf00      	nop
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	40005c00 	.word	0x40005c00
 8009ac4:	40021000 	.word	0x40021000

08009ac8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009adc:	4619      	mov	r1, r3
 8009ade:	4610      	mov	r0, r2
 8009ae0:	f7fe fd75 	bl	80085ce <USBD_LL_SetupStage>
}
 8009ae4:	bf00      	nop
 8009ae6:	3708      	adds	r7, #8
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	bd80      	pop	{r7, pc}

08009aec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
 8009af4:	460b      	mov	r3, r1
 8009af6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009afe:	78fa      	ldrb	r2, [r7, #3]
 8009b00:	6879      	ldr	r1, [r7, #4]
 8009b02:	4613      	mov	r3, r2
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	00db      	lsls	r3, r3, #3
 8009b0a:	440b      	add	r3, r1
 8009b0c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	78fb      	ldrb	r3, [r7, #3]
 8009b14:	4619      	mov	r1, r3
 8009b16:	f7fe fda7 	bl	8008668 <USBD_LL_DataOutStage>
}
 8009b1a:	bf00      	nop
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b082      	sub	sp, #8
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
 8009b2a:	460b      	mov	r3, r1
 8009b2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009b34:	78fa      	ldrb	r2, [r7, #3]
 8009b36:	6879      	ldr	r1, [r7, #4]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4413      	add	r3, r2
 8009b3e:	00db      	lsls	r3, r3, #3
 8009b40:	440b      	add	r3, r1
 8009b42:	3324      	adds	r3, #36	@ 0x24
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	78fb      	ldrb	r3, [r7, #3]
 8009b48:	4619      	mov	r1, r3
 8009b4a:	f7fe fdfe 	bl	800874a <USBD_LL_DataInStage>
}
 8009b4e:	bf00      	nop
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b082      	sub	sp, #8
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b64:	4618      	mov	r0, r3
 8009b66:	f7fe ff0e 	bl	8008986 <USBD_LL_SOF>
}
 8009b6a:	bf00      	nop
 8009b6c:	3708      	adds	r7, #8
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b084      	sub	sp, #16
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	799b      	ldrb	r3, [r3, #6]
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d001      	beq.n	8009b8a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b86:	f7f7 fd4d 	bl	8001624 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b90:	7bfa      	ldrb	r2, [r7, #15]
 8009b92:	4611      	mov	r1, r2
 8009b94:	4618      	mov	r0, r3
 8009b96:	f7fe febe 	bl	8008916 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fe fe77 	bl	8008894 <USBD_LL_Reset>
}
 8009ba6:	bf00      	nop
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
	...

08009bb0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fe feb8 	bl	8008934 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	7a9b      	ldrb	r3, [r3, #10]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d005      	beq.n	8009bd8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009bcc:	4b04      	ldr	r3, [pc, #16]	@ (8009be0 <HAL_PCD_SuspendCallback+0x30>)
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	4a03      	ldr	r2, [pc, #12]	@ (8009be0 <HAL_PCD_SuspendCallback+0x30>)
 8009bd2:	f043 0306 	orr.w	r3, r3, #6
 8009bd6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009bd8:	bf00      	nop
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	e000ed00 	.word	0xe000ed00

08009be4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fe feb2 	bl	800895c <USBD_LL_Resume>
}
 8009bf8:	bf00      	nop
 8009bfa:	3708      	adds	r7, #8
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009c08:	4a28      	ldr	r2, [pc, #160]	@ (8009cac <USBD_LL_Init+0xac>)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a26      	ldr	r2, [pc, #152]	@ (8009cac <USBD_LL_Init+0xac>)
 8009c14:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009c18:	4b24      	ldr	r3, [pc, #144]	@ (8009cac <USBD_LL_Init+0xac>)
 8009c1a:	4a25      	ldr	r2, [pc, #148]	@ (8009cb0 <USBD_LL_Init+0xb0>)
 8009c1c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009c1e:	4b23      	ldr	r3, [pc, #140]	@ (8009cac <USBD_LL_Init+0xac>)
 8009c20:	2208      	movs	r2, #8
 8009c22:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009c24:	4b21      	ldr	r3, [pc, #132]	@ (8009cac <USBD_LL_Init+0xac>)
 8009c26:	2202      	movs	r2, #2
 8009c28:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009c2a:	4b20      	ldr	r3, [pc, #128]	@ (8009cac <USBD_LL_Init+0xac>)
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009c30:	4b1e      	ldr	r3, [pc, #120]	@ (8009cac <USBD_LL_Init+0xac>)
 8009c32:	2200      	movs	r2, #0
 8009c34:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009c36:	4b1d      	ldr	r3, [pc, #116]	@ (8009cac <USBD_LL_Init+0xac>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009c3c:	481b      	ldr	r0, [pc, #108]	@ (8009cac <USBD_LL_Init+0xac>)
 8009c3e:	f7f9 fad4 	bl	80031ea <HAL_PCD_Init>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009c48:	f7f7 fcec 	bl	8001624 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c52:	2318      	movs	r3, #24
 8009c54:	2200      	movs	r2, #0
 8009c56:	2100      	movs	r1, #0
 8009c58:	f7fa ffe5 	bl	8004c26 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c62:	2358      	movs	r3, #88	@ 0x58
 8009c64:	2200      	movs	r2, #0
 8009c66:	2180      	movs	r1, #128	@ 0x80
 8009c68:	f7fa ffdd 	bl	8004c26 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c72:	23c0      	movs	r3, #192	@ 0xc0
 8009c74:	2200      	movs	r2, #0
 8009c76:	2181      	movs	r1, #129	@ 0x81
 8009c78:	f7fa ffd5 	bl	8004c26 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c82:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009c86:	2200      	movs	r2, #0
 8009c88:	2101      	movs	r1, #1
 8009c8a:	f7fa ffcc 	bl	8004c26 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009c98:	2200      	movs	r2, #0
 8009c9a:	2182      	movs	r1, #130	@ 0x82
 8009c9c:	f7fa ffc3 	bl	8004c26 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	200011c8 	.word	0x200011c8
 8009cb0:	40005c00 	.word	0x40005c00

08009cb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f7f9 fb83 	bl	80033d6 <HAL_PCD_Start>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f000 f94e 	bl	8009f78 <USBD_Get_USB_Status>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ce0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	4608      	mov	r0, r1
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	70fb      	strb	r3, [r7, #3]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	70bb      	strb	r3, [r7, #2]
 8009d00:	4613      	mov	r3, r2
 8009d02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d04:	2300      	movs	r3, #0
 8009d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d12:	78bb      	ldrb	r3, [r7, #2]
 8009d14:	883a      	ldrh	r2, [r7, #0]
 8009d16:	78f9      	ldrb	r1, [r7, #3]
 8009d18:	f7f9 fcd7 	bl	80036ca <HAL_PCD_EP_Open>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d20:	7bfb      	ldrb	r3, [r7, #15]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f000 f928 	bl	8009f78 <USBD_Get_USB_Status>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b084      	sub	sp, #16
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
 8009d3e:	460b      	mov	r3, r1
 8009d40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d42:	2300      	movs	r3, #0
 8009d44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d46:	2300      	movs	r3, #0
 8009d48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d50:	78fa      	ldrb	r2, [r7, #3]
 8009d52:	4611      	mov	r1, r2
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7f9 fd15 	bl	8003784 <HAL_PCD_EP_Close>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d5e:	7bfb      	ldrb	r3, [r7, #15]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f000 f909 	bl	8009f78 <USBD_Get_USB_Status>
 8009d66:	4603      	mov	r3, r0
 8009d68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d80:	2300      	movs	r3, #0
 8009d82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d8e:	78fa      	ldrb	r2, [r7, #3]
 8009d90:	4611      	mov	r1, r2
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7f9 fdbd 	bl	8003912 <HAL_PCD_EP_SetStall>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 f8ea 	bl	8009f78 <USBD_Get_USB_Status>
 8009da4:	4603      	mov	r3, r0
 8009da6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b084      	sub	sp, #16
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
 8009dba:	460b      	mov	r3, r1
 8009dbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009dcc:	78fa      	ldrb	r2, [r7, #3]
 8009dce:	4611      	mov	r1, r2
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7f9 fdfe 	bl	80039d2 <HAL_PCD_EP_ClrStall>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dda:	7bfb      	ldrb	r3, [r7, #15]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f000 f8cb 	bl	8009f78 <USBD_Get_USB_Status>
 8009de2:	4603      	mov	r3, r0
 8009de4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009de6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	da0b      	bge.n	8009e24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e12:	68f9      	ldr	r1, [r7, #12]
 8009e14:	4613      	mov	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	00db      	lsls	r3, r3, #3
 8009e1c:	440b      	add	r3, r1
 8009e1e:	3312      	adds	r3, #18
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	e00b      	b.n	8009e3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e24:	78fb      	ldrb	r3, [r7, #3]
 8009e26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e2a:	68f9      	ldr	r1, [r7, #12]
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	4413      	add	r3, r2
 8009e32:	00db      	lsls	r3, r3, #3
 8009e34:	440b      	add	r3, r1
 8009e36:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009e3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bc80      	pop	{r7}
 8009e44:	4770      	bx	lr

08009e46 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b084      	sub	sp, #16
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e56:	2300      	movs	r3, #0
 8009e58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e60:	78fa      	ldrb	r2, [r7, #3]
 8009e62:	4611      	mov	r1, r2
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7f9 fc0c 	bl	8003682 <HAL_PCD_SetAddress>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f000 f881 	bl	8009f78 <USBD_Get_USB_Status>
 8009e76:	4603      	mov	r3, r0
 8009e78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b086      	sub	sp, #24
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	607a      	str	r2, [r7, #4]
 8009e8e:	461a      	mov	r2, r3
 8009e90:	460b      	mov	r3, r1
 8009e92:	72fb      	strb	r3, [r7, #11]
 8009e94:	4613      	mov	r3, r2
 8009e96:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009ea6:	893b      	ldrh	r3, [r7, #8]
 8009ea8:	7af9      	ldrb	r1, [r7, #11]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	f7f9 fcfa 	bl	80038a4 <HAL_PCD_EP_Transmit>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eb4:	7dfb      	ldrb	r3, [r7, #23]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f000 f85e 	bl	8009f78 <USBD_Get_USB_Status>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ec0:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b086      	sub	sp, #24
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	607a      	str	r2, [r7, #4]
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	72fb      	strb	r3, [r7, #11]
 8009eda:	4613      	mov	r3, r2
 8009edc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009eec:	893b      	ldrh	r3, [r7, #8]
 8009eee:	7af9      	ldrb	r1, [r7, #11]
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	f7f9 fc8f 	bl	8003814 <HAL_PCD_EP_Receive>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
 8009efc:	4618      	mov	r0, r3
 8009efe:	f000 f83b 	bl	8009f78 <USBD_Get_USB_Status>
 8009f02:	4603      	mov	r3, r0
 8009f04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f06:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3718      	adds	r7, #24
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f22:	78fa      	ldrb	r2, [r7, #3]
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7f9 fca5 	bl	8003876 <HAL_PCD_EP_GetRxCount>
 8009f2c:	4603      	mov	r3, r0
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3708      	adds	r7, #8
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
	...

08009f38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009f40:	4b02      	ldr	r3, [pc, #8]	@ (8009f4c <USBD_static_malloc+0x14>)
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	370c      	adds	r7, #12
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bc80      	pop	{r7}
 8009f4a:	4770      	bx	lr
 8009f4c:	200014a0 	.word	0x200014a0

08009f50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]

}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bc80      	pop	{r7}
 8009f60:	4770      	bx	lr

08009f62 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f62:	b480      	push	{r7}
 8009f64:	b083      	sub	sp, #12
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009f6e:	bf00      	nop
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bc80      	pop	{r7}
 8009f76:	4770      	bx	lr

08009f78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	4603      	mov	r3, r0
 8009f80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f82:	2300      	movs	r3, #0
 8009f84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f86:	79fb      	ldrb	r3, [r7, #7]
 8009f88:	2b03      	cmp	r3, #3
 8009f8a:	d817      	bhi.n	8009fbc <USBD_Get_USB_Status+0x44>
 8009f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f94 <USBD_Get_USB_Status+0x1c>)
 8009f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f92:	bf00      	nop
 8009f94:	08009fa5 	.word	0x08009fa5
 8009f98:	08009fab 	.word	0x08009fab
 8009f9c:	08009fb1 	.word	0x08009fb1
 8009fa0:	08009fb7 	.word	0x08009fb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8009fa8:	e00b      	b.n	8009fc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009faa:	2302      	movs	r3, #2
 8009fac:	73fb      	strb	r3, [r7, #15]
    break;
 8009fae:	e008      	b.n	8009fc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fb4:	e005      	b.n	8009fc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8009fba:	e002      	b.n	8009fc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8009fc0:	bf00      	nop
  }
  return usb_status;
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bc80      	pop	{r7}
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop

08009fd0 <__cvt>:
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fd6:	461d      	mov	r5, r3
 8009fd8:	bfbb      	ittet	lt
 8009fda:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009fde:	461d      	movlt	r5, r3
 8009fe0:	2300      	movge	r3, #0
 8009fe2:	232d      	movlt	r3, #45	@ 0x2d
 8009fe4:	b088      	sub	sp, #32
 8009fe6:	4614      	mov	r4, r2
 8009fe8:	bfb8      	it	lt
 8009fea:	4614      	movlt	r4, r2
 8009fec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009fee:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009ff0:	7013      	strb	r3, [r2, #0]
 8009ff2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009ff4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8009ff8:	f023 0820 	bic.w	r8, r3, #32
 8009ffc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a000:	d005      	beq.n	800a00e <__cvt+0x3e>
 800a002:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a006:	d100      	bne.n	800a00a <__cvt+0x3a>
 800a008:	3601      	adds	r6, #1
 800a00a:	2302      	movs	r3, #2
 800a00c:	e000      	b.n	800a010 <__cvt+0x40>
 800a00e:	2303      	movs	r3, #3
 800a010:	aa07      	add	r2, sp, #28
 800a012:	9204      	str	r2, [sp, #16]
 800a014:	aa06      	add	r2, sp, #24
 800a016:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a01a:	e9cd 3600 	strd	r3, r6, [sp]
 800a01e:	4622      	mov	r2, r4
 800a020:	462b      	mov	r3, r5
 800a022:	f000 fe6d 	bl	800ad00 <_dtoa_r>
 800a026:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a02a:	4607      	mov	r7, r0
 800a02c:	d119      	bne.n	800a062 <__cvt+0x92>
 800a02e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a030:	07db      	lsls	r3, r3, #31
 800a032:	d50e      	bpl.n	800a052 <__cvt+0x82>
 800a034:	eb00 0906 	add.w	r9, r0, r6
 800a038:	2200      	movs	r2, #0
 800a03a:	2300      	movs	r3, #0
 800a03c:	4620      	mov	r0, r4
 800a03e:	4629      	mov	r1, r5
 800a040:	f7f6 fd66 	bl	8000b10 <__aeabi_dcmpeq>
 800a044:	b108      	cbz	r0, 800a04a <__cvt+0x7a>
 800a046:	f8cd 901c 	str.w	r9, [sp, #28]
 800a04a:	2230      	movs	r2, #48	@ 0x30
 800a04c:	9b07      	ldr	r3, [sp, #28]
 800a04e:	454b      	cmp	r3, r9
 800a050:	d31e      	bcc.n	800a090 <__cvt+0xc0>
 800a052:	4638      	mov	r0, r7
 800a054:	9b07      	ldr	r3, [sp, #28]
 800a056:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a058:	1bdb      	subs	r3, r3, r7
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	b008      	add	sp, #32
 800a05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a062:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a066:	eb00 0906 	add.w	r9, r0, r6
 800a06a:	d1e5      	bne.n	800a038 <__cvt+0x68>
 800a06c:	7803      	ldrb	r3, [r0, #0]
 800a06e:	2b30      	cmp	r3, #48	@ 0x30
 800a070:	d10a      	bne.n	800a088 <__cvt+0xb8>
 800a072:	2200      	movs	r2, #0
 800a074:	2300      	movs	r3, #0
 800a076:	4620      	mov	r0, r4
 800a078:	4629      	mov	r1, r5
 800a07a:	f7f6 fd49 	bl	8000b10 <__aeabi_dcmpeq>
 800a07e:	b918      	cbnz	r0, 800a088 <__cvt+0xb8>
 800a080:	f1c6 0601 	rsb	r6, r6, #1
 800a084:	f8ca 6000 	str.w	r6, [sl]
 800a088:	f8da 3000 	ldr.w	r3, [sl]
 800a08c:	4499      	add	r9, r3
 800a08e:	e7d3      	b.n	800a038 <__cvt+0x68>
 800a090:	1c59      	adds	r1, r3, #1
 800a092:	9107      	str	r1, [sp, #28]
 800a094:	701a      	strb	r2, [r3, #0]
 800a096:	e7d9      	b.n	800a04c <__cvt+0x7c>

0800a098 <__exponent>:
 800a098:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a09a:	2900      	cmp	r1, #0
 800a09c:	bfb6      	itet	lt
 800a09e:	232d      	movlt	r3, #45	@ 0x2d
 800a0a0:	232b      	movge	r3, #43	@ 0x2b
 800a0a2:	4249      	neglt	r1, r1
 800a0a4:	2909      	cmp	r1, #9
 800a0a6:	7002      	strb	r2, [r0, #0]
 800a0a8:	7043      	strb	r3, [r0, #1]
 800a0aa:	dd29      	ble.n	800a100 <__exponent+0x68>
 800a0ac:	f10d 0307 	add.w	r3, sp, #7
 800a0b0:	461d      	mov	r5, r3
 800a0b2:	270a      	movs	r7, #10
 800a0b4:	fbb1 f6f7 	udiv	r6, r1, r7
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	fb07 1416 	mls	r4, r7, r6, r1
 800a0be:	3430      	adds	r4, #48	@ 0x30
 800a0c0:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a0c4:	460c      	mov	r4, r1
 800a0c6:	2c63      	cmp	r4, #99	@ 0x63
 800a0c8:	4631      	mov	r1, r6
 800a0ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800a0ce:	dcf1      	bgt.n	800a0b4 <__exponent+0x1c>
 800a0d0:	3130      	adds	r1, #48	@ 0x30
 800a0d2:	1e94      	subs	r4, r2, #2
 800a0d4:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a0d8:	4623      	mov	r3, r4
 800a0da:	1c41      	adds	r1, r0, #1
 800a0dc:	42ab      	cmp	r3, r5
 800a0de:	d30a      	bcc.n	800a0f6 <__exponent+0x5e>
 800a0e0:	f10d 0309 	add.w	r3, sp, #9
 800a0e4:	1a9b      	subs	r3, r3, r2
 800a0e6:	42ac      	cmp	r4, r5
 800a0e8:	bf88      	it	hi
 800a0ea:	2300      	movhi	r3, #0
 800a0ec:	3302      	adds	r3, #2
 800a0ee:	4403      	add	r3, r0
 800a0f0:	1a18      	subs	r0, r3, r0
 800a0f2:	b003      	add	sp, #12
 800a0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0f6:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a0fa:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a0fe:	e7ed      	b.n	800a0dc <__exponent+0x44>
 800a100:	2330      	movs	r3, #48	@ 0x30
 800a102:	3130      	adds	r1, #48	@ 0x30
 800a104:	7083      	strb	r3, [r0, #2]
 800a106:	70c1      	strb	r1, [r0, #3]
 800a108:	1d03      	adds	r3, r0, #4
 800a10a:	e7f1      	b.n	800a0f0 <__exponent+0x58>

0800a10c <_printf_float>:
 800a10c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a110:	b091      	sub	sp, #68	@ 0x44
 800a112:	460c      	mov	r4, r1
 800a114:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a118:	4616      	mov	r6, r2
 800a11a:	461f      	mov	r7, r3
 800a11c:	4605      	mov	r5, r0
 800a11e:	f000 fce1 	bl	800aae4 <_localeconv_r>
 800a122:	6803      	ldr	r3, [r0, #0]
 800a124:	4618      	mov	r0, r3
 800a126:	9308      	str	r3, [sp, #32]
 800a128:	f7f6 f812 	bl	8000150 <strlen>
 800a12c:	2300      	movs	r3, #0
 800a12e:	930e      	str	r3, [sp, #56]	@ 0x38
 800a130:	f8d8 3000 	ldr.w	r3, [r8]
 800a134:	9009      	str	r0, [sp, #36]	@ 0x24
 800a136:	3307      	adds	r3, #7
 800a138:	f023 0307 	bic.w	r3, r3, #7
 800a13c:	f103 0208 	add.w	r2, r3, #8
 800a140:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a144:	f8d4 b000 	ldr.w	fp, [r4]
 800a148:	f8c8 2000 	str.w	r2, [r8]
 800a14c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a150:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a154:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a156:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a15a:	f04f 32ff 	mov.w	r2, #4294967295
 800a15e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a162:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a166:	4b9c      	ldr	r3, [pc, #624]	@ (800a3d8 <_printf_float+0x2cc>)
 800a168:	f7f6 fd04 	bl	8000b74 <__aeabi_dcmpun>
 800a16c:	bb70      	cbnz	r0, 800a1cc <_printf_float+0xc0>
 800a16e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a172:	f04f 32ff 	mov.w	r2, #4294967295
 800a176:	4b98      	ldr	r3, [pc, #608]	@ (800a3d8 <_printf_float+0x2cc>)
 800a178:	f7f6 fcde 	bl	8000b38 <__aeabi_dcmple>
 800a17c:	bb30      	cbnz	r0, 800a1cc <_printf_float+0xc0>
 800a17e:	2200      	movs	r2, #0
 800a180:	2300      	movs	r3, #0
 800a182:	4640      	mov	r0, r8
 800a184:	4649      	mov	r1, r9
 800a186:	f7f6 fccd 	bl	8000b24 <__aeabi_dcmplt>
 800a18a:	b110      	cbz	r0, 800a192 <_printf_float+0x86>
 800a18c:	232d      	movs	r3, #45	@ 0x2d
 800a18e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a192:	4a92      	ldr	r2, [pc, #584]	@ (800a3dc <_printf_float+0x2d0>)
 800a194:	4b92      	ldr	r3, [pc, #584]	@ (800a3e0 <_printf_float+0x2d4>)
 800a196:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a19a:	bf94      	ite	ls
 800a19c:	4690      	movls	r8, r2
 800a19e:	4698      	movhi	r8, r3
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	f04f 0900 	mov.w	r9, #0
 800a1a6:	6123      	str	r3, [r4, #16]
 800a1a8:	f02b 0304 	bic.w	r3, fp, #4
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	4633      	mov	r3, r6
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	9700      	str	r7, [sp, #0]
 800a1b6:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a1b8:	f000 f9d4 	bl	800a564 <_printf_common>
 800a1bc:	3001      	adds	r0, #1
 800a1be:	f040 8090 	bne.w	800a2e2 <_printf_float+0x1d6>
 800a1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c6:	b011      	add	sp, #68	@ 0x44
 800a1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1cc:	4642      	mov	r2, r8
 800a1ce:	464b      	mov	r3, r9
 800a1d0:	4640      	mov	r0, r8
 800a1d2:	4649      	mov	r1, r9
 800a1d4:	f7f6 fcce 	bl	8000b74 <__aeabi_dcmpun>
 800a1d8:	b148      	cbz	r0, 800a1ee <_printf_float+0xe2>
 800a1da:	464b      	mov	r3, r9
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	bfb8      	it	lt
 800a1e0:	232d      	movlt	r3, #45	@ 0x2d
 800a1e2:	4a80      	ldr	r2, [pc, #512]	@ (800a3e4 <_printf_float+0x2d8>)
 800a1e4:	bfb8      	it	lt
 800a1e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a1ea:	4b7f      	ldr	r3, [pc, #508]	@ (800a3e8 <_printf_float+0x2dc>)
 800a1ec:	e7d3      	b.n	800a196 <_printf_float+0x8a>
 800a1ee:	6863      	ldr	r3, [r4, #4]
 800a1f0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a1f4:	1c5a      	adds	r2, r3, #1
 800a1f6:	d13f      	bne.n	800a278 <_printf_float+0x16c>
 800a1f8:	2306      	movs	r3, #6
 800a1fa:	6063      	str	r3, [r4, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a202:	6023      	str	r3, [r4, #0]
 800a204:	9206      	str	r2, [sp, #24]
 800a206:	aa0e      	add	r2, sp, #56	@ 0x38
 800a208:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a20c:	aa0d      	add	r2, sp, #52	@ 0x34
 800a20e:	9203      	str	r2, [sp, #12]
 800a210:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a214:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a218:	6863      	ldr	r3, [r4, #4]
 800a21a:	4642      	mov	r2, r8
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	4628      	mov	r0, r5
 800a220:	464b      	mov	r3, r9
 800a222:	910a      	str	r1, [sp, #40]	@ 0x28
 800a224:	f7ff fed4 	bl	8009fd0 <__cvt>
 800a228:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a22a:	4680      	mov	r8, r0
 800a22c:	2947      	cmp	r1, #71	@ 0x47
 800a22e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a230:	d128      	bne.n	800a284 <_printf_float+0x178>
 800a232:	1cc8      	adds	r0, r1, #3
 800a234:	db02      	blt.n	800a23c <_printf_float+0x130>
 800a236:	6863      	ldr	r3, [r4, #4]
 800a238:	4299      	cmp	r1, r3
 800a23a:	dd40      	ble.n	800a2be <_printf_float+0x1b2>
 800a23c:	f1aa 0a02 	sub.w	sl, sl, #2
 800a240:	fa5f fa8a 	uxtb.w	sl, sl
 800a244:	4652      	mov	r2, sl
 800a246:	3901      	subs	r1, #1
 800a248:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a24c:	910d      	str	r1, [sp, #52]	@ 0x34
 800a24e:	f7ff ff23 	bl	800a098 <__exponent>
 800a252:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a254:	4681      	mov	r9, r0
 800a256:	1813      	adds	r3, r2, r0
 800a258:	2a01      	cmp	r2, #1
 800a25a:	6123      	str	r3, [r4, #16]
 800a25c:	dc02      	bgt.n	800a264 <_printf_float+0x158>
 800a25e:	6822      	ldr	r2, [r4, #0]
 800a260:	07d2      	lsls	r2, r2, #31
 800a262:	d501      	bpl.n	800a268 <_printf_float+0x15c>
 800a264:	3301      	adds	r3, #1
 800a266:	6123      	str	r3, [r4, #16]
 800a268:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d09e      	beq.n	800a1ae <_printf_float+0xa2>
 800a270:	232d      	movs	r3, #45	@ 0x2d
 800a272:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a276:	e79a      	b.n	800a1ae <_printf_float+0xa2>
 800a278:	2947      	cmp	r1, #71	@ 0x47
 800a27a:	d1bf      	bne.n	800a1fc <_printf_float+0xf0>
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d1bd      	bne.n	800a1fc <_printf_float+0xf0>
 800a280:	2301      	movs	r3, #1
 800a282:	e7ba      	b.n	800a1fa <_printf_float+0xee>
 800a284:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a288:	d9dc      	bls.n	800a244 <_printf_float+0x138>
 800a28a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a28e:	d118      	bne.n	800a2c2 <_printf_float+0x1b6>
 800a290:	2900      	cmp	r1, #0
 800a292:	6863      	ldr	r3, [r4, #4]
 800a294:	dd0b      	ble.n	800a2ae <_printf_float+0x1a2>
 800a296:	6121      	str	r1, [r4, #16]
 800a298:	b913      	cbnz	r3, 800a2a0 <_printf_float+0x194>
 800a29a:	6822      	ldr	r2, [r4, #0]
 800a29c:	07d0      	lsls	r0, r2, #31
 800a29e:	d502      	bpl.n	800a2a6 <_printf_float+0x19a>
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	440b      	add	r3, r1
 800a2a4:	6123      	str	r3, [r4, #16]
 800a2a6:	f04f 0900 	mov.w	r9, #0
 800a2aa:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a2ac:	e7dc      	b.n	800a268 <_printf_float+0x15c>
 800a2ae:	b913      	cbnz	r3, 800a2b6 <_printf_float+0x1aa>
 800a2b0:	6822      	ldr	r2, [r4, #0]
 800a2b2:	07d2      	lsls	r2, r2, #31
 800a2b4:	d501      	bpl.n	800a2ba <_printf_float+0x1ae>
 800a2b6:	3302      	adds	r3, #2
 800a2b8:	e7f4      	b.n	800a2a4 <_printf_float+0x198>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e7f2      	b.n	800a2a4 <_printf_float+0x198>
 800a2be:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a2c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2c4:	4299      	cmp	r1, r3
 800a2c6:	db05      	blt.n	800a2d4 <_printf_float+0x1c8>
 800a2c8:	6823      	ldr	r3, [r4, #0]
 800a2ca:	6121      	str	r1, [r4, #16]
 800a2cc:	07d8      	lsls	r0, r3, #31
 800a2ce:	d5ea      	bpl.n	800a2a6 <_printf_float+0x19a>
 800a2d0:	1c4b      	adds	r3, r1, #1
 800a2d2:	e7e7      	b.n	800a2a4 <_printf_float+0x198>
 800a2d4:	2900      	cmp	r1, #0
 800a2d6:	bfcc      	ite	gt
 800a2d8:	2201      	movgt	r2, #1
 800a2da:	f1c1 0202 	rsble	r2, r1, #2
 800a2de:	4413      	add	r3, r2
 800a2e0:	e7e0      	b.n	800a2a4 <_printf_float+0x198>
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	055a      	lsls	r2, r3, #21
 800a2e6:	d407      	bmi.n	800a2f8 <_printf_float+0x1ec>
 800a2e8:	6923      	ldr	r3, [r4, #16]
 800a2ea:	4642      	mov	r2, r8
 800a2ec:	4631      	mov	r1, r6
 800a2ee:	4628      	mov	r0, r5
 800a2f0:	47b8      	blx	r7
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	d12b      	bne.n	800a34e <_printf_float+0x242>
 800a2f6:	e764      	b.n	800a1c2 <_printf_float+0xb6>
 800a2f8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a2fc:	f240 80dc 	bls.w	800a4b8 <_printf_float+0x3ac>
 800a300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a304:	2200      	movs	r2, #0
 800a306:	2300      	movs	r3, #0
 800a308:	f7f6 fc02 	bl	8000b10 <__aeabi_dcmpeq>
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d033      	beq.n	800a378 <_printf_float+0x26c>
 800a310:	2301      	movs	r3, #1
 800a312:	4631      	mov	r1, r6
 800a314:	4628      	mov	r0, r5
 800a316:	4a35      	ldr	r2, [pc, #212]	@ (800a3ec <_printf_float+0x2e0>)
 800a318:	47b8      	blx	r7
 800a31a:	3001      	adds	r0, #1
 800a31c:	f43f af51 	beq.w	800a1c2 <_printf_float+0xb6>
 800a320:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a324:	4543      	cmp	r3, r8
 800a326:	db02      	blt.n	800a32e <_printf_float+0x222>
 800a328:	6823      	ldr	r3, [r4, #0]
 800a32a:	07d8      	lsls	r0, r3, #31
 800a32c:	d50f      	bpl.n	800a34e <_printf_float+0x242>
 800a32e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a332:	4631      	mov	r1, r6
 800a334:	4628      	mov	r0, r5
 800a336:	47b8      	blx	r7
 800a338:	3001      	adds	r0, #1
 800a33a:	f43f af42 	beq.w	800a1c2 <_printf_float+0xb6>
 800a33e:	f04f 0900 	mov.w	r9, #0
 800a342:	f108 38ff 	add.w	r8, r8, #4294967295
 800a346:	f104 0a1a 	add.w	sl, r4, #26
 800a34a:	45c8      	cmp	r8, r9
 800a34c:	dc09      	bgt.n	800a362 <_printf_float+0x256>
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	079b      	lsls	r3, r3, #30
 800a352:	f100 8102 	bmi.w	800a55a <_printf_float+0x44e>
 800a356:	68e0      	ldr	r0, [r4, #12]
 800a358:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a35a:	4298      	cmp	r0, r3
 800a35c:	bfb8      	it	lt
 800a35e:	4618      	movlt	r0, r3
 800a360:	e731      	b.n	800a1c6 <_printf_float+0xba>
 800a362:	2301      	movs	r3, #1
 800a364:	4652      	mov	r2, sl
 800a366:	4631      	mov	r1, r6
 800a368:	4628      	mov	r0, r5
 800a36a:	47b8      	blx	r7
 800a36c:	3001      	adds	r0, #1
 800a36e:	f43f af28 	beq.w	800a1c2 <_printf_float+0xb6>
 800a372:	f109 0901 	add.w	r9, r9, #1
 800a376:	e7e8      	b.n	800a34a <_printf_float+0x23e>
 800a378:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	dc38      	bgt.n	800a3f0 <_printf_float+0x2e4>
 800a37e:	2301      	movs	r3, #1
 800a380:	4631      	mov	r1, r6
 800a382:	4628      	mov	r0, r5
 800a384:	4a19      	ldr	r2, [pc, #100]	@ (800a3ec <_printf_float+0x2e0>)
 800a386:	47b8      	blx	r7
 800a388:	3001      	adds	r0, #1
 800a38a:	f43f af1a 	beq.w	800a1c2 <_printf_float+0xb6>
 800a38e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a392:	ea59 0303 	orrs.w	r3, r9, r3
 800a396:	d102      	bne.n	800a39e <_printf_float+0x292>
 800a398:	6823      	ldr	r3, [r4, #0]
 800a39a:	07d9      	lsls	r1, r3, #31
 800a39c:	d5d7      	bpl.n	800a34e <_printf_float+0x242>
 800a39e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	47b8      	blx	r7
 800a3a8:	3001      	adds	r0, #1
 800a3aa:	f43f af0a 	beq.w	800a1c2 <_printf_float+0xb6>
 800a3ae:	f04f 0a00 	mov.w	sl, #0
 800a3b2:	f104 0b1a 	add.w	fp, r4, #26
 800a3b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3b8:	425b      	negs	r3, r3
 800a3ba:	4553      	cmp	r3, sl
 800a3bc:	dc01      	bgt.n	800a3c2 <_printf_float+0x2b6>
 800a3be:	464b      	mov	r3, r9
 800a3c0:	e793      	b.n	800a2ea <_printf_float+0x1de>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	465a      	mov	r2, fp
 800a3c6:	4631      	mov	r1, r6
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	47b8      	blx	r7
 800a3cc:	3001      	adds	r0, #1
 800a3ce:	f43f aef8 	beq.w	800a1c2 <_printf_float+0xb6>
 800a3d2:	f10a 0a01 	add.w	sl, sl, #1
 800a3d6:	e7ee      	b.n	800a3b6 <_printf_float+0x2aa>
 800a3d8:	7fefffff 	.word	0x7fefffff
 800a3dc:	0800cd36 	.word	0x0800cd36
 800a3e0:	0800cd3a 	.word	0x0800cd3a
 800a3e4:	0800cd3e 	.word	0x0800cd3e
 800a3e8:	0800cd42 	.word	0x0800cd42
 800a3ec:	0800cd46 	.word	0x0800cd46
 800a3f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a3f2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a3f6:	4553      	cmp	r3, sl
 800a3f8:	bfa8      	it	ge
 800a3fa:	4653      	movge	r3, sl
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	4699      	mov	r9, r3
 800a400:	dc36      	bgt.n	800a470 <_printf_float+0x364>
 800a402:	f04f 0b00 	mov.w	fp, #0
 800a406:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a40a:	f104 021a 	add.w	r2, r4, #26
 800a40e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a410:	930a      	str	r3, [sp, #40]	@ 0x28
 800a412:	eba3 0309 	sub.w	r3, r3, r9
 800a416:	455b      	cmp	r3, fp
 800a418:	dc31      	bgt.n	800a47e <_printf_float+0x372>
 800a41a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a41c:	459a      	cmp	sl, r3
 800a41e:	dc3a      	bgt.n	800a496 <_printf_float+0x38a>
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	07da      	lsls	r2, r3, #31
 800a424:	d437      	bmi.n	800a496 <_printf_float+0x38a>
 800a426:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a428:	ebaa 0903 	sub.w	r9, sl, r3
 800a42c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a42e:	ebaa 0303 	sub.w	r3, sl, r3
 800a432:	4599      	cmp	r9, r3
 800a434:	bfa8      	it	ge
 800a436:	4699      	movge	r9, r3
 800a438:	f1b9 0f00 	cmp.w	r9, #0
 800a43c:	dc33      	bgt.n	800a4a6 <_printf_float+0x39a>
 800a43e:	f04f 0800 	mov.w	r8, #0
 800a442:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a446:	f104 0b1a 	add.w	fp, r4, #26
 800a44a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a44c:	ebaa 0303 	sub.w	r3, sl, r3
 800a450:	eba3 0309 	sub.w	r3, r3, r9
 800a454:	4543      	cmp	r3, r8
 800a456:	f77f af7a 	ble.w	800a34e <_printf_float+0x242>
 800a45a:	2301      	movs	r3, #1
 800a45c:	465a      	mov	r2, fp
 800a45e:	4631      	mov	r1, r6
 800a460:	4628      	mov	r0, r5
 800a462:	47b8      	blx	r7
 800a464:	3001      	adds	r0, #1
 800a466:	f43f aeac 	beq.w	800a1c2 <_printf_float+0xb6>
 800a46a:	f108 0801 	add.w	r8, r8, #1
 800a46e:	e7ec      	b.n	800a44a <_printf_float+0x33e>
 800a470:	4642      	mov	r2, r8
 800a472:	4631      	mov	r1, r6
 800a474:	4628      	mov	r0, r5
 800a476:	47b8      	blx	r7
 800a478:	3001      	adds	r0, #1
 800a47a:	d1c2      	bne.n	800a402 <_printf_float+0x2f6>
 800a47c:	e6a1      	b.n	800a1c2 <_printf_float+0xb6>
 800a47e:	2301      	movs	r3, #1
 800a480:	4631      	mov	r1, r6
 800a482:	4628      	mov	r0, r5
 800a484:	920a      	str	r2, [sp, #40]	@ 0x28
 800a486:	47b8      	blx	r7
 800a488:	3001      	adds	r0, #1
 800a48a:	f43f ae9a 	beq.w	800a1c2 <_printf_float+0xb6>
 800a48e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a490:	f10b 0b01 	add.w	fp, fp, #1
 800a494:	e7bb      	b.n	800a40e <_printf_float+0x302>
 800a496:	4631      	mov	r1, r6
 800a498:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a49c:	4628      	mov	r0, r5
 800a49e:	47b8      	blx	r7
 800a4a0:	3001      	adds	r0, #1
 800a4a2:	d1c0      	bne.n	800a426 <_printf_float+0x31a>
 800a4a4:	e68d      	b.n	800a1c2 <_printf_float+0xb6>
 800a4a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4a8:	464b      	mov	r3, r9
 800a4aa:	4631      	mov	r1, r6
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	4442      	add	r2, r8
 800a4b0:	47b8      	blx	r7
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	d1c3      	bne.n	800a43e <_printf_float+0x332>
 800a4b6:	e684      	b.n	800a1c2 <_printf_float+0xb6>
 800a4b8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a4bc:	f1ba 0f01 	cmp.w	sl, #1
 800a4c0:	dc01      	bgt.n	800a4c6 <_printf_float+0x3ba>
 800a4c2:	07db      	lsls	r3, r3, #31
 800a4c4:	d536      	bpl.n	800a534 <_printf_float+0x428>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	4642      	mov	r2, r8
 800a4ca:	4631      	mov	r1, r6
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	47b8      	blx	r7
 800a4d0:	3001      	adds	r0, #1
 800a4d2:	f43f ae76 	beq.w	800a1c2 <_printf_float+0xb6>
 800a4d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a4da:	4631      	mov	r1, r6
 800a4dc:	4628      	mov	r0, r5
 800a4de:	47b8      	blx	r7
 800a4e0:	3001      	adds	r0, #1
 800a4e2:	f43f ae6e 	beq.w	800a1c2 <_printf_float+0xb6>
 800a4e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a4f2:	f7f6 fb0d 	bl	8000b10 <__aeabi_dcmpeq>
 800a4f6:	b9c0      	cbnz	r0, 800a52a <_printf_float+0x41e>
 800a4f8:	4653      	mov	r3, sl
 800a4fa:	f108 0201 	add.w	r2, r8, #1
 800a4fe:	4631      	mov	r1, r6
 800a500:	4628      	mov	r0, r5
 800a502:	47b8      	blx	r7
 800a504:	3001      	adds	r0, #1
 800a506:	d10c      	bne.n	800a522 <_printf_float+0x416>
 800a508:	e65b      	b.n	800a1c2 <_printf_float+0xb6>
 800a50a:	2301      	movs	r3, #1
 800a50c:	465a      	mov	r2, fp
 800a50e:	4631      	mov	r1, r6
 800a510:	4628      	mov	r0, r5
 800a512:	47b8      	blx	r7
 800a514:	3001      	adds	r0, #1
 800a516:	f43f ae54 	beq.w	800a1c2 <_printf_float+0xb6>
 800a51a:	f108 0801 	add.w	r8, r8, #1
 800a51e:	45d0      	cmp	r8, sl
 800a520:	dbf3      	blt.n	800a50a <_printf_float+0x3fe>
 800a522:	464b      	mov	r3, r9
 800a524:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a528:	e6e0      	b.n	800a2ec <_printf_float+0x1e0>
 800a52a:	f04f 0800 	mov.w	r8, #0
 800a52e:	f104 0b1a 	add.w	fp, r4, #26
 800a532:	e7f4      	b.n	800a51e <_printf_float+0x412>
 800a534:	2301      	movs	r3, #1
 800a536:	4642      	mov	r2, r8
 800a538:	e7e1      	b.n	800a4fe <_printf_float+0x3f2>
 800a53a:	2301      	movs	r3, #1
 800a53c:	464a      	mov	r2, r9
 800a53e:	4631      	mov	r1, r6
 800a540:	4628      	mov	r0, r5
 800a542:	47b8      	blx	r7
 800a544:	3001      	adds	r0, #1
 800a546:	f43f ae3c 	beq.w	800a1c2 <_printf_float+0xb6>
 800a54a:	f108 0801 	add.w	r8, r8, #1
 800a54e:	68e3      	ldr	r3, [r4, #12]
 800a550:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a552:	1a5b      	subs	r3, r3, r1
 800a554:	4543      	cmp	r3, r8
 800a556:	dcf0      	bgt.n	800a53a <_printf_float+0x42e>
 800a558:	e6fd      	b.n	800a356 <_printf_float+0x24a>
 800a55a:	f04f 0800 	mov.w	r8, #0
 800a55e:	f104 0919 	add.w	r9, r4, #25
 800a562:	e7f4      	b.n	800a54e <_printf_float+0x442>

0800a564 <_printf_common>:
 800a564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a568:	4616      	mov	r6, r2
 800a56a:	4698      	mov	r8, r3
 800a56c:	688a      	ldr	r2, [r1, #8]
 800a56e:	690b      	ldr	r3, [r1, #16]
 800a570:	4607      	mov	r7, r0
 800a572:	4293      	cmp	r3, r2
 800a574:	bfb8      	it	lt
 800a576:	4613      	movlt	r3, r2
 800a578:	6033      	str	r3, [r6, #0]
 800a57a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a57e:	460c      	mov	r4, r1
 800a580:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a584:	b10a      	cbz	r2, 800a58a <_printf_common+0x26>
 800a586:	3301      	adds	r3, #1
 800a588:	6033      	str	r3, [r6, #0]
 800a58a:	6823      	ldr	r3, [r4, #0]
 800a58c:	0699      	lsls	r1, r3, #26
 800a58e:	bf42      	ittt	mi
 800a590:	6833      	ldrmi	r3, [r6, #0]
 800a592:	3302      	addmi	r3, #2
 800a594:	6033      	strmi	r3, [r6, #0]
 800a596:	6825      	ldr	r5, [r4, #0]
 800a598:	f015 0506 	ands.w	r5, r5, #6
 800a59c:	d106      	bne.n	800a5ac <_printf_common+0x48>
 800a59e:	f104 0a19 	add.w	sl, r4, #25
 800a5a2:	68e3      	ldr	r3, [r4, #12]
 800a5a4:	6832      	ldr	r2, [r6, #0]
 800a5a6:	1a9b      	subs	r3, r3, r2
 800a5a8:	42ab      	cmp	r3, r5
 800a5aa:	dc2b      	bgt.n	800a604 <_printf_common+0xa0>
 800a5ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a5b0:	6822      	ldr	r2, [r4, #0]
 800a5b2:	3b00      	subs	r3, #0
 800a5b4:	bf18      	it	ne
 800a5b6:	2301      	movne	r3, #1
 800a5b8:	0692      	lsls	r2, r2, #26
 800a5ba:	d430      	bmi.n	800a61e <_printf_common+0xba>
 800a5bc:	4641      	mov	r1, r8
 800a5be:	4638      	mov	r0, r7
 800a5c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a5c4:	47c8      	blx	r9
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	d023      	beq.n	800a612 <_printf_common+0xae>
 800a5ca:	6823      	ldr	r3, [r4, #0]
 800a5cc:	6922      	ldr	r2, [r4, #16]
 800a5ce:	f003 0306 	and.w	r3, r3, #6
 800a5d2:	2b04      	cmp	r3, #4
 800a5d4:	bf14      	ite	ne
 800a5d6:	2500      	movne	r5, #0
 800a5d8:	6833      	ldreq	r3, [r6, #0]
 800a5da:	f04f 0600 	mov.w	r6, #0
 800a5de:	bf08      	it	eq
 800a5e0:	68e5      	ldreq	r5, [r4, #12]
 800a5e2:	f104 041a 	add.w	r4, r4, #26
 800a5e6:	bf08      	it	eq
 800a5e8:	1aed      	subeq	r5, r5, r3
 800a5ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a5ee:	bf08      	it	eq
 800a5f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	bfc4      	itt	gt
 800a5f8:	1a9b      	subgt	r3, r3, r2
 800a5fa:	18ed      	addgt	r5, r5, r3
 800a5fc:	42b5      	cmp	r5, r6
 800a5fe:	d11a      	bne.n	800a636 <_printf_common+0xd2>
 800a600:	2000      	movs	r0, #0
 800a602:	e008      	b.n	800a616 <_printf_common+0xb2>
 800a604:	2301      	movs	r3, #1
 800a606:	4652      	mov	r2, sl
 800a608:	4641      	mov	r1, r8
 800a60a:	4638      	mov	r0, r7
 800a60c:	47c8      	blx	r9
 800a60e:	3001      	adds	r0, #1
 800a610:	d103      	bne.n	800a61a <_printf_common+0xb6>
 800a612:	f04f 30ff 	mov.w	r0, #4294967295
 800a616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a61a:	3501      	adds	r5, #1
 800a61c:	e7c1      	b.n	800a5a2 <_printf_common+0x3e>
 800a61e:	2030      	movs	r0, #48	@ 0x30
 800a620:	18e1      	adds	r1, r4, r3
 800a622:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a626:	1c5a      	adds	r2, r3, #1
 800a628:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a62c:	4422      	add	r2, r4
 800a62e:	3302      	adds	r3, #2
 800a630:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a634:	e7c2      	b.n	800a5bc <_printf_common+0x58>
 800a636:	2301      	movs	r3, #1
 800a638:	4622      	mov	r2, r4
 800a63a:	4641      	mov	r1, r8
 800a63c:	4638      	mov	r0, r7
 800a63e:	47c8      	blx	r9
 800a640:	3001      	adds	r0, #1
 800a642:	d0e6      	beq.n	800a612 <_printf_common+0xae>
 800a644:	3601      	adds	r6, #1
 800a646:	e7d9      	b.n	800a5fc <_printf_common+0x98>

0800a648 <_printf_i>:
 800a648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a64c:	7e0f      	ldrb	r7, [r1, #24]
 800a64e:	4691      	mov	r9, r2
 800a650:	2f78      	cmp	r7, #120	@ 0x78
 800a652:	4680      	mov	r8, r0
 800a654:	460c      	mov	r4, r1
 800a656:	469a      	mov	sl, r3
 800a658:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a65a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a65e:	d807      	bhi.n	800a670 <_printf_i+0x28>
 800a660:	2f62      	cmp	r7, #98	@ 0x62
 800a662:	d80a      	bhi.n	800a67a <_printf_i+0x32>
 800a664:	2f00      	cmp	r7, #0
 800a666:	f000 80d3 	beq.w	800a810 <_printf_i+0x1c8>
 800a66a:	2f58      	cmp	r7, #88	@ 0x58
 800a66c:	f000 80ba 	beq.w	800a7e4 <_printf_i+0x19c>
 800a670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a674:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a678:	e03a      	b.n	800a6f0 <_printf_i+0xa8>
 800a67a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a67e:	2b15      	cmp	r3, #21
 800a680:	d8f6      	bhi.n	800a670 <_printf_i+0x28>
 800a682:	a101      	add	r1, pc, #4	@ (adr r1, 800a688 <_printf_i+0x40>)
 800a684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a688:	0800a6e1 	.word	0x0800a6e1
 800a68c:	0800a6f5 	.word	0x0800a6f5
 800a690:	0800a671 	.word	0x0800a671
 800a694:	0800a671 	.word	0x0800a671
 800a698:	0800a671 	.word	0x0800a671
 800a69c:	0800a671 	.word	0x0800a671
 800a6a0:	0800a6f5 	.word	0x0800a6f5
 800a6a4:	0800a671 	.word	0x0800a671
 800a6a8:	0800a671 	.word	0x0800a671
 800a6ac:	0800a671 	.word	0x0800a671
 800a6b0:	0800a671 	.word	0x0800a671
 800a6b4:	0800a7f7 	.word	0x0800a7f7
 800a6b8:	0800a71f 	.word	0x0800a71f
 800a6bc:	0800a7b1 	.word	0x0800a7b1
 800a6c0:	0800a671 	.word	0x0800a671
 800a6c4:	0800a671 	.word	0x0800a671
 800a6c8:	0800a819 	.word	0x0800a819
 800a6cc:	0800a671 	.word	0x0800a671
 800a6d0:	0800a71f 	.word	0x0800a71f
 800a6d4:	0800a671 	.word	0x0800a671
 800a6d8:	0800a671 	.word	0x0800a671
 800a6dc:	0800a7b9 	.word	0x0800a7b9
 800a6e0:	6833      	ldr	r3, [r6, #0]
 800a6e2:	1d1a      	adds	r2, r3, #4
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	6032      	str	r2, [r6, #0]
 800a6e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e09e      	b.n	800a832 <_printf_i+0x1ea>
 800a6f4:	6833      	ldr	r3, [r6, #0]
 800a6f6:	6820      	ldr	r0, [r4, #0]
 800a6f8:	1d19      	adds	r1, r3, #4
 800a6fa:	6031      	str	r1, [r6, #0]
 800a6fc:	0606      	lsls	r6, r0, #24
 800a6fe:	d501      	bpl.n	800a704 <_printf_i+0xbc>
 800a700:	681d      	ldr	r5, [r3, #0]
 800a702:	e003      	b.n	800a70c <_printf_i+0xc4>
 800a704:	0645      	lsls	r5, r0, #25
 800a706:	d5fb      	bpl.n	800a700 <_printf_i+0xb8>
 800a708:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a70c:	2d00      	cmp	r5, #0
 800a70e:	da03      	bge.n	800a718 <_printf_i+0xd0>
 800a710:	232d      	movs	r3, #45	@ 0x2d
 800a712:	426d      	negs	r5, r5
 800a714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a718:	230a      	movs	r3, #10
 800a71a:	4859      	ldr	r0, [pc, #356]	@ (800a880 <_printf_i+0x238>)
 800a71c:	e011      	b.n	800a742 <_printf_i+0xfa>
 800a71e:	6821      	ldr	r1, [r4, #0]
 800a720:	6833      	ldr	r3, [r6, #0]
 800a722:	0608      	lsls	r0, r1, #24
 800a724:	f853 5b04 	ldr.w	r5, [r3], #4
 800a728:	d402      	bmi.n	800a730 <_printf_i+0xe8>
 800a72a:	0649      	lsls	r1, r1, #25
 800a72c:	bf48      	it	mi
 800a72e:	b2ad      	uxthmi	r5, r5
 800a730:	2f6f      	cmp	r7, #111	@ 0x6f
 800a732:	6033      	str	r3, [r6, #0]
 800a734:	bf14      	ite	ne
 800a736:	230a      	movne	r3, #10
 800a738:	2308      	moveq	r3, #8
 800a73a:	4851      	ldr	r0, [pc, #324]	@ (800a880 <_printf_i+0x238>)
 800a73c:	2100      	movs	r1, #0
 800a73e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a742:	6866      	ldr	r6, [r4, #4]
 800a744:	2e00      	cmp	r6, #0
 800a746:	bfa8      	it	ge
 800a748:	6821      	ldrge	r1, [r4, #0]
 800a74a:	60a6      	str	r6, [r4, #8]
 800a74c:	bfa4      	itt	ge
 800a74e:	f021 0104 	bicge.w	r1, r1, #4
 800a752:	6021      	strge	r1, [r4, #0]
 800a754:	b90d      	cbnz	r5, 800a75a <_printf_i+0x112>
 800a756:	2e00      	cmp	r6, #0
 800a758:	d04b      	beq.n	800a7f2 <_printf_i+0x1aa>
 800a75a:	4616      	mov	r6, r2
 800a75c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a760:	fb03 5711 	mls	r7, r3, r1, r5
 800a764:	5dc7      	ldrb	r7, [r0, r7]
 800a766:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a76a:	462f      	mov	r7, r5
 800a76c:	42bb      	cmp	r3, r7
 800a76e:	460d      	mov	r5, r1
 800a770:	d9f4      	bls.n	800a75c <_printf_i+0x114>
 800a772:	2b08      	cmp	r3, #8
 800a774:	d10b      	bne.n	800a78e <_printf_i+0x146>
 800a776:	6823      	ldr	r3, [r4, #0]
 800a778:	07df      	lsls	r7, r3, #31
 800a77a:	d508      	bpl.n	800a78e <_printf_i+0x146>
 800a77c:	6923      	ldr	r3, [r4, #16]
 800a77e:	6861      	ldr	r1, [r4, #4]
 800a780:	4299      	cmp	r1, r3
 800a782:	bfde      	ittt	le
 800a784:	2330      	movle	r3, #48	@ 0x30
 800a786:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a78a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a78e:	1b92      	subs	r2, r2, r6
 800a790:	6122      	str	r2, [r4, #16]
 800a792:	464b      	mov	r3, r9
 800a794:	4621      	mov	r1, r4
 800a796:	4640      	mov	r0, r8
 800a798:	f8cd a000 	str.w	sl, [sp]
 800a79c:	aa03      	add	r2, sp, #12
 800a79e:	f7ff fee1 	bl	800a564 <_printf_common>
 800a7a2:	3001      	adds	r0, #1
 800a7a4:	d14a      	bne.n	800a83c <_printf_i+0x1f4>
 800a7a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7aa:	b004      	add	sp, #16
 800a7ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7b0:	6823      	ldr	r3, [r4, #0]
 800a7b2:	f043 0320 	orr.w	r3, r3, #32
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	2778      	movs	r7, #120	@ 0x78
 800a7ba:	4832      	ldr	r0, [pc, #200]	@ (800a884 <_printf_i+0x23c>)
 800a7bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a7c0:	6823      	ldr	r3, [r4, #0]
 800a7c2:	6831      	ldr	r1, [r6, #0]
 800a7c4:	061f      	lsls	r7, r3, #24
 800a7c6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a7ca:	d402      	bmi.n	800a7d2 <_printf_i+0x18a>
 800a7cc:	065f      	lsls	r7, r3, #25
 800a7ce:	bf48      	it	mi
 800a7d0:	b2ad      	uxthmi	r5, r5
 800a7d2:	6031      	str	r1, [r6, #0]
 800a7d4:	07d9      	lsls	r1, r3, #31
 800a7d6:	bf44      	itt	mi
 800a7d8:	f043 0320 	orrmi.w	r3, r3, #32
 800a7dc:	6023      	strmi	r3, [r4, #0]
 800a7de:	b11d      	cbz	r5, 800a7e8 <_printf_i+0x1a0>
 800a7e0:	2310      	movs	r3, #16
 800a7e2:	e7ab      	b.n	800a73c <_printf_i+0xf4>
 800a7e4:	4826      	ldr	r0, [pc, #152]	@ (800a880 <_printf_i+0x238>)
 800a7e6:	e7e9      	b.n	800a7bc <_printf_i+0x174>
 800a7e8:	6823      	ldr	r3, [r4, #0]
 800a7ea:	f023 0320 	bic.w	r3, r3, #32
 800a7ee:	6023      	str	r3, [r4, #0]
 800a7f0:	e7f6      	b.n	800a7e0 <_printf_i+0x198>
 800a7f2:	4616      	mov	r6, r2
 800a7f4:	e7bd      	b.n	800a772 <_printf_i+0x12a>
 800a7f6:	6833      	ldr	r3, [r6, #0]
 800a7f8:	6825      	ldr	r5, [r4, #0]
 800a7fa:	1d18      	adds	r0, r3, #4
 800a7fc:	6961      	ldr	r1, [r4, #20]
 800a7fe:	6030      	str	r0, [r6, #0]
 800a800:	062e      	lsls	r6, r5, #24
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	d501      	bpl.n	800a80a <_printf_i+0x1c2>
 800a806:	6019      	str	r1, [r3, #0]
 800a808:	e002      	b.n	800a810 <_printf_i+0x1c8>
 800a80a:	0668      	lsls	r0, r5, #25
 800a80c:	d5fb      	bpl.n	800a806 <_printf_i+0x1be>
 800a80e:	8019      	strh	r1, [r3, #0]
 800a810:	2300      	movs	r3, #0
 800a812:	4616      	mov	r6, r2
 800a814:	6123      	str	r3, [r4, #16]
 800a816:	e7bc      	b.n	800a792 <_printf_i+0x14a>
 800a818:	6833      	ldr	r3, [r6, #0]
 800a81a:	2100      	movs	r1, #0
 800a81c:	1d1a      	adds	r2, r3, #4
 800a81e:	6032      	str	r2, [r6, #0]
 800a820:	681e      	ldr	r6, [r3, #0]
 800a822:	6862      	ldr	r2, [r4, #4]
 800a824:	4630      	mov	r0, r6
 800a826:	f000 f9d4 	bl	800abd2 <memchr>
 800a82a:	b108      	cbz	r0, 800a830 <_printf_i+0x1e8>
 800a82c:	1b80      	subs	r0, r0, r6
 800a82e:	6060      	str	r0, [r4, #4]
 800a830:	6863      	ldr	r3, [r4, #4]
 800a832:	6123      	str	r3, [r4, #16]
 800a834:	2300      	movs	r3, #0
 800a836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a83a:	e7aa      	b.n	800a792 <_printf_i+0x14a>
 800a83c:	4632      	mov	r2, r6
 800a83e:	4649      	mov	r1, r9
 800a840:	4640      	mov	r0, r8
 800a842:	6923      	ldr	r3, [r4, #16]
 800a844:	47d0      	blx	sl
 800a846:	3001      	adds	r0, #1
 800a848:	d0ad      	beq.n	800a7a6 <_printf_i+0x15e>
 800a84a:	6823      	ldr	r3, [r4, #0]
 800a84c:	079b      	lsls	r3, r3, #30
 800a84e:	d413      	bmi.n	800a878 <_printf_i+0x230>
 800a850:	68e0      	ldr	r0, [r4, #12]
 800a852:	9b03      	ldr	r3, [sp, #12]
 800a854:	4298      	cmp	r0, r3
 800a856:	bfb8      	it	lt
 800a858:	4618      	movlt	r0, r3
 800a85a:	e7a6      	b.n	800a7aa <_printf_i+0x162>
 800a85c:	2301      	movs	r3, #1
 800a85e:	4632      	mov	r2, r6
 800a860:	4649      	mov	r1, r9
 800a862:	4640      	mov	r0, r8
 800a864:	47d0      	blx	sl
 800a866:	3001      	adds	r0, #1
 800a868:	d09d      	beq.n	800a7a6 <_printf_i+0x15e>
 800a86a:	3501      	adds	r5, #1
 800a86c:	68e3      	ldr	r3, [r4, #12]
 800a86e:	9903      	ldr	r1, [sp, #12]
 800a870:	1a5b      	subs	r3, r3, r1
 800a872:	42ab      	cmp	r3, r5
 800a874:	dcf2      	bgt.n	800a85c <_printf_i+0x214>
 800a876:	e7eb      	b.n	800a850 <_printf_i+0x208>
 800a878:	2500      	movs	r5, #0
 800a87a:	f104 0619 	add.w	r6, r4, #25
 800a87e:	e7f5      	b.n	800a86c <_printf_i+0x224>
 800a880:	0800cd48 	.word	0x0800cd48
 800a884:	0800cd59 	.word	0x0800cd59

0800a888 <std>:
 800a888:	2300      	movs	r3, #0
 800a88a:	b510      	push	{r4, lr}
 800a88c:	4604      	mov	r4, r0
 800a88e:	e9c0 3300 	strd	r3, r3, [r0]
 800a892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a896:	6083      	str	r3, [r0, #8]
 800a898:	8181      	strh	r1, [r0, #12]
 800a89a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a89c:	81c2      	strh	r2, [r0, #14]
 800a89e:	6183      	str	r3, [r0, #24]
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	2208      	movs	r2, #8
 800a8a4:	305c      	adds	r0, #92	@ 0x5c
 800a8a6:	f000 f914 	bl	800aad2 <memset>
 800a8aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e0 <std+0x58>)
 800a8ac:	6224      	str	r4, [r4, #32]
 800a8ae:	6263      	str	r3, [r4, #36]	@ 0x24
 800a8b0:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e4 <std+0x5c>)
 800a8b2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a8b4:	4b0c      	ldr	r3, [pc, #48]	@ (800a8e8 <std+0x60>)
 800a8b6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a8b8:	4b0c      	ldr	r3, [pc, #48]	@ (800a8ec <std+0x64>)
 800a8ba:	6323      	str	r3, [r4, #48]	@ 0x30
 800a8bc:	4b0c      	ldr	r3, [pc, #48]	@ (800a8f0 <std+0x68>)
 800a8be:	429c      	cmp	r4, r3
 800a8c0:	d006      	beq.n	800a8d0 <std+0x48>
 800a8c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a8c6:	4294      	cmp	r4, r2
 800a8c8:	d002      	beq.n	800a8d0 <std+0x48>
 800a8ca:	33d0      	adds	r3, #208	@ 0xd0
 800a8cc:	429c      	cmp	r4, r3
 800a8ce:	d105      	bne.n	800a8dc <std+0x54>
 800a8d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d8:	f000 b978 	b.w	800abcc <__retarget_lock_init_recursive>
 800a8dc:	bd10      	pop	{r4, pc}
 800a8de:	bf00      	nop
 800a8e0:	0800aa4d 	.word	0x0800aa4d
 800a8e4:	0800aa6f 	.word	0x0800aa6f
 800a8e8:	0800aaa7 	.word	0x0800aaa7
 800a8ec:	0800aacb 	.word	0x0800aacb
 800a8f0:	200016c0 	.word	0x200016c0

0800a8f4 <stdio_exit_handler>:
 800a8f4:	4a02      	ldr	r2, [pc, #8]	@ (800a900 <stdio_exit_handler+0xc>)
 800a8f6:	4903      	ldr	r1, [pc, #12]	@ (800a904 <stdio_exit_handler+0x10>)
 800a8f8:	4803      	ldr	r0, [pc, #12]	@ (800a908 <stdio_exit_handler+0x14>)
 800a8fa:	f000 b869 	b.w	800a9d0 <_fwalk_sglue>
 800a8fe:	bf00      	nop
 800a900:	20000190 	.word	0x20000190
 800a904:	0800c53d 	.word	0x0800c53d
 800a908:	200001a0 	.word	0x200001a0

0800a90c <cleanup_stdio>:
 800a90c:	6841      	ldr	r1, [r0, #4]
 800a90e:	4b0c      	ldr	r3, [pc, #48]	@ (800a940 <cleanup_stdio+0x34>)
 800a910:	b510      	push	{r4, lr}
 800a912:	4299      	cmp	r1, r3
 800a914:	4604      	mov	r4, r0
 800a916:	d001      	beq.n	800a91c <cleanup_stdio+0x10>
 800a918:	f001 fe10 	bl	800c53c <_fflush_r>
 800a91c:	68a1      	ldr	r1, [r4, #8]
 800a91e:	4b09      	ldr	r3, [pc, #36]	@ (800a944 <cleanup_stdio+0x38>)
 800a920:	4299      	cmp	r1, r3
 800a922:	d002      	beq.n	800a92a <cleanup_stdio+0x1e>
 800a924:	4620      	mov	r0, r4
 800a926:	f001 fe09 	bl	800c53c <_fflush_r>
 800a92a:	68e1      	ldr	r1, [r4, #12]
 800a92c:	4b06      	ldr	r3, [pc, #24]	@ (800a948 <cleanup_stdio+0x3c>)
 800a92e:	4299      	cmp	r1, r3
 800a930:	d004      	beq.n	800a93c <cleanup_stdio+0x30>
 800a932:	4620      	mov	r0, r4
 800a934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a938:	f001 be00 	b.w	800c53c <_fflush_r>
 800a93c:	bd10      	pop	{r4, pc}
 800a93e:	bf00      	nop
 800a940:	200016c0 	.word	0x200016c0
 800a944:	20001728 	.word	0x20001728
 800a948:	20001790 	.word	0x20001790

0800a94c <global_stdio_init.part.0>:
 800a94c:	b510      	push	{r4, lr}
 800a94e:	4b0b      	ldr	r3, [pc, #44]	@ (800a97c <global_stdio_init.part.0+0x30>)
 800a950:	4c0b      	ldr	r4, [pc, #44]	@ (800a980 <global_stdio_init.part.0+0x34>)
 800a952:	4a0c      	ldr	r2, [pc, #48]	@ (800a984 <global_stdio_init.part.0+0x38>)
 800a954:	4620      	mov	r0, r4
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	2104      	movs	r1, #4
 800a95a:	2200      	movs	r2, #0
 800a95c:	f7ff ff94 	bl	800a888 <std>
 800a960:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a964:	2201      	movs	r2, #1
 800a966:	2109      	movs	r1, #9
 800a968:	f7ff ff8e 	bl	800a888 <std>
 800a96c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a970:	2202      	movs	r2, #2
 800a972:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a976:	2112      	movs	r1, #18
 800a978:	f7ff bf86 	b.w	800a888 <std>
 800a97c:	200017f8 	.word	0x200017f8
 800a980:	200016c0 	.word	0x200016c0
 800a984:	0800a8f5 	.word	0x0800a8f5

0800a988 <__sfp_lock_acquire>:
 800a988:	4801      	ldr	r0, [pc, #4]	@ (800a990 <__sfp_lock_acquire+0x8>)
 800a98a:	f000 b920 	b.w	800abce <__retarget_lock_acquire_recursive>
 800a98e:	bf00      	nop
 800a990:	20001801 	.word	0x20001801

0800a994 <__sfp_lock_release>:
 800a994:	4801      	ldr	r0, [pc, #4]	@ (800a99c <__sfp_lock_release+0x8>)
 800a996:	f000 b91b 	b.w	800abd0 <__retarget_lock_release_recursive>
 800a99a:	bf00      	nop
 800a99c:	20001801 	.word	0x20001801

0800a9a0 <__sinit>:
 800a9a0:	b510      	push	{r4, lr}
 800a9a2:	4604      	mov	r4, r0
 800a9a4:	f7ff fff0 	bl	800a988 <__sfp_lock_acquire>
 800a9a8:	6a23      	ldr	r3, [r4, #32]
 800a9aa:	b11b      	cbz	r3, 800a9b4 <__sinit+0x14>
 800a9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9b0:	f7ff bff0 	b.w	800a994 <__sfp_lock_release>
 800a9b4:	4b04      	ldr	r3, [pc, #16]	@ (800a9c8 <__sinit+0x28>)
 800a9b6:	6223      	str	r3, [r4, #32]
 800a9b8:	4b04      	ldr	r3, [pc, #16]	@ (800a9cc <__sinit+0x2c>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d1f5      	bne.n	800a9ac <__sinit+0xc>
 800a9c0:	f7ff ffc4 	bl	800a94c <global_stdio_init.part.0>
 800a9c4:	e7f2      	b.n	800a9ac <__sinit+0xc>
 800a9c6:	bf00      	nop
 800a9c8:	0800a90d 	.word	0x0800a90d
 800a9cc:	200017f8 	.word	0x200017f8

0800a9d0 <_fwalk_sglue>:
 800a9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9d4:	4607      	mov	r7, r0
 800a9d6:	4688      	mov	r8, r1
 800a9d8:	4614      	mov	r4, r2
 800a9da:	2600      	movs	r6, #0
 800a9dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a9e0:	f1b9 0901 	subs.w	r9, r9, #1
 800a9e4:	d505      	bpl.n	800a9f2 <_fwalk_sglue+0x22>
 800a9e6:	6824      	ldr	r4, [r4, #0]
 800a9e8:	2c00      	cmp	r4, #0
 800a9ea:	d1f7      	bne.n	800a9dc <_fwalk_sglue+0xc>
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9f2:	89ab      	ldrh	r3, [r5, #12]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d907      	bls.n	800aa08 <_fwalk_sglue+0x38>
 800a9f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	d003      	beq.n	800aa08 <_fwalk_sglue+0x38>
 800aa00:	4629      	mov	r1, r5
 800aa02:	4638      	mov	r0, r7
 800aa04:	47c0      	blx	r8
 800aa06:	4306      	orrs	r6, r0
 800aa08:	3568      	adds	r5, #104	@ 0x68
 800aa0a:	e7e9      	b.n	800a9e0 <_fwalk_sglue+0x10>

0800aa0c <siprintf>:
 800aa0c:	b40e      	push	{r1, r2, r3}
 800aa0e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aa12:	b500      	push	{lr}
 800aa14:	b09c      	sub	sp, #112	@ 0x70
 800aa16:	ab1d      	add	r3, sp, #116	@ 0x74
 800aa18:	9002      	str	r0, [sp, #8]
 800aa1a:	9006      	str	r0, [sp, #24]
 800aa1c:	9107      	str	r1, [sp, #28]
 800aa1e:	9104      	str	r1, [sp, #16]
 800aa20:	4808      	ldr	r0, [pc, #32]	@ (800aa44 <siprintf+0x38>)
 800aa22:	4909      	ldr	r1, [pc, #36]	@ (800aa48 <siprintf+0x3c>)
 800aa24:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa28:	9105      	str	r1, [sp, #20]
 800aa2a:	6800      	ldr	r0, [r0, #0]
 800aa2c:	a902      	add	r1, sp, #8
 800aa2e:	9301      	str	r3, [sp, #4]
 800aa30:	f001 fc08 	bl	800c244 <_svfiprintf_r>
 800aa34:	2200      	movs	r2, #0
 800aa36:	9b02      	ldr	r3, [sp, #8]
 800aa38:	701a      	strb	r2, [r3, #0]
 800aa3a:	b01c      	add	sp, #112	@ 0x70
 800aa3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa40:	b003      	add	sp, #12
 800aa42:	4770      	bx	lr
 800aa44:	2000019c 	.word	0x2000019c
 800aa48:	ffff0208 	.word	0xffff0208

0800aa4c <__sread>:
 800aa4c:	b510      	push	{r4, lr}
 800aa4e:	460c      	mov	r4, r1
 800aa50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa54:	f000 f86c 	bl	800ab30 <_read_r>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	bfab      	itete	ge
 800aa5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa5e:	89a3      	ldrhlt	r3, [r4, #12]
 800aa60:	181b      	addge	r3, r3, r0
 800aa62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aa66:	bfac      	ite	ge
 800aa68:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aa6a:	81a3      	strhlt	r3, [r4, #12]
 800aa6c:	bd10      	pop	{r4, pc}

0800aa6e <__swrite>:
 800aa6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa72:	461f      	mov	r7, r3
 800aa74:	898b      	ldrh	r3, [r1, #12]
 800aa76:	4605      	mov	r5, r0
 800aa78:	05db      	lsls	r3, r3, #23
 800aa7a:	460c      	mov	r4, r1
 800aa7c:	4616      	mov	r6, r2
 800aa7e:	d505      	bpl.n	800aa8c <__swrite+0x1e>
 800aa80:	2302      	movs	r3, #2
 800aa82:	2200      	movs	r2, #0
 800aa84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa88:	f000 f840 	bl	800ab0c <_lseek_r>
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	4632      	mov	r2, r6
 800aa90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aa94:	81a3      	strh	r3, [r4, #12]
 800aa96:	4628      	mov	r0, r5
 800aa98:	463b      	mov	r3, r7
 800aa9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa2:	f000 b857 	b.w	800ab54 <_write_r>

0800aaa6 <__sseek>:
 800aaa6:	b510      	push	{r4, lr}
 800aaa8:	460c      	mov	r4, r1
 800aaaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaae:	f000 f82d 	bl	800ab0c <_lseek_r>
 800aab2:	1c43      	adds	r3, r0, #1
 800aab4:	89a3      	ldrh	r3, [r4, #12]
 800aab6:	bf15      	itete	ne
 800aab8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aaba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aabe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aac2:	81a3      	strheq	r3, [r4, #12]
 800aac4:	bf18      	it	ne
 800aac6:	81a3      	strhne	r3, [r4, #12]
 800aac8:	bd10      	pop	{r4, pc}

0800aaca <__sclose>:
 800aaca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aace:	f000 b80d 	b.w	800aaec <_close_r>

0800aad2 <memset>:
 800aad2:	4603      	mov	r3, r0
 800aad4:	4402      	add	r2, r0
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d100      	bne.n	800aadc <memset+0xa>
 800aada:	4770      	bx	lr
 800aadc:	f803 1b01 	strb.w	r1, [r3], #1
 800aae0:	e7f9      	b.n	800aad6 <memset+0x4>
	...

0800aae4 <_localeconv_r>:
 800aae4:	4800      	ldr	r0, [pc, #0]	@ (800aae8 <_localeconv_r+0x4>)
 800aae6:	4770      	bx	lr
 800aae8:	200002dc 	.word	0x200002dc

0800aaec <_close_r>:
 800aaec:	b538      	push	{r3, r4, r5, lr}
 800aaee:	2300      	movs	r3, #0
 800aaf0:	4d05      	ldr	r5, [pc, #20]	@ (800ab08 <_close_r+0x1c>)
 800aaf2:	4604      	mov	r4, r0
 800aaf4:	4608      	mov	r0, r1
 800aaf6:	602b      	str	r3, [r5, #0]
 800aaf8:	f7f6 ff4f 	bl	800199a <_close>
 800aafc:	1c43      	adds	r3, r0, #1
 800aafe:	d102      	bne.n	800ab06 <_close_r+0x1a>
 800ab00:	682b      	ldr	r3, [r5, #0]
 800ab02:	b103      	cbz	r3, 800ab06 <_close_r+0x1a>
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	200017fc 	.word	0x200017fc

0800ab0c <_lseek_r>:
 800ab0c:	b538      	push	{r3, r4, r5, lr}
 800ab0e:	4604      	mov	r4, r0
 800ab10:	4608      	mov	r0, r1
 800ab12:	4611      	mov	r1, r2
 800ab14:	2200      	movs	r2, #0
 800ab16:	4d05      	ldr	r5, [pc, #20]	@ (800ab2c <_lseek_r+0x20>)
 800ab18:	602a      	str	r2, [r5, #0]
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	f7f6 ff61 	bl	80019e2 <_lseek>
 800ab20:	1c43      	adds	r3, r0, #1
 800ab22:	d102      	bne.n	800ab2a <_lseek_r+0x1e>
 800ab24:	682b      	ldr	r3, [r5, #0]
 800ab26:	b103      	cbz	r3, 800ab2a <_lseek_r+0x1e>
 800ab28:	6023      	str	r3, [r4, #0]
 800ab2a:	bd38      	pop	{r3, r4, r5, pc}
 800ab2c:	200017fc 	.word	0x200017fc

0800ab30 <_read_r>:
 800ab30:	b538      	push	{r3, r4, r5, lr}
 800ab32:	4604      	mov	r4, r0
 800ab34:	4608      	mov	r0, r1
 800ab36:	4611      	mov	r1, r2
 800ab38:	2200      	movs	r2, #0
 800ab3a:	4d05      	ldr	r5, [pc, #20]	@ (800ab50 <_read_r+0x20>)
 800ab3c:	602a      	str	r2, [r5, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	f7f6 fef2 	bl	8001928 <_read>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_read_r+0x1e>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_read_r+0x1e>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	200017fc 	.word	0x200017fc

0800ab54 <_write_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4604      	mov	r4, r0
 800ab58:	4608      	mov	r0, r1
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	4d05      	ldr	r5, [pc, #20]	@ (800ab74 <_write_r+0x20>)
 800ab60:	602a      	str	r2, [r5, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	f7f6 fefd 	bl	8001962 <_write>
 800ab68:	1c43      	adds	r3, r0, #1
 800ab6a:	d102      	bne.n	800ab72 <_write_r+0x1e>
 800ab6c:	682b      	ldr	r3, [r5, #0]
 800ab6e:	b103      	cbz	r3, 800ab72 <_write_r+0x1e>
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	bd38      	pop	{r3, r4, r5, pc}
 800ab74:	200017fc 	.word	0x200017fc

0800ab78 <__errno>:
 800ab78:	4b01      	ldr	r3, [pc, #4]	@ (800ab80 <__errno+0x8>)
 800ab7a:	6818      	ldr	r0, [r3, #0]
 800ab7c:	4770      	bx	lr
 800ab7e:	bf00      	nop
 800ab80:	2000019c 	.word	0x2000019c

0800ab84 <__libc_init_array>:
 800ab84:	b570      	push	{r4, r5, r6, lr}
 800ab86:	2600      	movs	r6, #0
 800ab88:	4d0c      	ldr	r5, [pc, #48]	@ (800abbc <__libc_init_array+0x38>)
 800ab8a:	4c0d      	ldr	r4, [pc, #52]	@ (800abc0 <__libc_init_array+0x3c>)
 800ab8c:	1b64      	subs	r4, r4, r5
 800ab8e:	10a4      	asrs	r4, r4, #2
 800ab90:	42a6      	cmp	r6, r4
 800ab92:	d109      	bne.n	800aba8 <__libc_init_array+0x24>
 800ab94:	f002 f86e 	bl	800cc74 <_init>
 800ab98:	2600      	movs	r6, #0
 800ab9a:	4d0a      	ldr	r5, [pc, #40]	@ (800abc4 <__libc_init_array+0x40>)
 800ab9c:	4c0a      	ldr	r4, [pc, #40]	@ (800abc8 <__libc_init_array+0x44>)
 800ab9e:	1b64      	subs	r4, r4, r5
 800aba0:	10a4      	asrs	r4, r4, #2
 800aba2:	42a6      	cmp	r6, r4
 800aba4:	d105      	bne.n	800abb2 <__libc_init_array+0x2e>
 800aba6:	bd70      	pop	{r4, r5, r6, pc}
 800aba8:	f855 3b04 	ldr.w	r3, [r5], #4
 800abac:	4798      	blx	r3
 800abae:	3601      	adds	r6, #1
 800abb0:	e7ee      	b.n	800ab90 <__libc_init_array+0xc>
 800abb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800abb6:	4798      	blx	r3
 800abb8:	3601      	adds	r6, #1
 800abba:	e7f2      	b.n	800aba2 <__libc_init_array+0x1e>
 800abbc:	0800d0b0 	.word	0x0800d0b0
 800abc0:	0800d0b0 	.word	0x0800d0b0
 800abc4:	0800d0b0 	.word	0x0800d0b0
 800abc8:	0800d0b4 	.word	0x0800d0b4

0800abcc <__retarget_lock_init_recursive>:
 800abcc:	4770      	bx	lr

0800abce <__retarget_lock_acquire_recursive>:
 800abce:	4770      	bx	lr

0800abd0 <__retarget_lock_release_recursive>:
 800abd0:	4770      	bx	lr

0800abd2 <memchr>:
 800abd2:	4603      	mov	r3, r0
 800abd4:	b510      	push	{r4, lr}
 800abd6:	b2c9      	uxtb	r1, r1
 800abd8:	4402      	add	r2, r0
 800abda:	4293      	cmp	r3, r2
 800abdc:	4618      	mov	r0, r3
 800abde:	d101      	bne.n	800abe4 <memchr+0x12>
 800abe0:	2000      	movs	r0, #0
 800abe2:	e003      	b.n	800abec <memchr+0x1a>
 800abe4:	7804      	ldrb	r4, [r0, #0]
 800abe6:	3301      	adds	r3, #1
 800abe8:	428c      	cmp	r4, r1
 800abea:	d1f6      	bne.n	800abda <memchr+0x8>
 800abec:	bd10      	pop	{r4, pc}

0800abee <quorem>:
 800abee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf2:	6903      	ldr	r3, [r0, #16]
 800abf4:	690c      	ldr	r4, [r1, #16]
 800abf6:	4607      	mov	r7, r0
 800abf8:	42a3      	cmp	r3, r4
 800abfa:	db7e      	blt.n	800acfa <quorem+0x10c>
 800abfc:	3c01      	subs	r4, #1
 800abfe:	00a3      	lsls	r3, r4, #2
 800ac00:	f100 0514 	add.w	r5, r0, #20
 800ac04:	f101 0814 	add.w	r8, r1, #20
 800ac08:	9300      	str	r3, [sp, #0]
 800ac0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac0e:	9301      	str	r3, [sp, #4]
 800ac10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac24:	d32e      	bcc.n	800ac84 <quorem+0x96>
 800ac26:	f04f 0a00 	mov.w	sl, #0
 800ac2a:	46c4      	mov	ip, r8
 800ac2c:	46ae      	mov	lr, r5
 800ac2e:	46d3      	mov	fp, sl
 800ac30:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac34:	b298      	uxth	r0, r3
 800ac36:	fb06 a000 	mla	r0, r6, r0, sl
 800ac3a:	0c1b      	lsrs	r3, r3, #16
 800ac3c:	0c02      	lsrs	r2, r0, #16
 800ac3e:	fb06 2303 	mla	r3, r6, r3, r2
 800ac42:	f8de 2000 	ldr.w	r2, [lr]
 800ac46:	b280      	uxth	r0, r0
 800ac48:	b292      	uxth	r2, r2
 800ac4a:	1a12      	subs	r2, r2, r0
 800ac4c:	445a      	add	r2, fp
 800ac4e:	f8de 0000 	ldr.w	r0, [lr]
 800ac52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ac5c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ac60:	b292      	uxth	r2, r2
 800ac62:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ac66:	45e1      	cmp	r9, ip
 800ac68:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ac6c:	f84e 2b04 	str.w	r2, [lr], #4
 800ac70:	d2de      	bcs.n	800ac30 <quorem+0x42>
 800ac72:	9b00      	ldr	r3, [sp, #0]
 800ac74:	58eb      	ldr	r3, [r5, r3]
 800ac76:	b92b      	cbnz	r3, 800ac84 <quorem+0x96>
 800ac78:	9b01      	ldr	r3, [sp, #4]
 800ac7a:	3b04      	subs	r3, #4
 800ac7c:	429d      	cmp	r5, r3
 800ac7e:	461a      	mov	r2, r3
 800ac80:	d32f      	bcc.n	800ace2 <quorem+0xf4>
 800ac82:	613c      	str	r4, [r7, #16]
 800ac84:	4638      	mov	r0, r7
 800ac86:	f001 f979 	bl	800bf7c <__mcmp>
 800ac8a:	2800      	cmp	r0, #0
 800ac8c:	db25      	blt.n	800acda <quorem+0xec>
 800ac8e:	4629      	mov	r1, r5
 800ac90:	2000      	movs	r0, #0
 800ac92:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac96:	f8d1 c000 	ldr.w	ip, [r1]
 800ac9a:	fa1f fe82 	uxth.w	lr, r2
 800ac9e:	fa1f f38c 	uxth.w	r3, ip
 800aca2:	eba3 030e 	sub.w	r3, r3, lr
 800aca6:	4403      	add	r3, r0
 800aca8:	0c12      	lsrs	r2, r2, #16
 800acaa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800acae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800acb8:	45c1      	cmp	r9, r8
 800acba:	ea4f 4022 	mov.w	r0, r2, asr #16
 800acbe:	f841 3b04 	str.w	r3, [r1], #4
 800acc2:	d2e6      	bcs.n	800ac92 <quorem+0xa4>
 800acc4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acc8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800accc:	b922      	cbnz	r2, 800acd8 <quorem+0xea>
 800acce:	3b04      	subs	r3, #4
 800acd0:	429d      	cmp	r5, r3
 800acd2:	461a      	mov	r2, r3
 800acd4:	d30b      	bcc.n	800acee <quorem+0x100>
 800acd6:	613c      	str	r4, [r7, #16]
 800acd8:	3601      	adds	r6, #1
 800acda:	4630      	mov	r0, r6
 800acdc:	b003      	add	sp, #12
 800acde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ace2:	6812      	ldr	r2, [r2, #0]
 800ace4:	3b04      	subs	r3, #4
 800ace6:	2a00      	cmp	r2, #0
 800ace8:	d1cb      	bne.n	800ac82 <quorem+0x94>
 800acea:	3c01      	subs	r4, #1
 800acec:	e7c6      	b.n	800ac7c <quorem+0x8e>
 800acee:	6812      	ldr	r2, [r2, #0]
 800acf0:	3b04      	subs	r3, #4
 800acf2:	2a00      	cmp	r2, #0
 800acf4:	d1ef      	bne.n	800acd6 <quorem+0xe8>
 800acf6:	3c01      	subs	r4, #1
 800acf8:	e7ea      	b.n	800acd0 <quorem+0xe2>
 800acfa:	2000      	movs	r0, #0
 800acfc:	e7ee      	b.n	800acdc <quorem+0xee>
	...

0800ad00 <_dtoa_r>:
 800ad00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad04:	4614      	mov	r4, r2
 800ad06:	461d      	mov	r5, r3
 800ad08:	69c7      	ldr	r7, [r0, #28]
 800ad0a:	b097      	sub	sp, #92	@ 0x5c
 800ad0c:	4683      	mov	fp, r0
 800ad0e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ad12:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800ad14:	b97f      	cbnz	r7, 800ad36 <_dtoa_r+0x36>
 800ad16:	2010      	movs	r0, #16
 800ad18:	f000 fe02 	bl	800b920 <malloc>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	f8cb 001c 	str.w	r0, [fp, #28]
 800ad22:	b920      	cbnz	r0, 800ad2e <_dtoa_r+0x2e>
 800ad24:	21ef      	movs	r1, #239	@ 0xef
 800ad26:	4ba8      	ldr	r3, [pc, #672]	@ (800afc8 <_dtoa_r+0x2c8>)
 800ad28:	48a8      	ldr	r0, [pc, #672]	@ (800afcc <_dtoa_r+0x2cc>)
 800ad2a:	f001 fc67 	bl	800c5fc <__assert_func>
 800ad2e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ad32:	6007      	str	r7, [r0, #0]
 800ad34:	60c7      	str	r7, [r0, #12]
 800ad36:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ad3a:	6819      	ldr	r1, [r3, #0]
 800ad3c:	b159      	cbz	r1, 800ad56 <_dtoa_r+0x56>
 800ad3e:	685a      	ldr	r2, [r3, #4]
 800ad40:	2301      	movs	r3, #1
 800ad42:	4093      	lsls	r3, r2
 800ad44:	604a      	str	r2, [r1, #4]
 800ad46:	608b      	str	r3, [r1, #8]
 800ad48:	4658      	mov	r0, fp
 800ad4a:	f000 fedf 	bl	800bb0c <_Bfree>
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ad54:	601a      	str	r2, [r3, #0]
 800ad56:	1e2b      	subs	r3, r5, #0
 800ad58:	bfaf      	iteee	ge
 800ad5a:	2300      	movge	r3, #0
 800ad5c:	2201      	movlt	r2, #1
 800ad5e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ad62:	9303      	strlt	r3, [sp, #12]
 800ad64:	bfa8      	it	ge
 800ad66:	6033      	strge	r3, [r6, #0]
 800ad68:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ad6c:	4b98      	ldr	r3, [pc, #608]	@ (800afd0 <_dtoa_r+0x2d0>)
 800ad6e:	bfb8      	it	lt
 800ad70:	6032      	strlt	r2, [r6, #0]
 800ad72:	ea33 0308 	bics.w	r3, r3, r8
 800ad76:	d112      	bne.n	800ad9e <_dtoa_r+0x9e>
 800ad78:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ad7c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ad7e:	6013      	str	r3, [r2, #0]
 800ad80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ad84:	4323      	orrs	r3, r4
 800ad86:	f000 8550 	beq.w	800b82a <_dtoa_r+0xb2a>
 800ad8a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ad8c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800afd4 <_dtoa_r+0x2d4>
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f000 8552 	beq.w	800b83a <_dtoa_r+0xb3a>
 800ad96:	f10a 0303 	add.w	r3, sl, #3
 800ad9a:	f000 bd4c 	b.w	800b836 <_dtoa_r+0xb36>
 800ad9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ada2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ada6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adaa:	2200      	movs	r2, #0
 800adac:	2300      	movs	r3, #0
 800adae:	f7f5 feaf 	bl	8000b10 <__aeabi_dcmpeq>
 800adb2:	4607      	mov	r7, r0
 800adb4:	b158      	cbz	r0, 800adce <_dtoa_r+0xce>
 800adb6:	2301      	movs	r3, #1
 800adb8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800adba:	6013      	str	r3, [r2, #0]
 800adbc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800adbe:	b113      	cbz	r3, 800adc6 <_dtoa_r+0xc6>
 800adc0:	4b85      	ldr	r3, [pc, #532]	@ (800afd8 <_dtoa_r+0x2d8>)
 800adc2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800adc4:	6013      	str	r3, [r2, #0]
 800adc6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800afdc <_dtoa_r+0x2dc>
 800adca:	f000 bd36 	b.w	800b83a <_dtoa_r+0xb3a>
 800adce:	ab14      	add	r3, sp, #80	@ 0x50
 800add0:	9301      	str	r3, [sp, #4]
 800add2:	ab15      	add	r3, sp, #84	@ 0x54
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	4658      	mov	r0, fp
 800add8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800addc:	f001 f97e 	bl	800c0dc <__d2b>
 800ade0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800ade4:	4681      	mov	r9, r0
 800ade6:	2e00      	cmp	r6, #0
 800ade8:	d077      	beq.n	800aeda <_dtoa_r+0x1da>
 800adea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800adf0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800adf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800adf8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800adfc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ae00:	9712      	str	r7, [sp, #72]	@ 0x48
 800ae02:	4619      	mov	r1, r3
 800ae04:	2200      	movs	r2, #0
 800ae06:	4b76      	ldr	r3, [pc, #472]	@ (800afe0 <_dtoa_r+0x2e0>)
 800ae08:	f7f5 fa62 	bl	80002d0 <__aeabi_dsub>
 800ae0c:	a368      	add	r3, pc, #416	@ (adr r3, 800afb0 <_dtoa_r+0x2b0>)
 800ae0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae12:	f7f5 fc15 	bl	8000640 <__aeabi_dmul>
 800ae16:	a368      	add	r3, pc, #416	@ (adr r3, 800afb8 <_dtoa_r+0x2b8>)
 800ae18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae1c:	f7f5 fa5a 	bl	80002d4 <__adddf3>
 800ae20:	4604      	mov	r4, r0
 800ae22:	4630      	mov	r0, r6
 800ae24:	460d      	mov	r5, r1
 800ae26:	f7f5 fba1 	bl	800056c <__aeabi_i2d>
 800ae2a:	a365      	add	r3, pc, #404	@ (adr r3, 800afc0 <_dtoa_r+0x2c0>)
 800ae2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae30:	f7f5 fc06 	bl	8000640 <__aeabi_dmul>
 800ae34:	4602      	mov	r2, r0
 800ae36:	460b      	mov	r3, r1
 800ae38:	4620      	mov	r0, r4
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	f7f5 fa4a 	bl	80002d4 <__adddf3>
 800ae40:	4604      	mov	r4, r0
 800ae42:	460d      	mov	r5, r1
 800ae44:	f7f5 feac 	bl	8000ba0 <__aeabi_d2iz>
 800ae48:	2200      	movs	r2, #0
 800ae4a:	4607      	mov	r7, r0
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4620      	mov	r0, r4
 800ae50:	4629      	mov	r1, r5
 800ae52:	f7f5 fe67 	bl	8000b24 <__aeabi_dcmplt>
 800ae56:	b140      	cbz	r0, 800ae6a <_dtoa_r+0x16a>
 800ae58:	4638      	mov	r0, r7
 800ae5a:	f7f5 fb87 	bl	800056c <__aeabi_i2d>
 800ae5e:	4622      	mov	r2, r4
 800ae60:	462b      	mov	r3, r5
 800ae62:	f7f5 fe55 	bl	8000b10 <__aeabi_dcmpeq>
 800ae66:	b900      	cbnz	r0, 800ae6a <_dtoa_r+0x16a>
 800ae68:	3f01      	subs	r7, #1
 800ae6a:	2f16      	cmp	r7, #22
 800ae6c:	d853      	bhi.n	800af16 <_dtoa_r+0x216>
 800ae6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae72:	4b5c      	ldr	r3, [pc, #368]	@ (800afe4 <_dtoa_r+0x2e4>)
 800ae74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae7c:	f7f5 fe52 	bl	8000b24 <__aeabi_dcmplt>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d04a      	beq.n	800af1a <_dtoa_r+0x21a>
 800ae84:	2300      	movs	r3, #0
 800ae86:	3f01      	subs	r7, #1
 800ae88:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ae8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ae8c:	1b9b      	subs	r3, r3, r6
 800ae8e:	1e5a      	subs	r2, r3, #1
 800ae90:	bf46      	itte	mi
 800ae92:	f1c3 0801 	rsbmi	r8, r3, #1
 800ae96:	2300      	movmi	r3, #0
 800ae98:	f04f 0800 	movpl.w	r8, #0
 800ae9c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae9e:	bf48      	it	mi
 800aea0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800aea2:	2f00      	cmp	r7, #0
 800aea4:	db3b      	blt.n	800af1e <_dtoa_r+0x21e>
 800aea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aea8:	970e      	str	r7, [sp, #56]	@ 0x38
 800aeaa:	443b      	add	r3, r7
 800aeac:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeae:	2300      	movs	r3, #0
 800aeb0:	930a      	str	r3, [sp, #40]	@ 0x28
 800aeb2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aeb4:	2b09      	cmp	r3, #9
 800aeb6:	d866      	bhi.n	800af86 <_dtoa_r+0x286>
 800aeb8:	2b05      	cmp	r3, #5
 800aeba:	bfc4      	itt	gt
 800aebc:	3b04      	subgt	r3, #4
 800aebe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800aec0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800aec2:	bfc8      	it	gt
 800aec4:	2400      	movgt	r4, #0
 800aec6:	f1a3 0302 	sub.w	r3, r3, #2
 800aeca:	bfd8      	it	le
 800aecc:	2401      	movle	r4, #1
 800aece:	2b03      	cmp	r3, #3
 800aed0:	d864      	bhi.n	800af9c <_dtoa_r+0x29c>
 800aed2:	e8df f003 	tbb	[pc, r3]
 800aed6:	382b      	.short	0x382b
 800aed8:	5636      	.short	0x5636
 800aeda:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800aede:	441e      	add	r6, r3
 800aee0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aee4:	2b20      	cmp	r3, #32
 800aee6:	bfc1      	itttt	gt
 800aee8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aeec:	fa08 f803 	lslgt.w	r8, r8, r3
 800aef0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aef4:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aef8:	bfd6      	itet	le
 800aefa:	f1c3 0320 	rsble	r3, r3, #32
 800aefe:	ea48 0003 	orrgt.w	r0, r8, r3
 800af02:	fa04 f003 	lslle.w	r0, r4, r3
 800af06:	f7f5 fb21 	bl	800054c <__aeabi_ui2d>
 800af0a:	2201      	movs	r2, #1
 800af0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800af10:	3e01      	subs	r6, #1
 800af12:	9212      	str	r2, [sp, #72]	@ 0x48
 800af14:	e775      	b.n	800ae02 <_dtoa_r+0x102>
 800af16:	2301      	movs	r3, #1
 800af18:	e7b6      	b.n	800ae88 <_dtoa_r+0x188>
 800af1a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800af1c:	e7b5      	b.n	800ae8a <_dtoa_r+0x18a>
 800af1e:	427b      	negs	r3, r7
 800af20:	930a      	str	r3, [sp, #40]	@ 0x28
 800af22:	2300      	movs	r3, #0
 800af24:	eba8 0807 	sub.w	r8, r8, r7
 800af28:	930e      	str	r3, [sp, #56]	@ 0x38
 800af2a:	e7c2      	b.n	800aeb2 <_dtoa_r+0x1b2>
 800af2c:	2300      	movs	r3, #0
 800af2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800af32:	2b00      	cmp	r3, #0
 800af34:	dc35      	bgt.n	800afa2 <_dtoa_r+0x2a2>
 800af36:	2301      	movs	r3, #1
 800af38:	461a      	mov	r2, r3
 800af3a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800af3e:	9221      	str	r2, [sp, #132]	@ 0x84
 800af40:	e00b      	b.n	800af5a <_dtoa_r+0x25a>
 800af42:	2301      	movs	r3, #1
 800af44:	e7f3      	b.n	800af2e <_dtoa_r+0x22e>
 800af46:	2300      	movs	r3, #0
 800af48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800af4c:	18fb      	adds	r3, r7, r3
 800af4e:	9308      	str	r3, [sp, #32]
 800af50:	3301      	adds	r3, #1
 800af52:	2b01      	cmp	r3, #1
 800af54:	9307      	str	r3, [sp, #28]
 800af56:	bfb8      	it	lt
 800af58:	2301      	movlt	r3, #1
 800af5a:	2100      	movs	r1, #0
 800af5c:	2204      	movs	r2, #4
 800af5e:	f8db 001c 	ldr.w	r0, [fp, #28]
 800af62:	f102 0514 	add.w	r5, r2, #20
 800af66:	429d      	cmp	r5, r3
 800af68:	d91f      	bls.n	800afaa <_dtoa_r+0x2aa>
 800af6a:	6041      	str	r1, [r0, #4]
 800af6c:	4658      	mov	r0, fp
 800af6e:	f000 fd8d 	bl	800ba8c <_Balloc>
 800af72:	4682      	mov	sl, r0
 800af74:	2800      	cmp	r0, #0
 800af76:	d139      	bne.n	800afec <_dtoa_r+0x2ec>
 800af78:	4602      	mov	r2, r0
 800af7a:	f240 11af 	movw	r1, #431	@ 0x1af
 800af7e:	4b1a      	ldr	r3, [pc, #104]	@ (800afe8 <_dtoa_r+0x2e8>)
 800af80:	e6d2      	b.n	800ad28 <_dtoa_r+0x28>
 800af82:	2301      	movs	r3, #1
 800af84:	e7e0      	b.n	800af48 <_dtoa_r+0x248>
 800af86:	2401      	movs	r4, #1
 800af88:	2300      	movs	r3, #0
 800af8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800af8c:	9320      	str	r3, [sp, #128]	@ 0x80
 800af8e:	f04f 33ff 	mov.w	r3, #4294967295
 800af92:	2200      	movs	r2, #0
 800af94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800af98:	2312      	movs	r3, #18
 800af9a:	e7d0      	b.n	800af3e <_dtoa_r+0x23e>
 800af9c:	2301      	movs	r3, #1
 800af9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afa0:	e7f5      	b.n	800af8e <_dtoa_r+0x28e>
 800afa2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800afa4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800afa8:	e7d7      	b.n	800af5a <_dtoa_r+0x25a>
 800afaa:	3101      	adds	r1, #1
 800afac:	0052      	lsls	r2, r2, #1
 800afae:	e7d8      	b.n	800af62 <_dtoa_r+0x262>
 800afb0:	636f4361 	.word	0x636f4361
 800afb4:	3fd287a7 	.word	0x3fd287a7
 800afb8:	8b60c8b3 	.word	0x8b60c8b3
 800afbc:	3fc68a28 	.word	0x3fc68a28
 800afc0:	509f79fb 	.word	0x509f79fb
 800afc4:	3fd34413 	.word	0x3fd34413
 800afc8:	0800cd77 	.word	0x0800cd77
 800afcc:	0800cd8e 	.word	0x0800cd8e
 800afd0:	7ff00000 	.word	0x7ff00000
 800afd4:	0800cd73 	.word	0x0800cd73
 800afd8:	0800cd47 	.word	0x0800cd47
 800afdc:	0800cd46 	.word	0x0800cd46
 800afe0:	3ff80000 	.word	0x3ff80000
 800afe4:	0800ce88 	.word	0x0800ce88
 800afe8:	0800cde6 	.word	0x0800cde6
 800afec:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aff0:	6018      	str	r0, [r3, #0]
 800aff2:	9b07      	ldr	r3, [sp, #28]
 800aff4:	2b0e      	cmp	r3, #14
 800aff6:	f200 80a4 	bhi.w	800b142 <_dtoa_r+0x442>
 800affa:	2c00      	cmp	r4, #0
 800affc:	f000 80a1 	beq.w	800b142 <_dtoa_r+0x442>
 800b000:	2f00      	cmp	r7, #0
 800b002:	dd33      	ble.n	800b06c <_dtoa_r+0x36c>
 800b004:	4b86      	ldr	r3, [pc, #536]	@ (800b220 <_dtoa_r+0x520>)
 800b006:	f007 020f 	and.w	r2, r7, #15
 800b00a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b00e:	05f8      	lsls	r0, r7, #23
 800b010:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b014:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b018:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b01c:	d516      	bpl.n	800b04c <_dtoa_r+0x34c>
 800b01e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b022:	4b80      	ldr	r3, [pc, #512]	@ (800b224 <_dtoa_r+0x524>)
 800b024:	2603      	movs	r6, #3
 800b026:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b02a:	f7f5 fc33 	bl	8000894 <__aeabi_ddiv>
 800b02e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b032:	f004 040f 	and.w	r4, r4, #15
 800b036:	4d7b      	ldr	r5, [pc, #492]	@ (800b224 <_dtoa_r+0x524>)
 800b038:	b954      	cbnz	r4, 800b050 <_dtoa_r+0x350>
 800b03a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b03e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b042:	f7f5 fc27 	bl	8000894 <__aeabi_ddiv>
 800b046:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b04a:	e028      	b.n	800b09e <_dtoa_r+0x39e>
 800b04c:	2602      	movs	r6, #2
 800b04e:	e7f2      	b.n	800b036 <_dtoa_r+0x336>
 800b050:	07e1      	lsls	r1, r4, #31
 800b052:	d508      	bpl.n	800b066 <_dtoa_r+0x366>
 800b054:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b058:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b05c:	f7f5 faf0 	bl	8000640 <__aeabi_dmul>
 800b060:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b064:	3601      	adds	r6, #1
 800b066:	1064      	asrs	r4, r4, #1
 800b068:	3508      	adds	r5, #8
 800b06a:	e7e5      	b.n	800b038 <_dtoa_r+0x338>
 800b06c:	f000 80d2 	beq.w	800b214 <_dtoa_r+0x514>
 800b070:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b074:	427c      	negs	r4, r7
 800b076:	4b6a      	ldr	r3, [pc, #424]	@ (800b220 <_dtoa_r+0x520>)
 800b078:	f004 020f 	and.w	r2, r4, #15
 800b07c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b084:	f7f5 fadc 	bl	8000640 <__aeabi_dmul>
 800b088:	2602      	movs	r6, #2
 800b08a:	2300      	movs	r3, #0
 800b08c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b090:	4d64      	ldr	r5, [pc, #400]	@ (800b224 <_dtoa_r+0x524>)
 800b092:	1124      	asrs	r4, r4, #4
 800b094:	2c00      	cmp	r4, #0
 800b096:	f040 80b2 	bne.w	800b1fe <_dtoa_r+0x4fe>
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1d3      	bne.n	800b046 <_dtoa_r+0x346>
 800b09e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b0a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 80b7 	beq.w	800b218 <_dtoa_r+0x518>
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	4b5d      	ldr	r3, [pc, #372]	@ (800b228 <_dtoa_r+0x528>)
 800b0b2:	f7f5 fd37 	bl	8000b24 <__aeabi_dcmplt>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	f000 80ae 	beq.w	800b218 <_dtoa_r+0x518>
 800b0bc:	9b07      	ldr	r3, [sp, #28]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	f000 80aa 	beq.w	800b218 <_dtoa_r+0x518>
 800b0c4:	9b08      	ldr	r3, [sp, #32]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	dd37      	ble.n	800b13a <_dtoa_r+0x43a>
 800b0ca:	1e7b      	subs	r3, r7, #1
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	9304      	str	r3, [sp, #16]
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	4629      	mov	r1, r5
 800b0d4:	4b55      	ldr	r3, [pc, #340]	@ (800b22c <_dtoa_r+0x52c>)
 800b0d6:	f7f5 fab3 	bl	8000640 <__aeabi_dmul>
 800b0da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0de:	9c08      	ldr	r4, [sp, #32]
 800b0e0:	3601      	adds	r6, #1
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	f7f5 fa42 	bl	800056c <__aeabi_i2d>
 800b0e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b0ec:	f7f5 faa8 	bl	8000640 <__aeabi_dmul>
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	4b4f      	ldr	r3, [pc, #316]	@ (800b230 <_dtoa_r+0x530>)
 800b0f4:	f7f5 f8ee 	bl	80002d4 <__adddf3>
 800b0f8:	4605      	mov	r5, r0
 800b0fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b0fe:	2c00      	cmp	r4, #0
 800b100:	f040 809a 	bne.w	800b238 <_dtoa_r+0x538>
 800b104:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b108:	2200      	movs	r2, #0
 800b10a:	4b4a      	ldr	r3, [pc, #296]	@ (800b234 <_dtoa_r+0x534>)
 800b10c:	f7f5 f8e0 	bl	80002d0 <__aeabi_dsub>
 800b110:	4602      	mov	r2, r0
 800b112:	460b      	mov	r3, r1
 800b114:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b118:	462a      	mov	r2, r5
 800b11a:	4633      	mov	r3, r6
 800b11c:	f7f5 fd20 	bl	8000b60 <__aeabi_dcmpgt>
 800b120:	2800      	cmp	r0, #0
 800b122:	f040 828e 	bne.w	800b642 <_dtoa_r+0x942>
 800b126:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b12a:	462a      	mov	r2, r5
 800b12c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b130:	f7f5 fcf8 	bl	8000b24 <__aeabi_dcmplt>
 800b134:	2800      	cmp	r0, #0
 800b136:	f040 8127 	bne.w	800b388 <_dtoa_r+0x688>
 800b13a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b13e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b142:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b144:	2b00      	cmp	r3, #0
 800b146:	f2c0 8163 	blt.w	800b410 <_dtoa_r+0x710>
 800b14a:	2f0e      	cmp	r7, #14
 800b14c:	f300 8160 	bgt.w	800b410 <_dtoa_r+0x710>
 800b150:	4b33      	ldr	r3, [pc, #204]	@ (800b220 <_dtoa_r+0x520>)
 800b152:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b156:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b15a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b15e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b160:	2b00      	cmp	r3, #0
 800b162:	da03      	bge.n	800b16c <_dtoa_r+0x46c>
 800b164:	9b07      	ldr	r3, [sp, #28]
 800b166:	2b00      	cmp	r3, #0
 800b168:	f340 8100 	ble.w	800b36c <_dtoa_r+0x66c>
 800b16c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b170:	4656      	mov	r6, sl
 800b172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b176:	4620      	mov	r0, r4
 800b178:	4629      	mov	r1, r5
 800b17a:	f7f5 fb8b 	bl	8000894 <__aeabi_ddiv>
 800b17e:	f7f5 fd0f 	bl	8000ba0 <__aeabi_d2iz>
 800b182:	4680      	mov	r8, r0
 800b184:	f7f5 f9f2 	bl	800056c <__aeabi_i2d>
 800b188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b18c:	f7f5 fa58 	bl	8000640 <__aeabi_dmul>
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	4620      	mov	r0, r4
 800b196:	4629      	mov	r1, r5
 800b198:	f7f5 f89a 	bl	80002d0 <__aeabi_dsub>
 800b19c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b1a0:	9d07      	ldr	r5, [sp, #28]
 800b1a2:	f806 4b01 	strb.w	r4, [r6], #1
 800b1a6:	eba6 040a 	sub.w	r4, r6, sl
 800b1aa:	42a5      	cmp	r5, r4
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	f040 8116 	bne.w	800b3e0 <_dtoa_r+0x6e0>
 800b1b4:	f7f5 f88e 	bl	80002d4 <__adddf3>
 800b1b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1bc:	4604      	mov	r4, r0
 800b1be:	460d      	mov	r5, r1
 800b1c0:	f7f5 fcce 	bl	8000b60 <__aeabi_dcmpgt>
 800b1c4:	2800      	cmp	r0, #0
 800b1c6:	f040 80f8 	bne.w	800b3ba <_dtoa_r+0x6ba>
 800b1ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1ce:	4620      	mov	r0, r4
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	f7f5 fc9d 	bl	8000b10 <__aeabi_dcmpeq>
 800b1d6:	b118      	cbz	r0, 800b1e0 <_dtoa_r+0x4e0>
 800b1d8:	f018 0f01 	tst.w	r8, #1
 800b1dc:	f040 80ed 	bne.w	800b3ba <_dtoa_r+0x6ba>
 800b1e0:	4649      	mov	r1, r9
 800b1e2:	4658      	mov	r0, fp
 800b1e4:	f000 fc92 	bl	800bb0c <_Bfree>
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	7033      	strb	r3, [r6, #0]
 800b1ec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b1ee:	3701      	adds	r7, #1
 800b1f0:	601f      	str	r7, [r3, #0]
 800b1f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f000 8320 	beq.w	800b83a <_dtoa_r+0xb3a>
 800b1fa:	601e      	str	r6, [r3, #0]
 800b1fc:	e31d      	b.n	800b83a <_dtoa_r+0xb3a>
 800b1fe:	07e2      	lsls	r2, r4, #31
 800b200:	d505      	bpl.n	800b20e <_dtoa_r+0x50e>
 800b202:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b206:	f7f5 fa1b 	bl	8000640 <__aeabi_dmul>
 800b20a:	2301      	movs	r3, #1
 800b20c:	3601      	adds	r6, #1
 800b20e:	1064      	asrs	r4, r4, #1
 800b210:	3508      	adds	r5, #8
 800b212:	e73f      	b.n	800b094 <_dtoa_r+0x394>
 800b214:	2602      	movs	r6, #2
 800b216:	e742      	b.n	800b09e <_dtoa_r+0x39e>
 800b218:	9c07      	ldr	r4, [sp, #28]
 800b21a:	9704      	str	r7, [sp, #16]
 800b21c:	e761      	b.n	800b0e2 <_dtoa_r+0x3e2>
 800b21e:	bf00      	nop
 800b220:	0800ce88 	.word	0x0800ce88
 800b224:	0800ce60 	.word	0x0800ce60
 800b228:	3ff00000 	.word	0x3ff00000
 800b22c:	40240000 	.word	0x40240000
 800b230:	401c0000 	.word	0x401c0000
 800b234:	40140000 	.word	0x40140000
 800b238:	4b70      	ldr	r3, [pc, #448]	@ (800b3fc <_dtoa_r+0x6fc>)
 800b23a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b23c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b240:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b244:	4454      	add	r4, sl
 800b246:	2900      	cmp	r1, #0
 800b248:	d045      	beq.n	800b2d6 <_dtoa_r+0x5d6>
 800b24a:	2000      	movs	r0, #0
 800b24c:	496c      	ldr	r1, [pc, #432]	@ (800b400 <_dtoa_r+0x700>)
 800b24e:	f7f5 fb21 	bl	8000894 <__aeabi_ddiv>
 800b252:	4633      	mov	r3, r6
 800b254:	462a      	mov	r2, r5
 800b256:	f7f5 f83b 	bl	80002d0 <__aeabi_dsub>
 800b25a:	4656      	mov	r6, sl
 800b25c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b260:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b264:	f7f5 fc9c 	bl	8000ba0 <__aeabi_d2iz>
 800b268:	4605      	mov	r5, r0
 800b26a:	f7f5 f97f 	bl	800056c <__aeabi_i2d>
 800b26e:	4602      	mov	r2, r0
 800b270:	460b      	mov	r3, r1
 800b272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b276:	f7f5 f82b 	bl	80002d0 <__aeabi_dsub>
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	3530      	adds	r5, #48	@ 0x30
 800b280:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b284:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b288:	f806 5b01 	strb.w	r5, [r6], #1
 800b28c:	f7f5 fc4a 	bl	8000b24 <__aeabi_dcmplt>
 800b290:	2800      	cmp	r0, #0
 800b292:	d163      	bne.n	800b35c <_dtoa_r+0x65c>
 800b294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b298:	2000      	movs	r0, #0
 800b29a:	495a      	ldr	r1, [pc, #360]	@ (800b404 <_dtoa_r+0x704>)
 800b29c:	f7f5 f818 	bl	80002d0 <__aeabi_dsub>
 800b2a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b2a4:	f7f5 fc3e 	bl	8000b24 <__aeabi_dcmplt>
 800b2a8:	2800      	cmp	r0, #0
 800b2aa:	f040 8087 	bne.w	800b3bc <_dtoa_r+0x6bc>
 800b2ae:	42a6      	cmp	r6, r4
 800b2b0:	f43f af43 	beq.w	800b13a <_dtoa_r+0x43a>
 800b2b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	4b53      	ldr	r3, [pc, #332]	@ (800b408 <_dtoa_r+0x708>)
 800b2bc:	f7f5 f9c0 	bl	8000640 <__aeabi_dmul>
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b2c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ca:	4b4f      	ldr	r3, [pc, #316]	@ (800b408 <_dtoa_r+0x708>)
 800b2cc:	f7f5 f9b8 	bl	8000640 <__aeabi_dmul>
 800b2d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2d4:	e7c4      	b.n	800b260 <_dtoa_r+0x560>
 800b2d6:	4631      	mov	r1, r6
 800b2d8:	4628      	mov	r0, r5
 800b2da:	f7f5 f9b1 	bl	8000640 <__aeabi_dmul>
 800b2de:	4656      	mov	r6, sl
 800b2e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b2e4:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b2e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ea:	f7f5 fc59 	bl	8000ba0 <__aeabi_d2iz>
 800b2ee:	4605      	mov	r5, r0
 800b2f0:	f7f5 f93c 	bl	800056c <__aeabi_i2d>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2fc:	f7f4 ffe8 	bl	80002d0 <__aeabi_dsub>
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	3530      	adds	r5, #48	@ 0x30
 800b306:	f806 5b01 	strb.w	r5, [r6], #1
 800b30a:	42a6      	cmp	r6, r4
 800b30c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b310:	f04f 0200 	mov.w	r2, #0
 800b314:	d124      	bne.n	800b360 <_dtoa_r+0x660>
 800b316:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b31a:	4b39      	ldr	r3, [pc, #228]	@ (800b400 <_dtoa_r+0x700>)
 800b31c:	f7f4 ffda 	bl	80002d4 <__adddf3>
 800b320:	4602      	mov	r2, r0
 800b322:	460b      	mov	r3, r1
 800b324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b328:	f7f5 fc1a 	bl	8000b60 <__aeabi_dcmpgt>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d145      	bne.n	800b3bc <_dtoa_r+0x6bc>
 800b330:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b334:	2000      	movs	r0, #0
 800b336:	4932      	ldr	r1, [pc, #200]	@ (800b400 <_dtoa_r+0x700>)
 800b338:	f7f4 ffca 	bl	80002d0 <__aeabi_dsub>
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b344:	f7f5 fbee 	bl	8000b24 <__aeabi_dcmplt>
 800b348:	2800      	cmp	r0, #0
 800b34a:	f43f aef6 	beq.w	800b13a <_dtoa_r+0x43a>
 800b34e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b350:	1e73      	subs	r3, r6, #1
 800b352:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b354:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b358:	2b30      	cmp	r3, #48	@ 0x30
 800b35a:	d0f8      	beq.n	800b34e <_dtoa_r+0x64e>
 800b35c:	9f04      	ldr	r7, [sp, #16]
 800b35e:	e73f      	b.n	800b1e0 <_dtoa_r+0x4e0>
 800b360:	4b29      	ldr	r3, [pc, #164]	@ (800b408 <_dtoa_r+0x708>)
 800b362:	f7f5 f96d 	bl	8000640 <__aeabi_dmul>
 800b366:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b36a:	e7bc      	b.n	800b2e6 <_dtoa_r+0x5e6>
 800b36c:	d10c      	bne.n	800b388 <_dtoa_r+0x688>
 800b36e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b372:	2200      	movs	r2, #0
 800b374:	4b25      	ldr	r3, [pc, #148]	@ (800b40c <_dtoa_r+0x70c>)
 800b376:	f7f5 f963 	bl	8000640 <__aeabi_dmul>
 800b37a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b37e:	f7f5 fbe5 	bl	8000b4c <__aeabi_dcmpge>
 800b382:	2800      	cmp	r0, #0
 800b384:	f000 815b 	beq.w	800b63e <_dtoa_r+0x93e>
 800b388:	2400      	movs	r4, #0
 800b38a:	4625      	mov	r5, r4
 800b38c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b38e:	4656      	mov	r6, sl
 800b390:	43db      	mvns	r3, r3
 800b392:	9304      	str	r3, [sp, #16]
 800b394:	2700      	movs	r7, #0
 800b396:	4621      	mov	r1, r4
 800b398:	4658      	mov	r0, fp
 800b39a:	f000 fbb7 	bl	800bb0c <_Bfree>
 800b39e:	2d00      	cmp	r5, #0
 800b3a0:	d0dc      	beq.n	800b35c <_dtoa_r+0x65c>
 800b3a2:	b12f      	cbz	r7, 800b3b0 <_dtoa_r+0x6b0>
 800b3a4:	42af      	cmp	r7, r5
 800b3a6:	d003      	beq.n	800b3b0 <_dtoa_r+0x6b0>
 800b3a8:	4639      	mov	r1, r7
 800b3aa:	4658      	mov	r0, fp
 800b3ac:	f000 fbae 	bl	800bb0c <_Bfree>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	4658      	mov	r0, fp
 800b3b4:	f000 fbaa 	bl	800bb0c <_Bfree>
 800b3b8:	e7d0      	b.n	800b35c <_dtoa_r+0x65c>
 800b3ba:	9704      	str	r7, [sp, #16]
 800b3bc:	4633      	mov	r3, r6
 800b3be:	461e      	mov	r6, r3
 800b3c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3c4:	2a39      	cmp	r2, #57	@ 0x39
 800b3c6:	d107      	bne.n	800b3d8 <_dtoa_r+0x6d8>
 800b3c8:	459a      	cmp	sl, r3
 800b3ca:	d1f8      	bne.n	800b3be <_dtoa_r+0x6be>
 800b3cc:	9a04      	ldr	r2, [sp, #16]
 800b3ce:	3201      	adds	r2, #1
 800b3d0:	9204      	str	r2, [sp, #16]
 800b3d2:	2230      	movs	r2, #48	@ 0x30
 800b3d4:	f88a 2000 	strb.w	r2, [sl]
 800b3d8:	781a      	ldrb	r2, [r3, #0]
 800b3da:	3201      	adds	r2, #1
 800b3dc:	701a      	strb	r2, [r3, #0]
 800b3de:	e7bd      	b.n	800b35c <_dtoa_r+0x65c>
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	4b09      	ldr	r3, [pc, #36]	@ (800b408 <_dtoa_r+0x708>)
 800b3e4:	f7f5 f92c 	bl	8000640 <__aeabi_dmul>
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	4604      	mov	r4, r0
 800b3ee:	460d      	mov	r5, r1
 800b3f0:	f7f5 fb8e 	bl	8000b10 <__aeabi_dcmpeq>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	f43f aebc 	beq.w	800b172 <_dtoa_r+0x472>
 800b3fa:	e6f1      	b.n	800b1e0 <_dtoa_r+0x4e0>
 800b3fc:	0800ce88 	.word	0x0800ce88
 800b400:	3fe00000 	.word	0x3fe00000
 800b404:	3ff00000 	.word	0x3ff00000
 800b408:	40240000 	.word	0x40240000
 800b40c:	40140000 	.word	0x40140000
 800b410:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b412:	2a00      	cmp	r2, #0
 800b414:	f000 80db 	beq.w	800b5ce <_dtoa_r+0x8ce>
 800b418:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b41a:	2a01      	cmp	r2, #1
 800b41c:	f300 80bf 	bgt.w	800b59e <_dtoa_r+0x89e>
 800b420:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b422:	2a00      	cmp	r2, #0
 800b424:	f000 80b7 	beq.w	800b596 <_dtoa_r+0x896>
 800b428:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b42c:	4646      	mov	r6, r8
 800b42e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b430:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b432:	2101      	movs	r1, #1
 800b434:	441a      	add	r2, r3
 800b436:	4658      	mov	r0, fp
 800b438:	4498      	add	r8, r3
 800b43a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b43c:	f000 fc1a 	bl	800bc74 <__i2b>
 800b440:	4605      	mov	r5, r0
 800b442:	b15e      	cbz	r6, 800b45c <_dtoa_r+0x75c>
 800b444:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b446:	2b00      	cmp	r3, #0
 800b448:	dd08      	ble.n	800b45c <_dtoa_r+0x75c>
 800b44a:	42b3      	cmp	r3, r6
 800b44c:	bfa8      	it	ge
 800b44e:	4633      	movge	r3, r6
 800b450:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b452:	eba8 0803 	sub.w	r8, r8, r3
 800b456:	1af6      	subs	r6, r6, r3
 800b458:	1ad3      	subs	r3, r2, r3
 800b45a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b45c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b45e:	b1f3      	cbz	r3, 800b49e <_dtoa_r+0x79e>
 800b460:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b462:	2b00      	cmp	r3, #0
 800b464:	f000 80b7 	beq.w	800b5d6 <_dtoa_r+0x8d6>
 800b468:	b18c      	cbz	r4, 800b48e <_dtoa_r+0x78e>
 800b46a:	4629      	mov	r1, r5
 800b46c:	4622      	mov	r2, r4
 800b46e:	4658      	mov	r0, fp
 800b470:	f000 fcbe 	bl	800bdf0 <__pow5mult>
 800b474:	464a      	mov	r2, r9
 800b476:	4601      	mov	r1, r0
 800b478:	4605      	mov	r5, r0
 800b47a:	4658      	mov	r0, fp
 800b47c:	f000 fc10 	bl	800bca0 <__multiply>
 800b480:	4649      	mov	r1, r9
 800b482:	9004      	str	r0, [sp, #16]
 800b484:	4658      	mov	r0, fp
 800b486:	f000 fb41 	bl	800bb0c <_Bfree>
 800b48a:	9b04      	ldr	r3, [sp, #16]
 800b48c:	4699      	mov	r9, r3
 800b48e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b490:	1b1a      	subs	r2, r3, r4
 800b492:	d004      	beq.n	800b49e <_dtoa_r+0x79e>
 800b494:	4649      	mov	r1, r9
 800b496:	4658      	mov	r0, fp
 800b498:	f000 fcaa 	bl	800bdf0 <__pow5mult>
 800b49c:	4681      	mov	r9, r0
 800b49e:	2101      	movs	r1, #1
 800b4a0:	4658      	mov	r0, fp
 800b4a2:	f000 fbe7 	bl	800bc74 <__i2b>
 800b4a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4a8:	4604      	mov	r4, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f000 81c9 	beq.w	800b842 <_dtoa_r+0xb42>
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	4601      	mov	r1, r0
 800b4b4:	4658      	mov	r0, fp
 800b4b6:	f000 fc9b 	bl	800bdf0 <__pow5mult>
 800b4ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b4bc:	4604      	mov	r4, r0
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	f300 808f 	bgt.w	800b5e2 <_dtoa_r+0x8e2>
 800b4c4:	9b02      	ldr	r3, [sp, #8]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	f040 8087 	bne.w	800b5da <_dtoa_r+0x8da>
 800b4cc:	9b03      	ldr	r3, [sp, #12]
 800b4ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f040 8083 	bne.w	800b5de <_dtoa_r+0x8de>
 800b4d8:	9b03      	ldr	r3, [sp, #12]
 800b4da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b4de:	0d1b      	lsrs	r3, r3, #20
 800b4e0:	051b      	lsls	r3, r3, #20
 800b4e2:	b12b      	cbz	r3, 800b4f0 <_dtoa_r+0x7f0>
 800b4e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4e6:	f108 0801 	add.w	r8, r8, #1
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b4f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f000 81aa 	beq.w	800b84e <_dtoa_r+0xb4e>
 800b4fa:	6923      	ldr	r3, [r4, #16]
 800b4fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b500:	6918      	ldr	r0, [r3, #16]
 800b502:	f000 fb6b 	bl	800bbdc <__hi0bits>
 800b506:	f1c0 0020 	rsb	r0, r0, #32
 800b50a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b50c:	4418      	add	r0, r3
 800b50e:	f010 001f 	ands.w	r0, r0, #31
 800b512:	d071      	beq.n	800b5f8 <_dtoa_r+0x8f8>
 800b514:	f1c0 0320 	rsb	r3, r0, #32
 800b518:	2b04      	cmp	r3, #4
 800b51a:	dd65      	ble.n	800b5e8 <_dtoa_r+0x8e8>
 800b51c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b51e:	f1c0 001c 	rsb	r0, r0, #28
 800b522:	4403      	add	r3, r0
 800b524:	4480      	add	r8, r0
 800b526:	4406      	add	r6, r0
 800b528:	9309      	str	r3, [sp, #36]	@ 0x24
 800b52a:	f1b8 0f00 	cmp.w	r8, #0
 800b52e:	dd05      	ble.n	800b53c <_dtoa_r+0x83c>
 800b530:	4649      	mov	r1, r9
 800b532:	4642      	mov	r2, r8
 800b534:	4658      	mov	r0, fp
 800b536:	f000 fcb5 	bl	800bea4 <__lshift>
 800b53a:	4681      	mov	r9, r0
 800b53c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b53e:	2b00      	cmp	r3, #0
 800b540:	dd05      	ble.n	800b54e <_dtoa_r+0x84e>
 800b542:	4621      	mov	r1, r4
 800b544:	461a      	mov	r2, r3
 800b546:	4658      	mov	r0, fp
 800b548:	f000 fcac 	bl	800bea4 <__lshift>
 800b54c:	4604      	mov	r4, r0
 800b54e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b550:	2b00      	cmp	r3, #0
 800b552:	d053      	beq.n	800b5fc <_dtoa_r+0x8fc>
 800b554:	4621      	mov	r1, r4
 800b556:	4648      	mov	r0, r9
 800b558:	f000 fd10 	bl	800bf7c <__mcmp>
 800b55c:	2800      	cmp	r0, #0
 800b55e:	da4d      	bge.n	800b5fc <_dtoa_r+0x8fc>
 800b560:	1e7b      	subs	r3, r7, #1
 800b562:	4649      	mov	r1, r9
 800b564:	9304      	str	r3, [sp, #16]
 800b566:	220a      	movs	r2, #10
 800b568:	2300      	movs	r3, #0
 800b56a:	4658      	mov	r0, fp
 800b56c:	f000 faf0 	bl	800bb50 <__multadd>
 800b570:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b572:	4681      	mov	r9, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 816c 	beq.w	800b852 <_dtoa_r+0xb52>
 800b57a:	2300      	movs	r3, #0
 800b57c:	4629      	mov	r1, r5
 800b57e:	220a      	movs	r2, #10
 800b580:	4658      	mov	r0, fp
 800b582:	f000 fae5 	bl	800bb50 <__multadd>
 800b586:	9b08      	ldr	r3, [sp, #32]
 800b588:	4605      	mov	r5, r0
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	dc61      	bgt.n	800b652 <_dtoa_r+0x952>
 800b58e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b590:	2b02      	cmp	r3, #2
 800b592:	dc3b      	bgt.n	800b60c <_dtoa_r+0x90c>
 800b594:	e05d      	b.n	800b652 <_dtoa_r+0x952>
 800b596:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b598:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b59c:	e746      	b.n	800b42c <_dtoa_r+0x72c>
 800b59e:	9b07      	ldr	r3, [sp, #28]
 800b5a0:	1e5c      	subs	r4, r3, #1
 800b5a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5a4:	42a3      	cmp	r3, r4
 800b5a6:	bfbf      	itttt	lt
 800b5a8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b5aa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b5ac:	1ae3      	sublt	r3, r4, r3
 800b5ae:	18d2      	addlt	r2, r2, r3
 800b5b0:	bfa8      	it	ge
 800b5b2:	1b1c      	subge	r4, r3, r4
 800b5b4:	9b07      	ldr	r3, [sp, #28]
 800b5b6:	bfbe      	ittt	lt
 800b5b8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b5ba:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b5bc:	2400      	movlt	r4, #0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	bfb5      	itete	lt
 800b5c2:	eba8 0603 	sublt.w	r6, r8, r3
 800b5c6:	4646      	movge	r6, r8
 800b5c8:	2300      	movlt	r3, #0
 800b5ca:	9b07      	ldrge	r3, [sp, #28]
 800b5cc:	e730      	b.n	800b430 <_dtoa_r+0x730>
 800b5ce:	4646      	mov	r6, r8
 800b5d0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b5d2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b5d4:	e735      	b.n	800b442 <_dtoa_r+0x742>
 800b5d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b5d8:	e75c      	b.n	800b494 <_dtoa_r+0x794>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	e788      	b.n	800b4f0 <_dtoa_r+0x7f0>
 800b5de:	9b02      	ldr	r3, [sp, #8]
 800b5e0:	e786      	b.n	800b4f0 <_dtoa_r+0x7f0>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5e6:	e788      	b.n	800b4fa <_dtoa_r+0x7fa>
 800b5e8:	d09f      	beq.n	800b52a <_dtoa_r+0x82a>
 800b5ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5ec:	331c      	adds	r3, #28
 800b5ee:	441a      	add	r2, r3
 800b5f0:	4498      	add	r8, r3
 800b5f2:	441e      	add	r6, r3
 800b5f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5f6:	e798      	b.n	800b52a <_dtoa_r+0x82a>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	e7f6      	b.n	800b5ea <_dtoa_r+0x8ea>
 800b5fc:	9b07      	ldr	r3, [sp, #28]
 800b5fe:	9704      	str	r7, [sp, #16]
 800b600:	2b00      	cmp	r3, #0
 800b602:	dc20      	bgt.n	800b646 <_dtoa_r+0x946>
 800b604:	9308      	str	r3, [sp, #32]
 800b606:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b608:	2b02      	cmp	r3, #2
 800b60a:	dd1e      	ble.n	800b64a <_dtoa_r+0x94a>
 800b60c:	9b08      	ldr	r3, [sp, #32]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	f47f aebc 	bne.w	800b38c <_dtoa_r+0x68c>
 800b614:	4621      	mov	r1, r4
 800b616:	2205      	movs	r2, #5
 800b618:	4658      	mov	r0, fp
 800b61a:	f000 fa99 	bl	800bb50 <__multadd>
 800b61e:	4601      	mov	r1, r0
 800b620:	4604      	mov	r4, r0
 800b622:	4648      	mov	r0, r9
 800b624:	f000 fcaa 	bl	800bf7c <__mcmp>
 800b628:	2800      	cmp	r0, #0
 800b62a:	f77f aeaf 	ble.w	800b38c <_dtoa_r+0x68c>
 800b62e:	2331      	movs	r3, #49	@ 0x31
 800b630:	4656      	mov	r6, sl
 800b632:	f806 3b01 	strb.w	r3, [r6], #1
 800b636:	9b04      	ldr	r3, [sp, #16]
 800b638:	3301      	adds	r3, #1
 800b63a:	9304      	str	r3, [sp, #16]
 800b63c:	e6aa      	b.n	800b394 <_dtoa_r+0x694>
 800b63e:	9c07      	ldr	r4, [sp, #28]
 800b640:	9704      	str	r7, [sp, #16]
 800b642:	4625      	mov	r5, r4
 800b644:	e7f3      	b.n	800b62e <_dtoa_r+0x92e>
 800b646:	9b07      	ldr	r3, [sp, #28]
 800b648:	9308      	str	r3, [sp, #32]
 800b64a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f000 8104 	beq.w	800b85a <_dtoa_r+0xb5a>
 800b652:	2e00      	cmp	r6, #0
 800b654:	dd05      	ble.n	800b662 <_dtoa_r+0x962>
 800b656:	4629      	mov	r1, r5
 800b658:	4632      	mov	r2, r6
 800b65a:	4658      	mov	r0, fp
 800b65c:	f000 fc22 	bl	800bea4 <__lshift>
 800b660:	4605      	mov	r5, r0
 800b662:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b664:	2b00      	cmp	r3, #0
 800b666:	d05a      	beq.n	800b71e <_dtoa_r+0xa1e>
 800b668:	4658      	mov	r0, fp
 800b66a:	6869      	ldr	r1, [r5, #4]
 800b66c:	f000 fa0e 	bl	800ba8c <_Balloc>
 800b670:	4606      	mov	r6, r0
 800b672:	b928      	cbnz	r0, 800b680 <_dtoa_r+0x980>
 800b674:	4602      	mov	r2, r0
 800b676:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b67a:	4b83      	ldr	r3, [pc, #524]	@ (800b888 <_dtoa_r+0xb88>)
 800b67c:	f7ff bb54 	b.w	800ad28 <_dtoa_r+0x28>
 800b680:	692a      	ldr	r2, [r5, #16]
 800b682:	f105 010c 	add.w	r1, r5, #12
 800b686:	3202      	adds	r2, #2
 800b688:	0092      	lsls	r2, r2, #2
 800b68a:	300c      	adds	r0, #12
 800b68c:	f000 ffa8 	bl	800c5e0 <memcpy>
 800b690:	2201      	movs	r2, #1
 800b692:	4631      	mov	r1, r6
 800b694:	4658      	mov	r0, fp
 800b696:	f000 fc05 	bl	800bea4 <__lshift>
 800b69a:	462f      	mov	r7, r5
 800b69c:	4605      	mov	r5, r0
 800b69e:	f10a 0301 	add.w	r3, sl, #1
 800b6a2:	9307      	str	r3, [sp, #28]
 800b6a4:	9b08      	ldr	r3, [sp, #32]
 800b6a6:	4453      	add	r3, sl
 800b6a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b6aa:	9b02      	ldr	r3, [sp, #8]
 800b6ac:	f003 0301 	and.w	r3, r3, #1
 800b6b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6b2:	9b07      	ldr	r3, [sp, #28]
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	4648      	mov	r0, r9
 800b6ba:	9302      	str	r3, [sp, #8]
 800b6bc:	f7ff fa97 	bl	800abee <quorem>
 800b6c0:	4639      	mov	r1, r7
 800b6c2:	9008      	str	r0, [sp, #32]
 800b6c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b6c8:	4648      	mov	r0, r9
 800b6ca:	f000 fc57 	bl	800bf7c <__mcmp>
 800b6ce:	462a      	mov	r2, r5
 800b6d0:	9009      	str	r0, [sp, #36]	@ 0x24
 800b6d2:	4621      	mov	r1, r4
 800b6d4:	4658      	mov	r0, fp
 800b6d6:	f000 fc6d 	bl	800bfb4 <__mdiff>
 800b6da:	68c2      	ldr	r2, [r0, #12]
 800b6dc:	4606      	mov	r6, r0
 800b6de:	bb02      	cbnz	r2, 800b722 <_dtoa_r+0xa22>
 800b6e0:	4601      	mov	r1, r0
 800b6e2:	4648      	mov	r0, r9
 800b6e4:	f000 fc4a 	bl	800bf7c <__mcmp>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	4631      	mov	r1, r6
 800b6ec:	4658      	mov	r0, fp
 800b6ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800b6f0:	f000 fa0c 	bl	800bb0c <_Bfree>
 800b6f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b6f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b6f8:	9e07      	ldr	r6, [sp, #28]
 800b6fa:	ea43 0102 	orr.w	r1, r3, r2
 800b6fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b700:	4319      	orrs	r1, r3
 800b702:	d110      	bne.n	800b726 <_dtoa_r+0xa26>
 800b704:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b708:	d029      	beq.n	800b75e <_dtoa_r+0xa5e>
 800b70a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	dd02      	ble.n	800b716 <_dtoa_r+0xa16>
 800b710:	9b08      	ldr	r3, [sp, #32]
 800b712:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b716:	9b02      	ldr	r3, [sp, #8]
 800b718:	f883 8000 	strb.w	r8, [r3]
 800b71c:	e63b      	b.n	800b396 <_dtoa_r+0x696>
 800b71e:	4628      	mov	r0, r5
 800b720:	e7bb      	b.n	800b69a <_dtoa_r+0x99a>
 800b722:	2201      	movs	r2, #1
 800b724:	e7e1      	b.n	800b6ea <_dtoa_r+0x9ea>
 800b726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b728:	2b00      	cmp	r3, #0
 800b72a:	db04      	blt.n	800b736 <_dtoa_r+0xa36>
 800b72c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b72e:	430b      	orrs	r3, r1
 800b730:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b732:	430b      	orrs	r3, r1
 800b734:	d120      	bne.n	800b778 <_dtoa_r+0xa78>
 800b736:	2a00      	cmp	r2, #0
 800b738:	dded      	ble.n	800b716 <_dtoa_r+0xa16>
 800b73a:	4649      	mov	r1, r9
 800b73c:	2201      	movs	r2, #1
 800b73e:	4658      	mov	r0, fp
 800b740:	f000 fbb0 	bl	800bea4 <__lshift>
 800b744:	4621      	mov	r1, r4
 800b746:	4681      	mov	r9, r0
 800b748:	f000 fc18 	bl	800bf7c <__mcmp>
 800b74c:	2800      	cmp	r0, #0
 800b74e:	dc03      	bgt.n	800b758 <_dtoa_r+0xa58>
 800b750:	d1e1      	bne.n	800b716 <_dtoa_r+0xa16>
 800b752:	f018 0f01 	tst.w	r8, #1
 800b756:	d0de      	beq.n	800b716 <_dtoa_r+0xa16>
 800b758:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b75c:	d1d8      	bne.n	800b710 <_dtoa_r+0xa10>
 800b75e:	2339      	movs	r3, #57	@ 0x39
 800b760:	9a02      	ldr	r2, [sp, #8]
 800b762:	7013      	strb	r3, [r2, #0]
 800b764:	4633      	mov	r3, r6
 800b766:	461e      	mov	r6, r3
 800b768:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	2a39      	cmp	r2, #57	@ 0x39
 800b770:	d052      	beq.n	800b818 <_dtoa_r+0xb18>
 800b772:	3201      	adds	r2, #1
 800b774:	701a      	strb	r2, [r3, #0]
 800b776:	e60e      	b.n	800b396 <_dtoa_r+0x696>
 800b778:	2a00      	cmp	r2, #0
 800b77a:	dd07      	ble.n	800b78c <_dtoa_r+0xa8c>
 800b77c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b780:	d0ed      	beq.n	800b75e <_dtoa_r+0xa5e>
 800b782:	9a02      	ldr	r2, [sp, #8]
 800b784:	f108 0301 	add.w	r3, r8, #1
 800b788:	7013      	strb	r3, [r2, #0]
 800b78a:	e604      	b.n	800b396 <_dtoa_r+0x696>
 800b78c:	9b07      	ldr	r3, [sp, #28]
 800b78e:	9a07      	ldr	r2, [sp, #28]
 800b790:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b794:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b796:	4293      	cmp	r3, r2
 800b798:	d028      	beq.n	800b7ec <_dtoa_r+0xaec>
 800b79a:	4649      	mov	r1, r9
 800b79c:	2300      	movs	r3, #0
 800b79e:	220a      	movs	r2, #10
 800b7a0:	4658      	mov	r0, fp
 800b7a2:	f000 f9d5 	bl	800bb50 <__multadd>
 800b7a6:	42af      	cmp	r7, r5
 800b7a8:	4681      	mov	r9, r0
 800b7aa:	f04f 0300 	mov.w	r3, #0
 800b7ae:	f04f 020a 	mov.w	r2, #10
 800b7b2:	4639      	mov	r1, r7
 800b7b4:	4658      	mov	r0, fp
 800b7b6:	d107      	bne.n	800b7c8 <_dtoa_r+0xac8>
 800b7b8:	f000 f9ca 	bl	800bb50 <__multadd>
 800b7bc:	4607      	mov	r7, r0
 800b7be:	4605      	mov	r5, r0
 800b7c0:	9b07      	ldr	r3, [sp, #28]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	9307      	str	r3, [sp, #28]
 800b7c6:	e774      	b.n	800b6b2 <_dtoa_r+0x9b2>
 800b7c8:	f000 f9c2 	bl	800bb50 <__multadd>
 800b7cc:	4629      	mov	r1, r5
 800b7ce:	4607      	mov	r7, r0
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	220a      	movs	r2, #10
 800b7d4:	4658      	mov	r0, fp
 800b7d6:	f000 f9bb 	bl	800bb50 <__multadd>
 800b7da:	4605      	mov	r5, r0
 800b7dc:	e7f0      	b.n	800b7c0 <_dtoa_r+0xac0>
 800b7de:	9b08      	ldr	r3, [sp, #32]
 800b7e0:	2700      	movs	r7, #0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	bfcc      	ite	gt
 800b7e6:	461e      	movgt	r6, r3
 800b7e8:	2601      	movle	r6, #1
 800b7ea:	4456      	add	r6, sl
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	4658      	mov	r0, fp
 800b7f2:	f000 fb57 	bl	800bea4 <__lshift>
 800b7f6:	4621      	mov	r1, r4
 800b7f8:	4681      	mov	r9, r0
 800b7fa:	f000 fbbf 	bl	800bf7c <__mcmp>
 800b7fe:	2800      	cmp	r0, #0
 800b800:	dcb0      	bgt.n	800b764 <_dtoa_r+0xa64>
 800b802:	d102      	bne.n	800b80a <_dtoa_r+0xb0a>
 800b804:	f018 0f01 	tst.w	r8, #1
 800b808:	d1ac      	bne.n	800b764 <_dtoa_r+0xa64>
 800b80a:	4633      	mov	r3, r6
 800b80c:	461e      	mov	r6, r3
 800b80e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b812:	2a30      	cmp	r2, #48	@ 0x30
 800b814:	d0fa      	beq.n	800b80c <_dtoa_r+0xb0c>
 800b816:	e5be      	b.n	800b396 <_dtoa_r+0x696>
 800b818:	459a      	cmp	sl, r3
 800b81a:	d1a4      	bne.n	800b766 <_dtoa_r+0xa66>
 800b81c:	9b04      	ldr	r3, [sp, #16]
 800b81e:	3301      	adds	r3, #1
 800b820:	9304      	str	r3, [sp, #16]
 800b822:	2331      	movs	r3, #49	@ 0x31
 800b824:	f88a 3000 	strb.w	r3, [sl]
 800b828:	e5b5      	b.n	800b396 <_dtoa_r+0x696>
 800b82a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b82c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b88c <_dtoa_r+0xb8c>
 800b830:	b11b      	cbz	r3, 800b83a <_dtoa_r+0xb3a>
 800b832:	f10a 0308 	add.w	r3, sl, #8
 800b836:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b838:	6013      	str	r3, [r2, #0]
 800b83a:	4650      	mov	r0, sl
 800b83c:	b017      	add	sp, #92	@ 0x5c
 800b83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b842:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b844:	2b01      	cmp	r3, #1
 800b846:	f77f ae3d 	ble.w	800b4c4 <_dtoa_r+0x7c4>
 800b84a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b84c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b84e:	2001      	movs	r0, #1
 800b850:	e65b      	b.n	800b50a <_dtoa_r+0x80a>
 800b852:	9b08      	ldr	r3, [sp, #32]
 800b854:	2b00      	cmp	r3, #0
 800b856:	f77f aed6 	ble.w	800b606 <_dtoa_r+0x906>
 800b85a:	4656      	mov	r6, sl
 800b85c:	4621      	mov	r1, r4
 800b85e:	4648      	mov	r0, r9
 800b860:	f7ff f9c5 	bl	800abee <quorem>
 800b864:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b868:	9b08      	ldr	r3, [sp, #32]
 800b86a:	f806 8b01 	strb.w	r8, [r6], #1
 800b86e:	eba6 020a 	sub.w	r2, r6, sl
 800b872:	4293      	cmp	r3, r2
 800b874:	ddb3      	ble.n	800b7de <_dtoa_r+0xade>
 800b876:	4649      	mov	r1, r9
 800b878:	2300      	movs	r3, #0
 800b87a:	220a      	movs	r2, #10
 800b87c:	4658      	mov	r0, fp
 800b87e:	f000 f967 	bl	800bb50 <__multadd>
 800b882:	4681      	mov	r9, r0
 800b884:	e7ea      	b.n	800b85c <_dtoa_r+0xb5c>
 800b886:	bf00      	nop
 800b888:	0800cde6 	.word	0x0800cde6
 800b88c:	0800cd6a 	.word	0x0800cd6a

0800b890 <_free_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	4605      	mov	r5, r0
 800b894:	2900      	cmp	r1, #0
 800b896:	d040      	beq.n	800b91a <_free_r+0x8a>
 800b898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b89c:	1f0c      	subs	r4, r1, #4
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	bfb8      	it	lt
 800b8a2:	18e4      	addlt	r4, r4, r3
 800b8a4:	f000 f8e6 	bl	800ba74 <__malloc_lock>
 800b8a8:	4a1c      	ldr	r2, [pc, #112]	@ (800b91c <_free_r+0x8c>)
 800b8aa:	6813      	ldr	r3, [r2, #0]
 800b8ac:	b933      	cbnz	r3, 800b8bc <_free_r+0x2c>
 800b8ae:	6063      	str	r3, [r4, #4]
 800b8b0:	6014      	str	r4, [r2, #0]
 800b8b2:	4628      	mov	r0, r5
 800b8b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b8b8:	f000 b8e2 	b.w	800ba80 <__malloc_unlock>
 800b8bc:	42a3      	cmp	r3, r4
 800b8be:	d908      	bls.n	800b8d2 <_free_r+0x42>
 800b8c0:	6820      	ldr	r0, [r4, #0]
 800b8c2:	1821      	adds	r1, r4, r0
 800b8c4:	428b      	cmp	r3, r1
 800b8c6:	bf01      	itttt	eq
 800b8c8:	6819      	ldreq	r1, [r3, #0]
 800b8ca:	685b      	ldreq	r3, [r3, #4]
 800b8cc:	1809      	addeq	r1, r1, r0
 800b8ce:	6021      	streq	r1, [r4, #0]
 800b8d0:	e7ed      	b.n	800b8ae <_free_r+0x1e>
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	b10b      	cbz	r3, 800b8dc <_free_r+0x4c>
 800b8d8:	42a3      	cmp	r3, r4
 800b8da:	d9fa      	bls.n	800b8d2 <_free_r+0x42>
 800b8dc:	6811      	ldr	r1, [r2, #0]
 800b8de:	1850      	adds	r0, r2, r1
 800b8e0:	42a0      	cmp	r0, r4
 800b8e2:	d10b      	bne.n	800b8fc <_free_r+0x6c>
 800b8e4:	6820      	ldr	r0, [r4, #0]
 800b8e6:	4401      	add	r1, r0
 800b8e8:	1850      	adds	r0, r2, r1
 800b8ea:	4283      	cmp	r3, r0
 800b8ec:	6011      	str	r1, [r2, #0]
 800b8ee:	d1e0      	bne.n	800b8b2 <_free_r+0x22>
 800b8f0:	6818      	ldr	r0, [r3, #0]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	4408      	add	r0, r1
 800b8f6:	6010      	str	r0, [r2, #0]
 800b8f8:	6053      	str	r3, [r2, #4]
 800b8fa:	e7da      	b.n	800b8b2 <_free_r+0x22>
 800b8fc:	d902      	bls.n	800b904 <_free_r+0x74>
 800b8fe:	230c      	movs	r3, #12
 800b900:	602b      	str	r3, [r5, #0]
 800b902:	e7d6      	b.n	800b8b2 <_free_r+0x22>
 800b904:	6820      	ldr	r0, [r4, #0]
 800b906:	1821      	adds	r1, r4, r0
 800b908:	428b      	cmp	r3, r1
 800b90a:	bf01      	itttt	eq
 800b90c:	6819      	ldreq	r1, [r3, #0]
 800b90e:	685b      	ldreq	r3, [r3, #4]
 800b910:	1809      	addeq	r1, r1, r0
 800b912:	6021      	streq	r1, [r4, #0]
 800b914:	6063      	str	r3, [r4, #4]
 800b916:	6054      	str	r4, [r2, #4]
 800b918:	e7cb      	b.n	800b8b2 <_free_r+0x22>
 800b91a:	bd38      	pop	{r3, r4, r5, pc}
 800b91c:	20001808 	.word	0x20001808

0800b920 <malloc>:
 800b920:	4b02      	ldr	r3, [pc, #8]	@ (800b92c <malloc+0xc>)
 800b922:	4601      	mov	r1, r0
 800b924:	6818      	ldr	r0, [r3, #0]
 800b926:	f000 b825 	b.w	800b974 <_malloc_r>
 800b92a:	bf00      	nop
 800b92c:	2000019c 	.word	0x2000019c

0800b930 <sbrk_aligned>:
 800b930:	b570      	push	{r4, r5, r6, lr}
 800b932:	4e0f      	ldr	r6, [pc, #60]	@ (800b970 <sbrk_aligned+0x40>)
 800b934:	460c      	mov	r4, r1
 800b936:	6831      	ldr	r1, [r6, #0]
 800b938:	4605      	mov	r5, r0
 800b93a:	b911      	cbnz	r1, 800b942 <sbrk_aligned+0x12>
 800b93c:	f000 fe40 	bl	800c5c0 <_sbrk_r>
 800b940:	6030      	str	r0, [r6, #0]
 800b942:	4621      	mov	r1, r4
 800b944:	4628      	mov	r0, r5
 800b946:	f000 fe3b 	bl	800c5c0 <_sbrk_r>
 800b94a:	1c43      	adds	r3, r0, #1
 800b94c:	d103      	bne.n	800b956 <sbrk_aligned+0x26>
 800b94e:	f04f 34ff 	mov.w	r4, #4294967295
 800b952:	4620      	mov	r0, r4
 800b954:	bd70      	pop	{r4, r5, r6, pc}
 800b956:	1cc4      	adds	r4, r0, #3
 800b958:	f024 0403 	bic.w	r4, r4, #3
 800b95c:	42a0      	cmp	r0, r4
 800b95e:	d0f8      	beq.n	800b952 <sbrk_aligned+0x22>
 800b960:	1a21      	subs	r1, r4, r0
 800b962:	4628      	mov	r0, r5
 800b964:	f000 fe2c 	bl	800c5c0 <_sbrk_r>
 800b968:	3001      	adds	r0, #1
 800b96a:	d1f2      	bne.n	800b952 <sbrk_aligned+0x22>
 800b96c:	e7ef      	b.n	800b94e <sbrk_aligned+0x1e>
 800b96e:	bf00      	nop
 800b970:	20001804 	.word	0x20001804

0800b974 <_malloc_r>:
 800b974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b978:	1ccd      	adds	r5, r1, #3
 800b97a:	f025 0503 	bic.w	r5, r5, #3
 800b97e:	3508      	adds	r5, #8
 800b980:	2d0c      	cmp	r5, #12
 800b982:	bf38      	it	cc
 800b984:	250c      	movcc	r5, #12
 800b986:	2d00      	cmp	r5, #0
 800b988:	4606      	mov	r6, r0
 800b98a:	db01      	blt.n	800b990 <_malloc_r+0x1c>
 800b98c:	42a9      	cmp	r1, r5
 800b98e:	d904      	bls.n	800b99a <_malloc_r+0x26>
 800b990:	230c      	movs	r3, #12
 800b992:	6033      	str	r3, [r6, #0]
 800b994:	2000      	movs	r0, #0
 800b996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b99a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ba70 <_malloc_r+0xfc>
 800b99e:	f000 f869 	bl	800ba74 <__malloc_lock>
 800b9a2:	f8d8 3000 	ldr.w	r3, [r8]
 800b9a6:	461c      	mov	r4, r3
 800b9a8:	bb44      	cbnz	r4, 800b9fc <_malloc_r+0x88>
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	4630      	mov	r0, r6
 800b9ae:	f7ff ffbf 	bl	800b930 <sbrk_aligned>
 800b9b2:	1c43      	adds	r3, r0, #1
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	d158      	bne.n	800ba6a <_malloc_r+0xf6>
 800b9b8:	f8d8 4000 	ldr.w	r4, [r8]
 800b9bc:	4627      	mov	r7, r4
 800b9be:	2f00      	cmp	r7, #0
 800b9c0:	d143      	bne.n	800ba4a <_malloc_r+0xd6>
 800b9c2:	2c00      	cmp	r4, #0
 800b9c4:	d04b      	beq.n	800ba5e <_malloc_r+0xea>
 800b9c6:	6823      	ldr	r3, [r4, #0]
 800b9c8:	4639      	mov	r1, r7
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	eb04 0903 	add.w	r9, r4, r3
 800b9d0:	f000 fdf6 	bl	800c5c0 <_sbrk_r>
 800b9d4:	4581      	cmp	r9, r0
 800b9d6:	d142      	bne.n	800ba5e <_malloc_r+0xea>
 800b9d8:	6821      	ldr	r1, [r4, #0]
 800b9da:	4630      	mov	r0, r6
 800b9dc:	1a6d      	subs	r5, r5, r1
 800b9de:	4629      	mov	r1, r5
 800b9e0:	f7ff ffa6 	bl	800b930 <sbrk_aligned>
 800b9e4:	3001      	adds	r0, #1
 800b9e6:	d03a      	beq.n	800ba5e <_malloc_r+0xea>
 800b9e8:	6823      	ldr	r3, [r4, #0]
 800b9ea:	442b      	add	r3, r5
 800b9ec:	6023      	str	r3, [r4, #0]
 800b9ee:	f8d8 3000 	ldr.w	r3, [r8]
 800b9f2:	685a      	ldr	r2, [r3, #4]
 800b9f4:	bb62      	cbnz	r2, 800ba50 <_malloc_r+0xdc>
 800b9f6:	f8c8 7000 	str.w	r7, [r8]
 800b9fa:	e00f      	b.n	800ba1c <_malloc_r+0xa8>
 800b9fc:	6822      	ldr	r2, [r4, #0]
 800b9fe:	1b52      	subs	r2, r2, r5
 800ba00:	d420      	bmi.n	800ba44 <_malloc_r+0xd0>
 800ba02:	2a0b      	cmp	r2, #11
 800ba04:	d917      	bls.n	800ba36 <_malloc_r+0xc2>
 800ba06:	1961      	adds	r1, r4, r5
 800ba08:	42a3      	cmp	r3, r4
 800ba0a:	6025      	str	r5, [r4, #0]
 800ba0c:	bf18      	it	ne
 800ba0e:	6059      	strne	r1, [r3, #4]
 800ba10:	6863      	ldr	r3, [r4, #4]
 800ba12:	bf08      	it	eq
 800ba14:	f8c8 1000 	streq.w	r1, [r8]
 800ba18:	5162      	str	r2, [r4, r5]
 800ba1a:	604b      	str	r3, [r1, #4]
 800ba1c:	4630      	mov	r0, r6
 800ba1e:	f000 f82f 	bl	800ba80 <__malloc_unlock>
 800ba22:	f104 000b 	add.w	r0, r4, #11
 800ba26:	1d23      	adds	r3, r4, #4
 800ba28:	f020 0007 	bic.w	r0, r0, #7
 800ba2c:	1ac2      	subs	r2, r0, r3
 800ba2e:	bf1c      	itt	ne
 800ba30:	1a1b      	subne	r3, r3, r0
 800ba32:	50a3      	strne	r3, [r4, r2]
 800ba34:	e7af      	b.n	800b996 <_malloc_r+0x22>
 800ba36:	6862      	ldr	r2, [r4, #4]
 800ba38:	42a3      	cmp	r3, r4
 800ba3a:	bf0c      	ite	eq
 800ba3c:	f8c8 2000 	streq.w	r2, [r8]
 800ba40:	605a      	strne	r2, [r3, #4]
 800ba42:	e7eb      	b.n	800ba1c <_malloc_r+0xa8>
 800ba44:	4623      	mov	r3, r4
 800ba46:	6864      	ldr	r4, [r4, #4]
 800ba48:	e7ae      	b.n	800b9a8 <_malloc_r+0x34>
 800ba4a:	463c      	mov	r4, r7
 800ba4c:	687f      	ldr	r7, [r7, #4]
 800ba4e:	e7b6      	b.n	800b9be <_malloc_r+0x4a>
 800ba50:	461a      	mov	r2, r3
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	42a3      	cmp	r3, r4
 800ba56:	d1fb      	bne.n	800ba50 <_malloc_r+0xdc>
 800ba58:	2300      	movs	r3, #0
 800ba5a:	6053      	str	r3, [r2, #4]
 800ba5c:	e7de      	b.n	800ba1c <_malloc_r+0xa8>
 800ba5e:	230c      	movs	r3, #12
 800ba60:	4630      	mov	r0, r6
 800ba62:	6033      	str	r3, [r6, #0]
 800ba64:	f000 f80c 	bl	800ba80 <__malloc_unlock>
 800ba68:	e794      	b.n	800b994 <_malloc_r+0x20>
 800ba6a:	6005      	str	r5, [r0, #0]
 800ba6c:	e7d6      	b.n	800ba1c <_malloc_r+0xa8>
 800ba6e:	bf00      	nop
 800ba70:	20001808 	.word	0x20001808

0800ba74 <__malloc_lock>:
 800ba74:	4801      	ldr	r0, [pc, #4]	@ (800ba7c <__malloc_lock+0x8>)
 800ba76:	f7ff b8aa 	b.w	800abce <__retarget_lock_acquire_recursive>
 800ba7a:	bf00      	nop
 800ba7c:	20001800 	.word	0x20001800

0800ba80 <__malloc_unlock>:
 800ba80:	4801      	ldr	r0, [pc, #4]	@ (800ba88 <__malloc_unlock+0x8>)
 800ba82:	f7ff b8a5 	b.w	800abd0 <__retarget_lock_release_recursive>
 800ba86:	bf00      	nop
 800ba88:	20001800 	.word	0x20001800

0800ba8c <_Balloc>:
 800ba8c:	b570      	push	{r4, r5, r6, lr}
 800ba8e:	69c6      	ldr	r6, [r0, #28]
 800ba90:	4604      	mov	r4, r0
 800ba92:	460d      	mov	r5, r1
 800ba94:	b976      	cbnz	r6, 800bab4 <_Balloc+0x28>
 800ba96:	2010      	movs	r0, #16
 800ba98:	f7ff ff42 	bl	800b920 <malloc>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	61e0      	str	r0, [r4, #28]
 800baa0:	b920      	cbnz	r0, 800baac <_Balloc+0x20>
 800baa2:	216b      	movs	r1, #107	@ 0x6b
 800baa4:	4b17      	ldr	r3, [pc, #92]	@ (800bb04 <_Balloc+0x78>)
 800baa6:	4818      	ldr	r0, [pc, #96]	@ (800bb08 <_Balloc+0x7c>)
 800baa8:	f000 fda8 	bl	800c5fc <__assert_func>
 800baac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bab0:	6006      	str	r6, [r0, #0]
 800bab2:	60c6      	str	r6, [r0, #12]
 800bab4:	69e6      	ldr	r6, [r4, #28]
 800bab6:	68f3      	ldr	r3, [r6, #12]
 800bab8:	b183      	cbz	r3, 800badc <_Balloc+0x50>
 800baba:	69e3      	ldr	r3, [r4, #28]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bac2:	b9b8      	cbnz	r0, 800baf4 <_Balloc+0x68>
 800bac4:	2101      	movs	r1, #1
 800bac6:	fa01 f605 	lsl.w	r6, r1, r5
 800baca:	1d72      	adds	r2, r6, #5
 800bacc:	4620      	mov	r0, r4
 800bace:	0092      	lsls	r2, r2, #2
 800bad0:	f000 fdb2 	bl	800c638 <_calloc_r>
 800bad4:	b160      	cbz	r0, 800baf0 <_Balloc+0x64>
 800bad6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bada:	e00e      	b.n	800bafa <_Balloc+0x6e>
 800badc:	2221      	movs	r2, #33	@ 0x21
 800bade:	2104      	movs	r1, #4
 800bae0:	4620      	mov	r0, r4
 800bae2:	f000 fda9 	bl	800c638 <_calloc_r>
 800bae6:	69e3      	ldr	r3, [r4, #28]
 800bae8:	60f0      	str	r0, [r6, #12]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1e4      	bne.n	800baba <_Balloc+0x2e>
 800baf0:	2000      	movs	r0, #0
 800baf2:	bd70      	pop	{r4, r5, r6, pc}
 800baf4:	6802      	ldr	r2, [r0, #0]
 800baf6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bafa:	2300      	movs	r3, #0
 800bafc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb00:	e7f7      	b.n	800baf2 <_Balloc+0x66>
 800bb02:	bf00      	nop
 800bb04:	0800cd77 	.word	0x0800cd77
 800bb08:	0800cdf7 	.word	0x0800cdf7

0800bb0c <_Bfree>:
 800bb0c:	b570      	push	{r4, r5, r6, lr}
 800bb0e:	69c6      	ldr	r6, [r0, #28]
 800bb10:	4605      	mov	r5, r0
 800bb12:	460c      	mov	r4, r1
 800bb14:	b976      	cbnz	r6, 800bb34 <_Bfree+0x28>
 800bb16:	2010      	movs	r0, #16
 800bb18:	f7ff ff02 	bl	800b920 <malloc>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	61e8      	str	r0, [r5, #28]
 800bb20:	b920      	cbnz	r0, 800bb2c <_Bfree+0x20>
 800bb22:	218f      	movs	r1, #143	@ 0x8f
 800bb24:	4b08      	ldr	r3, [pc, #32]	@ (800bb48 <_Bfree+0x3c>)
 800bb26:	4809      	ldr	r0, [pc, #36]	@ (800bb4c <_Bfree+0x40>)
 800bb28:	f000 fd68 	bl	800c5fc <__assert_func>
 800bb2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb30:	6006      	str	r6, [r0, #0]
 800bb32:	60c6      	str	r6, [r0, #12]
 800bb34:	b13c      	cbz	r4, 800bb46 <_Bfree+0x3a>
 800bb36:	69eb      	ldr	r3, [r5, #28]
 800bb38:	6862      	ldr	r2, [r4, #4]
 800bb3a:	68db      	ldr	r3, [r3, #12]
 800bb3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb40:	6021      	str	r1, [r4, #0]
 800bb42:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb46:	bd70      	pop	{r4, r5, r6, pc}
 800bb48:	0800cd77 	.word	0x0800cd77
 800bb4c:	0800cdf7 	.word	0x0800cdf7

0800bb50 <__multadd>:
 800bb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb54:	4607      	mov	r7, r0
 800bb56:	460c      	mov	r4, r1
 800bb58:	461e      	mov	r6, r3
 800bb5a:	2000      	movs	r0, #0
 800bb5c:	690d      	ldr	r5, [r1, #16]
 800bb5e:	f101 0c14 	add.w	ip, r1, #20
 800bb62:	f8dc 3000 	ldr.w	r3, [ip]
 800bb66:	3001      	adds	r0, #1
 800bb68:	b299      	uxth	r1, r3
 800bb6a:	fb02 6101 	mla	r1, r2, r1, r6
 800bb6e:	0c1e      	lsrs	r6, r3, #16
 800bb70:	0c0b      	lsrs	r3, r1, #16
 800bb72:	fb02 3306 	mla	r3, r2, r6, r3
 800bb76:	b289      	uxth	r1, r1
 800bb78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb7c:	4285      	cmp	r5, r0
 800bb7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb82:	f84c 1b04 	str.w	r1, [ip], #4
 800bb86:	dcec      	bgt.n	800bb62 <__multadd+0x12>
 800bb88:	b30e      	cbz	r6, 800bbce <__multadd+0x7e>
 800bb8a:	68a3      	ldr	r3, [r4, #8]
 800bb8c:	42ab      	cmp	r3, r5
 800bb8e:	dc19      	bgt.n	800bbc4 <__multadd+0x74>
 800bb90:	6861      	ldr	r1, [r4, #4]
 800bb92:	4638      	mov	r0, r7
 800bb94:	3101      	adds	r1, #1
 800bb96:	f7ff ff79 	bl	800ba8c <_Balloc>
 800bb9a:	4680      	mov	r8, r0
 800bb9c:	b928      	cbnz	r0, 800bbaa <__multadd+0x5a>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	21ba      	movs	r1, #186	@ 0xba
 800bba2:	4b0c      	ldr	r3, [pc, #48]	@ (800bbd4 <__multadd+0x84>)
 800bba4:	480c      	ldr	r0, [pc, #48]	@ (800bbd8 <__multadd+0x88>)
 800bba6:	f000 fd29 	bl	800c5fc <__assert_func>
 800bbaa:	6922      	ldr	r2, [r4, #16]
 800bbac:	f104 010c 	add.w	r1, r4, #12
 800bbb0:	3202      	adds	r2, #2
 800bbb2:	0092      	lsls	r2, r2, #2
 800bbb4:	300c      	adds	r0, #12
 800bbb6:	f000 fd13 	bl	800c5e0 <memcpy>
 800bbba:	4621      	mov	r1, r4
 800bbbc:	4638      	mov	r0, r7
 800bbbe:	f7ff ffa5 	bl	800bb0c <_Bfree>
 800bbc2:	4644      	mov	r4, r8
 800bbc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bbc8:	3501      	adds	r5, #1
 800bbca:	615e      	str	r6, [r3, #20]
 800bbcc:	6125      	str	r5, [r4, #16]
 800bbce:	4620      	mov	r0, r4
 800bbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd4:	0800cde6 	.word	0x0800cde6
 800bbd8:	0800cdf7 	.word	0x0800cdf7

0800bbdc <__hi0bits>:
 800bbdc:	4603      	mov	r3, r0
 800bbde:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bbe2:	bf3a      	itte	cc
 800bbe4:	0403      	lslcc	r3, r0, #16
 800bbe6:	2010      	movcc	r0, #16
 800bbe8:	2000      	movcs	r0, #0
 800bbea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bbee:	bf3c      	itt	cc
 800bbf0:	021b      	lslcc	r3, r3, #8
 800bbf2:	3008      	addcc	r0, #8
 800bbf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bbf8:	bf3c      	itt	cc
 800bbfa:	011b      	lslcc	r3, r3, #4
 800bbfc:	3004      	addcc	r0, #4
 800bbfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc02:	bf3c      	itt	cc
 800bc04:	009b      	lslcc	r3, r3, #2
 800bc06:	3002      	addcc	r0, #2
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	db05      	blt.n	800bc18 <__hi0bits+0x3c>
 800bc0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bc10:	f100 0001 	add.w	r0, r0, #1
 800bc14:	bf08      	it	eq
 800bc16:	2020      	moveq	r0, #32
 800bc18:	4770      	bx	lr

0800bc1a <__lo0bits>:
 800bc1a:	6803      	ldr	r3, [r0, #0]
 800bc1c:	4602      	mov	r2, r0
 800bc1e:	f013 0007 	ands.w	r0, r3, #7
 800bc22:	d00b      	beq.n	800bc3c <__lo0bits+0x22>
 800bc24:	07d9      	lsls	r1, r3, #31
 800bc26:	d421      	bmi.n	800bc6c <__lo0bits+0x52>
 800bc28:	0798      	lsls	r0, r3, #30
 800bc2a:	bf49      	itett	mi
 800bc2c:	085b      	lsrmi	r3, r3, #1
 800bc2e:	089b      	lsrpl	r3, r3, #2
 800bc30:	2001      	movmi	r0, #1
 800bc32:	6013      	strmi	r3, [r2, #0]
 800bc34:	bf5c      	itt	pl
 800bc36:	2002      	movpl	r0, #2
 800bc38:	6013      	strpl	r3, [r2, #0]
 800bc3a:	4770      	bx	lr
 800bc3c:	b299      	uxth	r1, r3
 800bc3e:	b909      	cbnz	r1, 800bc44 <__lo0bits+0x2a>
 800bc40:	2010      	movs	r0, #16
 800bc42:	0c1b      	lsrs	r3, r3, #16
 800bc44:	b2d9      	uxtb	r1, r3
 800bc46:	b909      	cbnz	r1, 800bc4c <__lo0bits+0x32>
 800bc48:	3008      	adds	r0, #8
 800bc4a:	0a1b      	lsrs	r3, r3, #8
 800bc4c:	0719      	lsls	r1, r3, #28
 800bc4e:	bf04      	itt	eq
 800bc50:	091b      	lsreq	r3, r3, #4
 800bc52:	3004      	addeq	r0, #4
 800bc54:	0799      	lsls	r1, r3, #30
 800bc56:	bf04      	itt	eq
 800bc58:	089b      	lsreq	r3, r3, #2
 800bc5a:	3002      	addeq	r0, #2
 800bc5c:	07d9      	lsls	r1, r3, #31
 800bc5e:	d403      	bmi.n	800bc68 <__lo0bits+0x4e>
 800bc60:	085b      	lsrs	r3, r3, #1
 800bc62:	f100 0001 	add.w	r0, r0, #1
 800bc66:	d003      	beq.n	800bc70 <__lo0bits+0x56>
 800bc68:	6013      	str	r3, [r2, #0]
 800bc6a:	4770      	bx	lr
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	4770      	bx	lr
 800bc70:	2020      	movs	r0, #32
 800bc72:	4770      	bx	lr

0800bc74 <__i2b>:
 800bc74:	b510      	push	{r4, lr}
 800bc76:	460c      	mov	r4, r1
 800bc78:	2101      	movs	r1, #1
 800bc7a:	f7ff ff07 	bl	800ba8c <_Balloc>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	b928      	cbnz	r0, 800bc8e <__i2b+0x1a>
 800bc82:	f240 1145 	movw	r1, #325	@ 0x145
 800bc86:	4b04      	ldr	r3, [pc, #16]	@ (800bc98 <__i2b+0x24>)
 800bc88:	4804      	ldr	r0, [pc, #16]	@ (800bc9c <__i2b+0x28>)
 800bc8a:	f000 fcb7 	bl	800c5fc <__assert_func>
 800bc8e:	2301      	movs	r3, #1
 800bc90:	6144      	str	r4, [r0, #20]
 800bc92:	6103      	str	r3, [r0, #16]
 800bc94:	bd10      	pop	{r4, pc}
 800bc96:	bf00      	nop
 800bc98:	0800cde6 	.word	0x0800cde6
 800bc9c:	0800cdf7 	.word	0x0800cdf7

0800bca0 <__multiply>:
 800bca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca4:	4614      	mov	r4, r2
 800bca6:	690a      	ldr	r2, [r1, #16]
 800bca8:	6923      	ldr	r3, [r4, #16]
 800bcaa:	460f      	mov	r7, r1
 800bcac:	429a      	cmp	r2, r3
 800bcae:	bfa2      	ittt	ge
 800bcb0:	4623      	movge	r3, r4
 800bcb2:	460c      	movge	r4, r1
 800bcb4:	461f      	movge	r7, r3
 800bcb6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bcba:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bcbe:	68a3      	ldr	r3, [r4, #8]
 800bcc0:	6861      	ldr	r1, [r4, #4]
 800bcc2:	eb0a 0609 	add.w	r6, sl, r9
 800bcc6:	42b3      	cmp	r3, r6
 800bcc8:	b085      	sub	sp, #20
 800bcca:	bfb8      	it	lt
 800bccc:	3101      	addlt	r1, #1
 800bcce:	f7ff fedd 	bl	800ba8c <_Balloc>
 800bcd2:	b930      	cbnz	r0, 800bce2 <__multiply+0x42>
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bcda:	4b43      	ldr	r3, [pc, #268]	@ (800bde8 <__multiply+0x148>)
 800bcdc:	4843      	ldr	r0, [pc, #268]	@ (800bdec <__multiply+0x14c>)
 800bcde:	f000 fc8d 	bl	800c5fc <__assert_func>
 800bce2:	f100 0514 	add.w	r5, r0, #20
 800bce6:	462b      	mov	r3, r5
 800bce8:	2200      	movs	r2, #0
 800bcea:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bcee:	4543      	cmp	r3, r8
 800bcf0:	d321      	bcc.n	800bd36 <__multiply+0x96>
 800bcf2:	f107 0114 	add.w	r1, r7, #20
 800bcf6:	f104 0214 	add.w	r2, r4, #20
 800bcfa:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bcfe:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bd02:	9302      	str	r3, [sp, #8]
 800bd04:	1b13      	subs	r3, r2, r4
 800bd06:	3b15      	subs	r3, #21
 800bd08:	f023 0303 	bic.w	r3, r3, #3
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	f104 0715 	add.w	r7, r4, #21
 800bd12:	42ba      	cmp	r2, r7
 800bd14:	bf38      	it	cc
 800bd16:	2304      	movcc	r3, #4
 800bd18:	9301      	str	r3, [sp, #4]
 800bd1a:	9b02      	ldr	r3, [sp, #8]
 800bd1c:	9103      	str	r1, [sp, #12]
 800bd1e:	428b      	cmp	r3, r1
 800bd20:	d80c      	bhi.n	800bd3c <__multiply+0x9c>
 800bd22:	2e00      	cmp	r6, #0
 800bd24:	dd03      	ble.n	800bd2e <__multiply+0x8e>
 800bd26:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d05a      	beq.n	800bde4 <__multiply+0x144>
 800bd2e:	6106      	str	r6, [r0, #16]
 800bd30:	b005      	add	sp, #20
 800bd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd36:	f843 2b04 	str.w	r2, [r3], #4
 800bd3a:	e7d8      	b.n	800bcee <__multiply+0x4e>
 800bd3c:	f8b1 a000 	ldrh.w	sl, [r1]
 800bd40:	f1ba 0f00 	cmp.w	sl, #0
 800bd44:	d023      	beq.n	800bd8e <__multiply+0xee>
 800bd46:	46a9      	mov	r9, r5
 800bd48:	f04f 0c00 	mov.w	ip, #0
 800bd4c:	f104 0e14 	add.w	lr, r4, #20
 800bd50:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bd54:	f8d9 3000 	ldr.w	r3, [r9]
 800bd58:	fa1f fb87 	uxth.w	fp, r7
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	fb0a 330b 	mla	r3, sl, fp, r3
 800bd62:	4463      	add	r3, ip
 800bd64:	f8d9 c000 	ldr.w	ip, [r9]
 800bd68:	0c3f      	lsrs	r7, r7, #16
 800bd6a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bd6e:	fb0a c707 	mla	r7, sl, r7, ip
 800bd72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bd7c:	4572      	cmp	r2, lr
 800bd7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bd82:	f849 3b04 	str.w	r3, [r9], #4
 800bd86:	d8e3      	bhi.n	800bd50 <__multiply+0xb0>
 800bd88:	9b01      	ldr	r3, [sp, #4]
 800bd8a:	f845 c003 	str.w	ip, [r5, r3]
 800bd8e:	9b03      	ldr	r3, [sp, #12]
 800bd90:	3104      	adds	r1, #4
 800bd92:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bd96:	f1b9 0f00 	cmp.w	r9, #0
 800bd9a:	d021      	beq.n	800bde0 <__multiply+0x140>
 800bd9c:	46ae      	mov	lr, r5
 800bd9e:	f04f 0a00 	mov.w	sl, #0
 800bda2:	682b      	ldr	r3, [r5, #0]
 800bda4:	f104 0c14 	add.w	ip, r4, #20
 800bda8:	f8bc b000 	ldrh.w	fp, [ip]
 800bdac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	fb09 770b 	mla	r7, r9, fp, r7
 800bdb6:	4457      	add	r7, sl
 800bdb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bdbc:	f84e 3b04 	str.w	r3, [lr], #4
 800bdc0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bdc4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdc8:	f8be 3000 	ldrh.w	r3, [lr]
 800bdcc:	4562      	cmp	r2, ip
 800bdce:	fb09 330a 	mla	r3, r9, sl, r3
 800bdd2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bdd6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bdda:	d8e5      	bhi.n	800bda8 <__multiply+0x108>
 800bddc:	9f01      	ldr	r7, [sp, #4]
 800bdde:	51eb      	str	r3, [r5, r7]
 800bde0:	3504      	adds	r5, #4
 800bde2:	e79a      	b.n	800bd1a <__multiply+0x7a>
 800bde4:	3e01      	subs	r6, #1
 800bde6:	e79c      	b.n	800bd22 <__multiply+0x82>
 800bde8:	0800cde6 	.word	0x0800cde6
 800bdec:	0800cdf7 	.word	0x0800cdf7

0800bdf0 <__pow5mult>:
 800bdf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdf4:	4615      	mov	r5, r2
 800bdf6:	f012 0203 	ands.w	r2, r2, #3
 800bdfa:	4607      	mov	r7, r0
 800bdfc:	460e      	mov	r6, r1
 800bdfe:	d007      	beq.n	800be10 <__pow5mult+0x20>
 800be00:	4c25      	ldr	r4, [pc, #148]	@ (800be98 <__pow5mult+0xa8>)
 800be02:	3a01      	subs	r2, #1
 800be04:	2300      	movs	r3, #0
 800be06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be0a:	f7ff fea1 	bl	800bb50 <__multadd>
 800be0e:	4606      	mov	r6, r0
 800be10:	10ad      	asrs	r5, r5, #2
 800be12:	d03d      	beq.n	800be90 <__pow5mult+0xa0>
 800be14:	69fc      	ldr	r4, [r7, #28]
 800be16:	b97c      	cbnz	r4, 800be38 <__pow5mult+0x48>
 800be18:	2010      	movs	r0, #16
 800be1a:	f7ff fd81 	bl	800b920 <malloc>
 800be1e:	4602      	mov	r2, r0
 800be20:	61f8      	str	r0, [r7, #28]
 800be22:	b928      	cbnz	r0, 800be30 <__pow5mult+0x40>
 800be24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800be28:	4b1c      	ldr	r3, [pc, #112]	@ (800be9c <__pow5mult+0xac>)
 800be2a:	481d      	ldr	r0, [pc, #116]	@ (800bea0 <__pow5mult+0xb0>)
 800be2c:	f000 fbe6 	bl	800c5fc <__assert_func>
 800be30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be34:	6004      	str	r4, [r0, #0]
 800be36:	60c4      	str	r4, [r0, #12]
 800be38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800be3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be40:	b94c      	cbnz	r4, 800be56 <__pow5mult+0x66>
 800be42:	f240 2171 	movw	r1, #625	@ 0x271
 800be46:	4638      	mov	r0, r7
 800be48:	f7ff ff14 	bl	800bc74 <__i2b>
 800be4c:	2300      	movs	r3, #0
 800be4e:	4604      	mov	r4, r0
 800be50:	f8c8 0008 	str.w	r0, [r8, #8]
 800be54:	6003      	str	r3, [r0, #0]
 800be56:	f04f 0900 	mov.w	r9, #0
 800be5a:	07eb      	lsls	r3, r5, #31
 800be5c:	d50a      	bpl.n	800be74 <__pow5mult+0x84>
 800be5e:	4631      	mov	r1, r6
 800be60:	4622      	mov	r2, r4
 800be62:	4638      	mov	r0, r7
 800be64:	f7ff ff1c 	bl	800bca0 <__multiply>
 800be68:	4680      	mov	r8, r0
 800be6a:	4631      	mov	r1, r6
 800be6c:	4638      	mov	r0, r7
 800be6e:	f7ff fe4d 	bl	800bb0c <_Bfree>
 800be72:	4646      	mov	r6, r8
 800be74:	106d      	asrs	r5, r5, #1
 800be76:	d00b      	beq.n	800be90 <__pow5mult+0xa0>
 800be78:	6820      	ldr	r0, [r4, #0]
 800be7a:	b938      	cbnz	r0, 800be8c <__pow5mult+0x9c>
 800be7c:	4622      	mov	r2, r4
 800be7e:	4621      	mov	r1, r4
 800be80:	4638      	mov	r0, r7
 800be82:	f7ff ff0d 	bl	800bca0 <__multiply>
 800be86:	6020      	str	r0, [r4, #0]
 800be88:	f8c0 9000 	str.w	r9, [r0]
 800be8c:	4604      	mov	r4, r0
 800be8e:	e7e4      	b.n	800be5a <__pow5mult+0x6a>
 800be90:	4630      	mov	r0, r6
 800be92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be96:	bf00      	nop
 800be98:	0800ce50 	.word	0x0800ce50
 800be9c:	0800cd77 	.word	0x0800cd77
 800bea0:	0800cdf7 	.word	0x0800cdf7

0800bea4 <__lshift>:
 800bea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bea8:	460c      	mov	r4, r1
 800beaa:	4607      	mov	r7, r0
 800beac:	4691      	mov	r9, r2
 800beae:	6923      	ldr	r3, [r4, #16]
 800beb0:	6849      	ldr	r1, [r1, #4]
 800beb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800beb6:	68a3      	ldr	r3, [r4, #8]
 800beb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bebc:	f108 0601 	add.w	r6, r8, #1
 800bec0:	42b3      	cmp	r3, r6
 800bec2:	db0b      	blt.n	800bedc <__lshift+0x38>
 800bec4:	4638      	mov	r0, r7
 800bec6:	f7ff fde1 	bl	800ba8c <_Balloc>
 800beca:	4605      	mov	r5, r0
 800becc:	b948      	cbnz	r0, 800bee2 <__lshift+0x3e>
 800bece:	4602      	mov	r2, r0
 800bed0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bed4:	4b27      	ldr	r3, [pc, #156]	@ (800bf74 <__lshift+0xd0>)
 800bed6:	4828      	ldr	r0, [pc, #160]	@ (800bf78 <__lshift+0xd4>)
 800bed8:	f000 fb90 	bl	800c5fc <__assert_func>
 800bedc:	3101      	adds	r1, #1
 800bede:	005b      	lsls	r3, r3, #1
 800bee0:	e7ee      	b.n	800bec0 <__lshift+0x1c>
 800bee2:	2300      	movs	r3, #0
 800bee4:	f100 0114 	add.w	r1, r0, #20
 800bee8:	f100 0210 	add.w	r2, r0, #16
 800beec:	4618      	mov	r0, r3
 800beee:	4553      	cmp	r3, sl
 800bef0:	db33      	blt.n	800bf5a <__lshift+0xb6>
 800bef2:	6920      	ldr	r0, [r4, #16]
 800bef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bef8:	f104 0314 	add.w	r3, r4, #20
 800befc:	f019 091f 	ands.w	r9, r9, #31
 800bf00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf08:	d02b      	beq.n	800bf62 <__lshift+0xbe>
 800bf0a:	468a      	mov	sl, r1
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f1c9 0e20 	rsb	lr, r9, #32
 800bf12:	6818      	ldr	r0, [r3, #0]
 800bf14:	fa00 f009 	lsl.w	r0, r0, r9
 800bf18:	4310      	orrs	r0, r2
 800bf1a:	f84a 0b04 	str.w	r0, [sl], #4
 800bf1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf22:	459c      	cmp	ip, r3
 800bf24:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf28:	d8f3      	bhi.n	800bf12 <__lshift+0x6e>
 800bf2a:	ebac 0304 	sub.w	r3, ip, r4
 800bf2e:	3b15      	subs	r3, #21
 800bf30:	f023 0303 	bic.w	r3, r3, #3
 800bf34:	3304      	adds	r3, #4
 800bf36:	f104 0015 	add.w	r0, r4, #21
 800bf3a:	4584      	cmp	ip, r0
 800bf3c:	bf38      	it	cc
 800bf3e:	2304      	movcc	r3, #4
 800bf40:	50ca      	str	r2, [r1, r3]
 800bf42:	b10a      	cbz	r2, 800bf48 <__lshift+0xa4>
 800bf44:	f108 0602 	add.w	r6, r8, #2
 800bf48:	3e01      	subs	r6, #1
 800bf4a:	4638      	mov	r0, r7
 800bf4c:	4621      	mov	r1, r4
 800bf4e:	612e      	str	r6, [r5, #16]
 800bf50:	f7ff fddc 	bl	800bb0c <_Bfree>
 800bf54:	4628      	mov	r0, r5
 800bf56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf5e:	3301      	adds	r3, #1
 800bf60:	e7c5      	b.n	800beee <__lshift+0x4a>
 800bf62:	3904      	subs	r1, #4
 800bf64:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf68:	459c      	cmp	ip, r3
 800bf6a:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf6e:	d8f9      	bhi.n	800bf64 <__lshift+0xc0>
 800bf70:	e7ea      	b.n	800bf48 <__lshift+0xa4>
 800bf72:	bf00      	nop
 800bf74:	0800cde6 	.word	0x0800cde6
 800bf78:	0800cdf7 	.word	0x0800cdf7

0800bf7c <__mcmp>:
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	690a      	ldr	r2, [r1, #16]
 800bf80:	6900      	ldr	r0, [r0, #16]
 800bf82:	b530      	push	{r4, r5, lr}
 800bf84:	1a80      	subs	r0, r0, r2
 800bf86:	d10e      	bne.n	800bfa6 <__mcmp+0x2a>
 800bf88:	3314      	adds	r3, #20
 800bf8a:	3114      	adds	r1, #20
 800bf8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bf90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bf94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bf98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bf9c:	4295      	cmp	r5, r2
 800bf9e:	d003      	beq.n	800bfa8 <__mcmp+0x2c>
 800bfa0:	d205      	bcs.n	800bfae <__mcmp+0x32>
 800bfa2:	f04f 30ff 	mov.w	r0, #4294967295
 800bfa6:	bd30      	pop	{r4, r5, pc}
 800bfa8:	42a3      	cmp	r3, r4
 800bfaa:	d3f3      	bcc.n	800bf94 <__mcmp+0x18>
 800bfac:	e7fb      	b.n	800bfa6 <__mcmp+0x2a>
 800bfae:	2001      	movs	r0, #1
 800bfb0:	e7f9      	b.n	800bfa6 <__mcmp+0x2a>
	...

0800bfb4 <__mdiff>:
 800bfb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb8:	4689      	mov	r9, r1
 800bfba:	4606      	mov	r6, r0
 800bfbc:	4611      	mov	r1, r2
 800bfbe:	4648      	mov	r0, r9
 800bfc0:	4614      	mov	r4, r2
 800bfc2:	f7ff ffdb 	bl	800bf7c <__mcmp>
 800bfc6:	1e05      	subs	r5, r0, #0
 800bfc8:	d112      	bne.n	800bff0 <__mdiff+0x3c>
 800bfca:	4629      	mov	r1, r5
 800bfcc:	4630      	mov	r0, r6
 800bfce:	f7ff fd5d 	bl	800ba8c <_Balloc>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	b928      	cbnz	r0, 800bfe2 <__mdiff+0x2e>
 800bfd6:	f240 2137 	movw	r1, #567	@ 0x237
 800bfda:	4b3e      	ldr	r3, [pc, #248]	@ (800c0d4 <__mdiff+0x120>)
 800bfdc:	483e      	ldr	r0, [pc, #248]	@ (800c0d8 <__mdiff+0x124>)
 800bfde:	f000 fb0d 	bl	800c5fc <__assert_func>
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfe8:	4610      	mov	r0, r2
 800bfea:	b003      	add	sp, #12
 800bfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff0:	bfbc      	itt	lt
 800bff2:	464b      	movlt	r3, r9
 800bff4:	46a1      	movlt	r9, r4
 800bff6:	4630      	mov	r0, r6
 800bff8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bffc:	bfba      	itte	lt
 800bffe:	461c      	movlt	r4, r3
 800c000:	2501      	movlt	r5, #1
 800c002:	2500      	movge	r5, #0
 800c004:	f7ff fd42 	bl	800ba8c <_Balloc>
 800c008:	4602      	mov	r2, r0
 800c00a:	b918      	cbnz	r0, 800c014 <__mdiff+0x60>
 800c00c:	f240 2145 	movw	r1, #581	@ 0x245
 800c010:	4b30      	ldr	r3, [pc, #192]	@ (800c0d4 <__mdiff+0x120>)
 800c012:	e7e3      	b.n	800bfdc <__mdiff+0x28>
 800c014:	f100 0b14 	add.w	fp, r0, #20
 800c018:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c01c:	f109 0310 	add.w	r3, r9, #16
 800c020:	60c5      	str	r5, [r0, #12]
 800c022:	f04f 0c00 	mov.w	ip, #0
 800c026:	f109 0514 	add.w	r5, r9, #20
 800c02a:	46d9      	mov	r9, fp
 800c02c:	6926      	ldr	r6, [r4, #16]
 800c02e:	f104 0e14 	add.w	lr, r4, #20
 800c032:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c036:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c03a:	9301      	str	r3, [sp, #4]
 800c03c:	9b01      	ldr	r3, [sp, #4]
 800c03e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c042:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c046:	b281      	uxth	r1, r0
 800c048:	9301      	str	r3, [sp, #4]
 800c04a:	fa1f f38a 	uxth.w	r3, sl
 800c04e:	1a5b      	subs	r3, r3, r1
 800c050:	0c00      	lsrs	r0, r0, #16
 800c052:	4463      	add	r3, ip
 800c054:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c058:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c062:	4576      	cmp	r6, lr
 800c064:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c068:	f849 3b04 	str.w	r3, [r9], #4
 800c06c:	d8e6      	bhi.n	800c03c <__mdiff+0x88>
 800c06e:	1b33      	subs	r3, r6, r4
 800c070:	3b15      	subs	r3, #21
 800c072:	f023 0303 	bic.w	r3, r3, #3
 800c076:	3415      	adds	r4, #21
 800c078:	3304      	adds	r3, #4
 800c07a:	42a6      	cmp	r6, r4
 800c07c:	bf38      	it	cc
 800c07e:	2304      	movcc	r3, #4
 800c080:	441d      	add	r5, r3
 800c082:	445b      	add	r3, fp
 800c084:	461e      	mov	r6, r3
 800c086:	462c      	mov	r4, r5
 800c088:	4544      	cmp	r4, r8
 800c08a:	d30e      	bcc.n	800c0aa <__mdiff+0xf6>
 800c08c:	f108 0103 	add.w	r1, r8, #3
 800c090:	1b49      	subs	r1, r1, r5
 800c092:	f021 0103 	bic.w	r1, r1, #3
 800c096:	3d03      	subs	r5, #3
 800c098:	45a8      	cmp	r8, r5
 800c09a:	bf38      	it	cc
 800c09c:	2100      	movcc	r1, #0
 800c09e:	440b      	add	r3, r1
 800c0a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0a4:	b199      	cbz	r1, 800c0ce <__mdiff+0x11a>
 800c0a6:	6117      	str	r7, [r2, #16]
 800c0a8:	e79e      	b.n	800bfe8 <__mdiff+0x34>
 800c0aa:	46e6      	mov	lr, ip
 800c0ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800c0b0:	fa1f fc81 	uxth.w	ip, r1
 800c0b4:	44f4      	add	ip, lr
 800c0b6:	0c08      	lsrs	r0, r1, #16
 800c0b8:	4471      	add	r1, lr
 800c0ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c0be:	b289      	uxth	r1, r1
 800c0c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c0c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c0c8:	f846 1b04 	str.w	r1, [r6], #4
 800c0cc:	e7dc      	b.n	800c088 <__mdiff+0xd4>
 800c0ce:	3f01      	subs	r7, #1
 800c0d0:	e7e6      	b.n	800c0a0 <__mdiff+0xec>
 800c0d2:	bf00      	nop
 800c0d4:	0800cde6 	.word	0x0800cde6
 800c0d8:	0800cdf7 	.word	0x0800cdf7

0800c0dc <__d2b>:
 800c0dc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c0e0:	2101      	movs	r1, #1
 800c0e2:	4690      	mov	r8, r2
 800c0e4:	4699      	mov	r9, r3
 800c0e6:	9e08      	ldr	r6, [sp, #32]
 800c0e8:	f7ff fcd0 	bl	800ba8c <_Balloc>
 800c0ec:	4604      	mov	r4, r0
 800c0ee:	b930      	cbnz	r0, 800c0fe <__d2b+0x22>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	f240 310f 	movw	r1, #783	@ 0x30f
 800c0f6:	4b23      	ldr	r3, [pc, #140]	@ (800c184 <__d2b+0xa8>)
 800c0f8:	4823      	ldr	r0, [pc, #140]	@ (800c188 <__d2b+0xac>)
 800c0fa:	f000 fa7f 	bl	800c5fc <__assert_func>
 800c0fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c102:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c106:	b10d      	cbz	r5, 800c10c <__d2b+0x30>
 800c108:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c10c:	9301      	str	r3, [sp, #4]
 800c10e:	f1b8 0300 	subs.w	r3, r8, #0
 800c112:	d024      	beq.n	800c15e <__d2b+0x82>
 800c114:	4668      	mov	r0, sp
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	f7ff fd7f 	bl	800bc1a <__lo0bits>
 800c11c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c120:	b1d8      	cbz	r0, 800c15a <__d2b+0x7e>
 800c122:	f1c0 0320 	rsb	r3, r0, #32
 800c126:	fa02 f303 	lsl.w	r3, r2, r3
 800c12a:	430b      	orrs	r3, r1
 800c12c:	40c2      	lsrs	r2, r0
 800c12e:	6163      	str	r3, [r4, #20]
 800c130:	9201      	str	r2, [sp, #4]
 800c132:	9b01      	ldr	r3, [sp, #4]
 800c134:	2b00      	cmp	r3, #0
 800c136:	bf0c      	ite	eq
 800c138:	2201      	moveq	r2, #1
 800c13a:	2202      	movne	r2, #2
 800c13c:	61a3      	str	r3, [r4, #24]
 800c13e:	6122      	str	r2, [r4, #16]
 800c140:	b1ad      	cbz	r5, 800c16e <__d2b+0x92>
 800c142:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c146:	4405      	add	r5, r0
 800c148:	6035      	str	r5, [r6, #0]
 800c14a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c150:	6018      	str	r0, [r3, #0]
 800c152:	4620      	mov	r0, r4
 800c154:	b002      	add	sp, #8
 800c156:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c15a:	6161      	str	r1, [r4, #20]
 800c15c:	e7e9      	b.n	800c132 <__d2b+0x56>
 800c15e:	a801      	add	r0, sp, #4
 800c160:	f7ff fd5b 	bl	800bc1a <__lo0bits>
 800c164:	9b01      	ldr	r3, [sp, #4]
 800c166:	2201      	movs	r2, #1
 800c168:	6163      	str	r3, [r4, #20]
 800c16a:	3020      	adds	r0, #32
 800c16c:	e7e7      	b.n	800c13e <__d2b+0x62>
 800c16e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c172:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c176:	6030      	str	r0, [r6, #0]
 800c178:	6918      	ldr	r0, [r3, #16]
 800c17a:	f7ff fd2f 	bl	800bbdc <__hi0bits>
 800c17e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c182:	e7e4      	b.n	800c14e <__d2b+0x72>
 800c184:	0800cde6 	.word	0x0800cde6
 800c188:	0800cdf7 	.word	0x0800cdf7

0800c18c <__ssputs_r>:
 800c18c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c190:	461f      	mov	r7, r3
 800c192:	688e      	ldr	r6, [r1, #8]
 800c194:	4682      	mov	sl, r0
 800c196:	42be      	cmp	r6, r7
 800c198:	460c      	mov	r4, r1
 800c19a:	4690      	mov	r8, r2
 800c19c:	680b      	ldr	r3, [r1, #0]
 800c19e:	d82d      	bhi.n	800c1fc <__ssputs_r+0x70>
 800c1a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c1a8:	d026      	beq.n	800c1f8 <__ssputs_r+0x6c>
 800c1aa:	6965      	ldr	r5, [r4, #20]
 800c1ac:	6909      	ldr	r1, [r1, #16]
 800c1ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1b2:	eba3 0901 	sub.w	r9, r3, r1
 800c1b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1ba:	1c7b      	adds	r3, r7, #1
 800c1bc:	444b      	add	r3, r9
 800c1be:	106d      	asrs	r5, r5, #1
 800c1c0:	429d      	cmp	r5, r3
 800c1c2:	bf38      	it	cc
 800c1c4:	461d      	movcc	r5, r3
 800c1c6:	0553      	lsls	r3, r2, #21
 800c1c8:	d527      	bpl.n	800c21a <__ssputs_r+0x8e>
 800c1ca:	4629      	mov	r1, r5
 800c1cc:	f7ff fbd2 	bl	800b974 <_malloc_r>
 800c1d0:	4606      	mov	r6, r0
 800c1d2:	b360      	cbz	r0, 800c22e <__ssputs_r+0xa2>
 800c1d4:	464a      	mov	r2, r9
 800c1d6:	6921      	ldr	r1, [r4, #16]
 800c1d8:	f000 fa02 	bl	800c5e0 <memcpy>
 800c1dc:	89a3      	ldrh	r3, [r4, #12]
 800c1de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c1e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1e6:	81a3      	strh	r3, [r4, #12]
 800c1e8:	6126      	str	r6, [r4, #16]
 800c1ea:	444e      	add	r6, r9
 800c1ec:	6026      	str	r6, [r4, #0]
 800c1ee:	463e      	mov	r6, r7
 800c1f0:	6165      	str	r5, [r4, #20]
 800c1f2:	eba5 0509 	sub.w	r5, r5, r9
 800c1f6:	60a5      	str	r5, [r4, #8]
 800c1f8:	42be      	cmp	r6, r7
 800c1fa:	d900      	bls.n	800c1fe <__ssputs_r+0x72>
 800c1fc:	463e      	mov	r6, r7
 800c1fe:	4632      	mov	r2, r6
 800c200:	4641      	mov	r1, r8
 800c202:	6820      	ldr	r0, [r4, #0]
 800c204:	f000 f9c2 	bl	800c58c <memmove>
 800c208:	2000      	movs	r0, #0
 800c20a:	68a3      	ldr	r3, [r4, #8]
 800c20c:	1b9b      	subs	r3, r3, r6
 800c20e:	60a3      	str	r3, [r4, #8]
 800c210:	6823      	ldr	r3, [r4, #0]
 800c212:	4433      	add	r3, r6
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c21a:	462a      	mov	r2, r5
 800c21c:	f000 fa32 	bl	800c684 <_realloc_r>
 800c220:	4606      	mov	r6, r0
 800c222:	2800      	cmp	r0, #0
 800c224:	d1e0      	bne.n	800c1e8 <__ssputs_r+0x5c>
 800c226:	4650      	mov	r0, sl
 800c228:	6921      	ldr	r1, [r4, #16]
 800c22a:	f7ff fb31 	bl	800b890 <_free_r>
 800c22e:	230c      	movs	r3, #12
 800c230:	f8ca 3000 	str.w	r3, [sl]
 800c234:	89a3      	ldrh	r3, [r4, #12]
 800c236:	f04f 30ff 	mov.w	r0, #4294967295
 800c23a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c23e:	81a3      	strh	r3, [r4, #12]
 800c240:	e7e9      	b.n	800c216 <__ssputs_r+0x8a>
	...

0800c244 <_svfiprintf_r>:
 800c244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c248:	4698      	mov	r8, r3
 800c24a:	898b      	ldrh	r3, [r1, #12]
 800c24c:	4607      	mov	r7, r0
 800c24e:	061b      	lsls	r3, r3, #24
 800c250:	460d      	mov	r5, r1
 800c252:	4614      	mov	r4, r2
 800c254:	b09d      	sub	sp, #116	@ 0x74
 800c256:	d510      	bpl.n	800c27a <_svfiprintf_r+0x36>
 800c258:	690b      	ldr	r3, [r1, #16]
 800c25a:	b973      	cbnz	r3, 800c27a <_svfiprintf_r+0x36>
 800c25c:	2140      	movs	r1, #64	@ 0x40
 800c25e:	f7ff fb89 	bl	800b974 <_malloc_r>
 800c262:	6028      	str	r0, [r5, #0]
 800c264:	6128      	str	r0, [r5, #16]
 800c266:	b930      	cbnz	r0, 800c276 <_svfiprintf_r+0x32>
 800c268:	230c      	movs	r3, #12
 800c26a:	603b      	str	r3, [r7, #0]
 800c26c:	f04f 30ff 	mov.w	r0, #4294967295
 800c270:	b01d      	add	sp, #116	@ 0x74
 800c272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c276:	2340      	movs	r3, #64	@ 0x40
 800c278:	616b      	str	r3, [r5, #20]
 800c27a:	2300      	movs	r3, #0
 800c27c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c27e:	2320      	movs	r3, #32
 800c280:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c284:	2330      	movs	r3, #48	@ 0x30
 800c286:	f04f 0901 	mov.w	r9, #1
 800c28a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c28e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c428 <_svfiprintf_r+0x1e4>
 800c292:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c296:	4623      	mov	r3, r4
 800c298:	469a      	mov	sl, r3
 800c29a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c29e:	b10a      	cbz	r2, 800c2a4 <_svfiprintf_r+0x60>
 800c2a0:	2a25      	cmp	r2, #37	@ 0x25
 800c2a2:	d1f9      	bne.n	800c298 <_svfiprintf_r+0x54>
 800c2a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c2a8:	d00b      	beq.n	800c2c2 <_svfiprintf_r+0x7e>
 800c2aa:	465b      	mov	r3, fp
 800c2ac:	4622      	mov	r2, r4
 800c2ae:	4629      	mov	r1, r5
 800c2b0:	4638      	mov	r0, r7
 800c2b2:	f7ff ff6b 	bl	800c18c <__ssputs_r>
 800c2b6:	3001      	adds	r0, #1
 800c2b8:	f000 80a7 	beq.w	800c40a <_svfiprintf_r+0x1c6>
 800c2bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2be:	445a      	add	r2, fp
 800c2c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	f000 809f 	beq.w	800c40a <_svfiprintf_r+0x1c6>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c2d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2d6:	f10a 0a01 	add.w	sl, sl, #1
 800c2da:	9304      	str	r3, [sp, #16]
 800c2dc:	9307      	str	r3, [sp, #28]
 800c2de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2e4:	4654      	mov	r4, sl
 800c2e6:	2205      	movs	r2, #5
 800c2e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ec:	484e      	ldr	r0, [pc, #312]	@ (800c428 <_svfiprintf_r+0x1e4>)
 800c2ee:	f7fe fc70 	bl	800abd2 <memchr>
 800c2f2:	9a04      	ldr	r2, [sp, #16]
 800c2f4:	b9d8      	cbnz	r0, 800c32e <_svfiprintf_r+0xea>
 800c2f6:	06d0      	lsls	r0, r2, #27
 800c2f8:	bf44      	itt	mi
 800c2fa:	2320      	movmi	r3, #32
 800c2fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c300:	0711      	lsls	r1, r2, #28
 800c302:	bf44      	itt	mi
 800c304:	232b      	movmi	r3, #43	@ 0x2b
 800c306:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c30a:	f89a 3000 	ldrb.w	r3, [sl]
 800c30e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c310:	d015      	beq.n	800c33e <_svfiprintf_r+0xfa>
 800c312:	4654      	mov	r4, sl
 800c314:	2000      	movs	r0, #0
 800c316:	f04f 0c0a 	mov.w	ip, #10
 800c31a:	9a07      	ldr	r2, [sp, #28]
 800c31c:	4621      	mov	r1, r4
 800c31e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c322:	3b30      	subs	r3, #48	@ 0x30
 800c324:	2b09      	cmp	r3, #9
 800c326:	d94b      	bls.n	800c3c0 <_svfiprintf_r+0x17c>
 800c328:	b1b0      	cbz	r0, 800c358 <_svfiprintf_r+0x114>
 800c32a:	9207      	str	r2, [sp, #28]
 800c32c:	e014      	b.n	800c358 <_svfiprintf_r+0x114>
 800c32e:	eba0 0308 	sub.w	r3, r0, r8
 800c332:	fa09 f303 	lsl.w	r3, r9, r3
 800c336:	4313      	orrs	r3, r2
 800c338:	46a2      	mov	sl, r4
 800c33a:	9304      	str	r3, [sp, #16]
 800c33c:	e7d2      	b.n	800c2e4 <_svfiprintf_r+0xa0>
 800c33e:	9b03      	ldr	r3, [sp, #12]
 800c340:	1d19      	adds	r1, r3, #4
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	9103      	str	r1, [sp, #12]
 800c346:	2b00      	cmp	r3, #0
 800c348:	bfbb      	ittet	lt
 800c34a:	425b      	neglt	r3, r3
 800c34c:	f042 0202 	orrlt.w	r2, r2, #2
 800c350:	9307      	strge	r3, [sp, #28]
 800c352:	9307      	strlt	r3, [sp, #28]
 800c354:	bfb8      	it	lt
 800c356:	9204      	strlt	r2, [sp, #16]
 800c358:	7823      	ldrb	r3, [r4, #0]
 800c35a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c35c:	d10a      	bne.n	800c374 <_svfiprintf_r+0x130>
 800c35e:	7863      	ldrb	r3, [r4, #1]
 800c360:	2b2a      	cmp	r3, #42	@ 0x2a
 800c362:	d132      	bne.n	800c3ca <_svfiprintf_r+0x186>
 800c364:	9b03      	ldr	r3, [sp, #12]
 800c366:	3402      	adds	r4, #2
 800c368:	1d1a      	adds	r2, r3, #4
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	9203      	str	r2, [sp, #12]
 800c36e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c372:	9305      	str	r3, [sp, #20]
 800c374:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c42c <_svfiprintf_r+0x1e8>
 800c378:	2203      	movs	r2, #3
 800c37a:	4650      	mov	r0, sl
 800c37c:	7821      	ldrb	r1, [r4, #0]
 800c37e:	f7fe fc28 	bl	800abd2 <memchr>
 800c382:	b138      	cbz	r0, 800c394 <_svfiprintf_r+0x150>
 800c384:	2240      	movs	r2, #64	@ 0x40
 800c386:	9b04      	ldr	r3, [sp, #16]
 800c388:	eba0 000a 	sub.w	r0, r0, sl
 800c38c:	4082      	lsls	r2, r0
 800c38e:	4313      	orrs	r3, r2
 800c390:	3401      	adds	r4, #1
 800c392:	9304      	str	r3, [sp, #16]
 800c394:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c398:	2206      	movs	r2, #6
 800c39a:	4825      	ldr	r0, [pc, #148]	@ (800c430 <_svfiprintf_r+0x1ec>)
 800c39c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3a0:	f7fe fc17 	bl	800abd2 <memchr>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	d036      	beq.n	800c416 <_svfiprintf_r+0x1d2>
 800c3a8:	4b22      	ldr	r3, [pc, #136]	@ (800c434 <_svfiprintf_r+0x1f0>)
 800c3aa:	bb1b      	cbnz	r3, 800c3f4 <_svfiprintf_r+0x1b0>
 800c3ac:	9b03      	ldr	r3, [sp, #12]
 800c3ae:	3307      	adds	r3, #7
 800c3b0:	f023 0307 	bic.w	r3, r3, #7
 800c3b4:	3308      	adds	r3, #8
 800c3b6:	9303      	str	r3, [sp, #12]
 800c3b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3ba:	4433      	add	r3, r6
 800c3bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3be:	e76a      	b.n	800c296 <_svfiprintf_r+0x52>
 800c3c0:	460c      	mov	r4, r1
 800c3c2:	2001      	movs	r0, #1
 800c3c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3c8:	e7a8      	b.n	800c31c <_svfiprintf_r+0xd8>
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	f04f 0c0a 	mov.w	ip, #10
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	3401      	adds	r4, #1
 800c3d4:	9305      	str	r3, [sp, #20]
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3dc:	3a30      	subs	r2, #48	@ 0x30
 800c3de:	2a09      	cmp	r2, #9
 800c3e0:	d903      	bls.n	800c3ea <_svfiprintf_r+0x1a6>
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d0c6      	beq.n	800c374 <_svfiprintf_r+0x130>
 800c3e6:	9105      	str	r1, [sp, #20]
 800c3e8:	e7c4      	b.n	800c374 <_svfiprintf_r+0x130>
 800c3ea:	4604      	mov	r4, r0
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3f2:	e7f0      	b.n	800c3d6 <_svfiprintf_r+0x192>
 800c3f4:	ab03      	add	r3, sp, #12
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	462a      	mov	r2, r5
 800c3fa:	4638      	mov	r0, r7
 800c3fc:	4b0e      	ldr	r3, [pc, #56]	@ (800c438 <_svfiprintf_r+0x1f4>)
 800c3fe:	a904      	add	r1, sp, #16
 800c400:	f7fd fe84 	bl	800a10c <_printf_float>
 800c404:	1c42      	adds	r2, r0, #1
 800c406:	4606      	mov	r6, r0
 800c408:	d1d6      	bne.n	800c3b8 <_svfiprintf_r+0x174>
 800c40a:	89ab      	ldrh	r3, [r5, #12]
 800c40c:	065b      	lsls	r3, r3, #25
 800c40e:	f53f af2d 	bmi.w	800c26c <_svfiprintf_r+0x28>
 800c412:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c414:	e72c      	b.n	800c270 <_svfiprintf_r+0x2c>
 800c416:	ab03      	add	r3, sp, #12
 800c418:	9300      	str	r3, [sp, #0]
 800c41a:	462a      	mov	r2, r5
 800c41c:	4638      	mov	r0, r7
 800c41e:	4b06      	ldr	r3, [pc, #24]	@ (800c438 <_svfiprintf_r+0x1f4>)
 800c420:	a904      	add	r1, sp, #16
 800c422:	f7fe f911 	bl	800a648 <_printf_i>
 800c426:	e7ed      	b.n	800c404 <_svfiprintf_r+0x1c0>
 800c428:	0800cf50 	.word	0x0800cf50
 800c42c:	0800cf56 	.word	0x0800cf56
 800c430:	0800cf5a 	.word	0x0800cf5a
 800c434:	0800a10d 	.word	0x0800a10d
 800c438:	0800c18d 	.word	0x0800c18d

0800c43c <__sflush_r>:
 800c43c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c442:	0716      	lsls	r6, r2, #28
 800c444:	4605      	mov	r5, r0
 800c446:	460c      	mov	r4, r1
 800c448:	d454      	bmi.n	800c4f4 <__sflush_r+0xb8>
 800c44a:	684b      	ldr	r3, [r1, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	dc02      	bgt.n	800c456 <__sflush_r+0x1a>
 800c450:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c452:	2b00      	cmp	r3, #0
 800c454:	dd48      	ble.n	800c4e8 <__sflush_r+0xac>
 800c456:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c458:	2e00      	cmp	r6, #0
 800c45a:	d045      	beq.n	800c4e8 <__sflush_r+0xac>
 800c45c:	2300      	movs	r3, #0
 800c45e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c462:	682f      	ldr	r7, [r5, #0]
 800c464:	6a21      	ldr	r1, [r4, #32]
 800c466:	602b      	str	r3, [r5, #0]
 800c468:	d030      	beq.n	800c4cc <__sflush_r+0x90>
 800c46a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	0759      	lsls	r1, r3, #29
 800c470:	d505      	bpl.n	800c47e <__sflush_r+0x42>
 800c472:	6863      	ldr	r3, [r4, #4]
 800c474:	1ad2      	subs	r2, r2, r3
 800c476:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c478:	b10b      	cbz	r3, 800c47e <__sflush_r+0x42>
 800c47a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c47c:	1ad2      	subs	r2, r2, r3
 800c47e:	2300      	movs	r3, #0
 800c480:	4628      	mov	r0, r5
 800c482:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c484:	6a21      	ldr	r1, [r4, #32]
 800c486:	47b0      	blx	r6
 800c488:	1c43      	adds	r3, r0, #1
 800c48a:	89a3      	ldrh	r3, [r4, #12]
 800c48c:	d106      	bne.n	800c49c <__sflush_r+0x60>
 800c48e:	6829      	ldr	r1, [r5, #0]
 800c490:	291d      	cmp	r1, #29
 800c492:	d82b      	bhi.n	800c4ec <__sflush_r+0xb0>
 800c494:	4a28      	ldr	r2, [pc, #160]	@ (800c538 <__sflush_r+0xfc>)
 800c496:	410a      	asrs	r2, r1
 800c498:	07d6      	lsls	r6, r2, #31
 800c49a:	d427      	bmi.n	800c4ec <__sflush_r+0xb0>
 800c49c:	2200      	movs	r2, #0
 800c49e:	6062      	str	r2, [r4, #4]
 800c4a0:	6922      	ldr	r2, [r4, #16]
 800c4a2:	04d9      	lsls	r1, r3, #19
 800c4a4:	6022      	str	r2, [r4, #0]
 800c4a6:	d504      	bpl.n	800c4b2 <__sflush_r+0x76>
 800c4a8:	1c42      	adds	r2, r0, #1
 800c4aa:	d101      	bne.n	800c4b0 <__sflush_r+0x74>
 800c4ac:	682b      	ldr	r3, [r5, #0]
 800c4ae:	b903      	cbnz	r3, 800c4b2 <__sflush_r+0x76>
 800c4b0:	6560      	str	r0, [r4, #84]	@ 0x54
 800c4b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c4b4:	602f      	str	r7, [r5, #0]
 800c4b6:	b1b9      	cbz	r1, 800c4e8 <__sflush_r+0xac>
 800c4b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4bc:	4299      	cmp	r1, r3
 800c4be:	d002      	beq.n	800c4c6 <__sflush_r+0x8a>
 800c4c0:	4628      	mov	r0, r5
 800c4c2:	f7ff f9e5 	bl	800b890 <_free_r>
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4ca:	e00d      	b.n	800c4e8 <__sflush_r+0xac>
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	4628      	mov	r0, r5
 800c4d0:	47b0      	blx	r6
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	1c50      	adds	r0, r2, #1
 800c4d6:	d1c9      	bne.n	800c46c <__sflush_r+0x30>
 800c4d8:	682b      	ldr	r3, [r5, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d0c6      	beq.n	800c46c <__sflush_r+0x30>
 800c4de:	2b1d      	cmp	r3, #29
 800c4e0:	d001      	beq.n	800c4e6 <__sflush_r+0xaa>
 800c4e2:	2b16      	cmp	r3, #22
 800c4e4:	d11d      	bne.n	800c522 <__sflush_r+0xe6>
 800c4e6:	602f      	str	r7, [r5, #0]
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	e021      	b.n	800c530 <__sflush_r+0xf4>
 800c4ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c4f0:	b21b      	sxth	r3, r3
 800c4f2:	e01a      	b.n	800c52a <__sflush_r+0xee>
 800c4f4:	690f      	ldr	r7, [r1, #16]
 800c4f6:	2f00      	cmp	r7, #0
 800c4f8:	d0f6      	beq.n	800c4e8 <__sflush_r+0xac>
 800c4fa:	0793      	lsls	r3, r2, #30
 800c4fc:	bf18      	it	ne
 800c4fe:	2300      	movne	r3, #0
 800c500:	680e      	ldr	r6, [r1, #0]
 800c502:	bf08      	it	eq
 800c504:	694b      	ldreq	r3, [r1, #20]
 800c506:	1bf6      	subs	r6, r6, r7
 800c508:	600f      	str	r7, [r1, #0]
 800c50a:	608b      	str	r3, [r1, #8]
 800c50c:	2e00      	cmp	r6, #0
 800c50e:	ddeb      	ble.n	800c4e8 <__sflush_r+0xac>
 800c510:	4633      	mov	r3, r6
 800c512:	463a      	mov	r2, r7
 800c514:	4628      	mov	r0, r5
 800c516:	6a21      	ldr	r1, [r4, #32]
 800c518:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c51c:	47e0      	blx	ip
 800c51e:	2800      	cmp	r0, #0
 800c520:	dc07      	bgt.n	800c532 <__sflush_r+0xf6>
 800c522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c526:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c52a:	f04f 30ff 	mov.w	r0, #4294967295
 800c52e:	81a3      	strh	r3, [r4, #12]
 800c530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c532:	4407      	add	r7, r0
 800c534:	1a36      	subs	r6, r6, r0
 800c536:	e7e9      	b.n	800c50c <__sflush_r+0xd0>
 800c538:	dfbffffe 	.word	0xdfbffffe

0800c53c <_fflush_r>:
 800c53c:	b538      	push	{r3, r4, r5, lr}
 800c53e:	690b      	ldr	r3, [r1, #16]
 800c540:	4605      	mov	r5, r0
 800c542:	460c      	mov	r4, r1
 800c544:	b913      	cbnz	r3, 800c54c <_fflush_r+0x10>
 800c546:	2500      	movs	r5, #0
 800c548:	4628      	mov	r0, r5
 800c54a:	bd38      	pop	{r3, r4, r5, pc}
 800c54c:	b118      	cbz	r0, 800c556 <_fflush_r+0x1a>
 800c54e:	6a03      	ldr	r3, [r0, #32]
 800c550:	b90b      	cbnz	r3, 800c556 <_fflush_r+0x1a>
 800c552:	f7fe fa25 	bl	800a9a0 <__sinit>
 800c556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d0f3      	beq.n	800c546 <_fflush_r+0xa>
 800c55e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c560:	07d0      	lsls	r0, r2, #31
 800c562:	d404      	bmi.n	800c56e <_fflush_r+0x32>
 800c564:	0599      	lsls	r1, r3, #22
 800c566:	d402      	bmi.n	800c56e <_fflush_r+0x32>
 800c568:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c56a:	f7fe fb30 	bl	800abce <__retarget_lock_acquire_recursive>
 800c56e:	4628      	mov	r0, r5
 800c570:	4621      	mov	r1, r4
 800c572:	f7ff ff63 	bl	800c43c <__sflush_r>
 800c576:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c578:	4605      	mov	r5, r0
 800c57a:	07da      	lsls	r2, r3, #31
 800c57c:	d4e4      	bmi.n	800c548 <_fflush_r+0xc>
 800c57e:	89a3      	ldrh	r3, [r4, #12]
 800c580:	059b      	lsls	r3, r3, #22
 800c582:	d4e1      	bmi.n	800c548 <_fflush_r+0xc>
 800c584:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c586:	f7fe fb23 	bl	800abd0 <__retarget_lock_release_recursive>
 800c58a:	e7dd      	b.n	800c548 <_fflush_r+0xc>

0800c58c <memmove>:
 800c58c:	4288      	cmp	r0, r1
 800c58e:	b510      	push	{r4, lr}
 800c590:	eb01 0402 	add.w	r4, r1, r2
 800c594:	d902      	bls.n	800c59c <memmove+0x10>
 800c596:	4284      	cmp	r4, r0
 800c598:	4623      	mov	r3, r4
 800c59a:	d807      	bhi.n	800c5ac <memmove+0x20>
 800c59c:	1e43      	subs	r3, r0, #1
 800c59e:	42a1      	cmp	r1, r4
 800c5a0:	d008      	beq.n	800c5b4 <memmove+0x28>
 800c5a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5aa:	e7f8      	b.n	800c59e <memmove+0x12>
 800c5ac:	4601      	mov	r1, r0
 800c5ae:	4402      	add	r2, r0
 800c5b0:	428a      	cmp	r2, r1
 800c5b2:	d100      	bne.n	800c5b6 <memmove+0x2a>
 800c5b4:	bd10      	pop	{r4, pc}
 800c5b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5be:	e7f7      	b.n	800c5b0 <memmove+0x24>

0800c5c0 <_sbrk_r>:
 800c5c0:	b538      	push	{r3, r4, r5, lr}
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	4d05      	ldr	r5, [pc, #20]	@ (800c5dc <_sbrk_r+0x1c>)
 800c5c6:	4604      	mov	r4, r0
 800c5c8:	4608      	mov	r0, r1
 800c5ca:	602b      	str	r3, [r5, #0]
 800c5cc:	f7f5 fa16 	bl	80019fc <_sbrk>
 800c5d0:	1c43      	adds	r3, r0, #1
 800c5d2:	d102      	bne.n	800c5da <_sbrk_r+0x1a>
 800c5d4:	682b      	ldr	r3, [r5, #0]
 800c5d6:	b103      	cbz	r3, 800c5da <_sbrk_r+0x1a>
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	bd38      	pop	{r3, r4, r5, pc}
 800c5dc:	200017fc 	.word	0x200017fc

0800c5e0 <memcpy>:
 800c5e0:	440a      	add	r2, r1
 800c5e2:	4291      	cmp	r1, r2
 800c5e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5e8:	d100      	bne.n	800c5ec <memcpy+0xc>
 800c5ea:	4770      	bx	lr
 800c5ec:	b510      	push	{r4, lr}
 800c5ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5f2:	4291      	cmp	r1, r2
 800c5f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5f8:	d1f9      	bne.n	800c5ee <memcpy+0xe>
 800c5fa:	bd10      	pop	{r4, pc}

0800c5fc <__assert_func>:
 800c5fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5fe:	4614      	mov	r4, r2
 800c600:	461a      	mov	r2, r3
 800c602:	4b09      	ldr	r3, [pc, #36]	@ (800c628 <__assert_func+0x2c>)
 800c604:	4605      	mov	r5, r0
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	68d8      	ldr	r0, [r3, #12]
 800c60a:	b954      	cbnz	r4, 800c622 <__assert_func+0x26>
 800c60c:	4b07      	ldr	r3, [pc, #28]	@ (800c62c <__assert_func+0x30>)
 800c60e:	461c      	mov	r4, r3
 800c610:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c614:	9100      	str	r1, [sp, #0]
 800c616:	462b      	mov	r3, r5
 800c618:	4905      	ldr	r1, [pc, #20]	@ (800c630 <__assert_func+0x34>)
 800c61a:	f000 f86f 	bl	800c6fc <fiprintf>
 800c61e:	f000 f87f 	bl	800c720 <abort>
 800c622:	4b04      	ldr	r3, [pc, #16]	@ (800c634 <__assert_func+0x38>)
 800c624:	e7f4      	b.n	800c610 <__assert_func+0x14>
 800c626:	bf00      	nop
 800c628:	2000019c 	.word	0x2000019c
 800c62c:	0800cfa6 	.word	0x0800cfa6
 800c630:	0800cf78 	.word	0x0800cf78
 800c634:	0800cf6b 	.word	0x0800cf6b

0800c638 <_calloc_r>:
 800c638:	b570      	push	{r4, r5, r6, lr}
 800c63a:	fba1 5402 	umull	r5, r4, r1, r2
 800c63e:	b93c      	cbnz	r4, 800c650 <_calloc_r+0x18>
 800c640:	4629      	mov	r1, r5
 800c642:	f7ff f997 	bl	800b974 <_malloc_r>
 800c646:	4606      	mov	r6, r0
 800c648:	b928      	cbnz	r0, 800c656 <_calloc_r+0x1e>
 800c64a:	2600      	movs	r6, #0
 800c64c:	4630      	mov	r0, r6
 800c64e:	bd70      	pop	{r4, r5, r6, pc}
 800c650:	220c      	movs	r2, #12
 800c652:	6002      	str	r2, [r0, #0]
 800c654:	e7f9      	b.n	800c64a <_calloc_r+0x12>
 800c656:	462a      	mov	r2, r5
 800c658:	4621      	mov	r1, r4
 800c65a:	f7fe fa3a 	bl	800aad2 <memset>
 800c65e:	e7f5      	b.n	800c64c <_calloc_r+0x14>

0800c660 <__ascii_mbtowc>:
 800c660:	b082      	sub	sp, #8
 800c662:	b901      	cbnz	r1, 800c666 <__ascii_mbtowc+0x6>
 800c664:	a901      	add	r1, sp, #4
 800c666:	b142      	cbz	r2, 800c67a <__ascii_mbtowc+0x1a>
 800c668:	b14b      	cbz	r3, 800c67e <__ascii_mbtowc+0x1e>
 800c66a:	7813      	ldrb	r3, [r2, #0]
 800c66c:	600b      	str	r3, [r1, #0]
 800c66e:	7812      	ldrb	r2, [r2, #0]
 800c670:	1e10      	subs	r0, r2, #0
 800c672:	bf18      	it	ne
 800c674:	2001      	movne	r0, #1
 800c676:	b002      	add	sp, #8
 800c678:	4770      	bx	lr
 800c67a:	4610      	mov	r0, r2
 800c67c:	e7fb      	b.n	800c676 <__ascii_mbtowc+0x16>
 800c67e:	f06f 0001 	mvn.w	r0, #1
 800c682:	e7f8      	b.n	800c676 <__ascii_mbtowc+0x16>

0800c684 <_realloc_r>:
 800c684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c688:	4680      	mov	r8, r0
 800c68a:	4615      	mov	r5, r2
 800c68c:	460c      	mov	r4, r1
 800c68e:	b921      	cbnz	r1, 800c69a <_realloc_r+0x16>
 800c690:	4611      	mov	r1, r2
 800c692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c696:	f7ff b96d 	b.w	800b974 <_malloc_r>
 800c69a:	b92a      	cbnz	r2, 800c6a8 <_realloc_r+0x24>
 800c69c:	f7ff f8f8 	bl	800b890 <_free_r>
 800c6a0:	2400      	movs	r4, #0
 800c6a2:	4620      	mov	r0, r4
 800c6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6a8:	f000 f841 	bl	800c72e <_malloc_usable_size_r>
 800c6ac:	4285      	cmp	r5, r0
 800c6ae:	4606      	mov	r6, r0
 800c6b0:	d802      	bhi.n	800c6b8 <_realloc_r+0x34>
 800c6b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c6b6:	d8f4      	bhi.n	800c6a2 <_realloc_r+0x1e>
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	4640      	mov	r0, r8
 800c6bc:	f7ff f95a 	bl	800b974 <_malloc_r>
 800c6c0:	4607      	mov	r7, r0
 800c6c2:	2800      	cmp	r0, #0
 800c6c4:	d0ec      	beq.n	800c6a0 <_realloc_r+0x1c>
 800c6c6:	42b5      	cmp	r5, r6
 800c6c8:	462a      	mov	r2, r5
 800c6ca:	4621      	mov	r1, r4
 800c6cc:	bf28      	it	cs
 800c6ce:	4632      	movcs	r2, r6
 800c6d0:	f7ff ff86 	bl	800c5e0 <memcpy>
 800c6d4:	4621      	mov	r1, r4
 800c6d6:	4640      	mov	r0, r8
 800c6d8:	f7ff f8da 	bl	800b890 <_free_r>
 800c6dc:	463c      	mov	r4, r7
 800c6de:	e7e0      	b.n	800c6a2 <_realloc_r+0x1e>

0800c6e0 <__ascii_wctomb>:
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	4608      	mov	r0, r1
 800c6e4:	b141      	cbz	r1, 800c6f8 <__ascii_wctomb+0x18>
 800c6e6:	2aff      	cmp	r2, #255	@ 0xff
 800c6e8:	d904      	bls.n	800c6f4 <__ascii_wctomb+0x14>
 800c6ea:	228a      	movs	r2, #138	@ 0x8a
 800c6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f0:	601a      	str	r2, [r3, #0]
 800c6f2:	4770      	bx	lr
 800c6f4:	2001      	movs	r0, #1
 800c6f6:	700a      	strb	r2, [r1, #0]
 800c6f8:	4770      	bx	lr
	...

0800c6fc <fiprintf>:
 800c6fc:	b40e      	push	{r1, r2, r3}
 800c6fe:	b503      	push	{r0, r1, lr}
 800c700:	4601      	mov	r1, r0
 800c702:	ab03      	add	r3, sp, #12
 800c704:	4805      	ldr	r0, [pc, #20]	@ (800c71c <fiprintf+0x20>)
 800c706:	f853 2b04 	ldr.w	r2, [r3], #4
 800c70a:	6800      	ldr	r0, [r0, #0]
 800c70c:	9301      	str	r3, [sp, #4]
 800c70e:	f000 f83d 	bl	800c78c <_vfiprintf_r>
 800c712:	b002      	add	sp, #8
 800c714:	f85d eb04 	ldr.w	lr, [sp], #4
 800c718:	b003      	add	sp, #12
 800c71a:	4770      	bx	lr
 800c71c:	2000019c 	.word	0x2000019c

0800c720 <abort>:
 800c720:	2006      	movs	r0, #6
 800c722:	b508      	push	{r3, lr}
 800c724:	f000 fa06 	bl	800cb34 <raise>
 800c728:	2001      	movs	r0, #1
 800c72a:	f7f5 f8f2 	bl	8001912 <_exit>

0800c72e <_malloc_usable_size_r>:
 800c72e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c732:	1f18      	subs	r0, r3, #4
 800c734:	2b00      	cmp	r3, #0
 800c736:	bfbc      	itt	lt
 800c738:	580b      	ldrlt	r3, [r1, r0]
 800c73a:	18c0      	addlt	r0, r0, r3
 800c73c:	4770      	bx	lr

0800c73e <__sfputc_r>:
 800c73e:	6893      	ldr	r3, [r2, #8]
 800c740:	b410      	push	{r4}
 800c742:	3b01      	subs	r3, #1
 800c744:	2b00      	cmp	r3, #0
 800c746:	6093      	str	r3, [r2, #8]
 800c748:	da07      	bge.n	800c75a <__sfputc_r+0x1c>
 800c74a:	6994      	ldr	r4, [r2, #24]
 800c74c:	42a3      	cmp	r3, r4
 800c74e:	db01      	blt.n	800c754 <__sfputc_r+0x16>
 800c750:	290a      	cmp	r1, #10
 800c752:	d102      	bne.n	800c75a <__sfputc_r+0x1c>
 800c754:	bc10      	pop	{r4}
 800c756:	f000 b931 	b.w	800c9bc <__swbuf_r>
 800c75a:	6813      	ldr	r3, [r2, #0]
 800c75c:	1c58      	adds	r0, r3, #1
 800c75e:	6010      	str	r0, [r2, #0]
 800c760:	7019      	strb	r1, [r3, #0]
 800c762:	4608      	mov	r0, r1
 800c764:	bc10      	pop	{r4}
 800c766:	4770      	bx	lr

0800c768 <__sfputs_r>:
 800c768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76a:	4606      	mov	r6, r0
 800c76c:	460f      	mov	r7, r1
 800c76e:	4614      	mov	r4, r2
 800c770:	18d5      	adds	r5, r2, r3
 800c772:	42ac      	cmp	r4, r5
 800c774:	d101      	bne.n	800c77a <__sfputs_r+0x12>
 800c776:	2000      	movs	r0, #0
 800c778:	e007      	b.n	800c78a <__sfputs_r+0x22>
 800c77a:	463a      	mov	r2, r7
 800c77c:	4630      	mov	r0, r6
 800c77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c782:	f7ff ffdc 	bl	800c73e <__sfputc_r>
 800c786:	1c43      	adds	r3, r0, #1
 800c788:	d1f3      	bne.n	800c772 <__sfputs_r+0xa>
 800c78a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c78c <_vfiprintf_r>:
 800c78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c790:	460d      	mov	r5, r1
 800c792:	4614      	mov	r4, r2
 800c794:	4698      	mov	r8, r3
 800c796:	4606      	mov	r6, r0
 800c798:	b09d      	sub	sp, #116	@ 0x74
 800c79a:	b118      	cbz	r0, 800c7a4 <_vfiprintf_r+0x18>
 800c79c:	6a03      	ldr	r3, [r0, #32]
 800c79e:	b90b      	cbnz	r3, 800c7a4 <_vfiprintf_r+0x18>
 800c7a0:	f7fe f8fe 	bl	800a9a0 <__sinit>
 800c7a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7a6:	07d9      	lsls	r1, r3, #31
 800c7a8:	d405      	bmi.n	800c7b6 <_vfiprintf_r+0x2a>
 800c7aa:	89ab      	ldrh	r3, [r5, #12]
 800c7ac:	059a      	lsls	r2, r3, #22
 800c7ae:	d402      	bmi.n	800c7b6 <_vfiprintf_r+0x2a>
 800c7b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7b2:	f7fe fa0c 	bl	800abce <__retarget_lock_acquire_recursive>
 800c7b6:	89ab      	ldrh	r3, [r5, #12]
 800c7b8:	071b      	lsls	r3, r3, #28
 800c7ba:	d501      	bpl.n	800c7c0 <_vfiprintf_r+0x34>
 800c7bc:	692b      	ldr	r3, [r5, #16]
 800c7be:	b99b      	cbnz	r3, 800c7e8 <_vfiprintf_r+0x5c>
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	4630      	mov	r0, r6
 800c7c4:	f000 f938 	bl	800ca38 <__swsetup_r>
 800c7c8:	b170      	cbz	r0, 800c7e8 <_vfiprintf_r+0x5c>
 800c7ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7cc:	07dc      	lsls	r4, r3, #31
 800c7ce:	d504      	bpl.n	800c7da <_vfiprintf_r+0x4e>
 800c7d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7d4:	b01d      	add	sp, #116	@ 0x74
 800c7d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7da:	89ab      	ldrh	r3, [r5, #12]
 800c7dc:	0598      	lsls	r0, r3, #22
 800c7de:	d4f7      	bmi.n	800c7d0 <_vfiprintf_r+0x44>
 800c7e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c7e2:	f7fe f9f5 	bl	800abd0 <__retarget_lock_release_recursive>
 800c7e6:	e7f3      	b.n	800c7d0 <_vfiprintf_r+0x44>
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7ec:	2320      	movs	r3, #32
 800c7ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c7f2:	2330      	movs	r3, #48	@ 0x30
 800c7f4:	f04f 0901 	mov.w	r9, #1
 800c7f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7fc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800c9a8 <_vfiprintf_r+0x21c>
 800c800:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c804:	4623      	mov	r3, r4
 800c806:	469a      	mov	sl, r3
 800c808:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c80c:	b10a      	cbz	r2, 800c812 <_vfiprintf_r+0x86>
 800c80e:	2a25      	cmp	r2, #37	@ 0x25
 800c810:	d1f9      	bne.n	800c806 <_vfiprintf_r+0x7a>
 800c812:	ebba 0b04 	subs.w	fp, sl, r4
 800c816:	d00b      	beq.n	800c830 <_vfiprintf_r+0xa4>
 800c818:	465b      	mov	r3, fp
 800c81a:	4622      	mov	r2, r4
 800c81c:	4629      	mov	r1, r5
 800c81e:	4630      	mov	r0, r6
 800c820:	f7ff ffa2 	bl	800c768 <__sfputs_r>
 800c824:	3001      	adds	r0, #1
 800c826:	f000 80a7 	beq.w	800c978 <_vfiprintf_r+0x1ec>
 800c82a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c82c:	445a      	add	r2, fp
 800c82e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c830:	f89a 3000 	ldrb.w	r3, [sl]
 800c834:	2b00      	cmp	r3, #0
 800c836:	f000 809f 	beq.w	800c978 <_vfiprintf_r+0x1ec>
 800c83a:	2300      	movs	r3, #0
 800c83c:	f04f 32ff 	mov.w	r2, #4294967295
 800c840:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c844:	f10a 0a01 	add.w	sl, sl, #1
 800c848:	9304      	str	r3, [sp, #16]
 800c84a:	9307      	str	r3, [sp, #28]
 800c84c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c850:	931a      	str	r3, [sp, #104]	@ 0x68
 800c852:	4654      	mov	r4, sl
 800c854:	2205      	movs	r2, #5
 800c856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c85a:	4853      	ldr	r0, [pc, #332]	@ (800c9a8 <_vfiprintf_r+0x21c>)
 800c85c:	f7fe f9b9 	bl	800abd2 <memchr>
 800c860:	9a04      	ldr	r2, [sp, #16]
 800c862:	b9d8      	cbnz	r0, 800c89c <_vfiprintf_r+0x110>
 800c864:	06d1      	lsls	r1, r2, #27
 800c866:	bf44      	itt	mi
 800c868:	2320      	movmi	r3, #32
 800c86a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c86e:	0713      	lsls	r3, r2, #28
 800c870:	bf44      	itt	mi
 800c872:	232b      	movmi	r3, #43	@ 0x2b
 800c874:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c878:	f89a 3000 	ldrb.w	r3, [sl]
 800c87c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c87e:	d015      	beq.n	800c8ac <_vfiprintf_r+0x120>
 800c880:	4654      	mov	r4, sl
 800c882:	2000      	movs	r0, #0
 800c884:	f04f 0c0a 	mov.w	ip, #10
 800c888:	9a07      	ldr	r2, [sp, #28]
 800c88a:	4621      	mov	r1, r4
 800c88c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c890:	3b30      	subs	r3, #48	@ 0x30
 800c892:	2b09      	cmp	r3, #9
 800c894:	d94b      	bls.n	800c92e <_vfiprintf_r+0x1a2>
 800c896:	b1b0      	cbz	r0, 800c8c6 <_vfiprintf_r+0x13a>
 800c898:	9207      	str	r2, [sp, #28]
 800c89a:	e014      	b.n	800c8c6 <_vfiprintf_r+0x13a>
 800c89c:	eba0 0308 	sub.w	r3, r0, r8
 800c8a0:	fa09 f303 	lsl.w	r3, r9, r3
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	46a2      	mov	sl, r4
 800c8a8:	9304      	str	r3, [sp, #16]
 800c8aa:	e7d2      	b.n	800c852 <_vfiprintf_r+0xc6>
 800c8ac:	9b03      	ldr	r3, [sp, #12]
 800c8ae:	1d19      	adds	r1, r3, #4
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	9103      	str	r1, [sp, #12]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	bfbb      	ittet	lt
 800c8b8:	425b      	neglt	r3, r3
 800c8ba:	f042 0202 	orrlt.w	r2, r2, #2
 800c8be:	9307      	strge	r3, [sp, #28]
 800c8c0:	9307      	strlt	r3, [sp, #28]
 800c8c2:	bfb8      	it	lt
 800c8c4:	9204      	strlt	r2, [sp, #16]
 800c8c6:	7823      	ldrb	r3, [r4, #0]
 800c8c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c8ca:	d10a      	bne.n	800c8e2 <_vfiprintf_r+0x156>
 800c8cc:	7863      	ldrb	r3, [r4, #1]
 800c8ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8d0:	d132      	bne.n	800c938 <_vfiprintf_r+0x1ac>
 800c8d2:	9b03      	ldr	r3, [sp, #12]
 800c8d4:	3402      	adds	r4, #2
 800c8d6:	1d1a      	adds	r2, r3, #4
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	9203      	str	r2, [sp, #12]
 800c8dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c8e0:	9305      	str	r3, [sp, #20]
 800c8e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800c9ac <_vfiprintf_r+0x220>
 800c8e6:	2203      	movs	r2, #3
 800c8e8:	4650      	mov	r0, sl
 800c8ea:	7821      	ldrb	r1, [r4, #0]
 800c8ec:	f7fe f971 	bl	800abd2 <memchr>
 800c8f0:	b138      	cbz	r0, 800c902 <_vfiprintf_r+0x176>
 800c8f2:	2240      	movs	r2, #64	@ 0x40
 800c8f4:	9b04      	ldr	r3, [sp, #16]
 800c8f6:	eba0 000a 	sub.w	r0, r0, sl
 800c8fa:	4082      	lsls	r2, r0
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	3401      	adds	r4, #1
 800c900:	9304      	str	r3, [sp, #16]
 800c902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c906:	2206      	movs	r2, #6
 800c908:	4829      	ldr	r0, [pc, #164]	@ (800c9b0 <_vfiprintf_r+0x224>)
 800c90a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c90e:	f7fe f960 	bl	800abd2 <memchr>
 800c912:	2800      	cmp	r0, #0
 800c914:	d03f      	beq.n	800c996 <_vfiprintf_r+0x20a>
 800c916:	4b27      	ldr	r3, [pc, #156]	@ (800c9b4 <_vfiprintf_r+0x228>)
 800c918:	bb1b      	cbnz	r3, 800c962 <_vfiprintf_r+0x1d6>
 800c91a:	9b03      	ldr	r3, [sp, #12]
 800c91c:	3307      	adds	r3, #7
 800c91e:	f023 0307 	bic.w	r3, r3, #7
 800c922:	3308      	adds	r3, #8
 800c924:	9303      	str	r3, [sp, #12]
 800c926:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c928:	443b      	add	r3, r7
 800c92a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c92c:	e76a      	b.n	800c804 <_vfiprintf_r+0x78>
 800c92e:	460c      	mov	r4, r1
 800c930:	2001      	movs	r0, #1
 800c932:	fb0c 3202 	mla	r2, ip, r2, r3
 800c936:	e7a8      	b.n	800c88a <_vfiprintf_r+0xfe>
 800c938:	2300      	movs	r3, #0
 800c93a:	f04f 0c0a 	mov.w	ip, #10
 800c93e:	4619      	mov	r1, r3
 800c940:	3401      	adds	r4, #1
 800c942:	9305      	str	r3, [sp, #20]
 800c944:	4620      	mov	r0, r4
 800c946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c94a:	3a30      	subs	r2, #48	@ 0x30
 800c94c:	2a09      	cmp	r2, #9
 800c94e:	d903      	bls.n	800c958 <_vfiprintf_r+0x1cc>
 800c950:	2b00      	cmp	r3, #0
 800c952:	d0c6      	beq.n	800c8e2 <_vfiprintf_r+0x156>
 800c954:	9105      	str	r1, [sp, #20]
 800c956:	e7c4      	b.n	800c8e2 <_vfiprintf_r+0x156>
 800c958:	4604      	mov	r4, r0
 800c95a:	2301      	movs	r3, #1
 800c95c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c960:	e7f0      	b.n	800c944 <_vfiprintf_r+0x1b8>
 800c962:	ab03      	add	r3, sp, #12
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	462a      	mov	r2, r5
 800c968:	4630      	mov	r0, r6
 800c96a:	4b13      	ldr	r3, [pc, #76]	@ (800c9b8 <_vfiprintf_r+0x22c>)
 800c96c:	a904      	add	r1, sp, #16
 800c96e:	f7fd fbcd 	bl	800a10c <_printf_float>
 800c972:	4607      	mov	r7, r0
 800c974:	1c78      	adds	r0, r7, #1
 800c976:	d1d6      	bne.n	800c926 <_vfiprintf_r+0x19a>
 800c978:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c97a:	07d9      	lsls	r1, r3, #31
 800c97c:	d405      	bmi.n	800c98a <_vfiprintf_r+0x1fe>
 800c97e:	89ab      	ldrh	r3, [r5, #12]
 800c980:	059a      	lsls	r2, r3, #22
 800c982:	d402      	bmi.n	800c98a <_vfiprintf_r+0x1fe>
 800c984:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c986:	f7fe f923 	bl	800abd0 <__retarget_lock_release_recursive>
 800c98a:	89ab      	ldrh	r3, [r5, #12]
 800c98c:	065b      	lsls	r3, r3, #25
 800c98e:	f53f af1f 	bmi.w	800c7d0 <_vfiprintf_r+0x44>
 800c992:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c994:	e71e      	b.n	800c7d4 <_vfiprintf_r+0x48>
 800c996:	ab03      	add	r3, sp, #12
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	462a      	mov	r2, r5
 800c99c:	4630      	mov	r0, r6
 800c99e:	4b06      	ldr	r3, [pc, #24]	@ (800c9b8 <_vfiprintf_r+0x22c>)
 800c9a0:	a904      	add	r1, sp, #16
 800c9a2:	f7fd fe51 	bl	800a648 <_printf_i>
 800c9a6:	e7e4      	b.n	800c972 <_vfiprintf_r+0x1e6>
 800c9a8:	0800cf50 	.word	0x0800cf50
 800c9ac:	0800cf56 	.word	0x0800cf56
 800c9b0:	0800cf5a 	.word	0x0800cf5a
 800c9b4:	0800a10d 	.word	0x0800a10d
 800c9b8:	0800c769 	.word	0x0800c769

0800c9bc <__swbuf_r>:
 800c9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9be:	460e      	mov	r6, r1
 800c9c0:	4614      	mov	r4, r2
 800c9c2:	4605      	mov	r5, r0
 800c9c4:	b118      	cbz	r0, 800c9ce <__swbuf_r+0x12>
 800c9c6:	6a03      	ldr	r3, [r0, #32]
 800c9c8:	b90b      	cbnz	r3, 800c9ce <__swbuf_r+0x12>
 800c9ca:	f7fd ffe9 	bl	800a9a0 <__sinit>
 800c9ce:	69a3      	ldr	r3, [r4, #24]
 800c9d0:	60a3      	str	r3, [r4, #8]
 800c9d2:	89a3      	ldrh	r3, [r4, #12]
 800c9d4:	071a      	lsls	r2, r3, #28
 800c9d6:	d501      	bpl.n	800c9dc <__swbuf_r+0x20>
 800c9d8:	6923      	ldr	r3, [r4, #16]
 800c9da:	b943      	cbnz	r3, 800c9ee <__swbuf_r+0x32>
 800c9dc:	4621      	mov	r1, r4
 800c9de:	4628      	mov	r0, r5
 800c9e0:	f000 f82a 	bl	800ca38 <__swsetup_r>
 800c9e4:	b118      	cbz	r0, 800c9ee <__swbuf_r+0x32>
 800c9e6:	f04f 37ff 	mov.w	r7, #4294967295
 800c9ea:	4638      	mov	r0, r7
 800c9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	6922      	ldr	r2, [r4, #16]
 800c9f2:	b2f6      	uxtb	r6, r6
 800c9f4:	1a98      	subs	r0, r3, r2
 800c9f6:	6963      	ldr	r3, [r4, #20]
 800c9f8:	4637      	mov	r7, r6
 800c9fa:	4283      	cmp	r3, r0
 800c9fc:	dc05      	bgt.n	800ca0a <__swbuf_r+0x4e>
 800c9fe:	4621      	mov	r1, r4
 800ca00:	4628      	mov	r0, r5
 800ca02:	f7ff fd9b 	bl	800c53c <_fflush_r>
 800ca06:	2800      	cmp	r0, #0
 800ca08:	d1ed      	bne.n	800c9e6 <__swbuf_r+0x2a>
 800ca0a:	68a3      	ldr	r3, [r4, #8]
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	60a3      	str	r3, [r4, #8]
 800ca10:	6823      	ldr	r3, [r4, #0]
 800ca12:	1c5a      	adds	r2, r3, #1
 800ca14:	6022      	str	r2, [r4, #0]
 800ca16:	701e      	strb	r6, [r3, #0]
 800ca18:	6962      	ldr	r2, [r4, #20]
 800ca1a:	1c43      	adds	r3, r0, #1
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d004      	beq.n	800ca2a <__swbuf_r+0x6e>
 800ca20:	89a3      	ldrh	r3, [r4, #12]
 800ca22:	07db      	lsls	r3, r3, #31
 800ca24:	d5e1      	bpl.n	800c9ea <__swbuf_r+0x2e>
 800ca26:	2e0a      	cmp	r6, #10
 800ca28:	d1df      	bne.n	800c9ea <__swbuf_r+0x2e>
 800ca2a:	4621      	mov	r1, r4
 800ca2c:	4628      	mov	r0, r5
 800ca2e:	f7ff fd85 	bl	800c53c <_fflush_r>
 800ca32:	2800      	cmp	r0, #0
 800ca34:	d0d9      	beq.n	800c9ea <__swbuf_r+0x2e>
 800ca36:	e7d6      	b.n	800c9e6 <__swbuf_r+0x2a>

0800ca38 <__swsetup_r>:
 800ca38:	b538      	push	{r3, r4, r5, lr}
 800ca3a:	4b29      	ldr	r3, [pc, #164]	@ (800cae0 <__swsetup_r+0xa8>)
 800ca3c:	4605      	mov	r5, r0
 800ca3e:	6818      	ldr	r0, [r3, #0]
 800ca40:	460c      	mov	r4, r1
 800ca42:	b118      	cbz	r0, 800ca4c <__swsetup_r+0x14>
 800ca44:	6a03      	ldr	r3, [r0, #32]
 800ca46:	b90b      	cbnz	r3, 800ca4c <__swsetup_r+0x14>
 800ca48:	f7fd ffaa 	bl	800a9a0 <__sinit>
 800ca4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca50:	0719      	lsls	r1, r3, #28
 800ca52:	d422      	bmi.n	800ca9a <__swsetup_r+0x62>
 800ca54:	06da      	lsls	r2, r3, #27
 800ca56:	d407      	bmi.n	800ca68 <__swsetup_r+0x30>
 800ca58:	2209      	movs	r2, #9
 800ca5a:	602a      	str	r2, [r5, #0]
 800ca5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca60:	f04f 30ff 	mov.w	r0, #4294967295
 800ca64:	81a3      	strh	r3, [r4, #12]
 800ca66:	e033      	b.n	800cad0 <__swsetup_r+0x98>
 800ca68:	0758      	lsls	r0, r3, #29
 800ca6a:	d512      	bpl.n	800ca92 <__swsetup_r+0x5a>
 800ca6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ca6e:	b141      	cbz	r1, 800ca82 <__swsetup_r+0x4a>
 800ca70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ca74:	4299      	cmp	r1, r3
 800ca76:	d002      	beq.n	800ca7e <__swsetup_r+0x46>
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f7fe ff09 	bl	800b890 <_free_r>
 800ca7e:	2300      	movs	r3, #0
 800ca80:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca82:	89a3      	ldrh	r3, [r4, #12]
 800ca84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ca88:	81a3      	strh	r3, [r4, #12]
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	6063      	str	r3, [r4, #4]
 800ca8e:	6923      	ldr	r3, [r4, #16]
 800ca90:	6023      	str	r3, [r4, #0]
 800ca92:	89a3      	ldrh	r3, [r4, #12]
 800ca94:	f043 0308 	orr.w	r3, r3, #8
 800ca98:	81a3      	strh	r3, [r4, #12]
 800ca9a:	6923      	ldr	r3, [r4, #16]
 800ca9c:	b94b      	cbnz	r3, 800cab2 <__swsetup_r+0x7a>
 800ca9e:	89a3      	ldrh	r3, [r4, #12]
 800caa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800caa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800caa8:	d003      	beq.n	800cab2 <__swsetup_r+0x7a>
 800caaa:	4621      	mov	r1, r4
 800caac:	4628      	mov	r0, r5
 800caae:	f000 f882 	bl	800cbb6 <__smakebuf_r>
 800cab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cab6:	f013 0201 	ands.w	r2, r3, #1
 800caba:	d00a      	beq.n	800cad2 <__swsetup_r+0x9a>
 800cabc:	2200      	movs	r2, #0
 800cabe:	60a2      	str	r2, [r4, #8]
 800cac0:	6962      	ldr	r2, [r4, #20]
 800cac2:	4252      	negs	r2, r2
 800cac4:	61a2      	str	r2, [r4, #24]
 800cac6:	6922      	ldr	r2, [r4, #16]
 800cac8:	b942      	cbnz	r2, 800cadc <__swsetup_r+0xa4>
 800caca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cace:	d1c5      	bne.n	800ca5c <__swsetup_r+0x24>
 800cad0:	bd38      	pop	{r3, r4, r5, pc}
 800cad2:	0799      	lsls	r1, r3, #30
 800cad4:	bf58      	it	pl
 800cad6:	6962      	ldrpl	r2, [r4, #20]
 800cad8:	60a2      	str	r2, [r4, #8]
 800cada:	e7f4      	b.n	800cac6 <__swsetup_r+0x8e>
 800cadc:	2000      	movs	r0, #0
 800cade:	e7f7      	b.n	800cad0 <__swsetup_r+0x98>
 800cae0:	2000019c 	.word	0x2000019c

0800cae4 <_raise_r>:
 800cae4:	291f      	cmp	r1, #31
 800cae6:	b538      	push	{r3, r4, r5, lr}
 800cae8:	4605      	mov	r5, r0
 800caea:	460c      	mov	r4, r1
 800caec:	d904      	bls.n	800caf8 <_raise_r+0x14>
 800caee:	2316      	movs	r3, #22
 800caf0:	6003      	str	r3, [r0, #0]
 800caf2:	f04f 30ff 	mov.w	r0, #4294967295
 800caf6:	bd38      	pop	{r3, r4, r5, pc}
 800caf8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cafa:	b112      	cbz	r2, 800cb02 <_raise_r+0x1e>
 800cafc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb00:	b94b      	cbnz	r3, 800cb16 <_raise_r+0x32>
 800cb02:	4628      	mov	r0, r5
 800cb04:	f000 f830 	bl	800cb68 <_getpid_r>
 800cb08:	4622      	mov	r2, r4
 800cb0a:	4601      	mov	r1, r0
 800cb0c:	4628      	mov	r0, r5
 800cb0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb12:	f000 b817 	b.w	800cb44 <_kill_r>
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d00a      	beq.n	800cb30 <_raise_r+0x4c>
 800cb1a:	1c59      	adds	r1, r3, #1
 800cb1c:	d103      	bne.n	800cb26 <_raise_r+0x42>
 800cb1e:	2316      	movs	r3, #22
 800cb20:	6003      	str	r3, [r0, #0]
 800cb22:	2001      	movs	r0, #1
 800cb24:	e7e7      	b.n	800caf6 <_raise_r+0x12>
 800cb26:	2100      	movs	r1, #0
 800cb28:	4620      	mov	r0, r4
 800cb2a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cb2e:	4798      	blx	r3
 800cb30:	2000      	movs	r0, #0
 800cb32:	e7e0      	b.n	800caf6 <_raise_r+0x12>

0800cb34 <raise>:
 800cb34:	4b02      	ldr	r3, [pc, #8]	@ (800cb40 <raise+0xc>)
 800cb36:	4601      	mov	r1, r0
 800cb38:	6818      	ldr	r0, [r3, #0]
 800cb3a:	f7ff bfd3 	b.w	800cae4 <_raise_r>
 800cb3e:	bf00      	nop
 800cb40:	2000019c 	.word	0x2000019c

0800cb44 <_kill_r>:
 800cb44:	b538      	push	{r3, r4, r5, lr}
 800cb46:	2300      	movs	r3, #0
 800cb48:	4d06      	ldr	r5, [pc, #24]	@ (800cb64 <_kill_r+0x20>)
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	4608      	mov	r0, r1
 800cb4e:	4611      	mov	r1, r2
 800cb50:	602b      	str	r3, [r5, #0]
 800cb52:	f7f4 fece 	bl	80018f2 <_kill>
 800cb56:	1c43      	adds	r3, r0, #1
 800cb58:	d102      	bne.n	800cb60 <_kill_r+0x1c>
 800cb5a:	682b      	ldr	r3, [r5, #0]
 800cb5c:	b103      	cbz	r3, 800cb60 <_kill_r+0x1c>
 800cb5e:	6023      	str	r3, [r4, #0]
 800cb60:	bd38      	pop	{r3, r4, r5, pc}
 800cb62:	bf00      	nop
 800cb64:	200017fc 	.word	0x200017fc

0800cb68 <_getpid_r>:
 800cb68:	f7f4 bebc 	b.w	80018e4 <_getpid>

0800cb6c <__swhatbuf_r>:
 800cb6c:	b570      	push	{r4, r5, r6, lr}
 800cb6e:	460c      	mov	r4, r1
 800cb70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb74:	4615      	mov	r5, r2
 800cb76:	2900      	cmp	r1, #0
 800cb78:	461e      	mov	r6, r3
 800cb7a:	b096      	sub	sp, #88	@ 0x58
 800cb7c:	da0c      	bge.n	800cb98 <__swhatbuf_r+0x2c>
 800cb7e:	89a3      	ldrh	r3, [r4, #12]
 800cb80:	2100      	movs	r1, #0
 800cb82:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cb86:	bf14      	ite	ne
 800cb88:	2340      	movne	r3, #64	@ 0x40
 800cb8a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cb8e:	2000      	movs	r0, #0
 800cb90:	6031      	str	r1, [r6, #0]
 800cb92:	602b      	str	r3, [r5, #0]
 800cb94:	b016      	add	sp, #88	@ 0x58
 800cb96:	bd70      	pop	{r4, r5, r6, pc}
 800cb98:	466a      	mov	r2, sp
 800cb9a:	f000 f849 	bl	800cc30 <_fstat_r>
 800cb9e:	2800      	cmp	r0, #0
 800cba0:	dbed      	blt.n	800cb7e <__swhatbuf_r+0x12>
 800cba2:	9901      	ldr	r1, [sp, #4]
 800cba4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cba8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cbac:	4259      	negs	r1, r3
 800cbae:	4159      	adcs	r1, r3
 800cbb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cbb4:	e7eb      	b.n	800cb8e <__swhatbuf_r+0x22>

0800cbb6 <__smakebuf_r>:
 800cbb6:	898b      	ldrh	r3, [r1, #12]
 800cbb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbba:	079d      	lsls	r5, r3, #30
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	d507      	bpl.n	800cbd2 <__smakebuf_r+0x1c>
 800cbc2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cbc6:	6023      	str	r3, [r4, #0]
 800cbc8:	6123      	str	r3, [r4, #16]
 800cbca:	2301      	movs	r3, #1
 800cbcc:	6163      	str	r3, [r4, #20]
 800cbce:	b003      	add	sp, #12
 800cbd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbd2:	466a      	mov	r2, sp
 800cbd4:	ab01      	add	r3, sp, #4
 800cbd6:	f7ff ffc9 	bl	800cb6c <__swhatbuf_r>
 800cbda:	9f00      	ldr	r7, [sp, #0]
 800cbdc:	4605      	mov	r5, r0
 800cbde:	4639      	mov	r1, r7
 800cbe0:	4630      	mov	r0, r6
 800cbe2:	f7fe fec7 	bl	800b974 <_malloc_r>
 800cbe6:	b948      	cbnz	r0, 800cbfc <__smakebuf_r+0x46>
 800cbe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbec:	059a      	lsls	r2, r3, #22
 800cbee:	d4ee      	bmi.n	800cbce <__smakebuf_r+0x18>
 800cbf0:	f023 0303 	bic.w	r3, r3, #3
 800cbf4:	f043 0302 	orr.w	r3, r3, #2
 800cbf8:	81a3      	strh	r3, [r4, #12]
 800cbfa:	e7e2      	b.n	800cbc2 <__smakebuf_r+0xc>
 800cbfc:	89a3      	ldrh	r3, [r4, #12]
 800cbfe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc06:	81a3      	strh	r3, [r4, #12]
 800cc08:	9b01      	ldr	r3, [sp, #4]
 800cc0a:	6020      	str	r0, [r4, #0]
 800cc0c:	b15b      	cbz	r3, 800cc26 <__smakebuf_r+0x70>
 800cc0e:	4630      	mov	r0, r6
 800cc10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc14:	f000 f81e 	bl	800cc54 <_isatty_r>
 800cc18:	b128      	cbz	r0, 800cc26 <__smakebuf_r+0x70>
 800cc1a:	89a3      	ldrh	r3, [r4, #12]
 800cc1c:	f023 0303 	bic.w	r3, r3, #3
 800cc20:	f043 0301 	orr.w	r3, r3, #1
 800cc24:	81a3      	strh	r3, [r4, #12]
 800cc26:	89a3      	ldrh	r3, [r4, #12]
 800cc28:	431d      	orrs	r5, r3
 800cc2a:	81a5      	strh	r5, [r4, #12]
 800cc2c:	e7cf      	b.n	800cbce <__smakebuf_r+0x18>
	...

0800cc30 <_fstat_r>:
 800cc30:	b538      	push	{r3, r4, r5, lr}
 800cc32:	2300      	movs	r3, #0
 800cc34:	4d06      	ldr	r5, [pc, #24]	@ (800cc50 <_fstat_r+0x20>)
 800cc36:	4604      	mov	r4, r0
 800cc38:	4608      	mov	r0, r1
 800cc3a:	4611      	mov	r1, r2
 800cc3c:	602b      	str	r3, [r5, #0]
 800cc3e:	f7f4 feb7 	bl	80019b0 <_fstat>
 800cc42:	1c43      	adds	r3, r0, #1
 800cc44:	d102      	bne.n	800cc4c <_fstat_r+0x1c>
 800cc46:	682b      	ldr	r3, [r5, #0]
 800cc48:	b103      	cbz	r3, 800cc4c <_fstat_r+0x1c>
 800cc4a:	6023      	str	r3, [r4, #0]
 800cc4c:	bd38      	pop	{r3, r4, r5, pc}
 800cc4e:	bf00      	nop
 800cc50:	200017fc 	.word	0x200017fc

0800cc54 <_isatty_r>:
 800cc54:	b538      	push	{r3, r4, r5, lr}
 800cc56:	2300      	movs	r3, #0
 800cc58:	4d05      	ldr	r5, [pc, #20]	@ (800cc70 <_isatty_r+0x1c>)
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	4608      	mov	r0, r1
 800cc5e:	602b      	str	r3, [r5, #0]
 800cc60:	f7f4 feb5 	bl	80019ce <_isatty>
 800cc64:	1c43      	adds	r3, r0, #1
 800cc66:	d102      	bne.n	800cc6e <_isatty_r+0x1a>
 800cc68:	682b      	ldr	r3, [r5, #0]
 800cc6a:	b103      	cbz	r3, 800cc6e <_isatty_r+0x1a>
 800cc6c:	6023      	str	r3, [r4, #0]
 800cc6e:	bd38      	pop	{r3, r4, r5, pc}
 800cc70:	200017fc 	.word	0x200017fc

0800cc74 <_init>:
 800cc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc76:	bf00      	nop
 800cc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc7a:	bc08      	pop	{r3}
 800cc7c:	469e      	mov	lr, r3
 800cc7e:	4770      	bx	lr

0800cc80 <_fini>:
 800cc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc82:	bf00      	nop
 800cc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc86:	bc08      	pop	{r3}
 800cc88:	469e      	mov	lr, r3
 800cc8a:	4770      	bx	lr
