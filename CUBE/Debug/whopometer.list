
whopometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba0c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  0800bb20  0800bb20  0000cb20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf58  0800bf58  0000d358  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf58  0800bf58  0000cf58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf60  0800bf60  0000d358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf60  0800bf60  0000cf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf64  0800bf64  0000cf64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  0800bf68  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000149c  20000358  0800c2c0  0000d358  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017f4  0800c2c0  0000d7f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d358  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011eb8  00000000  00000000  0000d381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003741  00000000  00000000  0001f239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  00022980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c87  00000000  00000000  00023a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b591  00000000  00000000  000246b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ba5  00000000  00000000  0003fc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b5d2  00000000  00000000  000567ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e1dbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005448  00000000  00000000  000e1e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000e724c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bb04 	.word	0x0800bb04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800bb04 	.word	0x0800bb04

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8e:	f000 fcd7 	bl	8001440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a92:	f000 f90b 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a96:	f000 fa2d 	bl	8000ef4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a9a:	f000 f963 	bl	8000d64 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a9e:	f000 f9bd 	bl	8000e1c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000aa2:	f000 f9f1 	bl	8000e88 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000aa6:	f000 f98b 	bl	8000dc0 <MX_I2C2_Init>
  MX_FATFS_Init();
 8000aaa:	f006 f913 	bl	8006cd4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000aae:	f007 fd39 	bl	8008524 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8000ab2:	2064      	movs	r0, #100	@ 0x64
 8000ab4:	f000 fd26 	bl	8001504 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  int found = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
	 	        char charData[20]; // Data holder
	 	        for(uint16_t i2c=1; i2c<128; i2c++)
 8000abc:	2301      	movs	r3, #1
 8000abe:	837b      	strh	r3, [r7, #26]
 8000ac0:	e0c4      	b.n	8000c4c <main+0x1c4>
	 	        {
	 	            if (HAL_I2C_IsDeviceReady(&hi2c1, i2c<<1, 5, 10) == HAL_OK)
 8000ac2:	8b7b      	ldrh	r3, [r7, #26]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	b299      	uxth	r1, r3
 8000ac8:	230a      	movs	r3, #10
 8000aca:	2205      	movs	r2, #5
 8000acc:	486e      	ldr	r0, [pc, #440]	@ (8000c88 <main+0x200>)
 8000ace:	f001 f92b 	bl	8001d28 <HAL_I2C_IsDeviceReady>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d152      	bne.n	8000b7e <main+0xf6>
	 	            {
	 	            found = 1;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61fb      	str	r3, [r7, #28]
	 	            sprintf(charData, "%s : ", "i2cdevices.org");
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4a6b      	ldr	r2, [pc, #428]	@ (8000c8c <main+0x204>)
 8000ae0:	496b      	ldr	r1, [pc, #428]	@ (8000c90 <main+0x208>)
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f008 fed8 	bl	8009898 <siprintf>
	 	                CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fb30 	bl	8000150 <strlen>
 8000af0:	4602      	mov	r2, r0
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	4611      	mov	r1, r2
 8000af6:	4618      	mov	r0, r3
 8000af8:	f007 fdd2 	bl	80086a0 <CDC_Transmit_FS>
	 	                HAL_Delay(500);
 8000afc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b00:	f000 fd00 	bl	8001504 <HAL_Delay>
	 	                sprintf(charData, "%x and ", i2c);
 8000b04:	8b7a      	ldrh	r2, [r7, #26]
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	4962      	ldr	r1, [pc, #392]	@ (8000c94 <main+0x20c>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f008 fec4 	bl	8009898 <siprintf>
	 	                CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fb1c 	bl	8000150 <strlen>
 8000b18:	4602      	mov	r2, r0
 8000b1a:	1d3b      	adds	r3, r7, #4
 8000b1c:	4611      	mov	r1, r2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f007 fdbe 	bl	80086a0 <CDC_Transmit_FS>
	 	                HAL_Delay(500);
 8000b24:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b28:	f000 fcec 	bl	8001504 <HAL_Delay>
	 	                sprintf(charData, "%s : ", "STM32 Address");
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	4a5a      	ldr	r2, [pc, #360]	@ (8000c98 <main+0x210>)
 8000b30:	4957      	ldr	r1, [pc, #348]	@ (8000c90 <main+0x208>)
 8000b32:	4618      	mov	r0, r3
 8000b34:	f008 feb0 	bl	8009898 <siprintf>
	 	                CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f7ff fb08 	bl	8000150 <strlen>
 8000b40:	4602      	mov	r2, r0
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f007 fdaa 	bl	80086a0 <CDC_Transmit_FS>
	 	                HAL_Delay(500);
 8000b4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b50:	f000 fcd8 	bl	8001504 <HAL_Delay>
	 	                sprintf(charData, "%x\n", i2c<<1);
 8000b54:	8b7b      	ldrh	r3, [r7, #26]
 8000b56:	005a      	lsls	r2, r3, #1
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	4950      	ldr	r1, [pc, #320]	@ (8000c9c <main+0x214>)
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f008 fe9b 	bl	8009898 <siprintf>
	 	                CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff faf3 	bl	8000150 <strlen>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	1d3b      	adds	r3, r7, #4
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f007 fd95 	bl	80086a0 <CDC_Transmit_FS>
	 	                HAL_Delay(500);
 8000b76:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b7a:	f000 fcc3 	bl	8001504 <HAL_Delay>
	 	             }
	 	             HAL_Delay(5);
 8000b7e:	2005      	movs	r0, #5
 8000b80:	f000 fcc0 	bl	8001504 <HAL_Delay>
	 	             if (HAL_I2C_IsDeviceReady(&hi2c2, i2c<<1, 5, 10) == HAL_OK)
 8000b84:	8b7b      	ldrh	r3, [r7, #26]
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	b299      	uxth	r1, r3
 8000b8a:	230a      	movs	r3, #10
 8000b8c:	2205      	movs	r2, #5
 8000b8e:	4844      	ldr	r0, [pc, #272]	@ (8000ca0 <main+0x218>)
 8000b90:	f001 f8ca 	bl	8001d28 <HAL_I2C_IsDeviceReady>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d152      	bne.n	8000c40 <main+0x1b8>
	 	            	 	            {
	 	            	 	            found = 1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61fb      	str	r3, [r7, #28]
	 	            	 	            sprintf(charData, "%s : ", "i2cdevices.org");
 8000b9e:	1d3b      	adds	r3, r7, #4
 8000ba0:	4a3a      	ldr	r2, [pc, #232]	@ (8000c8c <main+0x204>)
 8000ba2:	493b      	ldr	r1, [pc, #236]	@ (8000c90 <main+0x208>)
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f008 fe77 	bl	8009898 <siprintf>
	 	            	 	                CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff facf 	bl	8000150 <strlen>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f007 fd71 	bl	80086a0 <CDC_Transmit_FS>
	 	            	 	                HAL_Delay(500);
 8000bbe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bc2:	f000 fc9f 	bl	8001504 <HAL_Delay>
	 	            	 	                sprintf(charData, "%x and ", i2c);
 8000bc6:	8b7a      	ldrh	r2, [r7, #26]
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	4932      	ldr	r1, [pc, #200]	@ (8000c94 <main+0x20c>)
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f008 fe63 	bl	8009898 <siprintf>
	 	            	 	                CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fabb 	bl	8000150 <strlen>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4611      	mov	r1, r2
 8000be0:	4618      	mov	r0, r3
 8000be2:	f007 fd5d 	bl	80086a0 <CDC_Transmit_FS>
	 	            	 	                HAL_Delay(500);
 8000be6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bea:	f000 fc8b 	bl	8001504 <HAL_Delay>
	 	            	 	                sprintf(charData, "%s : ", "STM32 Address");
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4a29      	ldr	r2, [pc, #164]	@ (8000c98 <main+0x210>)
 8000bf2:	4927      	ldr	r1, [pc, #156]	@ (8000c90 <main+0x208>)
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f008 fe4f 	bl	8009898 <siprintf>
	 	            	 	                CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 8000bfa:	1d3b      	adds	r3, r7, #4
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff faa7 	bl	8000150 <strlen>
 8000c02:	4602      	mov	r2, r0
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f007 fd49 	bl	80086a0 <CDC_Transmit_FS>
	 	            	 	                HAL_Delay(500);
 8000c0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c12:	f000 fc77 	bl	8001504 <HAL_Delay>
	 	            	 	                sprintf(charData, "%x\n", i2c<<1);
 8000c16:	8b7b      	ldrh	r3, [r7, #26]
 8000c18:	005a      	lsls	r2, r3, #1
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	491f      	ldr	r1, [pc, #124]	@ (8000c9c <main+0x214>)
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f008 fe3a 	bl	8009898 <siprintf>
	 	            	 	                CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fa92 	bl	8000150 <strlen>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4611      	mov	r1, r2
 8000c32:	4618      	mov	r0, r3
 8000c34:	f007 fd34 	bl	80086a0 <CDC_Transmit_FS>
	 	            	 	                HAL_Delay(500);
 8000c38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c3c:	f000 fc62 	bl	8001504 <HAL_Delay>
	 	            	 	             }
	 	            	 	             HAL_Delay(5);
 8000c40:	2005      	movs	r0, #5
 8000c42:	f000 fc5f 	bl	8001504 <HAL_Delay>
	 	        for(uint16_t i2c=1; i2c<128; i2c++)
 8000c46:	8b7b      	ldrh	r3, [r7, #26]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	837b      	strh	r3, [r7, #26]
 8000c4c:	8b7b      	ldrh	r3, [r7, #26]
 8000c4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c50:	f67f af37 	bls.w	8000ac2 <main+0x3a>
	 	         }
	 	         if (!found)
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f47f af2e 	bne.w	8000ab8 <main+0x30>
	 	         {
	 	              sprintf(charData, "%s", "No devices found!\n");
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	4a11      	ldr	r2, [pc, #68]	@ (8000ca4 <main+0x21c>)
 8000c60:	4911      	ldr	r1, [pc, #68]	@ (8000ca8 <main+0x220>)
 8000c62:	4618      	mov	r0, r3
 8000c64:	f008 fe18 	bl	8009898 <siprintf>
	 	              CDC_Transmit_FS((uint8_t *) charData, strlen(charData));
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fa70 	bl	8000150 <strlen>
 8000c70:	4602      	mov	r2, r0
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f007 fd12 	bl	80086a0 <CDC_Transmit_FS>
	 	              HAL_Delay(500);
 8000c7c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c80:	f000 fc40 	bl	8001504 <HAL_Delay>
  {
 8000c84:	e718      	b.n	8000ab8 <main+0x30>
 8000c86:	bf00      	nop
 8000c88:	20000374 	.word	0x20000374
 8000c8c:	0800bb2c 	.word	0x0800bb2c
 8000c90:	0800bb3c 	.word	0x0800bb3c
 8000c94:	0800bb44 	.word	0x0800bb44
 8000c98:	0800bb4c 	.word	0x0800bb4c
 8000c9c:	0800bb5c 	.word	0x0800bb5c
 8000ca0:	200003c8 	.word	0x200003c8
 8000ca4:	0800bb60 	.word	0x0800bb60
 8000ca8:	0800bb74 	.word	0x0800bb74

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b094      	sub	sp, #80	@ 0x50
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cb6:	2228      	movs	r2, #40	@ 0x28
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f008 fe4f 	bl	800995e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ce0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000ce6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000cea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cec:	2301      	movs	r3, #1
 8000cee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cf8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cfa:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d00:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d04:	4618      	mov	r0, r3
 8000d06:	f002 ff17 	bl	8003b38 <HAL_RCC_OscConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000d10:	f000 f948 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d14:	230f      	movs	r3, #15
 8000d16:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d24:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	2102      	movs	r1, #2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 f983 	bl	800403c <HAL_RCC_ClockConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d3c:	f000 f932 	bl	8000fa4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d40:	2310      	movs	r3, #16
 8000d42:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f003 faf2 	bl	8004334 <HAL_RCCEx_PeriphCLKConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000d56:	f000 f925 	bl	8000fa4 <Error_Handler>
  }
}
 8000d5a:	bf00      	nop
 8000d5c:	3750      	adds	r7, #80	@ 0x50
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <MX_I2C1_Init+0x50>)
 8000d6a:	4a13      	ldr	r2, [pc, #76]	@ (8000db8 <MX_I2C1_Init+0x54>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <MX_I2C1_Init+0x50>)
 8000d70:	4a12      	ldr	r2, [pc, #72]	@ (8000dbc <MX_I2C1_Init+0x58>)
 8000d72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	@ (8000db4 <MX_I2C1_Init+0x50>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000db4 <MX_I2C1_Init+0x50>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <MX_I2C1_Init+0x50>)
 8000d82:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d86:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d88:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <MX_I2C1_Init+0x50>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d8e:	4b09      	ldr	r3, [pc, #36]	@ (8000db4 <MX_I2C1_Init+0x50>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d94:	4b07      	ldr	r3, [pc, #28]	@ (8000db4 <MX_I2C1_Init+0x50>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d9a:	4b06      	ldr	r3, [pc, #24]	@ (8000db4 <MX_I2C1_Init+0x50>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000da0:	4804      	ldr	r0, [pc, #16]	@ (8000db4 <MX_I2C1_Init+0x50>)
 8000da2:	f000 fe7d 	bl	8001aa0 <HAL_I2C_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dac:	f000 f8fa 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000374 	.word	0x20000374
 8000db8:	40005400 	.word	0x40005400
 8000dbc:	000186a0 	.word	0x000186a0

08000dc0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <MX_I2C2_Init+0x50>)
 8000dc6:	4a13      	ldr	r2, [pc, #76]	@ (8000e14 <MX_I2C2_Init+0x54>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000dca:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <MX_I2C2_Init+0x50>)
 8000dcc:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <MX_I2C2_Init+0x58>)
 8000dce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <MX_I2C2_Init+0x50>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <MX_I2C2_Init+0x50>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <MX_I2C2_Init+0x50>)
 8000dde:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000de2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000de4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <MX_I2C2_Init+0x50>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000dea:	4b09      	ldr	r3, [pc, #36]	@ (8000e10 <MX_I2C2_Init+0x50>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000df0:	4b07      	ldr	r3, [pc, #28]	@ (8000e10 <MX_I2C2_Init+0x50>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <MX_I2C2_Init+0x50>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dfc:	4804      	ldr	r0, [pc, #16]	@ (8000e10 <MX_I2C2_Init+0x50>)
 8000dfe:	f000 fe4f 	bl	8001aa0 <HAL_I2C_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000e08:	f000 f8cc 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e0c:	bf00      	nop
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200003c8 	.word	0x200003c8
 8000e14:	40005800 	.word	0x40005800
 8000e18:	000186a0 	.word	0x000186a0

08000e1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e20:	4b17      	ldr	r3, [pc, #92]	@ (8000e80 <MX_SPI1_Init+0x64>)
 8000e22:	4a18      	ldr	r2, [pc, #96]	@ (8000e84 <MX_SPI1_Init+0x68>)
 8000e24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e26:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <MX_SPI1_Init+0x64>)
 8000e28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e2e:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <MX_SPI1_Init+0x64>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e34:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <MX_SPI1_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <MX_SPI1_Init+0x64>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <MX_SPI1_Init+0x64>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <MX_SPI1_Init+0x64>)
 8000e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <MX_SPI1_Init+0x64>)
 8000e50:	2230      	movs	r2, #48	@ 0x30
 8000e52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	@ (8000e80 <MX_SPI1_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <MX_SPI1_Init+0x64>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <MX_SPI1_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e66:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <MX_SPI1_Init+0x64>)
 8000e68:	220a      	movs	r2, #10
 8000e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e6c:	4804      	ldr	r0, [pc, #16]	@ (8000e80 <MX_SPI1_Init+0x64>)
 8000e6e:	f003 fb17 	bl	80044a0 <HAL_SPI_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e78:	f000 f894 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	2000041c 	.word	0x2000041c
 8000e84:	40013000 	.word	0x40013000

08000e88 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	@ (8000eec <MX_SPI2_Init+0x64>)
 8000e8e:	4a18      	ldr	r2, [pc, #96]	@ (8000ef0 <MX_SPI2_Init+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e92:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <MX_SPI2_Init+0x64>)
 8000e94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e98:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e9a:	4b14      	ldr	r3, [pc, #80]	@ (8000eec <MX_SPI2_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <MX_SPI2_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ea6:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <MX_SPI2_Init+0x64>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <MX_SPI2_Init+0x64>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <MX_SPI2_Init+0x64>)
 8000eb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eb8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eba:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <MX_SPI2_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <MX_SPI2_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ec6:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <MX_SPI2_Init+0x64>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <MX_SPI2_Init+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <MX_SPI2_Init+0x64>)
 8000ed4:	220a      	movs	r2, #10
 8000ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ed8:	4804      	ldr	r0, [pc, #16]	@ (8000eec <MX_SPI2_Init+0x64>)
 8000eda:	f003 fae1 	bl	80044a0 <HAL_SPI_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ee4:	f000 f85e 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000474 	.word	0x20000474
 8000ef0:	40003800 	.word	0x40003800

08000ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f08:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <MX_GPIO_Init+0xa4>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a22      	ldr	r2, [pc, #136]	@ (8000f98 <MX_GPIO_Init+0xa4>)
 8000f0e:	f043 0320 	orr.w	r3, r3, #32
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <MX_GPIO_Init+0xa4>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f003 0320 	and.w	r3, r3, #32
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <MX_GPIO_Init+0xa4>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a1c      	ldr	r2, [pc, #112]	@ (8000f98 <MX_GPIO_Init+0xa4>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f98 <MX_GPIO_Init+0xa4>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	4b17      	ldr	r3, [pc, #92]	@ (8000f98 <MX_GPIO_Init+0xa4>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a16      	ldr	r2, [pc, #88]	@ (8000f98 <MX_GPIO_Init+0xa4>)
 8000f3e:	f043 0308 	orr.w	r3, r3, #8
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <MX_GPIO_Init+0xa4>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0308 	and.w	r3, r3, #8
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2110      	movs	r1, #16
 8000f54:	4811      	ldr	r0, [pc, #68]	@ (8000f9c <MX_GPIO_Init+0xa8>)
 8000f56:	f000 fd8b 	bl	8001a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480a      	ldr	r0, [pc, #40]	@ (8000f9c <MX_GPIO_Init+0xa8>)
 8000f72:	f000 fbf9 	bl	8001768 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8000f76:	2314      	movs	r3, #20
 8000f78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <MX_GPIO_Init+0xac>)
 8000f8a:	f000 fbed 	bl	8001768 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8e:	bf00      	nop
 8000f90:	3720      	adds	r7, #32
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40010800 	.word	0x40010800
 8000fa0:	40010c00 	.word	0x40010c00

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <Error_Handler+0x8>

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fb6:	4b15      	ldr	r3, [pc, #84]	@ (800100c <HAL_MspInit+0x5c>)
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	4a14      	ldr	r2, [pc, #80]	@ (800100c <HAL_MspInit+0x5c>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6193      	str	r3, [r2, #24]
 8000fc2:	4b12      	ldr	r3, [pc, #72]	@ (800100c <HAL_MspInit+0x5c>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	4b0f      	ldr	r3, [pc, #60]	@ (800100c <HAL_MspInit+0x5c>)
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800100c <HAL_MspInit+0x5c>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd8:	61d3      	str	r3, [r2, #28]
 8000fda:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <HAL_MspInit+0x5c>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <HAL_MspInit+0x60>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	4a04      	ldr	r2, [pc, #16]	@ (8001010 <HAL_MspInit+0x60>)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	40021000 	.word	0x40021000
 8001010:	40010000 	.word	0x40010000

08001014 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a2b      	ldr	r2, [pc, #172]	@ (80010dc <HAL_I2C_MspInit+0xc8>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d124      	bne.n	800107e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001034:	4b2a      	ldr	r3, [pc, #168]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 8001036:	699b      	ldr	r3, [r3, #24]
 8001038:	4a29      	ldr	r2, [pc, #164]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 800103a:	f043 0308 	orr.w	r3, r3, #8
 800103e:	6193      	str	r3, [r2, #24]
 8001040:	4b27      	ldr	r3, [pc, #156]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	f003 0308 	and.w	r3, r3, #8
 8001048:	617b      	str	r3, [r7, #20]
 800104a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800104c:	23c0      	movs	r3, #192	@ 0xc0
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001050:	2312      	movs	r3, #18
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	4619      	mov	r1, r3
 800105e:	4821      	ldr	r0, [pc, #132]	@ (80010e4 <HAL_I2C_MspInit+0xd0>)
 8001060:	f000 fb82 	bl	8001768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001064:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	4a1d      	ldr	r2, [pc, #116]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 800106a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800106e:	61d3      	str	r3, [r2, #28]
 8001070:	4b1b      	ldr	r3, [pc, #108]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800107c:	e029      	b.n	80010d2 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a19      	ldr	r2, [pc, #100]	@ (80010e8 <HAL_I2C_MspInit+0xd4>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d124      	bne.n	80010d2 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001088:	4b15      	ldr	r3, [pc, #84]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a14      	ldr	r2, [pc, #80]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 800108e:	f043 0308 	orr.w	r3, r3, #8
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b12      	ldr	r3, [pc, #72]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0308 	and.w	r3, r3, #8
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80010a0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a6:	2312      	movs	r3, #18
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	4619      	mov	r1, r3
 80010b4:	480b      	ldr	r0, [pc, #44]	@ (80010e4 <HAL_I2C_MspInit+0xd0>)
 80010b6:	f000 fb57 	bl	8001768 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010ba:	4b09      	ldr	r3, [pc, #36]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a08      	ldr	r2, [pc, #32]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 80010c0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010c4:	61d3      	str	r3, [r2, #28]
 80010c6:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_I2C_MspInit+0xcc>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
}
 80010d2:	bf00      	nop
 80010d4:	3728      	adds	r7, #40	@ 0x28
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40005400 	.word	0x40005400
 80010e0:	40021000 	.word	0x40021000
 80010e4:	40010c00 	.word	0x40010c00
 80010e8:	40005800 	.word	0x40005800

080010ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a37      	ldr	r2, [pc, #220]	@ (80011e4 <HAL_SPI_MspInit+0xf8>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d130      	bne.n	800116e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800110c:	4b36      	ldr	r3, [pc, #216]	@ (80011e8 <HAL_SPI_MspInit+0xfc>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a35      	ldr	r2, [pc, #212]	@ (80011e8 <HAL_SPI_MspInit+0xfc>)
 8001112:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b33      	ldr	r3, [pc, #204]	@ (80011e8 <HAL_SPI_MspInit+0xfc>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b30      	ldr	r3, [pc, #192]	@ (80011e8 <HAL_SPI_MspInit+0xfc>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a2f      	ldr	r2, [pc, #188]	@ (80011e8 <HAL_SPI_MspInit+0xfc>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b2d      	ldr	r3, [pc, #180]	@ (80011e8 <HAL_SPI_MspInit+0xfc>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800113c:	23a0      	movs	r3, #160	@ 0xa0
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001148:	f107 0318 	add.w	r3, r7, #24
 800114c:	4619      	mov	r1, r3
 800114e:	4827      	ldr	r0, [pc, #156]	@ (80011ec <HAL_SPI_MspInit+0x100>)
 8001150:	f000 fb0a 	bl	8001768 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001154:	2340      	movs	r3, #64	@ 0x40
 8001156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 0318 	add.w	r3, r7, #24
 8001164:	4619      	mov	r1, r3
 8001166:	4821      	ldr	r0, [pc, #132]	@ (80011ec <HAL_SPI_MspInit+0x100>)
 8001168:	f000 fafe 	bl	8001768 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800116c:	e036      	b.n	80011dc <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a1f      	ldr	r2, [pc, #124]	@ (80011f0 <HAL_SPI_MspInit+0x104>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d131      	bne.n	80011dc <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001178:	4b1b      	ldr	r3, [pc, #108]	@ (80011e8 <HAL_SPI_MspInit+0xfc>)
 800117a:	69db      	ldr	r3, [r3, #28]
 800117c:	4a1a      	ldr	r2, [pc, #104]	@ (80011e8 <HAL_SPI_MspInit+0xfc>)
 800117e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001182:	61d3      	str	r3, [r2, #28]
 8001184:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <HAL_SPI_MspInit+0xfc>)
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001190:	4b15      	ldr	r3, [pc, #84]	@ (80011e8 <HAL_SPI_MspInit+0xfc>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a14      	ldr	r2, [pc, #80]	@ (80011e8 <HAL_SPI_MspInit+0xfc>)
 8001196:	f043 0308 	orr.w	r3, r3, #8
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b12      	ldr	r3, [pc, #72]	@ (80011e8 <HAL_SPI_MspInit+0xfc>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0308 	and.w	r3, r3, #8
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80011a8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b6:	f107 0318 	add.w	r3, r7, #24
 80011ba:	4619      	mov	r1, r3
 80011bc:	480d      	ldr	r0, [pc, #52]	@ (80011f4 <HAL_SPI_MspInit+0x108>)
 80011be:	f000 fad3 	bl	8001768 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011c2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80011c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	4619      	mov	r1, r3
 80011d6:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <HAL_SPI_MspInit+0x108>)
 80011d8:	f000 fac6 	bl	8001768 <HAL_GPIO_Init>
}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	@ 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40013000 	.word	0x40013000
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010800 	.word	0x40010800
 80011f0:	40003800 	.word	0x40003800
 80011f4:	40010c00 	.word	0x40010c00

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <NMI_Handler+0x4>

08001200 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <MemManage_Handler+0x4>

08001210 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <BusFault_Handler+0x4>

08001218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <UsageFault_Handler+0x4>

08001220 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr

08001238 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	bc80      	pop	{r7}
 8001242:	4770      	bx	lr

08001244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001248:	f000 f940 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001254:	4802      	ldr	r0, [pc, #8]	@ (8001260 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001256:	f001 f82b 	bl	80022b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200011b0 	.word	0x200011b0

08001264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return 1;
 8001268:	2301      	movs	r3, #1
}
 800126a:	4618      	mov	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <_kill>:

int _kill(int pid, int sig)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800127c:	f008 fbc2 	bl	8009a04 <__errno>
 8001280:	4603      	mov	r3, r0
 8001282:	2216      	movs	r2, #22
 8001284:	601a      	str	r2, [r3, #0]
  return -1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <_exit>:

void _exit (int status)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800129a:	f04f 31ff 	mov.w	r1, #4294967295
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffe7 	bl	8001272 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <_exit+0x12>

080012a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e00a      	b.n	80012d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ba:	f3af 8000 	nop.w
 80012be:	4601      	mov	r1, r0
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	60ba      	str	r2, [r7, #8]
 80012c6:	b2ca      	uxtb	r2, r1
 80012c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbf0      	blt.n	80012ba <_read+0x12>
  }

  return len;
 80012d8:	687b      	ldr	r3, [r7, #4]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b086      	sub	sp, #24
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	60f8      	str	r0, [r7, #12]
 80012ea:	60b9      	str	r1, [r7, #8]
 80012ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	e009      	b.n	8001308 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	60ba      	str	r2, [r7, #8]
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	429a      	cmp	r2, r3
 800130e:	dbf1      	blt.n	80012f4 <_write+0x12>
  }
  return len;
 8001310:	687b      	ldr	r3, [r7, #4]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <_close>:

int _close(int file)
{
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001340:	605a      	str	r2, [r3, #4]
  return 0;
 8001342:	2300      	movs	r3, #0
}
 8001344:	4618      	mov	r0, r3
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <_isatty>:

int _isatty(int file)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001356:	2301      	movs	r3, #1
}
 8001358:	4618      	mov	r0, r3
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr

08001362 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001362:	b480      	push	{r7}
 8001364:	b085      	sub	sp, #20
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr
	...

0800137c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001384:	4a14      	ldr	r2, [pc, #80]	@ (80013d8 <_sbrk+0x5c>)
 8001386:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <_sbrk+0x60>)
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001390:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d102      	bne.n	800139e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001398:	4b11      	ldr	r3, [pc, #68]	@ (80013e0 <_sbrk+0x64>)
 800139a:	4a12      	ldr	r2, [pc, #72]	@ (80013e4 <_sbrk+0x68>)
 800139c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800139e:	4b10      	ldr	r3, [pc, #64]	@ (80013e0 <_sbrk+0x64>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d207      	bcs.n	80013bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ac:	f008 fb2a 	bl	8009a04 <__errno>
 80013b0:	4603      	mov	r3, r0
 80013b2:	220c      	movs	r2, #12
 80013b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ba:	e009      	b.n	80013d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <_sbrk+0x64>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013c2:	4b07      	ldr	r3, [pc, #28]	@ (80013e0 <_sbrk+0x64>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4413      	add	r3, r2
 80013ca:	4a05      	ldr	r2, [pc, #20]	@ (80013e0 <_sbrk+0x64>)
 80013cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ce:	68fb      	ldr	r3, [r7, #12]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20005000 	.word	0x20005000
 80013dc:	00000400 	.word	0x00000400
 80013e0:	200004cc 	.word	0x200004cc
 80013e4:	200017f8 	.word	0x200017f8

080013e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013f4:	f7ff fff8 	bl	80013e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013f8:	480b      	ldr	r0, [pc, #44]	@ (8001428 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013fa:	490c      	ldr	r1, [pc, #48]	@ (800142c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001430 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001400:	e002      	b.n	8001408 <LoopCopyDataInit>

08001402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001406:	3304      	adds	r3, #4

08001408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800140a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800140c:	d3f9      	bcc.n	8001402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800140e:	4a09      	ldr	r2, [pc, #36]	@ (8001434 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001410:	4c09      	ldr	r4, [pc, #36]	@ (8001438 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001414:	e001      	b.n	800141a <LoopFillZerobss>

08001416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001418:	3204      	adds	r2, #4

0800141a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800141a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800141c:	d3fb      	bcc.n	8001416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800141e:	f008 faf7 	bl	8009a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001422:	f7ff fb31 	bl	8000a88 <main>
  bx lr
 8001426:	4770      	bx	lr
  ldr r0, =_sdata
 8001428:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800142c:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8001430:	0800bf68 	.word	0x0800bf68
  ldr r2, =_sbss
 8001434:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8001438:	200017f4 	.word	0x200017f4

0800143c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800143c:	e7fe      	b.n	800143c <ADC1_2_IRQHandler>
	...

08001440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <HAL_Init+0x28>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	@ (8001468 <HAL_Init+0x28>)
 800144a:	f043 0310 	orr.w	r3, r3, #16
 800144e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001450:	2003      	movs	r0, #3
 8001452:	f000 f947 	bl	80016e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001456:	200f      	movs	r0, #15
 8001458:	f000 f808 	bl	800146c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800145c:	f7ff fda8 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40022000 	.word	0x40022000

0800146c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001474:	4b12      	ldr	r3, [pc, #72]	@ (80014c0 <HAL_InitTick+0x54>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_InitTick+0x58>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f95f 	bl	800174e <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00e      	b.n	80014b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d80a      	bhi.n	80014b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 f927 	bl	80016fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4a06      	ldr	r2, [pc, #24]	@ (80014c8 <HAL_InitTick+0x5c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000004 	.word	0x20000004

080014cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <HAL_IncTick+0x1c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <HAL_IncTick+0x20>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a03      	ldr	r2, [pc, #12]	@ (80014ec <HAL_IncTick+0x20>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000008 	.word	0x20000008
 80014ec:	200004d0 	.word	0x200004d0

080014f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  return uwTick;
 80014f4:	4b02      	ldr	r3, [pc, #8]	@ (8001500 <HAL_GetTick+0x10>)
 80014f6:	681b      	ldr	r3, [r3, #0]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	200004d0 	.word	0x200004d0

08001504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff fff0 	bl	80014f0 <HAL_GetTick>
 8001510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d005      	beq.n	800152a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_Delay+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800152a:	bf00      	nop
 800152c:	f7ff ffe0 	bl	80014f0 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	68fa      	ldr	r2, [r7, #12]
 8001538:	429a      	cmp	r2, r3
 800153a:	d8f7      	bhi.n	800152c <HAL_Delay+0x28>
  {
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000008 	.word	0x20000008

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001574:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001578:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800157c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157e:	4a04      	ldr	r2, [pc, #16]	@ (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	60d3      	str	r3, [r2, #12]
}
 8001584:	bf00      	nop
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000ed00 	.word	0xe000ed00

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	@ (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4906      	ldr	r1, [pc, #24]	@ (80015e4 <__NVIC_EnableIRQ+0x34>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	e000e100 	.word	0xe000e100

080015e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	6039      	str	r1, [r7, #0]
 80015f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	db0a      	blt.n	8001612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	490c      	ldr	r1, [pc, #48]	@ (8001634 <__NVIC_SetPriority+0x4c>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	0112      	lsls	r2, r2, #4
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	440b      	add	r3, r1
 800160c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001610:	e00a      	b.n	8001628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4908      	ldr	r1, [pc, #32]	@ (8001638 <__NVIC_SetPriority+0x50>)
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	3b04      	subs	r3, #4
 8001620:	0112      	lsls	r2, r2, #4
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	440b      	add	r3, r1
 8001626:	761a      	strb	r2, [r3, #24]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000e100 	.word	0xe000e100
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 0307 	and.w	r3, r3, #7
 800164e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f1c3 0307 	rsb	r3, r3, #7
 8001656:	2b04      	cmp	r3, #4
 8001658:	bf28      	it	cs
 800165a:	2304      	movcs	r3, #4
 800165c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3304      	adds	r3, #4
 8001662:	2b06      	cmp	r3, #6
 8001664:	d902      	bls.n	800166c <NVIC_EncodePriority+0x30>
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3b03      	subs	r3, #3
 800166a:	e000      	b.n	800166e <NVIC_EncodePriority+0x32>
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	fa02 f303 	lsl.w	r3, r2, r3
 800167a:	43da      	mvns	r2, r3
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	401a      	ands	r2, r3
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001684:	f04f 31ff 	mov.w	r1, #4294967295
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	fa01 f303 	lsl.w	r3, r1, r3
 800168e:	43d9      	mvns	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	4313      	orrs	r3, r2
         );
}
 8001696:	4618      	mov	r0, r3
 8001698:	3724      	adds	r7, #36	@ 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016b0:	d301      	bcc.n	80016b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00f      	b.n	80016d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b6:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <SysTick_Config+0x40>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016be:	210f      	movs	r1, #15
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f7ff ff90 	bl	80015e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c8:	4b05      	ldr	r3, [pc, #20]	@ (80016e0 <SysTick_Config+0x40>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ce:	4b04      	ldr	r3, [pc, #16]	@ (80016e0 <SysTick_Config+0x40>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	e000e010 	.word	0xe000e010

080016e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ff2d 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016f2:	bf00      	nop
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800170c:	f7ff ff42 	bl	8001594 <__NVIC_GetPriorityGrouping>
 8001710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68b9      	ldr	r1, [r7, #8]
 8001716:	6978      	ldr	r0, [r7, #20]
 8001718:	f7ff ff90 	bl	800163c <NVIC_EncodePriority>
 800171c:	4602      	mov	r2, r0
 800171e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ff5f 	bl	80015e8 <__NVIC_SetPriority>
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff35 	bl	80015b0 <__NVIC_EnableIRQ>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f7ff ffa2 	bl	80016a0 <SysTick_Config>
 800175c:	4603      	mov	r3, r0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001768:	b480      	push	{r7}
 800176a:	b08b      	sub	sp, #44	@ 0x2c
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177a:	e169      	b.n	8001a50 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800177c:	2201      	movs	r2, #1
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	69fa      	ldr	r2, [r7, #28]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	429a      	cmp	r2, r3
 8001796:	f040 8158 	bne.w	8001a4a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	4a9a      	ldr	r2, [pc, #616]	@ (8001a08 <HAL_GPIO_Init+0x2a0>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d05e      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017a4:	4a98      	ldr	r2, [pc, #608]	@ (8001a08 <HAL_GPIO_Init+0x2a0>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d875      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017aa:	4a98      	ldr	r2, [pc, #608]	@ (8001a0c <HAL_GPIO_Init+0x2a4>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d058      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017b0:	4a96      	ldr	r2, [pc, #600]	@ (8001a0c <HAL_GPIO_Init+0x2a4>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d86f      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017b6:	4a96      	ldr	r2, [pc, #600]	@ (8001a10 <HAL_GPIO_Init+0x2a8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d052      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017bc:	4a94      	ldr	r2, [pc, #592]	@ (8001a10 <HAL_GPIO_Init+0x2a8>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d869      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017c2:	4a94      	ldr	r2, [pc, #592]	@ (8001a14 <HAL_GPIO_Init+0x2ac>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d04c      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017c8:	4a92      	ldr	r2, [pc, #584]	@ (8001a14 <HAL_GPIO_Init+0x2ac>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d863      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017ce:	4a92      	ldr	r2, [pc, #584]	@ (8001a18 <HAL_GPIO_Init+0x2b0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d046      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
 80017d4:	4a90      	ldr	r2, [pc, #576]	@ (8001a18 <HAL_GPIO_Init+0x2b0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d85d      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017da:	2b12      	cmp	r3, #18
 80017dc:	d82a      	bhi.n	8001834 <HAL_GPIO_Init+0xcc>
 80017de:	2b12      	cmp	r3, #18
 80017e0:	d859      	bhi.n	8001896 <HAL_GPIO_Init+0x12e>
 80017e2:	a201      	add	r2, pc, #4	@ (adr r2, 80017e8 <HAL_GPIO_Init+0x80>)
 80017e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e8:	08001863 	.word	0x08001863
 80017ec:	0800183d 	.word	0x0800183d
 80017f0:	0800184f 	.word	0x0800184f
 80017f4:	08001891 	.word	0x08001891
 80017f8:	08001897 	.word	0x08001897
 80017fc:	08001897 	.word	0x08001897
 8001800:	08001897 	.word	0x08001897
 8001804:	08001897 	.word	0x08001897
 8001808:	08001897 	.word	0x08001897
 800180c:	08001897 	.word	0x08001897
 8001810:	08001897 	.word	0x08001897
 8001814:	08001897 	.word	0x08001897
 8001818:	08001897 	.word	0x08001897
 800181c:	08001897 	.word	0x08001897
 8001820:	08001897 	.word	0x08001897
 8001824:	08001897 	.word	0x08001897
 8001828:	08001897 	.word	0x08001897
 800182c:	08001845 	.word	0x08001845
 8001830:	08001859 	.word	0x08001859
 8001834:	4a79      	ldr	r2, [pc, #484]	@ (8001a1c <HAL_GPIO_Init+0x2b4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800183a:	e02c      	b.n	8001896 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	623b      	str	r3, [r7, #32]
          break;
 8001842:	e029      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	3304      	adds	r3, #4
 800184a:	623b      	str	r3, [r7, #32]
          break;
 800184c:	e024      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	3308      	adds	r3, #8
 8001854:	623b      	str	r3, [r7, #32]
          break;
 8001856:	e01f      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	330c      	adds	r3, #12
 800185e:	623b      	str	r3, [r7, #32]
          break;
 8001860:	e01a      	b.n	8001898 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d102      	bne.n	8001870 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800186a:	2304      	movs	r3, #4
 800186c:	623b      	str	r3, [r7, #32]
          break;
 800186e:	e013      	b.n	8001898 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b01      	cmp	r3, #1
 8001876:	d105      	bne.n	8001884 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001878:	2308      	movs	r3, #8
 800187a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	611a      	str	r2, [r3, #16]
          break;
 8001882:	e009      	b.n	8001898 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001884:	2308      	movs	r3, #8
 8001886:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69fa      	ldr	r2, [r7, #28]
 800188c:	615a      	str	r2, [r3, #20]
          break;
 800188e:	e003      	b.n	8001898 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001890:	2300      	movs	r3, #0
 8001892:	623b      	str	r3, [r7, #32]
          break;
 8001894:	e000      	b.n	8001898 <HAL_GPIO_Init+0x130>
          break;
 8001896:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	2bff      	cmp	r3, #255	@ 0xff
 800189c:	d801      	bhi.n	80018a2 <HAL_GPIO_Init+0x13a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	e001      	b.n	80018a6 <HAL_GPIO_Init+0x13e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3304      	adds	r3, #4
 80018a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	2bff      	cmp	r3, #255	@ 0xff
 80018ac:	d802      	bhi.n	80018b4 <HAL_GPIO_Init+0x14c>
 80018ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	e002      	b.n	80018ba <HAL_GPIO_Init+0x152>
 80018b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b6:	3b08      	subs	r3, #8
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	210f      	movs	r1, #15
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	401a      	ands	r2, r3
 80018cc:	6a39      	ldr	r1, [r7, #32]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	fa01 f303 	lsl.w	r3, r1, r3
 80018d4:	431a      	orrs	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 80b1 	beq.w	8001a4a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001a20 <HAL_GPIO_Init+0x2b8>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	4a4c      	ldr	r2, [pc, #304]	@ (8001a20 <HAL_GPIO_Init+0x2b8>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6193      	str	r3, [r2, #24]
 80018f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001a20 <HAL_GPIO_Init+0x2b8>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001900:	4a48      	ldr	r2, [pc, #288]	@ (8001a24 <HAL_GPIO_Init+0x2bc>)
 8001902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001904:	089b      	lsrs	r3, r3, #2
 8001906:	3302      	adds	r3, #2
 8001908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	220f      	movs	r2, #15
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4013      	ands	r3, r2
 8001922:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a40      	ldr	r2, [pc, #256]	@ (8001a28 <HAL_GPIO_Init+0x2c0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d013      	beq.n	8001954 <HAL_GPIO_Init+0x1ec>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a3f      	ldr	r2, [pc, #252]	@ (8001a2c <HAL_GPIO_Init+0x2c4>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d00d      	beq.n	8001950 <HAL_GPIO_Init+0x1e8>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a3e      	ldr	r2, [pc, #248]	@ (8001a30 <HAL_GPIO_Init+0x2c8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d007      	beq.n	800194c <HAL_GPIO_Init+0x1e4>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a3d      	ldr	r2, [pc, #244]	@ (8001a34 <HAL_GPIO_Init+0x2cc>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d101      	bne.n	8001948 <HAL_GPIO_Init+0x1e0>
 8001944:	2303      	movs	r3, #3
 8001946:	e006      	b.n	8001956 <HAL_GPIO_Init+0x1ee>
 8001948:	2304      	movs	r3, #4
 800194a:	e004      	b.n	8001956 <HAL_GPIO_Init+0x1ee>
 800194c:	2302      	movs	r3, #2
 800194e:	e002      	b.n	8001956 <HAL_GPIO_Init+0x1ee>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <HAL_GPIO_Init+0x1ee>
 8001954:	2300      	movs	r3, #0
 8001956:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001958:	f002 0203 	and.w	r2, r2, #3
 800195c:	0092      	lsls	r2, r2, #2
 800195e:	4093      	lsls	r3, r2
 8001960:	68fa      	ldr	r2, [r7, #12]
 8001962:	4313      	orrs	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001966:	492f      	ldr	r1, [pc, #188]	@ (8001a24 <HAL_GPIO_Init+0x2bc>)
 8001968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800196a:	089b      	lsrs	r3, r3, #2
 800196c:	3302      	adds	r3, #2
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001980:	4b2d      	ldr	r3, [pc, #180]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	492c      	ldr	r1, [pc, #176]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800198e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	43db      	mvns	r3, r3
 8001996:	4928      	ldr	r1, [pc, #160]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 8001998:	4013      	ands	r3, r2
 800199a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019a8:	4b23      	ldr	r3, [pc, #140]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	4922      	ldr	r1, [pc, #136]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60cb      	str	r3, [r1, #12]
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019b6:	4b20      	ldr	r3, [pc, #128]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	43db      	mvns	r3, r3
 80019be:	491e      	ldr	r1, [pc, #120]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d006      	beq.n	80019de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019d0:	4b19      	ldr	r3, [pc, #100]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	4918      	ldr	r1, [pc, #96]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]
 80019dc:	e006      	b.n	80019ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019de:	4b16      	ldr	r3, [pc, #88]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	69bb      	ldr	r3, [r7, #24]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	4914      	ldr	r1, [pc, #80]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019e8:	4013      	ands	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d021      	beq.n	8001a3c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	490e      	ldr	r1, [pc, #56]	@ (8001a38 <HAL_GPIO_Init+0x2d0>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	600b      	str	r3, [r1, #0]
 8001a04:	e021      	b.n	8001a4a <HAL_GPIO_Init+0x2e2>
 8001a06:	bf00      	nop
 8001a08:	10320000 	.word	0x10320000
 8001a0c:	10310000 	.word	0x10310000
 8001a10:	10220000 	.word	0x10220000
 8001a14:	10210000 	.word	0x10210000
 8001a18:	10120000 	.word	0x10120000
 8001a1c:	10110000 	.word	0x10110000
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000
 8001a28:	40010800 	.word	0x40010800
 8001a2c:	40010c00 	.word	0x40010c00
 8001a30:	40011000 	.word	0x40011000
 8001a34:	40011400 	.word	0x40011400
 8001a38:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a6c <HAL_GPIO_Init+0x304>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	43db      	mvns	r3, r3
 8001a44:	4909      	ldr	r1, [pc, #36]	@ (8001a6c <HAL_GPIO_Init+0x304>)
 8001a46:	4013      	ands	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a56:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f47f ae8e 	bne.w	800177c <HAL_GPIO_Init+0x14>
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	372c      	adds	r7, #44	@ 0x2c
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	40010400 	.word	0x40010400

08001a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a80:	787b      	ldrb	r3, [r7, #1]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a86:	887a      	ldrh	r2, [r7, #2]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a8c:	e003      	b.n	8001a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	041a      	lsls	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	611a      	str	r2, [r3, #16]
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr

08001aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e12b      	b.n	8001d0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d106      	bne.n	8001acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff faa4 	bl	8001014 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2224      	movs	r2, #36	@ 0x24
 8001ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f022 0201 	bic.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001af2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b04:	f002 fbe4 	bl	80042d0 <HAL_RCC_GetPCLK1Freq>
 8001b08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4a81      	ldr	r2, [pc, #516]	@ (8001d14 <HAL_I2C_Init+0x274>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d807      	bhi.n	8001b24 <HAL_I2C_Init+0x84>
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4a80      	ldr	r2, [pc, #512]	@ (8001d18 <HAL_I2C_Init+0x278>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	bf94      	ite	ls
 8001b1c:	2301      	movls	r3, #1
 8001b1e:	2300      	movhi	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	e006      	b.n	8001b32 <HAL_I2C_Init+0x92>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4a7d      	ldr	r2, [pc, #500]	@ (8001d1c <HAL_I2C_Init+0x27c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	bf94      	ite	ls
 8001b2c:	2301      	movls	r3, #1
 8001b2e:	2300      	movhi	r3, #0
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e0e7      	b.n	8001d0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4a78      	ldr	r2, [pc, #480]	@ (8001d20 <HAL_I2C_Init+0x280>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0c9b      	lsrs	r3, r3, #18
 8001b44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	4a6a      	ldr	r2, [pc, #424]	@ (8001d14 <HAL_I2C_Init+0x274>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d802      	bhi.n	8001b74 <HAL_I2C_Init+0xd4>
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	3301      	adds	r3, #1
 8001b72:	e009      	b.n	8001b88 <HAL_I2C_Init+0xe8>
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001b7a:	fb02 f303 	mul.w	r3, r2, r3
 8001b7e:	4a69      	ldr	r2, [pc, #420]	@ (8001d24 <HAL_I2C_Init+0x284>)
 8001b80:	fba2 2303 	umull	r2, r3, r2, r3
 8001b84:	099b      	lsrs	r3, r3, #6
 8001b86:	3301      	adds	r3, #1
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001b9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	495c      	ldr	r1, [pc, #368]	@ (8001d14 <HAL_I2C_Init+0x274>)
 8001ba4:	428b      	cmp	r3, r1
 8001ba6:	d819      	bhi.n	8001bdc <HAL_I2C_Init+0x13c>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	1e59      	subs	r1, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bb6:	1c59      	adds	r1, r3, #1
 8001bb8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001bbc:	400b      	ands	r3, r1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00a      	beq.n	8001bd8 <HAL_I2C_Init+0x138>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1e59      	subs	r1, r3, #1
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd6:	e051      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001bd8:	2304      	movs	r3, #4
 8001bda:	e04f      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d111      	bne.n	8001c08 <HAL_I2C_Init+0x168>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1e58      	subs	r0, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6859      	ldr	r1, [r3, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	440b      	add	r3, r1
 8001bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	e012      	b.n	8001c2e <HAL_I2C_Init+0x18e>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1e58      	subs	r0, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	0099      	lsls	r1, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_I2C_Init+0x196>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e022      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10e      	bne.n	8001c5c <HAL_I2C_Init+0x1bc>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e58      	subs	r0, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6859      	ldr	r1, [r3, #4]
 8001c46:	460b      	mov	r3, r1
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	440b      	add	r3, r1
 8001c4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c50:	3301      	adds	r3, #1
 8001c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c5a:	e00f      	b.n	8001c7c <HAL_I2C_Init+0x1dc>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e58      	subs	r0, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6859      	ldr	r1, [r3, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	0099      	lsls	r1, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c72:	3301      	adds	r3, #1
 8001c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	6809      	ldr	r1, [r1, #0]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69da      	ldr	r2, [r3, #28]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	431a      	orrs	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001caa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6911      	ldr	r1, [r2, #16]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	68d2      	ldr	r2, [r2, #12]
 8001cb6:	4311      	orrs	r1, r2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	430b      	orrs	r3, r1
 8001cbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695a      	ldr	r2, [r3, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	699b      	ldr	r3, [r3, #24]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	000186a0 	.word	0x000186a0
 8001d18:	001e847f 	.word	0x001e847f
 8001d1c:	003d08ff 	.word	0x003d08ff
 8001d20:	431bde83 	.word	0x431bde83
 8001d24:	10624dd3 	.word	0x10624dd3

08001d28 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	@ 0x28
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	460b      	mov	r3, r1
 8001d36:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d38:	f7ff fbda 	bl	80014f0 <HAL_GetTick>
 8001d3c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b20      	cmp	r3, #32
 8001d4c:	f040 8111 	bne.w	8001f72 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	2319      	movs	r3, #25
 8001d56:	2201      	movs	r2, #1
 8001d58:	4988      	ldr	r1, [pc, #544]	@ (8001f7c <HAL_I2C_IsDeviceReady+0x254>)
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f000 f912 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d66:	2302      	movs	r3, #2
 8001d68:	e104      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_I2C_IsDeviceReady+0x50>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e0fd      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x24c>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d007      	beq.n	8001d9e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2224      	movs	r2, #36	@ 0x24
 8001db2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4a70      	ldr	r2, [pc, #448]	@ (8001f80 <HAL_I2C_IsDeviceReady+0x258>)
 8001dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dd0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dde:	68f8      	ldr	r0, [r7, #12]
 8001de0:	f000 f8d0 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00d      	beq.n	8001e06 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001df8:	d103      	bne.n	8001e02 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e00:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e0b6      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e06:	897b      	ldrh	r3, [r7, #10]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e14:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001e16:	f7ff fb6b 	bl	80014f0 <HAL_GetTick>
 8001e1a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	bf0c      	ite	eq
 8001e2a:	2301      	moveq	r3, #1
 8001e2c:	2300      	movne	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e40:	bf0c      	ite	eq
 8001e42:	2301      	moveq	r3, #1
 8001e44:	2300      	movne	r3, #0
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e4a:	e025      	b.n	8001e98 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e4c:	f7ff fb50 	bl	80014f0 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d302      	bcc.n	8001e62 <HAL_I2C_IsDeviceReady+0x13a>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d103      	bne.n	8001e6a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	22a0      	movs	r2, #160	@ 0xa0
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	bf0c      	ite	eq
 8001e78:	2301      	moveq	r3, #1
 8001e7a:	2300      	movne	r3, #0
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e8e:	bf0c      	ite	eq
 8001e90:	2301      	moveq	r3, #1
 8001e92:	2300      	movne	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2ba0      	cmp	r3, #160	@ 0xa0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_I2C_IsDeviceReady+0x188>
 8001ea4:	7dfb      	ldrb	r3, [r7, #23]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d102      	bne.n	8001eb0 <HAL_I2C_IsDeviceReady+0x188>
 8001eaa:	7dbb      	ldrb	r3, [r7, #22]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0cd      	beq.n	8001e4c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d129      	bne.n	8001f1a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ed4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2319      	movs	r3, #25
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4921      	ldr	r1, [pc, #132]	@ (8001f7c <HAL_I2C_IsDeviceReady+0x254>)
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f844 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e036      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2220      	movs	r2, #32
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001f16:	2300      	movs	r3, #0
 8001f18:	e02c      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f28:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001f32:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2319      	movs	r3, #25
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	490f      	ldr	r1, [pc, #60]	@ (8001f7c <HAL_I2C_IsDeviceReady+0x254>)
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f820 	bl	8001f84 <I2C_WaitOnFlagUntilTimeout>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e012      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	3301      	adds	r3, #1
 8001f52:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	f4ff af32 	bcc.w	8001dc2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2220      	movs	r2, #32
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001f72:	2302      	movs	r3, #2
  }
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3720      	adds	r7, #32
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	00100002 	.word	0x00100002
 8001f80:	ffff0000 	.word	0xffff0000

08001f84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	4613      	mov	r3, r2
 8001f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f94:	e048      	b.n	8002028 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d044      	beq.n	8002028 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f9e:	f7ff faa7 	bl	80014f0 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	683a      	ldr	r2, [r7, #0]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d302      	bcc.n	8001fb4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d139      	bne.n	8002028 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	0c1b      	lsrs	r3, r3, #16
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d10d      	bne.n	8001fda <I2C_WaitOnFlagUntilTimeout+0x56>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	43da      	mvns	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	e00c      	b.n	8001ff4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	43da      	mvns	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	bf0c      	ite	eq
 8001fec:	2301      	moveq	r3, #1
 8001fee:	2300      	movne	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d116      	bne.n	8002028 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2220      	movs	r2, #32
 8002004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	f043 0220 	orr.w	r2, r3, #32
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e023      	b.n	8002070 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	0c1b      	lsrs	r3, r3, #16
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b01      	cmp	r3, #1
 8002030:	d10d      	bne.n	800204e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	43da      	mvns	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	4013      	ands	r3, r2
 800203e:	b29b      	uxth	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	bf0c      	ite	eq
 8002044:	2301      	moveq	r3, #1
 8002046:	2300      	movne	r3, #0
 8002048:	b2db      	uxtb	r3, r3
 800204a:	461a      	mov	r2, r3
 800204c:	e00c      	b.n	8002068 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699b      	ldr	r3, [r3, #24]
 8002054:	43da      	mvns	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	4013      	ands	r3, r2
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	bf0c      	ite	eq
 8002060:	2301      	moveq	r3, #1
 8002062:	2300      	movne	r3, #0
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	79fb      	ldrb	r3, [r7, #7]
 800206a:	429a      	cmp	r2, r3
 800206c:	d093      	beq.n	8001f96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e0e8      	b.n	800225c <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f006 fc32 	bl	8008908 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2203      	movs	r2, #3
 80020a8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f002 fa99 	bl	80045ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3304      	adds	r3, #4
 80020c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c6:	f002 fa6f 	bl	80045a8 <USB_CoreInit>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d005      	beq.n	80020dc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2202      	movs	r2, #2
 80020d4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e0bf      	b.n	800225c <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f002 fa9d 	bl	8004622 <USB_SetCurrentMode>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d005      	beq.n	80020fa <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2202      	movs	r2, #2
 80020f2:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0b0      	b.n	800225c <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	73fb      	strb	r3, [r7, #15]
 80020fe:	e03e      	b.n	800217e <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	440b      	add	r3, r1
 800210e:	3311      	adds	r3, #17
 8002110:	2201      	movs	r2, #1
 8002112:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	3310      	adds	r3, #16
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002128:	7bfa      	ldrb	r2, [r7, #15]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	440b      	add	r3, r1
 8002136:	3313      	adds	r3, #19
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800213c:	7bfa      	ldrb	r2, [r7, #15]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	440b      	add	r3, r1
 800214a:	3320      	adds	r3, #32
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	3324      	adds	r3, #36	@ 0x24
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	440b      	add	r3, r1
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	3301      	adds	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	791b      	ldrb	r3, [r3, #4]
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	429a      	cmp	r2, r3
 8002186:	d3bb      	bcc.n	8002100 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	e044      	b.n	8002218 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	440b      	add	r3, r1
 800219c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021a4:	7bfa      	ldrb	r2, [r7, #15]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	00db      	lsls	r3, r3, #3
 80021b0:	440b      	add	r3, r1
 80021b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021ba:	7bfa      	ldrb	r2, [r7, #15]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	440b      	add	r3, r1
 80021c8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021e6:	7bfa      	ldrb	r2, [r7, #15]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021fc:	7bfa      	ldrb	r2, [r7, #15]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	3301      	adds	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	791b      	ldrb	r3, [r3, #4]
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	429a      	cmp	r2, r3
 8002220:	d3b5      	bcc.n	800218e <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3304      	adds	r3, #4
 800222a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800222c:	f002 fa05 	bl	800463a <USB_DevInit>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2202      	movs	r2, #2
 800223a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e00c      	b.n	800225c <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f004 fc84 	bl	8006b62 <USB_DevDisconnect>

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_PCD_Start+0x16>
 8002276:	2302      	movs	r3, #2
 8002278:	e016      	b.n	80022a8 <HAL_PCD_Start+0x44>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f002 f99b 	bl	80045c2 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800228c:	2101      	movs	r1, #1
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f006 fdad 	bl	8008dee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f004 fc58 	bl	8006b4e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f004 fc5a 	bl	8006b76 <USB_ReadInterrupts>
 80022c2:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fb1a 	bl	8002908 <PCD_EP_ISR_Handler>

    return;
 80022d4:	e119      	b.n	800250a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022f2:	b292      	uxth	r2, r2
 80022f4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f006 fb80 	bl	80089fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80022fe:	2100      	movs	r1, #0
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f000 f905 	bl	8002510 <HAL_PCD_SetAddress>

    return;
 8002306:	e100      	b.n	800250a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00c      	beq.n	800232c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800231a:	b29a      	uxth	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002324:	b292      	uxth	r2, r2
 8002326:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800232a:	e0ee      	b.n	800250a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800233e:	b29a      	uxth	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002348:	b292      	uxth	r2, r2
 800234a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800234e:	e0dc      	b.n	800250a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d027      	beq.n	80023aa <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002362:	b29a      	uxth	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0204 	bic.w	r2, r2, #4
 800236c:	b292      	uxth	r2, r2
 800236e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800237a:	b29a      	uxth	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0208 	bic.w	r2, r2, #8
 8002384:	b292      	uxth	r2, r2
 8002386:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f006 fb70 	bl	8008a70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002398:	b29a      	uxth	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80023a2:	b292      	uxth	r2, r2
 80023a4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80023a8:	e0af      	b.n	800250a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f000 8083 	beq.w	80024bc <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 80023b6:	2300      	movs	r3, #0
 80023b8:	77fb      	strb	r3, [r7, #31]
 80023ba:	e010      	b.n	80023de <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	7ffb      	ldrb	r3, [r7, #31]
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	441a      	add	r2, r3
 80023c8:	7ffb      	ldrb	r3, [r7, #31]
 80023ca:	8812      	ldrh	r2, [r2, #0]
 80023cc:	b292      	uxth	r2, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	3320      	adds	r3, #32
 80023d2:	443b      	add	r3, r7
 80023d4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80023d8:	7ffb      	ldrb	r3, [r7, #31]
 80023da:	3301      	adds	r3, #1
 80023dc:	77fb      	strb	r3, [r7, #31]
 80023de:	7ffb      	ldrb	r3, [r7, #31]
 80023e0:	2b07      	cmp	r3, #7
 80023e2:	d9eb      	bls.n	80023bc <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	b292      	uxth	r2, r2
 80023f8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002404:	b29a      	uxth	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	b292      	uxth	r2, r2
 8002410:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8002414:	bf00      	nop
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800241e:	b29b      	uxth	r3, r3
 8002420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f6      	beq.n	8002416 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002430:	b29a      	uxth	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800243a:	b292      	uxth	r2, r2
 800243c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8002440:	2300      	movs	r3, #0
 8002442:	77fb      	strb	r3, [r7, #31]
 8002444:	e00f      	b.n	8002466 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8002446:	7ffb      	ldrb	r3, [r7, #31]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	4611      	mov	r1, r2
 800244e:	7ffa      	ldrb	r2, [r7, #31]
 8002450:	0092      	lsls	r2, r2, #2
 8002452:	440a      	add	r2, r1
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	3320      	adds	r3, #32
 8002458:	443b      	add	r3, r7
 800245a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800245e:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8002460:	7ffb      	ldrb	r3, [r7, #31]
 8002462:	3301      	adds	r3, #1
 8002464:	77fb      	strb	r3, [r7, #31]
 8002466:	7ffb      	ldrb	r3, [r7, #31]
 8002468:	2b07      	cmp	r3, #7
 800246a:	d9ec      	bls.n	8002446 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002474:	b29a      	uxth	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0208 	orr.w	r2, r2, #8
 800247e:	b292      	uxth	r2, r2
 8002480:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800248c:	b29a      	uxth	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002496:	b292      	uxth	r2, r2
 8002498:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0204 	orr.w	r2, r2, #4
 80024ae:	b292      	uxth	r2, r2
 80024b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f006 fac1 	bl	8008a3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80024ba:	e026      	b.n	800250a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00f      	beq.n	80024e6 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024d8:	b292      	uxth	r2, r2
 80024da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f006 fa7f 	bl	80089e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80024e4:	e011      	b.n	800250a <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00c      	beq.n	800250a <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002502:	b292      	uxth	r2, r2
 8002504:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002508:	bf00      	nop
  }
}
 800250a:	3720      	adds	r7, #32
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_PCD_SetAddress+0x1a>
 8002526:	2302      	movs	r3, #2
 8002528:	e012      	b.n	8002550 <HAL_PCD_SetAddress+0x40>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2201      	movs	r2, #1
 800252e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f004 faf1 	bl	8006b28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	4608      	mov	r0, r1
 8002562:	4611      	mov	r1, r2
 8002564:	461a      	mov	r2, r3
 8002566:	4603      	mov	r3, r0
 8002568:	70fb      	strb	r3, [r7, #3]
 800256a:	460b      	mov	r3, r1
 800256c:	803b      	strh	r3, [r7, #0]
 800256e:	4613      	mov	r3, r2
 8002570:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800257a:	2b00      	cmp	r3, #0
 800257c:	da0e      	bge.n	800259c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	f003 0207 	and.w	r2, r3, #7
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	00db      	lsls	r3, r3, #3
 800258c:	3310      	adds	r3, #16
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	705a      	strb	r2, [r3, #1]
 800259a:	e00e      	b.n	80025ba <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	f003 0207 	and.w	r2, r3, #7
 80025a2:	4613      	mov	r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4413      	add	r3, r2
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80025c6:	883a      	ldrh	r2, [r7, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	78ba      	ldrb	r2, [r7, #2]
 80025d0:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80025d2:	78bb      	ldrb	r3, [r7, #2]
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d102      	bne.n	80025de <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2200      	movs	r2, #0
 80025dc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d101      	bne.n	80025ec <HAL_PCD_EP_Open+0x94>
 80025e8:	2302      	movs	r3, #2
 80025ea:	e00e      	b.n	800260a <HAL_PCD_EP_Open+0xb2>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68f9      	ldr	r1, [r7, #12]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 f83a 	bl	8004674 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002608:	7afb      	ldrb	r3, [r7, #11]
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002612:	b580      	push	{r7, lr}
 8002614:	b084      	sub	sp, #16
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800261e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002622:	2b00      	cmp	r3, #0
 8002624:	da0e      	bge.n	8002644 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002626:	78fb      	ldrb	r3, [r7, #3]
 8002628:	f003 0207 	and.w	r2, r3, #7
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	3310      	adds	r3, #16
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	4413      	add	r3, r2
 800263a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2201      	movs	r2, #1
 8002640:	705a      	strb	r2, [r3, #1]
 8002642:	e00e      	b.n	8002662 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	f003 0207 	and.w	r2, r3, #7
 800264a:	4613      	mov	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	b2da      	uxtb	r2, r3
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_PCD_EP_Close+0x6a>
 8002678:	2302      	movs	r3, #2
 800267a:	e00e      	b.n	800269a <HAL_PCD_EP_Close+0x88>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68f9      	ldr	r1, [r7, #12]
 800268a:	4618      	mov	r0, r3
 800268c:	f002 fbb2 	bl	8004df4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b086      	sub	sp, #24
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	60f8      	str	r0, [r7, #12]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	460b      	mov	r3, r1
 80026b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026b2:	7afb      	ldrb	r3, [r7, #11]
 80026b4:	f003 0207 	and.w	r2, r3, #7
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4413      	add	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2200      	movs	r2, #0
 80026da:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2200      	movs	r2, #0
 80026e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026e2:	7afb      	ldrb	r3, [r7, #11]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6979      	ldr	r1, [r7, #20]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f002 fd69 	bl	80051cc <USB_EPStartXfer>

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002710:	78fb      	ldrb	r3, [r7, #3]
 8002712:	f003 0207 	and.w	r2, r3, #7
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	440b      	add	r3, r1
 8002722:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr

08002732 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
 800273e:	460b      	mov	r3, r1
 8002740:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002742:	7afb      	ldrb	r3, [r7, #11]
 8002744:	f003 0207 	and.w	r2, r3, #7
 8002748:	4613      	mov	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	3310      	adds	r3, #16
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4413      	add	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2200      	movs	r2, #0
 8002776:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2201      	movs	r2, #1
 800277c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800277e:	7afb      	ldrb	r3, [r7, #11]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	b2da      	uxtb	r2, r3
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6979      	ldr	r1, [r7, #20]
 8002790:	4618      	mov	r0, r3
 8002792:	f002 fd1b 	bl	80051cc <USB_EPStartXfer>

  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027ac:	78fb      	ldrb	r3, [r7, #3]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	7912      	ldrb	r2, [r2, #4]
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e04c      	b.n	8002858 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	da0e      	bge.n	80027e4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	f003 0207 	and.w	r2, r3, #7
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	3310      	adds	r3, #16
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2201      	movs	r2, #1
 80027e0:	705a      	strb	r2, [r3, #1]
 80027e2:	e00c      	b.n	80027fe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2201      	movs	r2, #1
 8002802:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	b2da      	uxtb	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_PCD_EP_SetStall+0x7e>
 800281a:	2302      	movs	r3, #2
 800281c:	e01c      	b.n	8002858 <HAL_PCD_EP_SetStall+0xb8>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68f9      	ldr	r1, [r7, #12]
 800282c:	4618      	mov	r0, r3
 800282e:	f004 f87e 	bl	800692e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	2b00      	cmp	r3, #0
 800283a:	d108      	bne.n	800284e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8002846:	4619      	mov	r1, r3
 8002848:	4610      	mov	r0, r2
 800284a:	f004 f9a3 	bl	8006b94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	7912      	ldrb	r2, [r2, #4]
 8002876:	4293      	cmp	r3, r2
 8002878:	d901      	bls.n	800287e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e040      	b.n	8002900 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800287e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002882:	2b00      	cmp	r3, #0
 8002884:	da0e      	bge.n	80028a4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002886:	78fb      	ldrb	r3, [r7, #3]
 8002888:	f003 0207 	and.w	r2, r3, #7
 800288c:	4613      	mov	r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	4413      	add	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	3310      	adds	r3, #16
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	4413      	add	r3, r2
 800289a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2201      	movs	r2, #1
 80028a0:	705a      	strb	r2, [r3, #1]
 80028a2:	e00e      	b.n	80028c2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028a4:	78fb      	ldrb	r3, [r7, #3]
 80028a6:	f003 0207 	and.w	r2, r3, #7
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028c8:	78fb      	ldrb	r3, [r7, #3]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_PCD_EP_ClrStall+0x82>
 80028de:	2302      	movs	r3, #2
 80028e0:	e00e      	b.n	8002900 <HAL_PCD_EP_ClrStall+0xa0>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2201      	movs	r2, #1
 80028e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68f9      	ldr	r1, [r7, #12]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f004 f86c 	bl	80069ce <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b096      	sub	sp, #88	@ 0x58
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002910:	e3bb      	b.n	800308a <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800291a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800291e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 800292c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002930:	2b00      	cmp	r3, #0
 8002932:	f040 8175 	bne.w	8002c20 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002936:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b00      	cmp	r3, #0
 8002940:	d14e      	bne.n	80029e0 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800294e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002952:	81fb      	strh	r3, [r7, #14]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	89fb      	ldrh	r3, [r7, #14]
 800295a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800295e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002962:	b29b      	uxth	r3, r3
 8002964:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3310      	adds	r3, #16
 800296a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002974:	b29b      	uxth	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	3302      	adds	r3, #2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6812      	ldr	r2, [r2, #0]
 8002988:	4413      	add	r3, r2
 800298a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800298e:	881b      	ldrh	r3, [r3, #0]
 8002990:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002996:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	441a      	add	r2, r3
 80029a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80029a6:	2100      	movs	r1, #0
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f006 f800 	bl	80089ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	7b5b      	ldrb	r3, [r3, #13]
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8368 	beq.w	800308a <PCD_EP_ISR_Handler+0x782>
 80029ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 8363 	bne.w	800308a <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	7b5b      	ldrb	r3, [r3, #13]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	735a      	strb	r2, [r3, #13]
 80029de:	e354      	b.n	800308a <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029e6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80029f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80029f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d034      	beq.n	8002a68 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	461a      	mov	r2, r3
 8002a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	4413      	add	r3, r2
 8002a12:	3306      	adds	r3, #6
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002a26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a28:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8002a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a36:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a3a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	f004 f8f9 	bl	8006c34 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	881b      	ldrh	r3, [r3, #0]
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002a4e:	4013      	ands	r3, r2
 8002a50:	823b      	strh	r3, [r7, #16]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	8a3a      	ldrh	r2, [r7, #16]
 8002a58:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a5c:	b292      	uxth	r2, r2
 8002a5e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f005 ff77 	bl	8008954 <HAL_PCD_SetupStageCallback>
 8002a66:	e310      	b.n	800308a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002a68:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f280 830c 	bge.w	800308a <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002a7e:	4013      	ands	r3, r2
 8002a80:	83fb      	strh	r3, [r7, #30]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	8bfa      	ldrh	r2, [r7, #30]
 8002a88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a8c:	b292      	uxth	r2, r2
 8002a8e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3306      	adds	r3, #6
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d019      	beq.n	8002af8 <PCD_EP_ISR_Handler+0x1f0>
 8002ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d015      	beq.n	8002af8 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad2:	6959      	ldr	r1, [r3, #20]
 8002ad4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ada:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	f004 f8a9 	bl	8006c34 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae4:	695a      	ldr	r2, [r3, #20]
 8002ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae8:	69db      	ldr	r3, [r3, #28]
 8002aea:	441a      	add	r2, r3
 8002aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002af0:	2100      	movs	r1, #0
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f005 ff40 	bl	8008978 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002b02:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f040 82bd 	bne.w	800308a <PCD_EP_ISR_Handler+0x782>
 8002b10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002b14:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002b18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002b1c:	f000 82b5 	beq.w	800308a <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4413      	add	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	801a      	strh	r2, [r3, #0]
 8002b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b56:	d91d      	bls.n	8002b94 <PCD_EP_ISR_Handler+0x28c>
 8002b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	095b      	lsrs	r3, r3, #5
 8002b5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d102      	bne.n	8002b72 <PCD_EP_ISR_Handler+0x26a>
 8002b6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	029b      	lsls	r3, r3, #10
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	4313      	orrs	r3, r2
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	801a      	strh	r2, [r3, #0]
 8002b92:	e026      	b.n	8002be2 <PCD_EP_ISR_Handler+0x2da>
 8002b94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10a      	bne.n	8002bb2 <PCD_EP_ISR_Handler+0x2aa>
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ba6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	801a      	strh	r2, [r3, #0]
 8002bb0:	e017      	b.n	8002be2 <PCD_EP_ISR_Handler+0x2da>
 8002bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	085b      	lsrs	r3, r3, #1
 8002bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <PCD_EP_ISR_Handler+0x2c4>
 8002bc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bc8:	3301      	adds	r3, #1
 8002bca:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	029b      	lsls	r3, r3, #10
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf2:	827b      	strh	r3, [r7, #18]
 8002bf4:	8a7b      	ldrh	r3, [r7, #18]
 8002bf6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002bfa:	827b      	strh	r3, [r7, #18]
 8002bfc:	8a7b      	ldrh	r3, [r7, #18]
 8002bfe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002c02:	827b      	strh	r3, [r7, #18]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	8a7b      	ldrh	r3, [r7, #18]
 8002c0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002c0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002c12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	8013      	strh	r3, [r2, #0]
 8002c1e:	e234      	b.n	800308a <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	461a      	mov	r2, r3
 8002c26:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c34:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f280 80fc 	bge.w	8002e36 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8002c54:	4013      	ands	r3, r2
 8002c56:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8002c6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c70:	b292      	uxth	r2, r2
 8002c72:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002c74:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	4413      	add	r3, r2
 8002c88:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c8c:	7b1b      	ldrb	r3, [r3, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d125      	bne.n	8002cde <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3306      	adds	r3, #6
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6812      	ldr	r2, [r2, #0]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cba:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8002cbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8092 	beq.w	8002dec <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
 8002ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cce:	6959      	ldr	r1, [r3, #20]
 8002cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd2:	88da      	ldrh	r2, [r3, #6]
 8002cd4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002cd8:	f003 ffac 	bl	8006c34 <USB_ReadPMA>
 8002cdc:	e086      	b.n	8002dec <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ce0:	78db      	ldrb	r3, [r3, #3]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d10a      	bne.n	8002cfc <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002ce6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002cea:	461a      	mov	r2, r3
 8002cec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f9d9 	bl	80030a6 <HAL_PCD_EP_DB_Receive>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8002cfa:	e077      	b.n	8002dec <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	461a      	mov	r2, r3
 8002d02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d16:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	441a      	add	r2, r3
 8002d28:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8002d2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8002d30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8002d34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d38:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	461a      	mov	r2, r3
 8002d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	881b      	ldrh	r3, [r3, #0]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d024      	beq.n	8002da4 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3302      	adds	r3, #2
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d82:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002d86:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d02e      	beq.n	8002dec <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6818      	ldr	r0, [r3, #0]
 8002d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d94:	6959      	ldr	r1, [r3, #20]
 8002d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d98:	891a      	ldrh	r2, [r3, #8]
 8002d9a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002d9e:	f003 ff49 	bl	8006c34 <USB_ReadPMA>
 8002da2:	e023      	b.n	8002dec <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4413      	add	r3, r2
 8002db8:	3306      	adds	r3, #6
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6812      	ldr	r2, [r2, #0]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002dc6:	881b      	ldrh	r3, [r3, #0]
 8002dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002dcc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8002dd0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d009      	beq.n	8002dec <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dde:	6959      	ldr	r1, [r3, #20]
 8002de0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de2:	895a      	ldrh	r2, [r3, #10]
 8002de4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002de8:	f003 ff24 	bl	8006c34 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dee:	69da      	ldr	r2, [r3, #28]
 8002df0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002df4:	441a      	add	r2, r3
 8002df6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002e02:	441a      	add	r2, r3
 8002e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e06:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002e08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d005      	beq.n	8002e1c <PCD_EP_ISR_Handler+0x514>
 8002e10:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002e14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d206      	bcs.n	8002e2a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4619      	mov	r1, r3
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f005 fda8 	bl	8008978 <HAL_PCD_DataOutStageCallback>
 8002e28:	e005      	b.n	8002e36 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e30:	4618      	mov	r0, r3
 8002e32:	f002 f9cb 	bl	80051cc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002e36:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8123 	beq.w	800308a <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8002e44:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	3310      	adds	r3, #16
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	4413      	add	r3, r2
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8002e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e72:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	441a      	add	r2, r3
 8002e84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e96:	78db      	ldrb	r3, [r3, #3]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	f040 80a2 	bne.w	8002fe2 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8002e9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea6:	7b1b      	ldrb	r3, [r3, #12]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 8093 	beq.w	8002fd4 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002eae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002eb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d046      	beq.n	8002f48 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002eba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ebc:	785b      	ldrb	r3, [r3, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d126      	bne.n	8002f10 <PCD_EP_ISR_Handler+0x608>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	4413      	add	r3, r2
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	011a      	lsls	r2, r3, #4
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002ee8:	623b      	str	r3, [r7, #32]
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	801a      	strh	r2, [r3, #0]
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	801a      	strh	r2, [r3, #0]
 8002f0e:	e061      	b.n	8002fd4 <PCD_EP_ISR_Handler+0x6cc>
 8002f10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f12:	785b      	ldrb	r3, [r3, #1]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d15d      	bne.n	8002fd4 <PCD_EP_ISR_Handler+0x6cc>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f2c:	4413      	add	r3, r2
 8002f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	011a      	lsls	r2, r3, #4
 8002f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f38:	4413      	add	r3, r2
 8002f3a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8002f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f42:	2200      	movs	r2, #0
 8002f44:	801a      	strh	r2, [r3, #0]
 8002f46:	e045      	b.n	8002fd4 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f50:	785b      	ldrb	r3, [r3, #1]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d126      	bne.n	8002fa4 <PCD_EP_ISR_Handler+0x69c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f6a:	4413      	add	r3, r2
 8002f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	011a      	lsls	r2, r3, #4
 8002f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f76:	4413      	add	r3, r2
 8002f78:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8c:	801a      	strh	r2, [r3, #0]
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa0:	801a      	strh	r2, [r3, #0]
 8002fa2:	e017      	b.n	8002fd4 <PCD_EP_ISR_Handler+0x6cc>
 8002fa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d113      	bne.n	8002fd4 <PCD_EP_ISR_Handler+0x6cc>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fba:	4413      	add	r3, r2
 8002fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	011a      	lsls	r2, r3, #4
 8002fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	4619      	mov	r1, r3
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f005 fce7 	bl	80089ae <HAL_PCD_DataInStageCallback>
 8002fe0:	e053      	b.n	800308a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8002fe2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8002fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d146      	bne.n	800307c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	3302      	adds	r3, #2
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	4413      	add	r3, r2
 800300c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003016:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800301a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003022:	429a      	cmp	r2, r3
 8003024:	d907      	bls.n	8003036 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800302e:	1ad2      	subs	r2, r2, r3
 8003030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003032:	619a      	str	r2, [r3, #24]
 8003034:	e002      	b.n	800303c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003036:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003038:	2200      	movs	r2, #0
 800303a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800303c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d106      	bne.n	8003052 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	4619      	mov	r1, r3
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f005 fcaf 	bl	80089ae <HAL_PCD_DataInStageCallback>
 8003050:	e01b      	b.n	800308a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800305a:	441a      	add	r2, r3
 800305c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800305e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003062:	69da      	ldr	r2, [r3, #28]
 8003064:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003068:	441a      	add	r2, r3
 800306a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800306c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003074:	4618      	mov	r0, r3
 8003076:	f002 f8a9 	bl	80051cc <USB_EPStartXfer>
 800307a:	e006      	b.n	800308a <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800307c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003080:	461a      	mov	r2, r3
 8003082:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f91b 	bl	80032c0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003092:	b29b      	uxth	r3, r3
 8003094:	b21b      	sxth	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	f6ff ac3b 	blt.w	8002912 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3758      	adds	r7, #88	@ 0x58
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b088      	sub	sp, #32
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	4613      	mov	r3, r2
 80030b2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80030b4:	88fb      	ldrh	r3, [r7, #6]
 80030b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d07e      	beq.n	80031bc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	4413      	add	r3, r2
 80030d2:	3302      	adds	r3, #2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030e6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	699a      	ldr	r2, [r3, #24]
 80030ec:	8b7b      	ldrh	r3, [r7, #26]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d306      	bcc.n	8003100 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	699a      	ldr	r2, [r3, #24]
 80030f6:	8b7b      	ldrh	r3, [r7, #26]
 80030f8:	1ad2      	subs	r2, r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	619a      	str	r2, [r3, #24]
 80030fe:	e002      	b.n	8003106 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	2200      	movs	r2, #0
 8003104:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d123      	bne.n	8003156 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	b29b      	uxth	r3, r3
 8003120:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003128:	833b      	strh	r3, [r7, #24]
 800312a:	8b3b      	ldrh	r3, [r7, #24]
 800312c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003130:	833b      	strh	r3, [r7, #24]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	461a      	mov	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	441a      	add	r2, r3
 8003140:	8b3b      	ldrh	r3, [r7, #24]
 8003142:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003146:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800314a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800314e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003152:	b29b      	uxth	r3, r3
 8003154:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800315c:	2b00      	cmp	r3, #0
 800315e:	d01f      	beq.n	80031a0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	b29b      	uxth	r3, r3
 8003172:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800317a:	82fb      	strh	r3, [r7, #22]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	441a      	add	r2, r3
 800318a:	8afb      	ldrh	r3, [r7, #22]
 800318c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003190:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003194:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003198:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800319c:	b29b      	uxth	r3, r3
 800319e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80031a0:	8b7b      	ldrh	r3, [r7, #26]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 8087 	beq.w	80032b6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6818      	ldr	r0, [r3, #0]
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	6959      	ldr	r1, [r3, #20]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	891a      	ldrh	r2, [r3, #8]
 80031b4:	8b7b      	ldrh	r3, [r7, #26]
 80031b6:	f003 fd3d 	bl	8006c34 <USB_ReadPMA>
 80031ba:	e07c      	b.n	80032b6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4413      	add	r3, r2
 80031d0:	3306      	adds	r3, #6
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031e4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	8b7b      	ldrh	r3, [r7, #26]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d306      	bcc.n	80031fe <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	8b7b      	ldrh	r3, [r7, #26]
 80031f6:	1ad2      	subs	r2, r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	619a      	str	r2, [r3, #24]
 80031fc:	e002      	b.n	8003204 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	2200      	movs	r2, #0
 8003202:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d123      	bne.n	8003254 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b29b      	uxth	r3, r3
 800321e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003226:	83fb      	strh	r3, [r7, #30]
 8003228:	8bfb      	ldrh	r3, [r7, #30]
 800322a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800322e:	83fb      	strh	r3, [r7, #30]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	441a      	add	r2, r3
 800323e:	8bfb      	ldrh	r3, [r7, #30]
 8003240:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003244:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003248:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800324c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003250:	b29b      	uxth	r3, r3
 8003252:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003254:	88fb      	ldrh	r3, [r7, #6]
 8003256:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325a:	2b00      	cmp	r3, #0
 800325c:	d11f      	bne.n	800329e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	461a      	mov	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003278:	83bb      	strh	r3, [r7, #28]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	441a      	add	r2, r3
 8003288:	8bbb      	ldrh	r3, [r7, #28]
 800328a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800328e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003292:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003296:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800329a:	b29b      	uxth	r3, r3
 800329c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800329e:	8b7b      	ldrh	r3, [r7, #26]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6818      	ldr	r0, [r3, #0]
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	6959      	ldr	r1, [r3, #20]
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	895a      	ldrh	r2, [r3, #10]
 80032b0:	8b7b      	ldrh	r3, [r7, #26]
 80032b2:	f003 fcbf 	bl	8006c34 <USB_ReadPMA>
    }
  }

  return count;
 80032b6:	8b7b      	ldrh	r3, [r7, #26]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3720      	adds	r7, #32
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b0a4      	sub	sp, #144	@ 0x90
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	4613      	mov	r3, r2
 80032cc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 81dd 	beq.w	8003694 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	4413      	add	r3, r2
 80032ee:	3302      	adds	r3, #2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003302:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	699a      	ldr	r2, [r3, #24]
 800330a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800330e:	429a      	cmp	r2, r3
 8003310:	d907      	bls.n	8003322 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800331a:	1ad2      	subs	r2, r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	619a      	str	r2, [r3, #24]
 8003320:	e002      	b.n	8003328 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2200      	movs	r2, #0
 8003326:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f040 80b9 	bne.w	80034a4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	785b      	ldrb	r3, [r3, #1]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d126      	bne.n	8003388 <HAL_PCD_EP_DB_Transmit+0xc8>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003348:	b29b      	uxth	r3, r3
 800334a:	461a      	mov	r2, r3
 800334c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800334e:	4413      	add	r3, r2
 8003350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	011a      	lsls	r2, r3, #4
 8003358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335a:	4413      	add	r3, r2
 800335c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003360:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800336c:	b29a      	uxth	r2, r3
 800336e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003370:	801a      	strh	r2, [r3, #0]
 8003372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800337c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003380:	b29a      	uxth	r2, r3
 8003382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003384:	801a      	strh	r2, [r3, #0]
 8003386:	e01a      	b.n	80033be <HAL_PCD_EP_DB_Transmit+0xfe>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d116      	bne.n	80033be <HAL_PCD_EP_DB_Transmit+0xfe>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	637b      	str	r3, [r7, #52]	@ 0x34
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800339e:	b29b      	uxth	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a4:	4413      	add	r3, r2
 80033a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	011a      	lsls	r2, r3, #4
 80033ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033b0:	4413      	add	r3, r2
 80033b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80033b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80033b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ba:	2200      	movs	r2, #0
 80033bc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	785b      	ldrb	r3, [r3, #1]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d126      	bne.n	800341a <HAL_PCD_EP_DB_Transmit+0x15a>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	61fb      	str	r3, [r7, #28]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033da:	b29b      	uxth	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	011a      	lsls	r2, r3, #4
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80033f2:	61bb      	str	r3, [r7, #24]
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033fe:	b29a      	uxth	r2, r3
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	801a      	strh	r2, [r3, #0]
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	881b      	ldrh	r3, [r3, #0]
 8003408:	b29b      	uxth	r3, r3
 800340a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800340e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003412:	b29a      	uxth	r2, r3
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	801a      	strh	r2, [r3, #0]
 8003418:	e017      	b.n	800344a <HAL_PCD_EP_DB_Transmit+0x18a>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	785b      	ldrb	r3, [r3, #1]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d113      	bne.n	800344a <HAL_PCD_EP_DB_Transmit+0x18a>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800342a:	b29b      	uxth	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	4413      	add	r3, r2
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	011a      	lsls	r2, r3, #4
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	4413      	add	r3, r2
 800343e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003442:	623b      	str	r3, [r7, #32]
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	2200      	movs	r2, #0
 8003448:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	4619      	mov	r1, r3
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f005 faac 	bl	80089ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003456:	88fb      	ldrh	r3, [r7, #6]
 8003458:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 82fc 	beq.w	8003a5a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	881b      	ldrh	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800347c:	82fb      	strh	r3, [r7, #22]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	441a      	add	r2, r3
 800348c:	8afb      	ldrh	r3, [r7, #22]
 800348e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003496:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800349a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800349e:	b29b      	uxth	r3, r3
 80034a0:	8013      	strh	r3, [r2, #0]
 80034a2:	e2da      	b.n	8003a5a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034a4:	88fb      	ldrh	r3, [r7, #6]
 80034a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d021      	beq.n	80034f2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	461a      	mov	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	441a      	add	r2, r3
 80034da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80034de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	f040 82ae 	bne.w	8003a5a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003506:	441a      	add	r2, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003514:	441a      	add	r2, r3
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	6a1a      	ldr	r2, [r3, #32]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	429a      	cmp	r2, r3
 8003524:	d30b      	bcc.n	800353e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	6a1a      	ldr	r2, [r3, #32]
 8003532:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003536:	1ad2      	subs	r2, r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	621a      	str	r2, [r3, #32]
 800353c:	e017      	b.n	800356e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d108      	bne.n	8003558 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003546:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800354a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003556:	e00a      	b.n	800356e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2200      	movs	r2, #0
 800356c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	785b      	ldrb	r3, [r3, #1]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d165      	bne.n	8003642 <HAL_PCD_EP_DB_Transmit+0x382>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003584:	b29b      	uxth	r3, r3
 8003586:	461a      	mov	r2, r3
 8003588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800358a:	4413      	add	r3, r2
 800358c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	011a      	lsls	r2, r3, #4
 8003594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003596:	4413      	add	r3, r2
 8003598:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800359c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800359e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ac:	801a      	strh	r2, [r3, #0]
 80035ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80035b4:	d91d      	bls.n	80035f2 <HAL_PCD_EP_DB_Transmit+0x332>
 80035b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d102      	bne.n	80035d0 <HAL_PCD_EP_DB_Transmit+0x310>
 80035ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035cc:	3b01      	subs	r3, #1
 80035ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035d8:	b29b      	uxth	r3, r3
 80035da:	029b      	lsls	r3, r3, #10
 80035dc:	b29b      	uxth	r3, r3
 80035de:	4313      	orrs	r3, r2
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ee:	801a      	strh	r2, [r3, #0]
 80035f0:	e044      	b.n	800367c <HAL_PCD_EP_DB_Transmit+0x3bc>
 80035f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10a      	bne.n	8003610 <HAL_PCD_EP_DB_Transmit+0x350>
 80035fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035fc:	881b      	ldrh	r3, [r3, #0]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003608:	b29a      	uxth	r2, r3
 800360a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800360c:	801a      	strh	r2, [r3, #0]
 800360e:	e035      	b.n	800367c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003610:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003614:	085b      	lsrs	r3, r3, #1
 8003616:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003618:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_PCD_EP_DB_Transmit+0x36a>
 8003624:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003626:	3301      	adds	r3, #1
 8003628:	64bb      	str	r3, [r7, #72]	@ 0x48
 800362a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29a      	uxth	r2, r3
 8003630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003632:	b29b      	uxth	r3, r3
 8003634:	029b      	lsls	r3, r3, #10
 8003636:	b29b      	uxth	r3, r3
 8003638:	4313      	orrs	r3, r2
 800363a:	b29a      	uxth	r2, r3
 800363c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800363e:	801a      	strh	r2, [r3, #0]
 8003640:	e01c      	b.n	800367c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	785b      	ldrb	r3, [r3, #1]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d118      	bne.n	800367c <HAL_PCD_EP_DB_Transmit+0x3bc>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003658:	b29b      	uxth	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800365e:	4413      	add	r3, r2
 8003660:	647b      	str	r3, [r7, #68]	@ 0x44
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	011a      	lsls	r2, r3, #4
 8003668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800366a:	4413      	add	r3, r2
 800366c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003670:	643b      	str	r3, [r7, #64]	@ 0x40
 8003672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003676:	b29a      	uxth	r2, r3
 8003678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800367a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6818      	ldr	r0, [r3, #0]
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	6959      	ldr	r1, [r3, #20]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	891a      	ldrh	r2, [r3, #8]
 8003688:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800368c:	b29b      	uxth	r3, r3
 800368e:	f003 fa8c 	bl	8006baa <USB_WritePMA>
 8003692:	e1e2      	b.n	8003a5a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800369c:	b29b      	uxth	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	3306      	adds	r3, #6
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	6812      	ldr	r2, [r2, #0]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80036b6:	881b      	ldrh	r3, [r3, #0]
 80036b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036bc:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	699a      	ldr	r2, [r3, #24]
 80036c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d307      	bcc.n	80036dc <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	699a      	ldr	r2, [r3, #24]
 80036d0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80036d4:	1ad2      	subs	r2, r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	619a      	str	r2, [r3, #24]
 80036da:	e002      	b.n	80036e2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	2200      	movs	r2, #0
 80036e0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f040 80c0 	bne.w	800386c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	785b      	ldrb	r3, [r3, #1]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d126      	bne.n	8003742 <HAL_PCD_EP_DB_Transmit+0x482>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003702:	b29b      	uxth	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003708:	4413      	add	r3, r2
 800370a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	011a      	lsls	r2, r3, #4
 8003712:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003714:	4413      	add	r3, r2
 8003716:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800371a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800371c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	b29b      	uxth	r3, r3
 8003722:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003726:	b29a      	uxth	r2, r3
 8003728:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800372a:	801a      	strh	r2, [r3, #0]
 800372c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b29b      	uxth	r3, r3
 8003732:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003736:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800373a:	b29a      	uxth	r2, r3
 800373c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800373e:	801a      	strh	r2, [r3, #0]
 8003740:	e01a      	b.n	8003778 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	785b      	ldrb	r3, [r3, #1]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d116      	bne.n	8003778 <HAL_PCD_EP_DB_Transmit+0x4b8>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003758:	b29b      	uxth	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800375e:	4413      	add	r3, r2
 8003760:	667b      	str	r3, [r7, #100]	@ 0x64
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	011a      	lsls	r2, r3, #4
 8003768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800376a:	4413      	add	r3, r2
 800376c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003770:	663b      	str	r3, [r7, #96]	@ 0x60
 8003772:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003774:	2200      	movs	r2, #0
 8003776:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	677b      	str	r3, [r7, #116]	@ 0x74
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	785b      	ldrb	r3, [r3, #1]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d12b      	bne.n	80037de <HAL_PCD_EP_DB_Transmit+0x51e>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003794:	b29b      	uxth	r3, r3
 8003796:	461a      	mov	r2, r3
 8003798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800379a:	4413      	add	r3, r2
 800379c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	011a      	lsls	r2, r3, #4
 80037a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037a6:	4413      	add	r3, r2
 80037a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80037ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037b4:	881b      	ldrh	r3, [r3, #0]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037bc:	b29a      	uxth	r2, r3
 80037be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037c2:	801a      	strh	r2, [r3, #0]
 80037c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037c8:	881b      	ldrh	r3, [r3, #0]
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80037da:	801a      	strh	r2, [r3, #0]
 80037dc:	e017      	b.n	800380e <HAL_PCD_EP_DB_Transmit+0x54e>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	785b      	ldrb	r3, [r3, #1]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d113      	bne.n	800380e <HAL_PCD_EP_DB_Transmit+0x54e>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037f4:	4413      	add	r3, r2
 80037f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	011a      	lsls	r2, r3, #4
 80037fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003800:	4413      	add	r3, r2
 8003802:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003806:	673b      	str	r3, [r7, #112]	@ 0x70
 8003808:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800380a:	2200      	movs	r2, #0
 800380c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	4619      	mov	r1, r3
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f005 f8ca 	bl	80089ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003820:	2b00      	cmp	r3, #0
 8003822:	f040 811a 	bne.w	8003a5a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	881b      	ldrh	r3, [r3, #0]
 8003836:	b29b      	uxth	r3, r3
 8003838:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800383c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003840:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	461a      	mov	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	441a      	add	r2, r3
 8003852:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800385a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800385e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003866:	b29b      	uxth	r3, r3
 8003868:	8013      	strh	r3, [r2, #0]
 800386a:	e0f6      	b.n	8003a5a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d121      	bne.n	80038ba <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800388c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003890:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	461a      	mov	r2, r3
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	441a      	add	r2, r3
 80038a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80038a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	f040 80ca 	bne.w	8003a5a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038ce:	441a      	add	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80038dc:	441a      	add	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	6a1a      	ldr	r2, [r3, #32]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d30b      	bcc.n	8003906 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	6a1a      	ldr	r2, [r3, #32]
 80038fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038fe:	1ad2      	subs	r2, r2, r3
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	621a      	str	r2, [r3, #32]
 8003904:	e017      	b.n	8003936 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d108      	bne.n	8003920 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800390e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003912:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800391e:	e00a      	b.n	8003936 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2200      	movs	r2, #0
 800392c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	657b      	str	r3, [r7, #84]	@ 0x54
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	785b      	ldrb	r3, [r3, #1]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d165      	bne.n	8003a10 <HAL_PCD_EP_DB_Transmit+0x750>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003952:	b29b      	uxth	r3, r3
 8003954:	461a      	mov	r2, r3
 8003956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003958:	4413      	add	r3, r2
 800395a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	011a      	lsls	r2, r3, #4
 8003962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003964:	4413      	add	r3, r2
 8003966:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800396a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800396c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b29b      	uxth	r3, r3
 8003972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003976:	b29a      	uxth	r2, r3
 8003978:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800397a:	801a      	strh	r2, [r3, #0]
 800397c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003980:	2b3e      	cmp	r3, #62	@ 0x3e
 8003982:	d91d      	bls.n	80039c0 <HAL_PCD_EP_DB_Transmit+0x700>
 8003984:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003988:	095b      	lsrs	r3, r3, #5
 800398a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800398c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003990:	f003 031f 	and.w	r3, r3, #31
 8003994:	2b00      	cmp	r3, #0
 8003996:	d102      	bne.n	800399e <HAL_PCD_EP_DB_Transmit+0x6de>
 8003998:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800399a:	3b01      	subs	r3, #1
 800399c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800399e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	029b      	lsls	r3, r3, #10
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	4313      	orrs	r3, r2
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039bc:	801a      	strh	r2, [r3, #0]
 80039be:	e041      	b.n	8003a44 <HAL_PCD_EP_DB_Transmit+0x784>
 80039c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <HAL_PCD_EP_DB_Transmit+0x71e>
 80039c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039da:	801a      	strh	r2, [r3, #0]
 80039dc:	e032      	b.n	8003a44 <HAL_PCD_EP_DB_Transmit+0x784>
 80039de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_PCD_EP_DB_Transmit+0x738>
 80039f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039f4:	3301      	adds	r3, #1
 80039f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a00:	b29b      	uxth	r3, r3
 8003a02:	029b      	lsls	r3, r3, #10
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	4313      	orrs	r3, r2
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003a0c:	801a      	strh	r2, [r3, #0]
 8003a0e:	e019      	b.n	8003a44 <HAL_PCD_EP_DB_Transmit+0x784>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	785b      	ldrb	r3, [r3, #1]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d115      	bne.n	8003a44 <HAL_PCD_EP_DB_Transmit+0x784>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a26:	4413      	add	r3, r2
 8003a28:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	011a      	lsls	r2, r3, #4
 8003a30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a32:	4413      	add	r3, r2
 8003a34:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003a38:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a42:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6818      	ldr	r0, [r3, #0]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	6959      	ldr	r1, [r3, #20]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	895a      	ldrh	r2, [r3, #10]
 8003a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	f003 f8a8 	bl	8006baa <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a74:	82bb      	strh	r3, [r7, #20]
 8003a76:	8abb      	ldrh	r3, [r7, #20]
 8003a78:	f083 0310 	eor.w	r3, r3, #16
 8003a7c:	82bb      	strh	r3, [r7, #20]
 8003a7e:	8abb      	ldrh	r3, [r7, #20]
 8003a80:	f083 0320 	eor.w	r3, r3, #32
 8003a84:	82bb      	strh	r3, [r7, #20]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	441a      	add	r2, r3
 8003a94:	8abb      	ldrh	r3, [r7, #20]
 8003a96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3790      	adds	r7, #144	@ 0x90
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	607b      	str	r3, [r7, #4]
 8003abe:	460b      	mov	r3, r1
 8003ac0:	817b      	strh	r3, [r7, #10]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003ac6:	897b      	ldrh	r3, [r7, #10]
 8003ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad2:	897b      	ldrh	r3, [r7, #10]
 8003ad4:	f003 0207 	and.w	r2, r3, #7
 8003ad8:	4613      	mov	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	3310      	adds	r3, #16
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	e009      	b.n	8003afe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003aea:	897a      	ldrh	r2, [r7, #10]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003afe:	893b      	ldrh	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d107      	bne.n	8003b14 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2200      	movs	r2, #0
 8003b08:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	80da      	strh	r2, [r3, #6]
 8003b12:	e00b      	b.n	8003b2c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	2201      	movs	r2, #1
 8003b18:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bc80      	pop	{r7}
 8003b36:	4770      	bx	lr

08003b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e272      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8087 	beq.w	8003c66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b58:	4b92      	ldr	r3, [pc, #584]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 030c 	and.w	r3, r3, #12
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d00c      	beq.n	8003b7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b64:	4b8f      	ldr	r3, [pc, #572]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f003 030c 	and.w	r3, r3, #12
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d112      	bne.n	8003b96 <HAL_RCC_OscConfig+0x5e>
 8003b70:	4b8c      	ldr	r3, [pc, #560]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b7c:	d10b      	bne.n	8003b96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7e:	4b89      	ldr	r3, [pc, #548]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d06c      	beq.n	8003c64 <HAL_RCC_OscConfig+0x12c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d168      	bne.n	8003c64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e24c      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b9e:	d106      	bne.n	8003bae <HAL_RCC_OscConfig+0x76>
 8003ba0:	4b80      	ldr	r3, [pc, #512]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a7f      	ldr	r2, [pc, #508]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003ba6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003baa:	6013      	str	r3, [r2, #0]
 8003bac:	e02e      	b.n	8003c0c <HAL_RCC_OscConfig+0xd4>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x98>
 8003bb6:	4b7b      	ldr	r3, [pc, #492]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a7a      	ldr	r2, [pc, #488]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bbc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	4b78      	ldr	r3, [pc, #480]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a77      	ldr	r2, [pc, #476]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bc8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e01d      	b.n	8003c0c <HAL_RCC_OscConfig+0xd4>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bd8:	d10c      	bne.n	8003bf4 <HAL_RCC_OscConfig+0xbc>
 8003bda:	4b72      	ldr	r3, [pc, #456]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a71      	ldr	r2, [pc, #452]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	4b6f      	ldr	r3, [pc, #444]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a6e      	ldr	r2, [pc, #440]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e00b      	b.n	8003c0c <HAL_RCC_OscConfig+0xd4>
 8003bf4:	4b6b      	ldr	r3, [pc, #428]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a6a      	ldr	r2, [pc, #424]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	4b68      	ldr	r3, [pc, #416]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a67      	ldr	r2, [pc, #412]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d013      	beq.n	8003c3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fd fc6c 	bl	80014f0 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c1c:	f7fd fc68 	bl	80014f0 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	@ 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e200      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0f0      	beq.n	8003c1c <HAL_RCC_OscConfig+0xe4>
 8003c3a:	e014      	b.n	8003c66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3c:	f7fd fc58 	bl	80014f0 <HAL_GetTick>
 8003c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c44:	f7fd fc54 	bl	80014f0 <HAL_GetTick>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	@ 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e1ec      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c56:	4b53      	ldr	r3, [pc, #332]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1f0      	bne.n	8003c44 <HAL_RCC_OscConfig+0x10c>
 8003c62:	e000      	b.n	8003c66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d063      	beq.n	8003d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c72:	4b4c      	ldr	r3, [pc, #304]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 030c 	and.w	r3, r3, #12
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c7e:	4b49      	ldr	r3, [pc, #292]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f003 030c 	and.w	r3, r3, #12
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d11c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x18c>
 8003c8a:	4b46      	ldr	r3, [pc, #280]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d116      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c96:	4b43      	ldr	r3, [pc, #268]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d005      	beq.n	8003cae <HAL_RCC_OscConfig+0x176>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d001      	beq.n	8003cae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e1c0      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cae:	4b3d      	ldr	r3, [pc, #244]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4939      	ldr	r1, [pc, #228]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc2:	e03a      	b.n	8003d3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d020      	beq.n	8003d0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ccc:	4b36      	ldr	r3, [pc, #216]	@ (8003da8 <HAL_RCC_OscConfig+0x270>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd2:	f7fd fc0d 	bl	80014f0 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cda:	f7fd fc09 	bl	80014f0 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e1a1      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cec:	4b2d      	ldr	r3, [pc, #180]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0302 	and.w	r3, r3, #2
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	4927      	ldr	r1, [pc, #156]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	600b      	str	r3, [r1, #0]
 8003d0c:	e015      	b.n	8003d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d0e:	4b26      	ldr	r3, [pc, #152]	@ (8003da8 <HAL_RCC_OscConfig+0x270>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d14:	f7fd fbec 	bl	80014f0 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d1c:	f7fd fbe8 	bl	80014f0 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e180      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1f0      	bne.n	8003d1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d03a      	beq.n	8003dbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d019      	beq.n	8003d82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d4e:	4b17      	ldr	r3, [pc, #92]	@ (8003dac <HAL_RCC_OscConfig+0x274>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d54:	f7fd fbcc 	bl	80014f0 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d5c:	f7fd fbc8 	bl	80014f0 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b02      	cmp	r3, #2
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e160      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003da4 <HAL_RCC_OscConfig+0x26c>)
 8003d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d7a:	2001      	movs	r0, #1
 8003d7c:	f000 fabc 	bl	80042f8 <RCC_Delay>
 8003d80:	e01c      	b.n	8003dbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d82:	4b0a      	ldr	r3, [pc, #40]	@ (8003dac <HAL_RCC_OscConfig+0x274>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d88:	f7fd fbb2 	bl	80014f0 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d8e:	e00f      	b.n	8003db0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d90:	f7fd fbae 	bl	80014f0 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d908      	bls.n	8003db0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e146      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000
 8003da8:	42420000 	.word	0x42420000
 8003dac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db0:	4b92      	ldr	r3, [pc, #584]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e9      	bne.n	8003d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80a6 	beq.w	8003f16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dce:	4b8b      	ldr	r3, [pc, #556]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10d      	bne.n	8003df6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dda:	4b88      	ldr	r3, [pc, #544]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4a87      	ldr	r2, [pc, #540]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003de0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003de4:	61d3      	str	r3, [r2, #28]
 8003de6:	4b85      	ldr	r3, [pc, #532]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dee:	60bb      	str	r3, [r7, #8]
 8003df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df2:	2301      	movs	r3, #1
 8003df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003df6:	4b82      	ldr	r3, [pc, #520]	@ (8004000 <HAL_RCC_OscConfig+0x4c8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d118      	bne.n	8003e34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e02:	4b7f      	ldr	r3, [pc, #508]	@ (8004000 <HAL_RCC_OscConfig+0x4c8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a7e      	ldr	r2, [pc, #504]	@ (8004000 <HAL_RCC_OscConfig+0x4c8>)
 8003e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e0e:	f7fd fb6f 	bl	80014f0 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e14:	e008      	b.n	8003e28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e16:	f7fd fb6b 	bl	80014f0 <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	2b64      	cmp	r3, #100	@ 0x64
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e103      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e28:	4b75      	ldr	r3, [pc, #468]	@ (8004000 <HAL_RCC_OscConfig+0x4c8>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0f0      	beq.n	8003e16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d106      	bne.n	8003e4a <HAL_RCC_OscConfig+0x312>
 8003e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4a6e      	ldr	r2, [pc, #440]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e42:	f043 0301 	orr.w	r3, r3, #1
 8003e46:	6213      	str	r3, [r2, #32]
 8003e48:	e02d      	b.n	8003ea6 <HAL_RCC_OscConfig+0x36e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10c      	bne.n	8003e6c <HAL_RCC_OscConfig+0x334>
 8003e52:	4b6a      	ldr	r3, [pc, #424]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	4a69      	ldr	r2, [pc, #420]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e58:	f023 0301 	bic.w	r3, r3, #1
 8003e5c:	6213      	str	r3, [r2, #32]
 8003e5e:	4b67      	ldr	r3, [pc, #412]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	4a66      	ldr	r2, [pc, #408]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e64:	f023 0304 	bic.w	r3, r3, #4
 8003e68:	6213      	str	r3, [r2, #32]
 8003e6a:	e01c      	b.n	8003ea6 <HAL_RCC_OscConfig+0x36e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	2b05      	cmp	r3, #5
 8003e72:	d10c      	bne.n	8003e8e <HAL_RCC_OscConfig+0x356>
 8003e74:	4b61      	ldr	r3, [pc, #388]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	4a60      	ldr	r2, [pc, #384]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e7a:	f043 0304 	orr.w	r3, r3, #4
 8003e7e:	6213      	str	r3, [r2, #32]
 8003e80:	4b5e      	ldr	r3, [pc, #376]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	4a5d      	ldr	r2, [pc, #372]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	6213      	str	r3, [r2, #32]
 8003e8c:	e00b      	b.n	8003ea6 <HAL_RCC_OscConfig+0x36e>
 8003e8e:	4b5b      	ldr	r3, [pc, #364]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	4a5a      	ldr	r2, [pc, #360]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e94:	f023 0301 	bic.w	r3, r3, #1
 8003e98:	6213      	str	r3, [r2, #32]
 8003e9a:	4b58      	ldr	r3, [pc, #352]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	4a57      	ldr	r2, [pc, #348]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003ea0:	f023 0304 	bic.w	r3, r3, #4
 8003ea4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d015      	beq.n	8003eda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eae:	f7fd fb1f 	bl	80014f0 <HAL_GetTick>
 8003eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb4:	e00a      	b.n	8003ecc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb6:	f7fd fb1b 	bl	80014f0 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e0b1      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ecc:	4b4b      	ldr	r3, [pc, #300]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0ee      	beq.n	8003eb6 <HAL_RCC_OscConfig+0x37e>
 8003ed8:	e014      	b.n	8003f04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eda:	f7fd fb09 	bl	80014f0 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fd fb05 	bl	80014f0 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e09b      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef8:	4b40      	ldr	r3, [pc, #256]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1ee      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d105      	bne.n	8003f16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	69db      	ldr	r3, [r3, #28]
 8003f0e:	4a3b      	ldr	r2, [pc, #236]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 8087 	beq.w	800402e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f20:	4b36      	ldr	r3, [pc, #216]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f003 030c 	and.w	r3, r3, #12
 8003f28:	2b08      	cmp	r3, #8
 8003f2a:	d061      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d146      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f34:	4b33      	ldr	r3, [pc, #204]	@ (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3a:	f7fd fad9 	bl	80014f0 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f42:	f7fd fad5 	bl	80014f0 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e06d      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f54:	4b29      	ldr	r3, [pc, #164]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1f0      	bne.n	8003f42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f68:	d108      	bne.n	8003f7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f6a:	4b24      	ldr	r3, [pc, #144]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	4921      	ldr	r1, [pc, #132]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a19      	ldr	r1, [r3, #32]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	491b      	ldr	r1, [pc, #108]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f94:	4b1b      	ldr	r3, [pc, #108]	@ (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9a:	f7fd faa9 	bl	80014f0 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa2:	f7fd faa5 	bl	80014f0 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e03d      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fb4:	4b11      	ldr	r3, [pc, #68]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x46a>
 8003fc0:	e035      	b.n	800402e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc2:	4b10      	ldr	r3, [pc, #64]	@ (8004004 <HAL_RCC_OscConfig+0x4cc>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7fd fa92 	bl	80014f0 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fd fa8e 	bl	80014f0 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e026      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fe2:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <HAL_RCC_OscConfig+0x4c4>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x498>
 8003fee:	e01e      	b.n	800402e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e019      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40007000 	.word	0x40007000
 8004004:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004008:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <HAL_RCC_OscConfig+0x500>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	429a      	cmp	r2, r3
 800401a:	d106      	bne.n	800402a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d001      	beq.n	800402e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000

0800403c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e0d0      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004050:	4b6a      	ldr	r3, [pc, #424]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0307 	and.w	r3, r3, #7
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d910      	bls.n	8004080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800405e:	4b67      	ldr	r3, [pc, #412]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 0207 	bic.w	r2, r3, #7
 8004066:	4965      	ldr	r1, [pc, #404]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	4313      	orrs	r3, r2
 800406c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800406e:	4b63      	ldr	r3, [pc, #396]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	429a      	cmp	r2, r3
 800407a:	d001      	beq.n	8004080 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0b8      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d020      	beq.n	80040ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004098:	4b59      	ldr	r3, [pc, #356]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4a58      	ldr	r2, [pc, #352]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 800409e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0308 	and.w	r3, r3, #8
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040b0:	4b53      	ldr	r3, [pc, #332]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4a52      	ldr	r2, [pc, #328]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80040b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80040ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040bc:	4b50      	ldr	r3, [pc, #320]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	494d      	ldr	r1, [pc, #308]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d040      	beq.n	800415c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d107      	bne.n	80040f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e2:	4b47      	ldr	r3, [pc, #284]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d115      	bne.n	800411a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e07f      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d107      	bne.n	800410a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fa:	4b41      	ldr	r3, [pc, #260]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d109      	bne.n	800411a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e073      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800410a:	4b3d      	ldr	r3, [pc, #244]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e06b      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800411a:	4b39      	ldr	r3, [pc, #228]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f023 0203 	bic.w	r2, r3, #3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4936      	ldr	r1, [pc, #216]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800412c:	f7fd f9e0 	bl	80014f0 <HAL_GetTick>
 8004130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004132:	e00a      	b.n	800414a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004134:	f7fd f9dc 	bl	80014f0 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004142:	4293      	cmp	r3, r2
 8004144:	d901      	bls.n	800414a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e053      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414a:	4b2d      	ldr	r3, [pc, #180]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f003 020c 	and.w	r2, r3, #12
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	429a      	cmp	r2, r3
 800415a:	d1eb      	bne.n	8004134 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800415c:	4b27      	ldr	r3, [pc, #156]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d210      	bcs.n	800418c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416a:	4b24      	ldr	r3, [pc, #144]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f023 0207 	bic.w	r2, r3, #7
 8004172:	4922      	ldr	r1, [pc, #136]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800417a:	4b20      	ldr	r3, [pc, #128]	@ (80041fc <HAL_RCC_ClockConfig+0x1c0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d001      	beq.n	800418c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e032      	b.n	80041f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004198:	4b19      	ldr	r3, [pc, #100]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4916      	ldr	r1, [pc, #88]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041b6:	4b12      	ldr	r3, [pc, #72]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	490e      	ldr	r1, [pc, #56]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041ca:	f000 f821 	bl	8004210 <HAL_RCC_GetSysClockFreq>
 80041ce:	4602      	mov	r2, r0
 80041d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	091b      	lsrs	r3, r3, #4
 80041d6:	f003 030f 	and.w	r3, r3, #15
 80041da:	490a      	ldr	r1, [pc, #40]	@ (8004204 <HAL_RCC_ClockConfig+0x1c8>)
 80041dc:	5ccb      	ldrb	r3, [r1, r3]
 80041de:	fa22 f303 	lsr.w	r3, r2, r3
 80041e2:	4a09      	ldr	r2, [pc, #36]	@ (8004208 <HAL_RCC_ClockConfig+0x1cc>)
 80041e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041e6:	4b09      	ldr	r3, [pc, #36]	@ (800420c <HAL_RCC_ClockConfig+0x1d0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fd f93e 	bl	800146c <HAL_InitTick>

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3710      	adds	r7, #16
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	40022000 	.word	0x40022000
 8004200:	40021000 	.word	0x40021000
 8004204:	0800bbc0 	.word	0x0800bbc0
 8004208:	20000000 	.word	0x20000000
 800420c:	20000004 	.word	0x20000004

08004210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004216:	2300      	movs	r3, #0
 8004218:	60fb      	str	r3, [r7, #12]
 800421a:	2300      	movs	r3, #0
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	2300      	movs	r3, #0
 8004224:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800422a:	4b1e      	ldr	r3, [pc, #120]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	2b04      	cmp	r3, #4
 8004238:	d002      	beq.n	8004240 <HAL_RCC_GetSysClockFreq+0x30>
 800423a:	2b08      	cmp	r3, #8
 800423c:	d003      	beq.n	8004246 <HAL_RCC_GetSysClockFreq+0x36>
 800423e:	e027      	b.n	8004290 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004240:	4b19      	ldr	r3, [pc, #100]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004242:	613b      	str	r3, [r7, #16]
      break;
 8004244:	e027      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	0c9b      	lsrs	r3, r3, #18
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	4a17      	ldr	r2, [pc, #92]	@ (80042ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8004250:	5cd3      	ldrb	r3, [r2, r3]
 8004252:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d010      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800425e:	4b11      	ldr	r3, [pc, #68]	@ (80042a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	0c5b      	lsrs	r3, r3, #17
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	4a11      	ldr	r2, [pc, #68]	@ (80042b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800426a:	5cd3      	ldrb	r3, [r2, r3]
 800426c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a0d      	ldr	r2, [pc, #52]	@ (80042a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004272:	fb03 f202 	mul.w	r2, r3, r2
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	fbb2 f3f3 	udiv	r3, r2, r3
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	e004      	b.n	800428a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a0c      	ldr	r2, [pc, #48]	@ (80042b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004284:	fb02 f303 	mul.w	r3, r2, r3
 8004288:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	613b      	str	r3, [r7, #16]
      break;
 800428e:	e002      	b.n	8004296 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004290:	4b09      	ldr	r3, [pc, #36]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004292:	613b      	str	r3, [r7, #16]
      break;
 8004294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004296:	693b      	ldr	r3, [r7, #16]
}
 8004298:	4618      	mov	r0, r3
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40021000 	.word	0x40021000
 80042a8:	00f42400 	.word	0x00f42400
 80042ac:	0800bbd8 	.word	0x0800bbd8
 80042b0:	0800bbe8 	.word	0x0800bbe8
 80042b4:	003d0900 	.word	0x003d0900
 80042b8:	007a1200 	.word	0x007a1200

080042bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c0:	4b02      	ldr	r3, [pc, #8]	@ (80042cc <HAL_RCC_GetHCLKFreq+0x10>)
 80042c2:	681b      	ldr	r3, [r3, #0]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr
 80042cc:	20000000 	.word	0x20000000

080042d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042d4:	f7ff fff2 	bl	80042bc <HAL_RCC_GetHCLKFreq>
 80042d8:	4602      	mov	r2, r0
 80042da:	4b05      	ldr	r3, [pc, #20]	@ (80042f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	0a1b      	lsrs	r3, r3, #8
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	4903      	ldr	r1, [pc, #12]	@ (80042f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e6:	5ccb      	ldrb	r3, [r1, r3]
 80042e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	40021000 	.word	0x40021000
 80042f4:	0800bbd0 	.word	0x0800bbd0

080042f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004300:	4b0a      	ldr	r3, [pc, #40]	@ (800432c <RCC_Delay+0x34>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a0a      	ldr	r2, [pc, #40]	@ (8004330 <RCC_Delay+0x38>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	0a5b      	lsrs	r3, r3, #9
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004314:	bf00      	nop
  }
  while (Delay --);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1e5a      	subs	r2, r3, #1
 800431a:	60fa      	str	r2, [r7, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f9      	bne.n	8004314 <RCC_Delay+0x1c>
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	bc80      	pop	{r7}
 800432a:	4770      	bx	lr
 800432c:	20000000 	.word	0x20000000
 8004330:	10624dd3 	.word	0x10624dd3

08004334 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]
 8004340:	2300      	movs	r3, #0
 8004342:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d07d      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004350:	2300      	movs	r3, #0
 8004352:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004354:	4b4f      	ldr	r3, [pc, #316]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10d      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004360:	4b4c      	ldr	r3, [pc, #304]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	4a4b      	ldr	r2, [pc, #300]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004366:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800436a:	61d3      	str	r3, [r2, #28]
 800436c:	4b49      	ldr	r3, [pc, #292]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436e:	69db      	ldr	r3, [r3, #28]
 8004370:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004378:	2301      	movs	r3, #1
 800437a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800437c:	4b46      	ldr	r3, [pc, #280]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d118      	bne.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004388:	4b43      	ldr	r3, [pc, #268]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a42      	ldr	r2, [pc, #264]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800438e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004392:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004394:	f7fd f8ac 	bl	80014f0 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800439a:	e008      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800439c:	f7fd f8a8 	bl	80014f0 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b64      	cmp	r3, #100	@ 0x64
 80043a8:	d901      	bls.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e06d      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ae:	4b3a      	ldr	r3, [pc, #232]	@ (8004498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043ba:	4b36      	ldr	r3, [pc, #216]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d02e      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d027      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043d8:	4b2e      	ldr	r3, [pc, #184]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043e2:	4b2e      	ldr	r3, [pc, #184]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043e8:	4b2c      	ldr	r3, [pc, #176]	@ (800449c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043ee:	4a29      	ldr	r2, [pc, #164]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d014      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fe:	f7fd f877 	bl	80014f0 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004404:	e00a      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004406:	f7fd f873 	bl	80014f0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004414:	4293      	cmp	r3, r2
 8004416:	d901      	bls.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e036      	b.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800441c:	4b1d      	ldr	r3, [pc, #116]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0ee      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004428:	4b1a      	ldr	r3, [pc, #104]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4917      	ldr	r1, [pc, #92]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004436:	4313      	orrs	r3, r2
 8004438:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800443a:	7dfb      	ldrb	r3, [r7, #23]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d105      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004440:	4b14      	ldr	r3, [pc, #80]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	4a13      	ldr	r2, [pc, #76]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004446:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800444a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0302 	and.w	r3, r3, #2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d008      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004458:	4b0e      	ldr	r3, [pc, #56]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	490b      	ldr	r1, [pc, #44]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004466:	4313      	orrs	r3, r2
 8004468:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	2b00      	cmp	r3, #0
 8004474:	d008      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004476:	4b07      	ldr	r3, [pc, #28]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	4904      	ldr	r1, [pc, #16]	@ (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40021000 	.word	0x40021000
 8004498:	40007000 	.word	0x40007000
 800449c:	42420440 	.word	0x42420440

080044a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d101      	bne.n	80044b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e076      	b.n	80045a0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d108      	bne.n	80044cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044c2:	d009      	beq.n	80044d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	61da      	str	r2, [r3, #28]
 80044ca:	e005      	b.n	80044d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d106      	bne.n	80044f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fc fdfa 	bl	80010ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800450e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455c:	ea42 0103 	orr.w	r1, r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	0c1a      	lsrs	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f002 0204 	and.w	r2, r2, #4
 800457e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69da      	ldr	r2, [r3, #28]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800458e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2200      	movs	r2, #0
 8004594:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	4638      	mov	r0, r7
 80045b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	bc80      	pop	{r7}
 80045c0:	4770      	bx	lr

080045c2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b085      	sub	sp, #20
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045d2:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80045d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	b29a      	uxth	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bc80      	pop	{r7}
 80045ec:	4770      	bx	lr

080045ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b085      	sub	sp, #20
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045f6:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80045fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	b29b      	uxth	r3, r3
 8004608:	43db      	mvns	r3, r3
 800460a:	b29b      	uxth	r3, r3
 800460c:	4013      	ands	r3, r2
 800460e:	b29a      	uxth	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr

08004622 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
 800462a:	460b      	mov	r3, r1
 800462c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr

0800463a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	4638      	mov	r0, r7
 8004644:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	bc80      	pop	{r7}
 8004672:	4770      	bx	lr

08004674 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004674:	b480      	push	{r7}
 8004676:	b09d      	sub	sp, #116	@ 0x74
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	881b      	ldrh	r3, [r3, #0]
 8004690:	b29b      	uxth	r3, r3
 8004692:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8004696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800469a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	78db      	ldrb	r3, [r3, #3]
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d81f      	bhi.n	80046e6 <USB_ActivateEndpoint+0x72>
 80046a6:	a201      	add	r2, pc, #4	@ (adr r2, 80046ac <USB_ActivateEndpoint+0x38>)
 80046a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ac:	080046bd 	.word	0x080046bd
 80046b0:	080046d9 	.word	0x080046d9
 80046b4:	080046ef 	.word	0x080046ef
 80046b8:	080046cb 	.word	0x080046cb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80046c4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80046c8:	e012      	b.n	80046f0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80046ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046ce:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80046d2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80046d6:	e00b      	b.n	80046f0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80046d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80046e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80046e4:	e004      	b.n	80046f0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80046ec:	e000      	b.n	80046f0 <USB_ActivateEndpoint+0x7c>
      break;
 80046ee:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	441a      	add	r2, r3
 80046fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80046fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004706:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800470a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800470e:	b29b      	uxth	r3, r3
 8004710:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	b29b      	uxth	r3, r3
 8004720:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004728:	b29b      	uxth	r3, r3
 800472a:	683a      	ldr	r2, [r7, #0]
 800472c:	7812      	ldrb	r2, [r2, #0]
 800472e:	4313      	orrs	r3, r2
 8004730:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	441a      	add	r2, r3
 800473e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8004742:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004746:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800474a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800474e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004752:	b29b      	uxth	r3, r3
 8004754:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	7b1b      	ldrb	r3, [r3, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	f040 8178 	bne.w	8004a50 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8084 	beq.w	8004872 <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004774:	b29b      	uxth	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	4413      	add	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	011a      	lsls	r2, r3, #4
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	88db      	ldrh	r3, [r3, #6]
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	b29b      	uxth	r3, r3
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	827b      	strh	r3, [r7, #18]
 80047ac:	8a7b      	ldrh	r3, [r7, #18]
 80047ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d01b      	beq.n	80047ee <USB_ActivateEndpoint+0x17a>
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047cc:	823b      	strh	r3, [r7, #16]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	441a      	add	r2, r3
 80047d8:	8a3b      	ldrh	r3, [r7, #16]
 80047da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	78db      	ldrb	r3, [r3, #3]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d020      	beq.n	8004838 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	881b      	ldrh	r3, [r3, #0]
 8004802:	b29b      	uxth	r3, r3
 8004804:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800480c:	81bb      	strh	r3, [r7, #12]
 800480e:	89bb      	ldrh	r3, [r7, #12]
 8004810:	f083 0320 	eor.w	r3, r3, #32
 8004814:	81bb      	strh	r3, [r7, #12]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	441a      	add	r2, r3
 8004820:	89bb      	ldrh	r3, [r7, #12]
 8004822:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004826:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800482a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800482e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004832:	b29b      	uxth	r3, r3
 8004834:	8013      	strh	r3, [r2, #0]
 8004836:	e2d5      	b.n	8004de4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	881b      	ldrh	r3, [r3, #0]
 8004844:	b29b      	uxth	r3, r3
 8004846:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800484a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800484e:	81fb      	strh	r3, [r7, #14]
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	441a      	add	r2, r3
 800485a:	89fb      	ldrh	r3, [r7, #14]
 800485c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004860:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004864:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800486c:	b29b      	uxth	r3, r3
 800486e:	8013      	strh	r3, [r2, #0]
 8004870:	e2b8      	b.n	8004de4 <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	633b      	str	r3, [r7, #48]	@ 0x30
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800487c:	b29b      	uxth	r3, r3
 800487e:	461a      	mov	r2, r3
 8004880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004882:	4413      	add	r3, r2
 8004884:	633b      	str	r3, [r7, #48]	@ 0x30
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	011a      	lsls	r2, r3, #4
 800488c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488e:	4413      	add	r3, r2
 8004890:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004894:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	88db      	ldrh	r3, [r3, #6]
 800489a:	085b      	lsrs	r3, r3, #1
 800489c:	b29b      	uxth	r3, r3
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a4:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	461a      	mov	r2, r3
 80048b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b6:	4413      	add	r3, r2
 80048b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	011a      	lsls	r2, r3, #4
 80048c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c2:	4413      	add	r3, r2
 80048c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80048c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d8:	801a      	strh	r2, [r3, #0]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	2b3e      	cmp	r3, #62	@ 0x3e
 80048e0:	d91d      	bls.n	800491e <USB_ActivateEndpoint+0x2aa>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 031f 	and.w	r3, r3, #31
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <USB_ActivateEndpoint+0x288>
 80048f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048f8:	3b01      	subs	r3, #1
 80048fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	b29a      	uxth	r2, r3
 8004902:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004904:	b29b      	uxth	r3, r3
 8004906:	029b      	lsls	r3, r3, #10
 8004908:	b29b      	uxth	r3, r3
 800490a:	4313      	orrs	r3, r2
 800490c:	b29b      	uxth	r3, r3
 800490e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004912:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004916:	b29a      	uxth	r2, r3
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	801a      	strh	r2, [r3, #0]
 800491c:	e026      	b.n	800496c <USB_ActivateEndpoint+0x2f8>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10a      	bne.n	800493c <USB_ActivateEndpoint+0x2c8>
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004934:	b29a      	uxth	r2, r3
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	801a      	strh	r2, [r3, #0]
 800493a:	e017      	b.n	800496c <USB_ActivateEndpoint+0x2f8>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	085b      	lsrs	r3, r3, #1
 8004942:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <USB_ActivateEndpoint+0x2e2>
 8004950:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004952:	3301      	adds	r3, #1
 8004954:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	b29a      	uxth	r2, r3
 800495c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800495e:	b29b      	uxth	r3, r3
 8004960:	029b      	lsls	r3, r3, #10
 8004962:	b29b      	uxth	r3, r3
 8004964:	4313      	orrs	r3, r2
 8004966:	b29a      	uxth	r2, r3
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	881b      	ldrh	r3, [r3, #0]
 8004978:	847b      	strh	r3, [r7, #34]	@ 0x22
 800497a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800497c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01b      	beq.n	80049bc <USB_ActivateEndpoint+0x348>
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	881b      	ldrh	r3, [r3, #0]
 8004990:	b29b      	uxth	r3, r3
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800499a:	843b      	strh	r3, [r7, #32]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	441a      	add	r2, r3
 80049a6:	8c3b      	ldrh	r3, [r7, #32]
 80049a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d124      	bne.n	8004a0e <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	4413      	add	r3, r2
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049da:	83bb      	strh	r3, [r7, #28]
 80049dc:	8bbb      	ldrh	r3, [r7, #28]
 80049de:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80049e2:	83bb      	strh	r3, [r7, #28]
 80049e4:	8bbb      	ldrh	r3, [r7, #28]
 80049e6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80049ea:	83bb      	strh	r3, [r7, #28]
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	441a      	add	r2, r3
 80049f6:	8bbb      	ldrh	r3, [r7, #28]
 80049f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	8013      	strh	r3, [r2, #0]
 8004a0c:	e1ea      	b.n	8004de4 <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	881b      	ldrh	r3, [r3, #0]
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a24:	83fb      	strh	r3, [r7, #30]
 8004a26:	8bfb      	ldrh	r3, [r7, #30]
 8004a28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004a2c:	83fb      	strh	r3, [r7, #30]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	8bfb      	ldrh	r3, [r7, #30]
 8004a3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	8013      	strh	r3, [r2, #0]
 8004a4e:	e1c9      	b.n	8004de4 <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	78db      	ldrb	r3, [r3, #3]
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d11e      	bne.n	8004a96 <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a6e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	441a      	add	r2, r3
 8004a7c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8004a80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a88:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004a8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	8013      	strh	r3, [r2, #0]
 8004a94:	e01d      	b.n	8004ad2 <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	881b      	ldrh	r3, [r3, #0]
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8004aa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004aac:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	441a      	add	r2, r3
 8004aba:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8004abe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ac2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ae2:	4413      	add	r3, r2
 8004ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	011a      	lsls	r2, r3, #4
 8004aec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004af4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	891b      	ldrh	r3, [r3, #8]
 8004afa:	085b      	lsrs	r3, r3, #1
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b04:	801a      	strh	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	461a      	mov	r2, r3
 8004b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b16:	4413      	add	r3, r2
 8004b18:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	011a      	lsls	r2, r3, #4
 8004b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8004b28:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	895b      	ldrh	r3, [r3, #10]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b38:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	785b      	ldrb	r3, [r3, #1]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f040 8093 	bne.w	8004c6a <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	881b      	ldrh	r3, [r3, #0]
 8004b50:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8004b54:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004b58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d01b      	beq.n	8004b98 <USB_ActivateEndpoint+0x524>
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b76:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	441a      	add	r2, r3
 8004b82:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8004b84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004b88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004b8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8004ba6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8004ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d01b      	beq.n	8004be8 <USB_ActivateEndpoint+0x574>
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	881b      	ldrh	r3, [r3, #0]
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bc6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	441a      	add	r2, r3
 8004bd2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004bd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004bd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004bdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004be0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004be8:	687a      	ldr	r2, [r7, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bfe:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004c00:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c02:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004c06:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004c08:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004c0e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	441a      	add	r2, r3
 8004c1a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8004c1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c46:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	441a      	add	r2, r3
 8004c52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004c54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	8013      	strh	r3, [r2, #0]
 8004c68:	e0bc      	b.n	8004de4 <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	881b      	ldrh	r3, [r3, #0]
 8004c76:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004c7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01d      	beq.n	8004cc2 <USB_ActivateEndpoint+0x64e>
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	881b      	ldrh	r3, [r3, #0]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c9c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	441a      	add	r2, r3
 8004caa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004cae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004cb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004cb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	881b      	ldrh	r3, [r3, #0]
 8004cce:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8004cd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01d      	beq.n	8004d1a <USB_ActivateEndpoint+0x6a6>
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cf4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	441a      	add	r2, r3
 8004d02:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8004d06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	78db      	ldrb	r3, [r3, #3]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d024      	beq.n	8004d6c <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	881b      	ldrh	r3, [r3, #0]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d38:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004d3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d40:	f083 0320 	eor.w	r3, r3, #32
 8004d44:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	441a      	add	r2, r3
 8004d52:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8004d56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	8013      	strh	r3, [r2, #0]
 8004d6a:	e01d      	b.n	8004da8 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	881b      	ldrh	r3, [r3, #0]
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d82:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	441a      	add	r2, r3
 8004d90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8004d94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004da0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	009b      	lsls	r3, r3, #2
 8004db0:	4413      	add	r3, r2
 8004db2:	881b      	ldrh	r3, [r3, #0]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dbe:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	441a      	add	r2, r3
 8004dcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004dd0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dd4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ddc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004de4:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3774      	adds	r7, #116	@ 0x74
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop

08004df4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b08d      	sub	sp, #52	@ 0x34
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	7b1b      	ldrb	r3, [r3, #12]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	f040 808e 	bne.w	8004f24 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	785b      	ldrb	r3, [r3, #1]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d044      	beq.n	8004e9a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	881b      	ldrh	r3, [r3, #0]
 8004e1c:	81bb      	strh	r3, [r7, #12]
 8004e1e:	89bb      	ldrh	r3, [r7, #12]
 8004e20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01b      	beq.n	8004e60 <USB_DeactivateEndpoint+0x6c>
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	881b      	ldrh	r3, [r3, #0]
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e3e:	817b      	strh	r3, [r7, #10]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	441a      	add	r2, r3
 8004e4a:	897b      	ldrh	r3, [r7, #10]
 8004e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e58:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	881b      	ldrh	r3, [r3, #0]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004e72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e76:	813b      	strh	r3, [r7, #8]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	441a      	add	r2, r3
 8004e82:	893b      	ldrh	r3, [r7, #8]
 8004e84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004e88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004e8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	8013      	strh	r3, [r2, #0]
 8004e98:	e192      	b.n	80051c0 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	827b      	strh	r3, [r7, #18]
 8004ea8:	8a7b      	ldrh	r3, [r7, #18]
 8004eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01b      	beq.n	8004eea <USB_DeactivateEndpoint+0xf6>
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ec8:	823b      	strh	r3, [r7, #16]
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	441a      	add	r2, r3
 8004ed4:	8a3b      	ldrh	r3, [r7, #16]
 8004ed6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004eda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ede:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	4413      	add	r3, r2
 8004ef4:	881b      	ldrh	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004efc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f00:	81fb      	strh	r3, [r7, #14]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	441a      	add	r2, r3
 8004f0c:	89fb      	ldrh	r3, [r7, #14]
 8004f0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	8013      	strh	r3, [r2, #0]
 8004f22:	e14d      	b.n	80051c0 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	785b      	ldrb	r3, [r3, #1]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f040 80a5 	bne.w	8005078 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	881b      	ldrh	r3, [r3, #0]
 8004f3a:	843b      	strh	r3, [r7, #32]
 8004f3c:	8c3b      	ldrh	r3, [r7, #32]
 8004f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d01b      	beq.n	8004f7e <USB_DeactivateEndpoint+0x18a>
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	881b      	ldrh	r3, [r3, #0]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f5c:	83fb      	strh	r3, [r7, #30]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	441a      	add	r2, r3
 8004f68:	8bfb      	ldrh	r3, [r7, #30]
 8004f6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4413      	add	r3, r2
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	83bb      	strh	r3, [r7, #28]
 8004f8c:	8bbb      	ldrh	r3, [r7, #28]
 8004f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01b      	beq.n	8004fce <USB_DeactivateEndpoint+0x1da>
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fa8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fac:	837b      	strh	r3, [r7, #26]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	441a      	add	r2, r3
 8004fb8:	8b7b      	ldrh	r3, [r7, #26]
 8004fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fc6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	881b      	ldrh	r3, [r3, #0]
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fe4:	833b      	strh	r3, [r7, #24]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	441a      	add	r2, r3
 8004ff0:	8b3b      	ldrh	r3, [r7, #24]
 8004ff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004ffa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ffe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005002:	b29b      	uxth	r3, r3
 8005004:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	881b      	ldrh	r3, [r3, #0]
 8005012:	b29b      	uxth	r3, r3
 8005014:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800501c:	82fb      	strh	r3, [r7, #22]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	441a      	add	r2, r3
 8005028:	8afb      	ldrh	r3, [r7, #22]
 800502a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800502e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800503a:	b29b      	uxth	r3, r3
 800503c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	881b      	ldrh	r3, [r3, #0]
 800504a:	b29b      	uxth	r3, r3
 800504c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005050:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005054:	82bb      	strh	r3, [r7, #20]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	441a      	add	r2, r3
 8005060:	8abb      	ldrh	r3, [r7, #20]
 8005062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800506a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800506e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005072:	b29b      	uxth	r3, r3
 8005074:	8013      	strh	r3, [r2, #0]
 8005076:	e0a3      	b.n	80051c0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	881b      	ldrh	r3, [r3, #0]
 8005084:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8005086:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005088:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d01b      	beq.n	80050c8 <USB_DeactivateEndpoint+0x2d4>
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	b29b      	uxth	r3, r3
 800509e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	441a      	add	r2, r3
 80050b2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80050b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80050b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80050bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	881b      	ldrh	r3, [r3, #0]
 80050d4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80050d6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80050d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01b      	beq.n	8005118 <USB_DeactivateEndpoint+0x324>
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800510c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005110:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005114:	b29b      	uxth	r3, r3
 8005116:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	b29b      	uxth	r3, r3
 8005126:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800512a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800512e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	441a      	add	r2, r3
 800513a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800513c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005144:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514c:	b29b      	uxth	r3, r3
 800514e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	881b      	ldrh	r3, [r3, #0]
 800515c:	b29b      	uxth	r3, r3
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005162:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005166:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	441a      	add	r2, r3
 8005172:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005174:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005178:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800517c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005184:	b29b      	uxth	r3, r3
 8005186:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	4413      	add	r3, r2
 8005192:	881b      	ldrh	r3, [r3, #0]
 8005194:	b29b      	uxth	r3, r3
 8005196:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800519a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800519e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	441a      	add	r2, r3
 80051aa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80051ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80051b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80051b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051bc:	b29b      	uxth	r3, r3
 80051be:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3734      	adds	r7, #52	@ 0x34
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b0c2      	sub	sp, #264	@ 0x108
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80051da:	6018      	str	r0, [r3, #0]
 80051dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e4:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80051e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	785b      	ldrb	r3, [r3, #1]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	f040 86b7 	bne.w	8005f66 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80051f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80051fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	699a      	ldr	r2, [r3, #24]
 8005204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	429a      	cmp	r2, r3
 8005212:	d908      	bls.n	8005226 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005224:	e007      	b.n	8005236 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800522a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800523a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	7b1b      	ldrb	r3, [r3, #12]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d13a      	bne.n	80052bc <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800524a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6959      	ldr	r1, [r3, #20]
 8005252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005256:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	88da      	ldrh	r2, [r3, #6]
 800525e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005262:	b29b      	uxth	r3, r3
 8005264:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005268:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800526c:	6800      	ldr	r0, [r0, #0]
 800526e:	f001 fc9c 	bl	8006baa <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005282:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800528c:	b29b      	uxth	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4413      	add	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800529a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	011a      	lsls	r2, r3, #4
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	4413      	add	r3, r2
 80052a8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	801a      	strh	r2, [r3, #0]
 80052b8:	f000 be1f 	b.w	8005efa <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80052bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	78db      	ldrb	r3, [r3, #3]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	f040 8462 	bne.w	8005b92 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80052ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6a1a      	ldr	r2, [r3, #32]
 80052da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	f240 83df 	bls.w	8005aaa <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80052ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80052fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	781b      	ldrb	r3, [r3, #0]
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	881b      	ldrh	r3, [r3, #0]
 8005308:	b29b      	uxth	r3, r3
 800530a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800530e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005312:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8005316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800531a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	441a      	add	r2, r3
 8005330:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8005334:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005338:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800533c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005344:	b29b      	uxth	r3, r3
 8005346:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8005348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800534c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6a1a      	ldr	r2, [r3, #32]
 8005354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005358:	1ad2      	subs	r2, r2, r3
 800535a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800535e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800536a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	b29b      	uxth	r3, r3
 8005384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 81c7 	beq.w	800571c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800538e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005392:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	633b      	str	r3, [r7, #48]	@ 0x30
 800539a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800539e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	785b      	ldrb	r3, [r3, #1]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d177      	bne.n	800549a <USB_EPStartXfer+0x2ce>
 80053aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	461a      	mov	r2, r3
 80053c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ca:	4413      	add	r3, r2
 80053cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80053d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	011a      	lsls	r2, r3, #4
 80053dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053de:	4413      	add	r3, r2
 80053e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80053e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e8:	881b      	ldrh	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	801a      	strh	r2, [r3, #0]
 80053f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80053fc:	d921      	bls.n	8005442 <USB_EPStartXfer+0x276>
 80053fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800540c:	f003 031f 	and.w	r3, r3, #31
 8005410:	2b00      	cmp	r3, #0
 8005412:	d104      	bne.n	800541e <USB_EPStartXfer+0x252>
 8005414:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005418:	3b01      	subs	r3, #1
 800541a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29a      	uxth	r2, r3
 8005424:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8005428:	b29b      	uxth	r3, r3
 800542a:	029b      	lsls	r3, r3, #10
 800542c:	b29b      	uxth	r3, r3
 800542e:	4313      	orrs	r3, r2
 8005430:	b29b      	uxth	r3, r3
 8005432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800543a:	b29a      	uxth	r2, r3
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	801a      	strh	r2, [r3, #0]
 8005440:	e050      	b.n	80054e4 <USB_EPStartXfer+0x318>
 8005442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005446:	2b00      	cmp	r3, #0
 8005448:	d10a      	bne.n	8005460 <USB_EPStartXfer+0x294>
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005458:	b29a      	uxth	r2, r3
 800545a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545c:	801a      	strh	r2, [r3, #0]
 800545e:	e041      	b.n	80054e4 <USB_EPStartXfer+0x318>
 8005460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005464:	085b      	lsrs	r3, r3, #1
 8005466:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800546a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d004      	beq.n	8005480 <USB_EPStartXfer+0x2b4>
 8005476:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800547a:	3301      	adds	r3, #1
 800547c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	b29a      	uxth	r2, r3
 8005486:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800548a:	b29b      	uxth	r3, r3
 800548c:	029b      	lsls	r3, r3, #10
 800548e:	b29b      	uxth	r3, r3
 8005490:	4313      	orrs	r3, r2
 8005492:	b29a      	uxth	r2, r3
 8005494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005496:	801a      	strh	r2, [r3, #0]
 8005498:	e024      	b.n	80054e4 <USB_EPStartXfer+0x318>
 800549a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800549e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	785b      	ldrb	r3, [r3, #1]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d11c      	bne.n	80054e4 <USB_EPStartXfer+0x318>
 80054aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054be:	4413      	add	r3, r2
 80054c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80054c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	011a      	lsls	r2, r3, #4
 80054d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d2:	4413      	add	r3, r2
 80054d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80054d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054de:	b29a      	uxth	r2, r3
 80054e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80054e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	895b      	ldrh	r3, [r3, #10]
 80054f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80054f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6959      	ldr	r1, [r3, #20]
 8005500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005504:	b29b      	uxth	r3, r3
 8005506:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800550a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800550e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005512:	6800      	ldr	r0, [r0, #0]
 8005514:	f001 fb49 	bl	8006baa <USB_WritePMA>
            ep->xfer_buff += len;
 8005518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800551c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005528:	441a      	add	r2, r3
 800552a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800552e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800553a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6a1a      	ldr	r2, [r3, #32]
 8005542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	429a      	cmp	r2, r3
 8005550:	d90f      	bls.n	8005572 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8005552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6a1a      	ldr	r2, [r3, #32]
 800555e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005562:	1ad2      	subs	r2, r2, r3
 8005564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	621a      	str	r2, [r3, #32]
 8005570:	e00e      	b.n	8005590 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8005572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2200      	movs	r2, #0
 800558e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005590:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005594:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d177      	bne.n	8005690 <USB_EPStartXfer+0x4c4>
 80055a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	61bb      	str	r3, [r7, #24]
 80055ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	4413      	add	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
 80055c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80055c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	011a      	lsls	r2, r3, #4
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	4413      	add	r3, r2
 80055d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80055da:	617b      	str	r3, [r7, #20]
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	801a      	strh	r2, [r3, #0]
 80055ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80055f2:	d921      	bls.n	8005638 <USB_EPStartXfer+0x46c>
 80055f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055f8:	095b      	lsrs	r3, r3, #5
 80055fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80055fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005602:	f003 031f 	and.w	r3, r3, #31
 8005606:	2b00      	cmp	r3, #0
 8005608:	d104      	bne.n	8005614 <USB_EPStartXfer+0x448>
 800560a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800560e:	3b01      	subs	r3, #1
 8005610:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	b29a      	uxth	r2, r3
 800561a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800561e:	b29b      	uxth	r3, r3
 8005620:	029b      	lsls	r3, r3, #10
 8005622:	b29b      	uxth	r3, r3
 8005624:	4313      	orrs	r3, r2
 8005626:	b29b      	uxth	r3, r3
 8005628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005630:	b29a      	uxth	r2, r3
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	801a      	strh	r2, [r3, #0]
 8005636:	e056      	b.n	80056e6 <USB_EPStartXfer+0x51a>
 8005638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10a      	bne.n	8005656 <USB_EPStartXfer+0x48a>
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800564a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800564e:	b29a      	uxth	r2, r3
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	801a      	strh	r2, [r3, #0]
 8005654:	e047      	b.n	80056e6 <USB_EPStartXfer+0x51a>
 8005656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800565a:	085b      	lsrs	r3, r3, #1
 800565c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d004      	beq.n	8005676 <USB_EPStartXfer+0x4aa>
 800566c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005670:	3301      	adds	r3, #1
 8005672:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	b29a      	uxth	r2, r3
 800567c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005680:	b29b      	uxth	r3, r3
 8005682:	029b      	lsls	r3, r3, #10
 8005684:	b29b      	uxth	r3, r3
 8005686:	4313      	orrs	r3, r2
 8005688:	b29a      	uxth	r2, r3
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	801a      	strh	r2, [r3, #0]
 800568e:	e02a      	b.n	80056e6 <USB_EPStartXfer+0x51a>
 8005690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	785b      	ldrb	r3, [r3, #1]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d122      	bne.n	80056e6 <USB_EPStartXfer+0x51a>
 80056a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	623b      	str	r3, [r7, #32]
 80056ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	4413      	add	r3, r2
 80056c2:	623b      	str	r3, [r7, #32]
 80056c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	011a      	lsls	r2, r3, #4
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	4413      	add	r3, r2
 80056d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	891b      	ldrh	r3, [r3, #8]
 80056f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80056fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6959      	ldr	r1, [r3, #20]
 8005702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005706:	b29b      	uxth	r3, r3
 8005708:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800570c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005710:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005714:	6800      	ldr	r0, [r0, #0]
 8005716:	f001 fa48 	bl	8006baa <USB_WritePMA>
 800571a:	e3ee      	b.n	8005efa <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800571c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	785b      	ldrb	r3, [r3, #1]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d177      	bne.n	800581c <USB_EPStartXfer+0x650>
 800572c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005730:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800573c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005746:	b29b      	uxth	r3, r3
 8005748:	461a      	mov	r2, r3
 800574a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800574c:	4413      	add	r3, r2
 800574e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	011a      	lsls	r2, r3, #4
 800575e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005760:	4413      	add	r3, r2
 8005762:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005766:	647b      	str	r3, [r7, #68]	@ 0x44
 8005768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29b      	uxth	r3, r3
 800576e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005772:	b29a      	uxth	r2, r3
 8005774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005776:	801a      	strh	r2, [r3, #0]
 8005778:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800577c:	2b3e      	cmp	r3, #62	@ 0x3e
 800577e:	d921      	bls.n	80057c4 <USB_EPStartXfer+0x5f8>
 8005780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005784:	095b      	lsrs	r3, r3, #5
 8005786:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800578a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800578e:	f003 031f 	and.w	r3, r3, #31
 8005792:	2b00      	cmp	r3, #0
 8005794:	d104      	bne.n	80057a0 <USB_EPStartXfer+0x5d4>
 8005796:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800579a:	3b01      	subs	r3, #1
 800579c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	029b      	lsls	r3, r3, #10
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	4313      	orrs	r3, r2
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057bc:	b29a      	uxth	r2, r3
 80057be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057c0:	801a      	strh	r2, [r3, #0]
 80057c2:	e056      	b.n	8005872 <USB_EPStartXfer+0x6a6>
 80057c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10a      	bne.n	80057e2 <USB_EPStartXfer+0x616>
 80057cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057da:	b29a      	uxth	r2, r3
 80057dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057de:	801a      	strh	r2, [r3, #0]
 80057e0:	e047      	b.n	8005872 <USB_EPStartXfer+0x6a6>
 80057e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e6:	085b      	lsrs	r3, r3, #1
 80057e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80057ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d004      	beq.n	8005802 <USB_EPStartXfer+0x636>
 80057f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80057fc:	3301      	adds	r3, #1
 80057fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	b29a      	uxth	r2, r3
 8005808:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800580c:	b29b      	uxth	r3, r3
 800580e:	029b      	lsls	r3, r3, #10
 8005810:	b29b      	uxth	r3, r3
 8005812:	4313      	orrs	r3, r2
 8005814:	b29a      	uxth	r2, r3
 8005816:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005818:	801a      	strh	r2, [r3, #0]
 800581a:	e02a      	b.n	8005872 <USB_EPStartXfer+0x6a6>
 800581c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005820:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d122      	bne.n	8005872 <USB_EPStartXfer+0x6a6>
 800582c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005830:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	653b      	str	r3, [r7, #80]	@ 0x50
 8005838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800583c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005846:	b29b      	uxth	r3, r3
 8005848:	461a      	mov	r2, r3
 800584a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800584c:	4413      	add	r3, r2
 800584e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	011a      	lsls	r2, r3, #4
 800585e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005860:	4413      	add	r3, r2
 8005862:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005866:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800586c:	b29a      	uxth	r2, r3
 800586e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005870:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	891b      	ldrh	r3, [r3, #8]
 800587e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6959      	ldr	r1, [r3, #20]
 800588e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005892:	b29b      	uxth	r3, r3
 8005894:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005898:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800589c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80058a0:	6800      	ldr	r0, [r0, #0]
 80058a2:	f001 f982 	bl	8006baa <USB_WritePMA>
            ep->xfer_buff += len;
 80058a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695a      	ldr	r2, [r3, #20]
 80058b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b6:	441a      	add	r2, r3
 80058b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80058c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6a1a      	ldr	r2, [r3, #32]
 80058d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d90f      	bls.n	8005900 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80058e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6a1a      	ldr	r2, [r3, #32]
 80058ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f0:	1ad2      	subs	r2, r2, r3
 80058f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80058f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	621a      	str	r2, [r3, #32]
 80058fe:	e00e      	b.n	800591e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8005900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8005910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800591e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005922:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	643b      	str	r3, [r7, #64]	@ 0x40
 800592a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800592e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d177      	bne.n	8005a2a <USB_EPStartXfer+0x85e>
 800593a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800593e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800594a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005954:	b29b      	uxth	r3, r3
 8005956:	461a      	mov	r2, r3
 8005958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800595a:	4413      	add	r3, r2
 800595c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800595e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005962:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	011a      	lsls	r2, r3, #4
 800596c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596e:	4413      	add	r3, r2
 8005970:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005974:	637b      	str	r3, [r7, #52]	@ 0x34
 8005976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005978:	881b      	ldrh	r3, [r3, #0]
 800597a:	b29b      	uxth	r3, r3
 800597c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005980:	b29a      	uxth	r2, r3
 8005982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005984:	801a      	strh	r2, [r3, #0]
 8005986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800598a:	2b3e      	cmp	r3, #62	@ 0x3e
 800598c:	d921      	bls.n	80059d2 <USB_EPStartXfer+0x806>
 800598e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800599c:	f003 031f 	and.w	r3, r3, #31
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d104      	bne.n	80059ae <USB_EPStartXfer+0x7e2>
 80059a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a8:	3b01      	subs	r3, #1
 80059aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80059ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	029b      	lsls	r3, r3, #10
 80059bc:	b29b      	uxth	r3, r3
 80059be:	4313      	orrs	r3, r2
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ce:	801a      	strh	r2, [r3, #0]
 80059d0:	e050      	b.n	8005a74 <USB_EPStartXfer+0x8a8>
 80059d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10a      	bne.n	80059f0 <USB_EPStartXfer+0x824>
 80059da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ec:	801a      	strh	r2, [r3, #0]
 80059ee:	e041      	b.n	8005a74 <USB_EPStartXfer+0x8a8>
 80059f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f4:	085b      	lsrs	r3, r3, #1
 80059f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80059fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d004      	beq.n	8005a10 <USB_EPStartXfer+0x844>
 8005a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a12:	881b      	ldrh	r3, [r3, #0]
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	029b      	lsls	r3, r3, #10
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	4313      	orrs	r3, r2
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a26:	801a      	strh	r2, [r3, #0]
 8005a28:	e024      	b.n	8005a74 <USB_EPStartXfer+0x8a8>
 8005a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	785b      	ldrb	r3, [r3, #1]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d11c      	bne.n	8005a74 <USB_EPStartXfer+0x8a8>
 8005a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a4e:	4413      	add	r3, r2
 8005a50:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	011a      	lsls	r2, r3, #4
 8005a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a62:	4413      	add	r3, r2
 8005a64:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	895b      	ldrh	r3, [r3, #10]
 8005a80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005a88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6959      	ldr	r1, [r3, #20]
 8005a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005a9a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005a9e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005aa2:	6800      	ldr	r0, [r0, #0]
 8005aa4:	f001 f881 	bl	8006baa <USB_WritePMA>
 8005aa8:	e227      	b.n	8005efa <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005aba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005abe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	881b      	ldrh	r3, [r3, #0]
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005adc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005ae4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ae8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005af2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	441a      	add	r2, r3
 8005afe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005b02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	461a      	mov	r2, r3
 8005b34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b36:	4413      	add	r3, r2
 8005b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	011a      	lsls	r2, r3, #4
 8005b48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005b50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005b52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005b5a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005b5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	891b      	ldrh	r3, [r3, #8]
 8005b68:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	6959      	ldr	r1, [r3, #20]
 8005b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005b82:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005b86:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005b8a:	6800      	ldr	r0, [r0, #0]
 8005b8c:	f001 f80d 	bl	8006baa <USB_WritePMA>
 8005b90:	e1b3      	b.n	8005efa <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005b92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005b96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6a1a      	ldr	r2, [r3, #32]
 8005b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ba2:	1ad2      	subs	r2, r2, r3
 8005ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005bb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	4413      	add	r3, r2
 8005bca:	881b      	ldrh	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 80c6 	beq.w	8005d64 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005bd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bdc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	673b      	str	r3, [r7, #112]	@ 0x70
 8005be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	785b      	ldrb	r3, [r3, #1]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d177      	bne.n	8005ce4 <USB_EPStartXfer+0xb18>
 8005bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	461a      	mov	r2, r3
 8005c12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c14:	4413      	add	r3, r2
 8005c16:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	011a      	lsls	r2, r3, #4
 8005c26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c28:	4413      	add	r3, r2
 8005c2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c3e:	801a      	strh	r2, [r3, #0]
 8005c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c44:	2b3e      	cmp	r3, #62	@ 0x3e
 8005c46:	d921      	bls.n	8005c8c <USB_EPStartXfer+0xac0>
 8005c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c56:	f003 031f 	and.w	r3, r3, #31
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d104      	bne.n	8005c68 <USB_EPStartXfer+0xa9c>
 8005c5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c62:	3b01      	subs	r3, #1
 8005c64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005c68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	029b      	lsls	r3, r3, #10
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c88:	801a      	strh	r2, [r3, #0]
 8005c8a:	e050      	b.n	8005d2e <USB_EPStartXfer+0xb62>
 8005c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <USB_EPStartXfer+0xade>
 8005c94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ca6:	801a      	strh	r2, [r3, #0]
 8005ca8:	e041      	b.n	8005d2e <USB_EPStartXfer+0xb62>
 8005caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cae:	085b      	lsrs	r3, r3, #1
 8005cb0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d004      	beq.n	8005cca <USB_EPStartXfer+0xafe>
 8005cc0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005cca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ccc:	881b      	ldrh	r3, [r3, #0]
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	029b      	lsls	r3, r3, #10
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ce0:	801a      	strh	r2, [r3, #0]
 8005ce2:	e024      	b.n	8005d2e <USB_EPStartXfer+0xb62>
 8005ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d11c      	bne.n	8005d2e <USB_EPStartXfer+0xb62>
 8005cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005cf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d08:	4413      	add	r3, r2
 8005d0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	011a      	lsls	r2, r3, #4
 8005d1a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d1c:	4413      	add	r3, r2
 8005d1e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d28:	b29a      	uxth	r2, r3
 8005d2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005d2c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	895b      	ldrh	r3, [r3, #10]
 8005d3a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6959      	ldr	r1, [r3, #20]
 8005d4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005d54:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005d58:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005d5c:	6800      	ldr	r0, [r0, #0]
 8005d5e:	f000 ff24 	bl	8006baa <USB_WritePMA>
 8005d62:	e0ca      	b.n	8005efa <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	785b      	ldrb	r3, [r3, #1]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d177      	bne.n	8005e64 <USB_EPStartXfer+0xc98>
 8005d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d94:	4413      	add	r3, r2
 8005d96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	011a      	lsls	r2, r3, #4
 8005da6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005da8:	4413      	add	r3, r2
 8005daa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005dae:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005db0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005db2:	881b      	ldrh	r3, [r3, #0]
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dbe:	801a      	strh	r2, [r3, #0]
 8005dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005dc6:	d921      	bls.n	8005e0c <USB_EPStartXfer+0xc40>
 8005dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dcc:	095b      	lsrs	r3, r3, #5
 8005dce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dd6:	f003 031f 	and.w	r3, r3, #31
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d104      	bne.n	8005de8 <USB_EPStartXfer+0xc1c>
 8005dde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005de2:	3b01      	subs	r3, #1
 8005de4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005de8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	029b      	lsls	r3, r3, #10
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e08:	801a      	strh	r2, [r3, #0]
 8005e0a:	e05c      	b.n	8005ec6 <USB_EPStartXfer+0xcfa>
 8005e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <USB_EPStartXfer+0xc5e>
 8005e14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e16:	881b      	ldrh	r3, [r3, #0]
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e26:	801a      	strh	r2, [r3, #0]
 8005e28:	e04d      	b.n	8005ec6 <USB_EPStartXfer+0xcfa>
 8005e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e2e:	085b      	lsrs	r3, r3, #1
 8005e30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d004      	beq.n	8005e4a <USB_EPStartXfer+0xc7e>
 8005e40:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e44:	3301      	adds	r3, #1
 8005e46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005e4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	029b      	lsls	r3, r3, #10
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	b29a      	uxth	r2, r3
 8005e5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e60:	801a      	strh	r2, [r3, #0]
 8005e62:	e030      	b.n	8005ec6 <USB_EPStartXfer+0xcfa>
 8005e64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d128      	bne.n	8005ec6 <USB_EPStartXfer+0xcfa>
 8005e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	461a      	mov	r2, r3
 8005e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e98:	4413      	add	r3, r2
 8005e9a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	011a      	lsls	r2, r3, #4
 8005eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005eb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005eba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005ec4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ec6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	891b      	ldrh	r3, [r3, #8]
 8005ed2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6959      	ldr	r1, [r3, #20]
 8005ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8005eec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8005ef0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8005ef4:	6800      	ldr	r0, [r0, #0]
 8005ef6:	f000 fe58 	bl	8006baa <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f20:	817b      	strh	r3, [r7, #10]
 8005f22:	897b      	ldrh	r3, [r7, #10]
 8005f24:	f083 0310 	eor.w	r3, r3, #16
 8005f28:	817b      	strh	r3, [r7, #10]
 8005f2a:	897b      	ldrh	r3, [r7, #10]
 8005f2c:	f083 0320 	eor.w	r3, r3, #32
 8005f30:	817b      	strh	r3, [r7, #10]
 8005f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	441a      	add	r2, r3
 8005f4c:	897b      	ldrh	r3, [r7, #10]
 8005f4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	8013      	strh	r3, [r2, #0]
 8005f62:	f000 bcde 	b.w	8006922 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	7b1b      	ldrb	r3, [r3, #12]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f040 80bb 	bne.w	80060ee <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	699a      	ldr	r2, [r3, #24]
 8005f84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d917      	bls.n	8005fc4 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8005f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8005fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699a      	ldr	r2, [r3, #24]
 8005fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb4:	1ad2      	subs	r2, r2, r3
 8005fb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	619a      	str	r2, [r3, #24]
 8005fc2:	e00e      	b.n	8005fe2 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8005fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8005fd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005fe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005fe6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005ff4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006006:	4413      	add	r3, r2
 8006008:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800600c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	011a      	lsls	r2, r3, #4
 800601a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800601e:	4413      	add	r3, r2
 8006020:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006024:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006028:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006034:	b29a      	uxth	r2, r3
 8006036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800603a:	801a      	strh	r2, [r3, #0]
 800603c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006040:	2b3e      	cmp	r3, #62	@ 0x3e
 8006042:	d924      	bls.n	800608e <USB_EPStartXfer+0xec2>
 8006044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800604e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006052:	f003 031f 	and.w	r3, r3, #31
 8006056:	2b00      	cmp	r3, #0
 8006058:	d104      	bne.n	8006064 <USB_EPStartXfer+0xe98>
 800605a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800605e:	3b01      	subs	r3, #1
 8006060:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29a      	uxth	r2, r3
 800606c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006070:	b29b      	uxth	r3, r3
 8006072:	029b      	lsls	r3, r3, #10
 8006074:	b29b      	uxth	r3, r3
 8006076:	4313      	orrs	r3, r2
 8006078:	b29b      	uxth	r3, r3
 800607a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800607e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006082:	b29a      	uxth	r2, r3
 8006084:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006088:	801a      	strh	r2, [r3, #0]
 800608a:	f000 bc10 	b.w	80068ae <USB_EPStartXfer+0x16e2>
 800608e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10c      	bne.n	80060b0 <USB_EPStartXfer+0xee4>
 8006096:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060ac:	801a      	strh	r2, [r3, #0]
 80060ae:	e3fe      	b.n	80068ae <USB_EPStartXfer+0x16e2>
 80060b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b4:	085b      	lsrs	r3, r3, #1
 80060b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d004      	beq.n	80060d0 <USB_EPStartXfer+0xf04>
 80060c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80060ca:	3301      	adds	r3, #1
 80060cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060d4:	881b      	ldrh	r3, [r3, #0]
 80060d6:	b29a      	uxth	r2, r3
 80060d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80060dc:	b29b      	uxth	r3, r3
 80060de:	029b      	lsls	r3, r3, #10
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	4313      	orrs	r3, r2
 80060e4:	b29a      	uxth	r2, r3
 80060e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060ea:	801a      	strh	r2, [r3, #0]
 80060ec:	e3df      	b.n	80068ae <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80060ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80060f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	78db      	ldrb	r3, [r3, #3]
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	f040 8218 	bne.w	8006530 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	785b      	ldrb	r3, [r3, #1]
 800610c:	2b00      	cmp	r3, #0
 800610e:	f040 809d 	bne.w	800624c <USB_EPStartXfer+0x1080>
 8006112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006116:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006124:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800612e:	b29b      	uxth	r3, r3
 8006130:	461a      	mov	r2, r3
 8006132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006136:	4413      	add	r3, r2
 8006138:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800613c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	011a      	lsls	r2, r3, #4
 800614a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800614e:	4413      	add	r3, r2
 8006150:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006154:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006158:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	b29b      	uxth	r3, r3
 8006160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006164:	b29a      	uxth	r2, r3
 8006166:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800616a:	801a      	strh	r2, [r3, #0]
 800616c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b3e      	cmp	r3, #62	@ 0x3e
 800617a:	d92b      	bls.n	80061d4 <USB_EPStartXfer+0x1008>
 800617c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800618e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006192:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d104      	bne.n	80061ac <USB_EPStartXfer+0xfe0>
 80061a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061a6:	3b01      	subs	r3, #1
 80061a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80061ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061b0:	881b      	ldrh	r3, [r3, #0]
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	029b      	lsls	r3, r3, #10
 80061bc:	b29b      	uxth	r3, r3
 80061be:	4313      	orrs	r3, r2
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061d0:	801a      	strh	r2, [r3, #0]
 80061d2:	e070      	b.n	80062b6 <USB_EPStartXfer+0x10ea>
 80061d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80061d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10c      	bne.n	80061fe <USB_EPStartXfer+0x1032>
 80061e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061f4:	b29a      	uxth	r2, r3
 80061f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80061fa:	801a      	strh	r2, [r3, #0]
 80061fc:	e05b      	b.n	80062b6 <USB_EPStartXfer+0x10ea>
 80061fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	085b      	lsrs	r3, r3, #1
 800620c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d004      	beq.n	800622e <USB_EPStartXfer+0x1062>
 8006224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006228:	3301      	adds	r3, #1
 800622a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800622e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29a      	uxth	r2, r3
 8006236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800623a:	b29b      	uxth	r3, r3
 800623c:	029b      	lsls	r3, r3, #10
 800623e:	b29b      	uxth	r3, r3
 8006240:	4313      	orrs	r3, r2
 8006242:	b29a      	uxth	r2, r3
 8006244:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006248:	801a      	strh	r2, [r3, #0]
 800624a:	e034      	b.n	80062b6 <USB_EPStartXfer+0x10ea>
 800624c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	785b      	ldrb	r3, [r3, #1]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d12c      	bne.n	80062b6 <USB_EPStartXfer+0x10ea>
 800625c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800626a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800626e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006278:	b29b      	uxth	r3, r3
 800627a:	461a      	mov	r2, r3
 800627c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006280:	4413      	add	r3, r2
 8006282:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800628a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	011a      	lsls	r2, r3, #4
 8006294:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006298:	4413      	add	r3, r2
 800629a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800629e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80062b4:	801a      	strh	r2, [r3, #0]
 80062b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80062c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	785b      	ldrb	r3, [r3, #1]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f040 809d 	bne.w	8006410 <USB_EPStartXfer+0x1244>
 80062d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80062e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	461a      	mov	r2, r3
 80062f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80062fa:	4413      	add	r3, r2
 80062fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	011a      	lsls	r2, r3, #4
 800630e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006312:	4413      	add	r3, r2
 8006314:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800631c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006328:	b29a      	uxth	r2, r3
 800632a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800632e:	801a      	strh	r2, [r3, #0]
 8006330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691b      	ldr	r3, [r3, #16]
 800633c:	2b3e      	cmp	r3, #62	@ 0x3e
 800633e:	d92b      	bls.n	8006398 <USB_EPStartXfer+0x11cc>
 8006340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	095b      	lsrs	r3, r3, #5
 800634e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 031f 	and.w	r3, r3, #31
 8006362:	2b00      	cmp	r3, #0
 8006364:	d104      	bne.n	8006370 <USB_EPStartXfer+0x11a4>
 8006366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800636a:	3b01      	subs	r3, #1
 800636c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006370:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	b29a      	uxth	r2, r3
 8006378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800637c:	b29b      	uxth	r3, r3
 800637e:	029b      	lsls	r3, r3, #10
 8006380:	b29b      	uxth	r3, r3
 8006382:	4313      	orrs	r3, r2
 8006384:	b29b      	uxth	r3, r3
 8006386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800638a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638e:	b29a      	uxth	r2, r3
 8006390:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006394:	801a      	strh	r2, [r3, #0]
 8006396:	e069      	b.n	800646c <USB_EPStartXfer+0x12a0>
 8006398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800639c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10c      	bne.n	80063c2 <USB_EPStartXfer+0x11f6>
 80063a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063be:	801a      	strh	r2, [r3, #0]
 80063c0:	e054      	b.n	800646c <USB_EPStartXfer+0x12a0>
 80063c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	085b      	lsrs	r3, r3, #1
 80063d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d004      	beq.n	80063f2 <USB_EPStartXfer+0x1226>
 80063e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063ec:	3301      	adds	r3, #1
 80063ee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063fe:	b29b      	uxth	r3, r3
 8006400:	029b      	lsls	r3, r3, #10
 8006402:	b29b      	uxth	r3, r3
 8006404:	4313      	orrs	r3, r2
 8006406:	b29a      	uxth	r2, r3
 8006408:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800640c:	801a      	strh	r2, [r3, #0]
 800640e:	e02d      	b.n	800646c <USB_EPStartXfer+0x12a0>
 8006410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	785b      	ldrb	r3, [r3, #1]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d125      	bne.n	800646c <USB_EPStartXfer+0x12a0>
 8006420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006424:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800642e:	b29b      	uxth	r3, r3
 8006430:	461a      	mov	r2, r3
 8006432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006436:	4413      	add	r3, r2
 8006438:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800643c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	011a      	lsls	r2, r3, #4
 800644a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800644e:	4413      	add	r3, r2
 8006450:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006454:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	b29a      	uxth	r2, r3
 8006466:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800646a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800646c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 8218 	beq.w	80068ae <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800647e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800648c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800649e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d005      	beq.n	80064b6 <USB_EPStartXfer+0x12ea>
 80064aa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10d      	bne.n	80064d2 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f040 81f5 	bne.w	80068ae <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064c4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80064c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f040 81ee 	bne.w	80068ae <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80064d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4413      	add	r3, r2
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064f8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80064fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006500:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	441a      	add	r2, r3
 8006516:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800651a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800651e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006526:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800652a:	b29b      	uxth	r3, r3
 800652c:	8013      	strh	r3, [r2, #0]
 800652e:	e1be      	b.n	80068ae <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	78db      	ldrb	r3, [r3, #3]
 800653c:	2b01      	cmp	r3, #1
 800653e:	f040 81b4 	bne.w	80068aa <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	429a      	cmp	r2, r3
 800655c:	d917      	bls.n	800658e <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800655e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006562:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800656e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	699a      	ldr	r2, [r3, #24]
 800657a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800657e:	1ad2      	subs	r2, r2, r3
 8006580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	619a      	str	r2, [r3, #24]
 800658c:	e00e      	b.n	80065ac <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800658e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800659e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2200      	movs	r2, #0
 80065aa:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80065ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	785b      	ldrb	r3, [r3, #1]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f040 8085 	bne.w	80066c8 <USB_EPStartXfer+0x14fc>
 80065be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065e2:	4413      	add	r3, r2
 80065e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	011a      	lsls	r2, r3, #4
 80065f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80065fa:	4413      	add	r3, r2
 80065fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006600:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006604:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006610:	b29a      	uxth	r2, r3
 8006612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006616:	801a      	strh	r2, [r3, #0]
 8006618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800661c:	2b3e      	cmp	r3, #62	@ 0x3e
 800661e:	d923      	bls.n	8006668 <USB_EPStartXfer+0x149c>
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006624:	095b      	lsrs	r3, r3, #5
 8006626:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662e:	f003 031f 	and.w	r3, r3, #31
 8006632:	2b00      	cmp	r3, #0
 8006634:	d104      	bne.n	8006640 <USB_EPStartXfer+0x1474>
 8006636:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800663a:	3b01      	subs	r3, #1
 800663c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006640:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b29a      	uxth	r2, r3
 8006648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800664c:	b29b      	uxth	r3, r3
 800664e:	029b      	lsls	r3, r3, #10
 8006650:	b29b      	uxth	r3, r3
 8006652:	4313      	orrs	r3, r2
 8006654:	b29b      	uxth	r3, r3
 8006656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800665a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800665e:	b29a      	uxth	r2, r3
 8006660:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006664:	801a      	strh	r2, [r3, #0]
 8006666:	e060      	b.n	800672a <USB_EPStartXfer+0x155e>
 8006668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666c:	2b00      	cmp	r3, #0
 800666e:	d10c      	bne.n	800668a <USB_EPStartXfer+0x14be>
 8006670:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006674:	881b      	ldrh	r3, [r3, #0]
 8006676:	b29b      	uxth	r3, r3
 8006678:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006680:	b29a      	uxth	r2, r3
 8006682:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006686:	801a      	strh	r2, [r3, #0]
 8006688:	e04f      	b.n	800672a <USB_EPStartXfer+0x155e>
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800668e:	085b      	lsrs	r3, r3, #1
 8006690:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006698:	f003 0301 	and.w	r3, r3, #1
 800669c:	2b00      	cmp	r3, #0
 800669e:	d004      	beq.n	80066aa <USB_EPStartXfer+0x14de>
 80066a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066a4:	3301      	adds	r3, #1
 80066a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80066aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066ae:	881b      	ldrh	r3, [r3, #0]
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066b6:	b29b      	uxth	r3, r3
 80066b8:	029b      	lsls	r3, r3, #10
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	4313      	orrs	r3, r2
 80066be:	b29a      	uxth	r2, r3
 80066c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80066c4:	801a      	strh	r2, [r3, #0]
 80066c6:	e030      	b.n	800672a <USB_EPStartXfer+0x155e>
 80066c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	785b      	ldrb	r3, [r3, #1]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d128      	bne.n	800672a <USB_EPStartXfer+0x155e>
 80066d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80066e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	461a      	mov	r2, r3
 80066f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80066fc:	4413      	add	r3, r2
 80066fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	781b      	ldrb	r3, [r3, #0]
 800670e:	011a      	lsls	r2, r3, #4
 8006710:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006714:	4413      	add	r3, r2
 8006716:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800671a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800671e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006722:	b29a      	uxth	r2, r3
 8006724:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006728:	801a      	strh	r2, [r3, #0]
 800672a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800672e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	785b      	ldrb	r3, [r3, #1]
 8006744:	2b00      	cmp	r3, #0
 8006746:	f040 8085 	bne.w	8006854 <USB_EPStartXfer+0x1688>
 800674a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006766:	b29b      	uxth	r3, r3
 8006768:	461a      	mov	r2, r3
 800676a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800676e:	4413      	add	r3, r2
 8006770:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	011a      	lsls	r2, r3, #4
 8006782:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006786:	4413      	add	r3, r2
 8006788:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800678c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006790:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	b29b      	uxth	r3, r3
 8006798:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800679c:	b29a      	uxth	r2, r3
 800679e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067a2:	801a      	strh	r2, [r3, #0]
 80067a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80067aa:	d923      	bls.n	80067f4 <USB_EPStartXfer+0x1628>
 80067ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ba:	f003 031f 	and.w	r3, r3, #31
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d104      	bne.n	80067cc <USB_EPStartXfer+0x1600>
 80067c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067c6:	3b01      	subs	r3, #1
 80067c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80067cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067d0:	881b      	ldrh	r3, [r3, #0]
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80067d8:	b29b      	uxth	r3, r3
 80067da:	029b      	lsls	r3, r3, #10
 80067dc:	b29b      	uxth	r3, r3
 80067de:	4313      	orrs	r3, r2
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80067f0:	801a      	strh	r2, [r3, #0]
 80067f2:	e05c      	b.n	80068ae <USB_EPStartXfer+0x16e2>
 80067f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10c      	bne.n	8006816 <USB_EPStartXfer+0x164a>
 80067fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006800:	881b      	ldrh	r3, [r3, #0]
 8006802:	b29b      	uxth	r3, r3
 8006804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800680c:	b29a      	uxth	r2, r3
 800680e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006812:	801a      	strh	r2, [r3, #0]
 8006814:	e04b      	b.n	80068ae <USB_EPStartXfer+0x16e2>
 8006816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800681a:	085b      	lsrs	r3, r3, #1
 800681c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d004      	beq.n	8006836 <USB_EPStartXfer+0x166a>
 800682c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006830:	3301      	adds	r3, #1
 8006832:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800683a:	881b      	ldrh	r3, [r3, #0]
 800683c:	b29a      	uxth	r2, r3
 800683e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006842:	b29b      	uxth	r3, r3
 8006844:	029b      	lsls	r3, r3, #10
 8006846:	b29b      	uxth	r3, r3
 8006848:	4313      	orrs	r3, r2
 800684a:	b29a      	uxth	r2, r3
 800684c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006850:	801a      	strh	r2, [r3, #0]
 8006852:	e02c      	b.n	80068ae <USB_EPStartXfer+0x16e2>
 8006854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	785b      	ldrb	r3, [r3, #1]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d124      	bne.n	80068ae <USB_EPStartXfer+0x16e2>
 8006864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006872:	b29b      	uxth	r3, r3
 8006874:	461a      	mov	r2, r3
 8006876:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800687a:	4413      	add	r3, r2
 800687c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	011a      	lsls	r2, r3, #4
 800688e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006892:	4413      	add	r3, r2
 8006894:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006898:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800689c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a0:	b29a      	uxth	r2, r3
 80068a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80068a6:	801a      	strh	r2, [r3, #0]
 80068a8:	e001      	b.n	80068ae <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e03a      	b.n	8006924 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80068d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80068dc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80068e0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80068e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80068e8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068ec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80068f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	441a      	add	r2, r3
 800690a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800690e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006912:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800691a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800691e:	b29b      	uxth	r3, r3
 8006920:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800692e:	b480      	push	{r7}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	785b      	ldrb	r3, [r3, #1]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d020      	beq.n	8006982 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	881b      	ldrh	r3, [r3, #0]
 800694c:	b29b      	uxth	r3, r3
 800694e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006952:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006956:	81bb      	strh	r3, [r7, #12]
 8006958:	89bb      	ldrh	r3, [r7, #12]
 800695a:	f083 0310 	eor.w	r3, r3, #16
 800695e:	81bb      	strh	r3, [r7, #12]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	441a      	add	r2, r3
 800696a:	89bb      	ldrh	r3, [r7, #12]
 800696c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006970:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006974:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800697c:	b29b      	uxth	r3, r3
 800697e:	8013      	strh	r3, [r2, #0]
 8006980:	e01f      	b.n	80069c2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006998:	81fb      	strh	r3, [r7, #14]
 800699a:	89fb      	ldrh	r3, [r7, #14]
 800699c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80069a0:	81fb      	strh	r3, [r7, #14]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	441a      	add	r2, r3
 80069ac:	89fb      	ldrh	r3, [r7, #14]
 80069ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069be:	b29b      	uxth	r3, r3
 80069c0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bc80      	pop	{r7}
 80069cc:	4770      	bx	lr

080069ce <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b087      	sub	sp, #28
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
 80069d6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	7b1b      	ldrb	r3, [r3, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f040 809d 	bne.w	8006b1c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	785b      	ldrb	r3, [r3, #1]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d04c      	beq.n	8006a84 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	4413      	add	r3, r2
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	823b      	strh	r3, [r7, #16]
 80069f8:	8a3b      	ldrh	r3, [r7, #16]
 80069fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d01b      	beq.n	8006a3a <USB_EPClearStall+0x6c>
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	4413      	add	r3, r2
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a18:	81fb      	strh	r3, [r7, #14]
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	441a      	add	r2, r3
 8006a24:	89fb      	ldrh	r3, [r7, #14]
 8006a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	78db      	ldrb	r3, [r3, #3]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d06c      	beq.n	8006b1c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	881b      	ldrh	r3, [r3, #0]
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a58:	81bb      	strh	r3, [r7, #12]
 8006a5a:	89bb      	ldrh	r3, [r7, #12]
 8006a5c:	f083 0320 	eor.w	r3, r3, #32
 8006a60:	81bb      	strh	r3, [r7, #12]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	441a      	add	r2, r3
 8006a6c:	89bb      	ldrh	r3, [r7, #12]
 8006a6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	8013      	strh	r3, [r2, #0]
 8006a82:	e04b      	b.n	8006b1c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	82fb      	strh	r3, [r7, #22]
 8006a92:	8afb      	ldrh	r3, [r7, #22]
 8006a94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01b      	beq.n	8006ad4 <USB_EPClearStall+0x106>
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab2:	82bb      	strh	r3, [r7, #20]
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	441a      	add	r2, r3
 8006abe:	8abb      	ldrh	r3, [r7, #20]
 8006ac0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ac4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ac8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	881b      	ldrh	r3, [r3, #0]
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aea:	827b      	strh	r3, [r7, #18]
 8006aec:	8a7b      	ldrh	r3, [r7, #18]
 8006aee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006af2:	827b      	strh	r3, [r7, #18]
 8006af4:	8a7b      	ldrh	r3, [r7, #18]
 8006af6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006afa:	827b      	strh	r3, [r7, #18]
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	441a      	add	r2, r3
 8006b06:	8a7b      	ldrh	r3, [r7, #18]
 8006b08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	371c      	adds	r7, #28
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bc80      	pop	{r7}
 8006b26:	4770      	bx	lr

08006b28 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b083      	sub	sp, #12
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	460b      	mov	r3, r1
 8006b32:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d103      	bne.n	8006b42 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2280      	movs	r2, #128	@ 0x80
 8006b3e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bc80      	pop	{r7}
 8006b4c:	4770      	bx	lr

08006b4e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr

08006b62 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bc80      	pop	{r7}
 8006b74:	4770      	bx	lr

08006b76 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b085      	sub	sp, #20
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b88:	68fb      	ldr	r3, [r7, #12]
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bc80      	pop	{r7}
 8006b92:	4770      	bx	lr

08006b94 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bc80      	pop	{r7}
 8006ba8:	4770      	bx	lr

08006baa <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006baa:	b480      	push	{r7}
 8006bac:	b08b      	sub	sp, #44	@ 0x2c
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	60f8      	str	r0, [r7, #12]
 8006bb2:	60b9      	str	r1, [r7, #8]
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	460b      	mov	r3, r1
 8006bba:	80fb      	strh	r3, [r7, #6]
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006bc0:	88bb      	ldrh	r3, [r7, #4]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	085b      	lsrs	r3, r3, #1
 8006bc6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bd0:	88fb      	ldrh	r3, [r7, #6]
 8006bd2:	005a      	lsls	r2, r3, #1
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bdc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006be2:	e01e      	b.n	8006c22 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	3301      	adds	r3, #1
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	021b      	lsls	r3, r3, #8
 8006bf2:	b21a      	sxth	r2, r3
 8006bf4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	b21b      	sxth	r3, r3
 8006bfc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	8a7a      	ldrh	r2, [r7, #18]
 8006c02:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	3302      	adds	r3, #2
 8006c08:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	3302      	adds	r3, #2
 8006c0e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	3301      	adds	r3, #1
 8006c14:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1dd      	bne.n	8006be4 <USB_WritePMA+0x3a>
  }
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	372c      	adds	r7, #44	@ 0x2c
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bc80      	pop	{r7}
 8006c32:	4770      	bx	lr

08006c34 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b08b      	sub	sp, #44	@ 0x2c
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	4611      	mov	r1, r2
 8006c40:	461a      	mov	r2, r3
 8006c42:	460b      	mov	r3, r1
 8006c44:	80fb      	strh	r3, [r7, #6]
 8006c46:	4613      	mov	r3, r2
 8006c48:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c4a:	88bb      	ldrh	r3, [r7, #4]
 8006c4c:	085b      	lsrs	r3, r3, #1
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c5a:	88fb      	ldrh	r3, [r7, #6]
 8006c5c:	005a      	lsls	r2, r3, #1
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c66:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c6c:	e01b      	b.n	8006ca6 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	3302      	adds	r3, #2
 8006c7a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	3301      	adds	r3, #1
 8006c88:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	0a1b      	lsrs	r3, r3, #8
 8006c8e:	b2da      	uxtb	r2, r3
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	3301      	adds	r3, #1
 8006c98:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	3302      	adds	r3, #2
 8006c9e:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e0      	bne.n	8006c6e <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8006cac:	88bb      	ldrh	r3, [r7, #4]
 8006cae:	f003 0301 	and.w	r3, r3, #1
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d007      	beq.n	8006cc8 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	b2da      	uxtb	r2, r3
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	701a      	strb	r2, [r3, #0]
  }
}
 8006cc8:	bf00      	nop
 8006cca:	372c      	adds	r7, #44	@ 0x2c
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bc80      	pop	{r7}
 8006cd0:	4770      	bx	lr
	...

08006cd4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006cd8:	4904      	ldr	r1, [pc, #16]	@ (8006cec <MX_FATFS_Init+0x18>)
 8006cda:	4805      	ldr	r0, [pc, #20]	@ (8006cf0 <MX_FATFS_Init+0x1c>)
 8006cdc:	f001 fc12 	bl	8008504 <FATFS_LinkDriver>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	4b03      	ldr	r3, [pc, #12]	@ (8006cf4 <MX_FATFS_Init+0x20>)
 8006ce6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006ce8:	bf00      	nop
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	200004d8 	.word	0x200004d8
 8006cf0:	2000000c 	.word	0x2000000c
 8006cf4:	200004d4 	.word	0x200004d4

08006cf8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006d02:	4b05      	ldr	r3, [pc, #20]	@ (8006d18 <USER_initialize+0x20>)
 8006d04:	2201      	movs	r2, #1
 8006d06:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006d08:	4b03      	ldr	r3, [pc, #12]	@ (8006d18 <USER_initialize+0x20>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bc80      	pop	{r7}
 8006d16:	4770      	bx	lr
 8006d18:	20000009 	.word	0x20000009

08006d1c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006d26:	4b05      	ldr	r3, [pc, #20]	@ (8006d3c <USER_status+0x20>)
 8006d28:	2201      	movs	r2, #1
 8006d2a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006d2c:	4b03      	ldr	r3, [pc, #12]	@ (8006d3c <USER_status+0x20>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc80      	pop	{r7}
 8006d3a:	4770      	bx	lr
 8006d3c:	20000009 	.word	0x20000009

08006d40 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60b9      	str	r1, [r7, #8]
 8006d48:	607a      	str	r2, [r7, #4]
 8006d4a:	603b      	str	r3, [r7, #0]
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006d50:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr

08006d5c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60b9      	str	r1, [r7, #8]
 8006d64:	607a      	str	r2, [r7, #4]
 8006d66:	603b      	str	r3, [r7, #0]
 8006d68:	4603      	mov	r3, r0
 8006d6a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006d6c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bc80      	pop	{r7}
 8006d76:	4770      	bx	lr

08006d78 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	603a      	str	r2, [r7, #0]
 8006d82:	71fb      	strb	r3, [r7, #7]
 8006d84:	460b      	mov	r3, r1
 8006d86:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	73fb      	strb	r3, [r7, #15]
    return res;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bc80      	pop	{r7}
 8006d96:	4770      	bx	lr

08006d98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	460b      	mov	r3, r1
 8006da2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	7c1b      	ldrb	r3, [r3, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d115      	bne.n	8006ddc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006db0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006db4:	2202      	movs	r2, #2
 8006db6:	2181      	movs	r1, #129	@ 0x81
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 fedc 	bl	8008b76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006dc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006dc8:	2202      	movs	r2, #2
 8006dca:	2101      	movs	r1, #1
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 fed2 	bl	8008b76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8006dda:	e012      	b.n	8006e02 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006ddc:	2340      	movs	r3, #64	@ 0x40
 8006dde:	2202      	movs	r2, #2
 8006de0:	2181      	movs	r1, #129	@ 0x81
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 fec7 	bl	8008b76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006dee:	2340      	movs	r3, #64	@ 0x40
 8006df0:	2202      	movs	r2, #2
 8006df2:	2101      	movs	r1, #1
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 febe 	bl	8008b76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e02:	2308      	movs	r3, #8
 8006e04:	2203      	movs	r2, #3
 8006e06:	2182      	movs	r1, #130	@ 0x82
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 feb4 	bl	8008b76 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e14:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006e18:	f001 ffd4 	bl	8008dc4 <USBD_static_malloc>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d102      	bne.n	8006e34 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	73fb      	strb	r3, [r7, #15]
 8006e32:	e026      	b.n	8006e82 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e3a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	7c1b      	ldrb	r3, [r3, #16]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d109      	bne.n	8006e72 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e68:	2101      	movs	r1, #1
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 ff73 	bl	8008d56 <USBD_LL_PrepareReceive>
 8006e70:	e007      	b.n	8006e82 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e78:	2340      	movs	r3, #64	@ 0x40
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 ff6a 	bl	8008d56 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	460b      	mov	r3, r1
 8006e96:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e9c:	2181      	movs	r1, #129	@ 0x81
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f001 fe8f 	bl	8008bc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006eaa:	2101      	movs	r1, #1
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 fe88 	bl	8008bc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006eba:	2182      	movs	r1, #130	@ 0x82
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 fe80 	bl	8008bc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00e      	beq.n	8006ef0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f001 ff7a 	bl	8008ddc <USBD_static_free>
    pdev->pClassData = NULL;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b086      	sub	sp, #24
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f0a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006f10:	2300      	movs	r3, #0
 8006f12:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d039      	beq.n	8006f98 <USBD_CDC_Setup+0x9e>
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d17f      	bne.n	8007028 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	88db      	ldrh	r3, [r3, #6]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d029      	beq.n	8006f84 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	b25b      	sxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	da11      	bge.n	8006f5e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006f46:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	88d2      	ldrh	r2, [r2, #6]
 8006f4c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f4e:	6939      	ldr	r1, [r7, #16]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	88db      	ldrh	r3, [r3, #6]
 8006f54:	461a      	mov	r2, r3
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f001 fa06 	bl	8008368 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006f5c:	e06b      	b.n	8007036 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	785a      	ldrb	r2, [r3, #1]
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	88db      	ldrh	r3, [r3, #6]
 8006f6c:	b2da      	uxtb	r2, r3
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006f74:	6939      	ldr	r1, [r7, #16]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	88db      	ldrh	r3, [r3, #6]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 fa21 	bl	80083c4 <USBD_CtlPrepareRx>
      break;
 8006f82:	e058      	b.n	8007036 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	7850      	ldrb	r0, [r2, #1]
 8006f90:	2200      	movs	r2, #0
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	4798      	blx	r3
      break;
 8006f96:	e04e      	b.n	8007036 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	785b      	ldrb	r3, [r3, #1]
 8006f9c:	2b0b      	cmp	r3, #11
 8006f9e:	d02e      	beq.n	8006ffe <USBD_CDC_Setup+0x104>
 8006fa0:	2b0b      	cmp	r3, #11
 8006fa2:	dc38      	bgt.n	8007016 <USBD_CDC_Setup+0x11c>
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d002      	beq.n	8006fae <USBD_CDC_Setup+0xb4>
 8006fa8:	2b0a      	cmp	r3, #10
 8006faa:	d014      	beq.n	8006fd6 <USBD_CDC_Setup+0xdc>
 8006fac:	e033      	b.n	8007016 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fb4:	2b03      	cmp	r3, #3
 8006fb6:	d107      	bne.n	8006fc8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006fb8:	f107 030c 	add.w	r3, r7, #12
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f001 f9d1 	bl	8008368 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fc6:	e02e      	b.n	8007026 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f001 f962 	bl	8008294 <USBD_CtlError>
            ret = USBD_FAIL;
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	75fb      	strb	r3, [r7, #23]
          break;
 8006fd4:	e027      	b.n	8007026 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d107      	bne.n	8006ff0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fe0:	f107 030f 	add.w	r3, r7, #15
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f001 f9bd 	bl	8008368 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006fee:	e01a      	b.n	8007026 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 f94e 	bl	8008294 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	75fb      	strb	r3, [r7, #23]
          break;
 8006ffc:	e013      	b.n	8007026 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007004:	2b03      	cmp	r3, #3
 8007006:	d00d      	beq.n	8007024 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8007008:	6839      	ldr	r1, [r7, #0]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f001 f942 	bl	8008294 <USBD_CtlError>
            ret = USBD_FAIL;
 8007010:	2302      	movs	r3, #2
 8007012:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007014:	e006      	b.n	8007024 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8007016:	6839      	ldr	r1, [r7, #0]
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 f93b 	bl	8008294 <USBD_CtlError>
          ret = USBD_FAIL;
 800701e:	2302      	movs	r3, #2
 8007020:	75fb      	strb	r3, [r7, #23]
          break;
 8007022:	e000      	b.n	8007026 <USBD_CDC_Setup+0x12c>
          break;
 8007024:	bf00      	nop
      }
      break;
 8007026:	e006      	b.n	8007036 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f001 f932 	bl	8008294 <USBD_CtlError>
      ret = USBD_FAIL;
 8007030:	2302      	movs	r3, #2
 8007032:	75fb      	strb	r3, [r7, #23]
      break;
 8007034:	bf00      	nop
  }

  return ret;
 8007036:	7dfb      	ldrb	r3, [r7, #23]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3718      	adds	r7, #24
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	460b      	mov	r3, r1
 800704a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007052:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800705a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007062:	2b00      	cmp	r3, #0
 8007064:	d03a      	beq.n	80070dc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007066:	78fa      	ldrb	r2, [r7, #3]
 8007068:	6879      	ldr	r1, [r7, #4]
 800706a:	4613      	mov	r3, r2
 800706c:	009b      	lsls	r3, r3, #2
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	440b      	add	r3, r1
 8007074:	331c      	adds	r3, #28
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d029      	beq.n	80070d0 <USBD_CDC_DataIn+0x90>
 800707c:	78fa      	ldrb	r2, [r7, #3]
 800707e:	6879      	ldr	r1, [r7, #4]
 8007080:	4613      	mov	r3, r2
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	440b      	add	r3, r1
 800708a:	331c      	adds	r3, #28
 800708c:	681a      	ldr	r2, [r3, #0]
 800708e:	78f9      	ldrb	r1, [r7, #3]
 8007090:	68b8      	ldr	r0, [r7, #8]
 8007092:	460b      	mov	r3, r1
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	440b      	add	r3, r1
 8007098:	00db      	lsls	r3, r3, #3
 800709a:	4403      	add	r3, r0
 800709c:	3320      	adds	r3, #32
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80070a4:	fb01 f303 	mul.w	r3, r1, r3
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d110      	bne.n	80070d0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80070ae:	78fa      	ldrb	r2, [r7, #3]
 80070b0:	6879      	ldr	r1, [r7, #4]
 80070b2:	4613      	mov	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	4413      	add	r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	440b      	add	r3, r1
 80070bc:	331c      	adds	r3, #28
 80070be:	2200      	movs	r2, #0
 80070c0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070c2:	78f9      	ldrb	r1, [r7, #3]
 80070c4:	2300      	movs	r3, #0
 80070c6:	2200      	movs	r2, #0
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f001 fe21 	bl	8008d10 <USBD_LL_Transmit>
 80070ce:	e003      	b.n	80070d8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	e000      	b.n	80070de <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80070dc:	2302      	movs	r3, #2
  }
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	460b      	mov	r3, r1
 80070f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80070f8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f001 fe4c 	bl	8008d9c <USBD_LL_GetRxDataSize>
 8007104:	4602      	mov	r2, r0
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00d      	beq.n	8007132 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800712a:	4611      	mov	r1, r2
 800712c:	4798      	blx	r3

    return USBD_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	e000      	b.n	8007134 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007132:	2302      	movs	r3, #2
  }
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800714a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007152:	2b00      	cmp	r3, #0
 8007154:	d014      	beq.n	8007180 <USBD_CDC_EP0_RxReady+0x44>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800715c:	2bff      	cmp	r3, #255	@ 0xff
 800715e:	d00f      	beq.n	8007180 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8007166:	689b      	ldr	r3, [r3, #8]
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800716e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007176:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	22ff      	movs	r2, #255	@ 0xff
 800717c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2243      	movs	r2, #67	@ 0x43
 8007198:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800719a:	4b03      	ldr	r3, [pc, #12]	@ (80071a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800719c:	4618      	mov	r0, r3
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bc80      	pop	{r7}
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	200000a8 	.word	0x200000a8

080071ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2243      	movs	r2, #67	@ 0x43
 80071b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80071ba:	4b03      	ldr	r3, [pc, #12]	@ (80071c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	20000064 	.word	0x20000064

080071cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2243      	movs	r2, #67	@ 0x43
 80071d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80071da:	4b03      	ldr	r3, [pc, #12]	@ (80071e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80071dc:	4618      	mov	r0, r3
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bc80      	pop	{r7}
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	200000ec 	.word	0x200000ec

080071ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b083      	sub	sp, #12
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	220a      	movs	r2, #10
 80071f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80071fa:	4b03      	ldr	r3, [pc, #12]	@ (8007208 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	bc80      	pop	{r7}
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	20000020 	.word	0x20000020

0800720c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007216:	2302      	movs	r3, #2
 8007218:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800722c:	7bfb      	ldrb	r3, [r7, #15]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3714      	adds	r7, #20
 8007232:	46bd      	mov	sp, r7
 8007234:	bc80      	pop	{r7}
 8007236:	4770      	bx	lr

08007238 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	4613      	mov	r3, r2
 8007244:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800724c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007256:	88fa      	ldrh	r2, [r7, #6]
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	371c      	adds	r7, #28
 8007264:	46bd      	mov	sp, r7
 8007266:	bc80      	pop	{r7}
 8007268:	4770      	bx	lr

0800726a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800727a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	683a      	ldr	r2, [r7, #0]
 8007280:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	bc80      	pop	{r7}
 800728e:	4770      	bx	lr

08007290 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800729e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d01c      	beq.n	80072e4 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d115      	bne.n	80072e0 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	2181      	movs	r1, #129	@ 0x81
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 fd1a 	bl	8008d10 <USBD_LL_Transmit>

      return USBD_OK;
 80072dc:	2300      	movs	r3, #0
 80072de:	e002      	b.n	80072e6 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e000      	b.n	80072e6 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80072e4:	2302      	movs	r3, #2
  }
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072fc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007304:	2b00      	cmp	r3, #0
 8007306:	d017      	beq.n	8007338 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	7c1b      	ldrb	r3, [r3, #16]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d109      	bne.n	8007324 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007316:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800731a:	2101      	movs	r1, #1
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 fd1a 	bl	8008d56 <USBD_LL_PrepareReceive>
 8007322:	e007      	b.n	8007334 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800732a:	2340      	movs	r3, #64	@ 0x40
 800732c:	2101      	movs	r1, #1
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f001 fd11 	bl	8008d56 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	e000      	b.n	800733a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007338:	2302      	movs	r3, #2
  }
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	60f8      	str	r0, [r7, #12]
 800734a:	60b9      	str	r1, [r7, #8]
 800734c:	4613      	mov	r3, r2
 800734e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007356:	2302      	movs	r3, #2
 8007358:	e01a      	b.n	8007390 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	79fa      	ldrb	r2, [r7, #7]
 8007386:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f001 fb7f 	bl	8008a8c <USBD_LL_Init>

  return USBD_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3710      	adds	r7, #16
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d006      	beq.n	80073ba <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	683a      	ldr	r2, [r7, #0]
 80073b0:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	73fb      	strb	r3, [r7, #15]
 80073b8:	e001      	b.n	80073be <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80073ba:	2302      	movs	r3, #2
 80073bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073be:	7bfb      	ldrb	r3, [r7, #15]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bc80      	pop	{r7}
 80073c8:	4770      	bx	lr

080073ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b082      	sub	sp, #8
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f001 fbb4 	bl	8008b40 <USBD_LL_Start>

  return USBD_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b083      	sub	sp, #12
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bc80      	pop	{r7}
 80073f4:	4770      	bx	lr

080073f6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	460b      	mov	r3, r1
 8007400:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007402:	2302      	movs	r3, #2
 8007404:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00c      	beq.n	800742a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	78fa      	ldrb	r2, [r7, #3]
 800741a:	4611      	mov	r1, r2
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	4798      	blx	r3
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800742a:	7bfb      	ldrb	r3, [r7, #15]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	78fa      	ldrb	r2, [r7, #3]
 800744a:	4611      	mov	r1, r2
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	4798      	blx	r3

  return USBD_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3708      	adds	r7, #8
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b082      	sub	sp, #8
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800746a:	6839      	ldr	r1, [r7, #0]
 800746c:	4618      	mov	r0, r3
 800746e:	f000 fed8 	bl	8008222 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007480:	461a      	mov	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800748e:	f003 031f 	and.w	r3, r3, #31
 8007492:	2b02      	cmp	r3, #2
 8007494:	d016      	beq.n	80074c4 <USBD_LL_SetupStage+0x6a>
 8007496:	2b02      	cmp	r3, #2
 8007498:	d81c      	bhi.n	80074d4 <USBD_LL_SetupStage+0x7a>
 800749a:	2b00      	cmp	r3, #0
 800749c:	d002      	beq.n	80074a4 <USBD_LL_SetupStage+0x4a>
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d008      	beq.n	80074b4 <USBD_LL_SetupStage+0x5a>
 80074a2:	e017      	b.n	80074d4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f9cb 	bl	8007848 <USBD_StdDevReq>
      break;
 80074b2:	e01a      	b.n	80074ea <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 fa2d 	bl	800791c <USBD_StdItfReq>
      break;
 80074c2:	e012      	b.n	80074ea <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80074ca:	4619      	mov	r1, r3
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fa6d 	bl	80079ac <USBD_StdEPReq>
      break;
 80074d2:	e00a      	b.n	80074ea <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80074da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	4619      	mov	r1, r3
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 fb8c 	bl	8008c00 <USBD_LL_StallEP>
      break;
 80074e8:	bf00      	nop
  }

  return USBD_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60f8      	str	r0, [r7, #12]
 80074fc:	460b      	mov	r3, r1
 80074fe:	607a      	str	r2, [r7, #4]
 8007500:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007502:	7afb      	ldrb	r3, [r7, #11]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d14b      	bne.n	80075a0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800750e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007516:	2b03      	cmp	r3, #3
 8007518:	d134      	bne.n	8007584 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	68da      	ldr	r2, [r3, #12]
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	429a      	cmp	r2, r3
 8007524:	d919      	bls.n	800755a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	1ad2      	subs	r2, r2, r3
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800753c:	429a      	cmp	r2, r3
 800753e:	d203      	bcs.n	8007548 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007544:	b29b      	uxth	r3, r3
 8007546:	e002      	b.n	800754e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800754c:	b29b      	uxth	r3, r3
 800754e:	461a      	mov	r2, r3
 8007550:	6879      	ldr	r1, [r7, #4]
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 ff54 	bl	8008400 <USBD_CtlContinueRx>
 8007558:	e038      	b.n	80075cc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00a      	beq.n	800757c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800756c:	2b03      	cmp	r3, #3
 800756e:	d105      	bne.n	800757c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f000 ff51 	bl	8008424 <USBD_CtlSendStatus>
 8007582:	e023      	b.n	80075cc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800758a:	2b05      	cmp	r3, #5
 800758c:	d11e      	bne.n	80075cc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007596:	2100      	movs	r1, #0
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f001 fb31 	bl	8008c00 <USBD_LL_StallEP>
 800759e:	e015      	b.n	80075cc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00d      	beq.n	80075c8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d108      	bne.n	80075c8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	7afa      	ldrb	r2, [r7, #11]
 80075c0:	4611      	mov	r1, r2
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	4798      	blx	r3
 80075c6:	e001      	b.n	80075cc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075c8:	2302      	movs	r3, #2
 80075ca:	e000      	b.n	80075ce <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3718      	adds	r7, #24
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b086      	sub	sp, #24
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	460b      	mov	r3, r1
 80075e0:	607a      	str	r2, [r7, #4]
 80075e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80075e4:	7afb      	ldrb	r3, [r7, #11]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d17f      	bne.n	80076ea <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	3314      	adds	r3, #20
 80075ee:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d15c      	bne.n	80076b4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	68da      	ldr	r2, [r3, #12]
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	429a      	cmp	r2, r3
 8007604:	d915      	bls.n	8007632 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	1ad2      	subs	r2, r2, r3
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	68db      	ldr	r3, [r3, #12]
 8007618:	b29b      	uxth	r3, r3
 800761a:	461a      	mov	r2, r3
 800761c:	6879      	ldr	r1, [r7, #4]
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 febe 	bl	80083a0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007624:	2300      	movs	r3, #0
 8007626:	2200      	movs	r2, #0
 8007628:	2100      	movs	r1, #0
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f001 fb93 	bl	8008d56 <USBD_LL_PrepareReceive>
 8007630:	e04e      	b.n	80076d0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	6912      	ldr	r2, [r2, #16]
 800763a:	fbb3 f1f2 	udiv	r1, r3, r2
 800763e:	fb01 f202 	mul.w	r2, r1, r2
 8007642:	1a9b      	subs	r3, r3, r2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d11c      	bne.n	8007682 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007650:	429a      	cmp	r2, r3
 8007652:	d316      	bcc.n	8007682 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	689a      	ldr	r2, [r3, #8]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800765e:	429a      	cmp	r2, r3
 8007660:	d20f      	bcs.n	8007682 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007662:	2200      	movs	r2, #0
 8007664:	2100      	movs	r1, #0
 8007666:	68f8      	ldr	r0, [r7, #12]
 8007668:	f000 fe9a 	bl	80083a0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007674:	2300      	movs	r3, #0
 8007676:	2200      	movs	r2, #0
 8007678:	2100      	movs	r1, #0
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f001 fb6b 	bl	8008d56 <USBD_LL_PrepareReceive>
 8007680:	e026      	b.n	80076d0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007694:	2b03      	cmp	r3, #3
 8007696:	d105      	bne.n	80076a4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	68f8      	ldr	r0, [r7, #12]
 80076a2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80076a4:	2180      	movs	r1, #128	@ 0x80
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f001 faaa 	bl	8008c00 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 fecc 	bl	800844a <USBD_CtlReceiveStatus>
 80076b2:	e00d      	b.n	80076d0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80076ba:	2b04      	cmp	r3, #4
 80076bc:	d004      	beq.n	80076c8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d103      	bne.n	80076d0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80076c8:	2180      	movs	r1, #128	@ 0x80
 80076ca:	68f8      	ldr	r0, [r7, #12]
 80076cc:	f001 fa98 	bl	8008c00 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d11d      	bne.n	8007716 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f7ff fe81 	bl	80073e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80076e8:	e015      	b.n	8007716 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00d      	beq.n	8007712 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d108      	bne.n	8007712 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	7afa      	ldrb	r2, [r7, #11]
 800770a:	4611      	mov	r1, r2
 800770c:	68f8      	ldr	r0, [r7, #12]
 800770e:	4798      	blx	r3
 8007710:	e001      	b.n	8007716 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007712:	2302      	movs	r3, #2
 8007714:	e000      	b.n	8007718 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007728:	2340      	movs	r3, #64	@ 0x40
 800772a:	2200      	movs	r2, #0
 800772c:	2100      	movs	r1, #0
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f001 fa21 	bl	8008b76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2201      	movs	r2, #1
 8007738:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2240      	movs	r2, #64	@ 0x40
 8007740:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007744:	2340      	movs	r3, #64	@ 0x40
 8007746:	2200      	movs	r2, #0
 8007748:	2180      	movs	r1, #128	@ 0x80
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f001 fa13 	bl	8008b76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2240      	movs	r2, #64	@ 0x40
 800775a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007780:	2b00      	cmp	r3, #0
 8007782:	d009      	beq.n	8007798 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	6852      	ldr	r2, [r2, #4]
 8007790:	b2d2      	uxtb	r2, r2
 8007792:	4611      	mov	r1, r2
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	4798      	blx	r3
  }

  return USBD_OK;
 8007798:	2300      	movs	r3, #0
}
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	460b      	mov	r3, r1
 80077ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	78fa      	ldrb	r2, [r7, #3]
 80077b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bc80      	pop	{r7}
 80077be:	4770      	bx	lr

080077c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2204      	movs	r2, #4
 80077d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bc80      	pop	{r7}
 80077e6:	4770      	bx	lr

080077e8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d105      	bne.n	8007806 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	bc80      	pop	{r7}
 8007810:	4770      	bx	lr

08007812 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b082      	sub	sp, #8
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007820:	2b03      	cmp	r3, #3
 8007822:	d10b      	bne.n	800783c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d005      	beq.n	800783c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007836:	69db      	ldr	r3, [r3, #28]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007852:	2300      	movs	r3, #0
 8007854:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800785e:	2b40      	cmp	r3, #64	@ 0x40
 8007860:	d005      	beq.n	800786e <USBD_StdDevReq+0x26>
 8007862:	2b40      	cmp	r3, #64	@ 0x40
 8007864:	d84f      	bhi.n	8007906 <USBD_StdDevReq+0xbe>
 8007866:	2b00      	cmp	r3, #0
 8007868:	d009      	beq.n	800787e <USBD_StdDevReq+0x36>
 800786a:	2b20      	cmp	r3, #32
 800786c:	d14b      	bne.n	8007906 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	4798      	blx	r3
      break;
 800787c:	e048      	b.n	8007910 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	785b      	ldrb	r3, [r3, #1]
 8007882:	2b09      	cmp	r3, #9
 8007884:	d839      	bhi.n	80078fa <USBD_StdDevReq+0xb2>
 8007886:	a201      	add	r2, pc, #4	@ (adr r2, 800788c <USBD_StdDevReq+0x44>)
 8007888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788c:	080078dd 	.word	0x080078dd
 8007890:	080078f1 	.word	0x080078f1
 8007894:	080078fb 	.word	0x080078fb
 8007898:	080078e7 	.word	0x080078e7
 800789c:	080078fb 	.word	0x080078fb
 80078a0:	080078bf 	.word	0x080078bf
 80078a4:	080078b5 	.word	0x080078b5
 80078a8:	080078fb 	.word	0x080078fb
 80078ac:	080078d3 	.word	0x080078d3
 80078b0:	080078c9 	.word	0x080078c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f9dc 	bl	8007c74 <USBD_GetDescriptor>
          break;
 80078bc:	e022      	b.n	8007904 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fb3f 	bl	8007f44 <USBD_SetAddress>
          break;
 80078c6:	e01d      	b.n	8007904 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80078c8:	6839      	ldr	r1, [r7, #0]
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 fb7e 	bl	8007fcc <USBD_SetConfig>
          break;
 80078d0:	e018      	b.n	8007904 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078d2:	6839      	ldr	r1, [r7, #0]
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f000 fc07 	bl	80080e8 <USBD_GetConfig>
          break;
 80078da:	e013      	b.n	8007904 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80078dc:	6839      	ldr	r1, [r7, #0]
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 fc37 	bl	8008152 <USBD_GetStatus>
          break;
 80078e4:	e00e      	b.n	8007904 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80078e6:	6839      	ldr	r1, [r7, #0]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fc65 	bl	80081b8 <USBD_SetFeature>
          break;
 80078ee:	e009      	b.n	8007904 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fc74 	bl	80081e0 <USBD_ClrFeature>
          break;
 80078f8:	e004      	b.n	8007904 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fcc9 	bl	8008294 <USBD_CtlError>
          break;
 8007902:	bf00      	nop
      }
      break;
 8007904:	e004      	b.n	8007910 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fcc3 	bl	8008294 <USBD_CtlError>
      break;
 800790e:	bf00      	nop
  }

  return ret;
 8007910:	7bfb      	ldrb	r3, [r7, #15]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop

0800791c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007932:	2b40      	cmp	r3, #64	@ 0x40
 8007934:	d005      	beq.n	8007942 <USBD_StdItfReq+0x26>
 8007936:	2b40      	cmp	r3, #64	@ 0x40
 8007938:	d82e      	bhi.n	8007998 <USBD_StdItfReq+0x7c>
 800793a:	2b00      	cmp	r3, #0
 800793c:	d001      	beq.n	8007942 <USBD_StdItfReq+0x26>
 800793e:	2b20      	cmp	r3, #32
 8007940:	d12a      	bne.n	8007998 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007948:	3b01      	subs	r3, #1
 800794a:	2b02      	cmp	r3, #2
 800794c:	d81d      	bhi.n	800798a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	889b      	ldrh	r3, [r3, #4]
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b01      	cmp	r3, #1
 8007956:	d813      	bhi.n	8007980 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	6839      	ldr	r1, [r7, #0]
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	4798      	blx	r3
 8007966:	4603      	mov	r3, r0
 8007968:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	88db      	ldrh	r3, [r3, #6]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d110      	bne.n	8007994 <USBD_StdItfReq+0x78>
 8007972:	7bfb      	ldrb	r3, [r7, #15]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10d      	bne.n	8007994 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fd53 	bl	8008424 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800797e:	e009      	b.n	8007994 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007980:	6839      	ldr	r1, [r7, #0]
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fc86 	bl	8008294 <USBD_CtlError>
          break;
 8007988:	e004      	b.n	8007994 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800798a:	6839      	ldr	r1, [r7, #0]
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fc81 	bl	8008294 <USBD_CtlError>
          break;
 8007992:	e000      	b.n	8007996 <USBD_StdItfReq+0x7a>
          break;
 8007994:	bf00      	nop
      }
      break;
 8007996:	e004      	b.n	80079a2 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fc7a 	bl	8008294 <USBD_CtlError>
      break;
 80079a0:	bf00      	nop
  }

  return USBD_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	889b      	ldrh	r3, [r3, #4]
 80079be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079c8:	2b40      	cmp	r3, #64	@ 0x40
 80079ca:	d007      	beq.n	80079dc <USBD_StdEPReq+0x30>
 80079cc:	2b40      	cmp	r3, #64	@ 0x40
 80079ce:	f200 8146 	bhi.w	8007c5e <USBD_StdEPReq+0x2b2>
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d00a      	beq.n	80079ec <USBD_StdEPReq+0x40>
 80079d6:	2b20      	cmp	r3, #32
 80079d8:	f040 8141 	bne.w	8007c5e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079e2:	689b      	ldr	r3, [r3, #8]
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	4798      	blx	r3
      break;
 80079ea:	e13d      	b.n	8007c68 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	d10a      	bne.n	8007a0e <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	4798      	blx	r3
 8007a06:	4603      	mov	r3, r0
 8007a08:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	e12d      	b.n	8007c6a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	785b      	ldrb	r3, [r3, #1]
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d007      	beq.n	8007a26 <USBD_StdEPReq+0x7a>
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	f300 811b 	bgt.w	8007c52 <USBD_StdEPReq+0x2a6>
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d072      	beq.n	8007b06 <USBD_StdEPReq+0x15a>
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d03a      	beq.n	8007a9a <USBD_StdEPReq+0xee>
 8007a24:	e115      	b.n	8007c52 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d002      	beq.n	8007a36 <USBD_StdEPReq+0x8a>
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d015      	beq.n	8007a60 <USBD_StdEPReq+0xb4>
 8007a34:	e02b      	b.n	8007a8e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d00c      	beq.n	8007a56 <USBD_StdEPReq+0xaa>
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	2b80      	cmp	r3, #128	@ 0x80
 8007a40:	d009      	beq.n	8007a56 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	4619      	mov	r1, r3
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f001 f8da 	bl	8008c00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007a4c:	2180      	movs	r1, #128	@ 0x80
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f001 f8d6 	bl	8008c00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a54:	e020      	b.n	8007a98 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fc1b 	bl	8008294 <USBD_CtlError>
              break;
 8007a5e:	e01b      	b.n	8007a98 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	885b      	ldrh	r3, [r3, #2]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d10e      	bne.n	8007a86 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007a68:	7bbb      	ldrb	r3, [r7, #14]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00b      	beq.n	8007a86 <USBD_StdEPReq+0xda>
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	2b80      	cmp	r3, #128	@ 0x80
 8007a72:	d008      	beq.n	8007a86 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	88db      	ldrh	r3, [r3, #6]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d104      	bne.n	8007a86 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007a7c:	7bbb      	ldrb	r3, [r7, #14]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f001 f8bd 	bl	8008c00 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fccc 	bl	8008424 <USBD_CtlSendStatus>

              break;
 8007a8c:	e004      	b.n	8007a98 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007a8e:	6839      	ldr	r1, [r7, #0]
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 fbff 	bl	8008294 <USBD_CtlError>
              break;
 8007a96:	bf00      	nop
          }
          break;
 8007a98:	e0e0      	b.n	8007c5c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d002      	beq.n	8007aaa <USBD_StdEPReq+0xfe>
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	d015      	beq.n	8007ad4 <USBD_StdEPReq+0x128>
 8007aa8:	e026      	b.n	8007af8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aaa:	7bbb      	ldrb	r3, [r7, #14]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00c      	beq.n	8007aca <USBD_StdEPReq+0x11e>
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	2b80      	cmp	r3, #128	@ 0x80
 8007ab4:	d009      	beq.n	8007aca <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f001 f8a0 	bl	8008c00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ac0:	2180      	movs	r1, #128	@ 0x80
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 f89c 	bl	8008c00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ac8:	e01c      	b.n	8007b04 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fbe1 	bl	8008294 <USBD_CtlError>
              break;
 8007ad2:	e017      	b.n	8007b04 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	885b      	ldrh	r3, [r3, #2]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d112      	bne.n	8007b02 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d004      	beq.n	8007af0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 f8a7 	bl	8008c3e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fc97 	bl	8008424 <USBD_CtlSendStatus>
              }
              break;
 8007af6:	e004      	b.n	8007b02 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007af8:	6839      	ldr	r1, [r7, #0]
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fbca 	bl	8008294 <USBD_CtlError>
              break;
 8007b00:	e000      	b.n	8007b04 <USBD_StdEPReq+0x158>
              break;
 8007b02:	bf00      	nop
          }
          break;
 8007b04:	e0aa      	b.n	8007c5c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d002      	beq.n	8007b16 <USBD_StdEPReq+0x16a>
 8007b10:	2b03      	cmp	r3, #3
 8007b12:	d032      	beq.n	8007b7a <USBD_StdEPReq+0x1ce>
 8007b14:	e097      	b.n	8007c46 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b16:	7bbb      	ldrb	r3, [r7, #14]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d007      	beq.n	8007b2c <USBD_StdEPReq+0x180>
 8007b1c:	7bbb      	ldrb	r3, [r7, #14]
 8007b1e:	2b80      	cmp	r3, #128	@ 0x80
 8007b20:	d004      	beq.n	8007b2c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fbb5 	bl	8008294 <USBD_CtlError>
                break;
 8007b2a:	e091      	b.n	8007c50 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	da0b      	bge.n	8007b4c <USBD_StdEPReq+0x1a0>
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	3310      	adds	r3, #16
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	4413      	add	r3, r2
 8007b48:	3304      	adds	r3, #4
 8007b4a:	e00b      	b.n	8007b64 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	4413      	add	r3, r2
 8007b62:	3304      	adds	r3, #4
 8007b64:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	2202      	movs	r2, #2
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fbf8 	bl	8008368 <USBD_CtlSendData>
              break;
 8007b78:	e06a      	b.n	8007c50 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	da11      	bge.n	8007ba6 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b82:	7bbb      	ldrb	r3, [r7, #14]
 8007b84:	f003 020f 	and.w	r2, r3, #15
 8007b88:	6879      	ldr	r1, [r7, #4]
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	440b      	add	r3, r1
 8007b94:	3318      	adds	r3, #24
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d117      	bne.n	8007bcc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007b9c:	6839      	ldr	r1, [r7, #0]
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fb78 	bl	8008294 <USBD_CtlError>
                  break;
 8007ba4:	e054      	b.n	8007c50 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	f003 020f 	and.w	r2, r3, #15
 8007bac:	6879      	ldr	r1, [r7, #4]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	440b      	add	r3, r1
 8007bb8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d104      	bne.n	8007bcc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fb65 	bl	8008294 <USBD_CtlError>
                  break;
 8007bca:	e041      	b.n	8007c50 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	da0b      	bge.n	8007bec <USBD_StdEPReq+0x240>
 8007bd4:	7bbb      	ldrb	r3, [r7, #14]
 8007bd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007bda:	4613      	mov	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	3310      	adds	r3, #16
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	4413      	add	r3, r2
 8007be8:	3304      	adds	r3, #4
 8007bea:	e00b      	b.n	8007c04 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	009b      	lsls	r3, r3, #2
 8007bf6:	4413      	add	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	4413      	add	r3, r2
 8007c02:	3304      	adds	r3, #4
 8007c04:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c06:	7bbb      	ldrb	r3, [r7, #14]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d002      	beq.n	8007c12 <USBD_StdEPReq+0x266>
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
 8007c0e:	2b80      	cmp	r3, #128	@ 0x80
 8007c10:	d103      	bne.n	8007c1a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	2200      	movs	r2, #0
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	e00e      	b.n	8007c38 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007c1a:	7bbb      	ldrb	r3, [r7, #14]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f001 f82c 	bl	8008c7c <USBD_LL_IsStallEP>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	e002      	b.n	8007c38 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	2200      	movs	r2, #0
 8007c36:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fb92 	bl	8008368 <USBD_CtlSendData>
              break;
 8007c44:	e004      	b.n	8007c50 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fb23 	bl	8008294 <USBD_CtlError>
              break;
 8007c4e:	bf00      	nop
          }
          break;
 8007c50:	e004      	b.n	8007c5c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007c52:	6839      	ldr	r1, [r7, #0]
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fb1d 	bl	8008294 <USBD_CtlError>
          break;
 8007c5a:	bf00      	nop
      }
      break;
 8007c5c:	e004      	b.n	8007c68 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fb17 	bl	8008294 <USBD_CtlError>
      break;
 8007c66:	bf00      	nop
  }

  return ret;
 8007c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b084      	sub	sp, #16
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c82:	2300      	movs	r3, #0
 8007c84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c86:	2300      	movs	r3, #0
 8007c88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	885b      	ldrh	r3, [r3, #2]
 8007c8e:	0a1b      	lsrs	r3, r3, #8
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	3b01      	subs	r3, #1
 8007c94:	2b06      	cmp	r3, #6
 8007c96:	f200 8128 	bhi.w	8007eea <USBD_GetDescriptor+0x276>
 8007c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca0 <USBD_GetDescriptor+0x2c>)
 8007c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca0:	08007cbd 	.word	0x08007cbd
 8007ca4:	08007cd5 	.word	0x08007cd5
 8007ca8:	08007d15 	.word	0x08007d15
 8007cac:	08007eeb 	.word	0x08007eeb
 8007cb0:	08007eeb 	.word	0x08007eeb
 8007cb4:	08007e8b 	.word	0x08007e8b
 8007cb8:	08007eb7 	.word	0x08007eb7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	7c12      	ldrb	r2, [r2, #16]
 8007cc8:	f107 0108 	add.w	r1, r7, #8
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4798      	blx	r3
 8007cd0:	60f8      	str	r0, [r7, #12]
      break;
 8007cd2:	e112      	b.n	8007efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	7c1b      	ldrb	r3, [r3, #16]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10d      	bne.n	8007cf8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ce4:	f107 0208 	add.w	r2, r7, #8
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4798      	blx	r3
 8007cec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007cf6:	e100      	b.n	8007efa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d00:	f107 0208 	add.w	r2, r7, #8
 8007d04:	4610      	mov	r0, r2
 8007d06:	4798      	blx	r3
 8007d08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	2202      	movs	r2, #2
 8007d10:	701a      	strb	r2, [r3, #0]
      break;
 8007d12:	e0f2      	b.n	8007efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	885b      	ldrh	r3, [r3, #2]
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b05      	cmp	r3, #5
 8007d1c:	f200 80ac 	bhi.w	8007e78 <USBD_GetDescriptor+0x204>
 8007d20:	a201      	add	r2, pc, #4	@ (adr r2, 8007d28 <USBD_GetDescriptor+0xb4>)
 8007d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d26:	bf00      	nop
 8007d28:	08007d41 	.word	0x08007d41
 8007d2c:	08007d75 	.word	0x08007d75
 8007d30:	08007da9 	.word	0x08007da9
 8007d34:	08007ddd 	.word	0x08007ddd
 8007d38:	08007e11 	.word	0x08007e11
 8007d3c:	08007e45 	.word	0x08007e45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	7c12      	ldrb	r2, [r2, #16]
 8007d58:	f107 0108 	add.w	r1, r7, #8
 8007d5c:	4610      	mov	r0, r2
 8007d5e:	4798      	blx	r3
 8007d60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d62:	e091      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d64:	6839      	ldr	r1, [r7, #0]
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fa94 	bl	8008294 <USBD_CtlError>
            err++;
 8007d6c:	7afb      	ldrb	r3, [r7, #11]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	72fb      	strb	r3, [r7, #11]
          break;
 8007d72:	e089      	b.n	8007e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d00b      	beq.n	8007d98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	7c12      	ldrb	r2, [r2, #16]
 8007d8c:	f107 0108 	add.w	r1, r7, #8
 8007d90:	4610      	mov	r0, r2
 8007d92:	4798      	blx	r3
 8007d94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d96:	e077      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fa7a 	bl	8008294 <USBD_CtlError>
            err++;
 8007da0:	7afb      	ldrb	r3, [r7, #11]
 8007da2:	3301      	adds	r3, #1
 8007da4:	72fb      	strb	r3, [r7, #11]
          break;
 8007da6:	e06f      	b.n	8007e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	7c12      	ldrb	r2, [r2, #16]
 8007dc0:	f107 0108 	add.w	r1, r7, #8
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	4798      	blx	r3
 8007dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dca:	e05d      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dcc:	6839      	ldr	r1, [r7, #0]
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fa60 	bl	8008294 <USBD_CtlError>
            err++;
 8007dd4:	7afb      	ldrb	r3, [r7, #11]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8007dda:	e055      	b.n	8007e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00b      	beq.n	8007e00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	7c12      	ldrb	r2, [r2, #16]
 8007df4:	f107 0108 	add.w	r1, r7, #8
 8007df8:	4610      	mov	r0, r2
 8007dfa:	4798      	blx	r3
 8007dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dfe:	e043      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 fa46 	bl	8008294 <USBD_CtlError>
            err++;
 8007e08:	7afb      	ldrb	r3, [r7, #11]
 8007e0a:	3301      	adds	r3, #1
 8007e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8007e0e:	e03b      	b.n	8007e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e16:	695b      	ldr	r3, [r3, #20]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	7c12      	ldrb	r2, [r2, #16]
 8007e28:	f107 0108 	add.w	r1, r7, #8
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4798      	blx	r3
 8007e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e32:	e029      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fa2c 	bl	8008294 <USBD_CtlError>
            err++;
 8007e3c:	7afb      	ldrb	r3, [r7, #11]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	72fb      	strb	r3, [r7, #11]
          break;
 8007e42:	e021      	b.n	8007e88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d00b      	beq.n	8007e68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	7c12      	ldrb	r2, [r2, #16]
 8007e5c:	f107 0108 	add.w	r1, r7, #8
 8007e60:	4610      	mov	r0, r2
 8007e62:	4798      	blx	r3
 8007e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e66:	e00f      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007e68:	6839      	ldr	r1, [r7, #0]
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fa12 	bl	8008294 <USBD_CtlError>
            err++;
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	3301      	adds	r3, #1
 8007e74:	72fb      	strb	r3, [r7, #11]
          break;
 8007e76:	e007      	b.n	8007e88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 fa0a 	bl	8008294 <USBD_CtlError>
          err++;
 8007e80:	7afb      	ldrb	r3, [r7, #11]
 8007e82:	3301      	adds	r3, #1
 8007e84:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007e86:	e038      	b.n	8007efa <USBD_GetDescriptor+0x286>
 8007e88:	e037      	b.n	8007efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	7c1b      	ldrb	r3, [r3, #16]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d109      	bne.n	8007ea6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e9a:	f107 0208 	add.w	r2, r7, #8
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	4798      	blx	r3
 8007ea2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ea4:	e029      	b.n	8007efa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f9f3 	bl	8008294 <USBD_CtlError>
        err++;
 8007eae:	7afb      	ldrb	r3, [r7, #11]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	72fb      	strb	r3, [r7, #11]
      break;
 8007eb4:	e021      	b.n	8007efa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	7c1b      	ldrb	r3, [r3, #16]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d10d      	bne.n	8007eda <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ec6:	f107 0208 	add.w	r2, r7, #8
 8007eca:	4610      	mov	r0, r2
 8007ecc:	4798      	blx	r3
 8007ece:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	2207      	movs	r2, #7
 8007ed6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ed8:	e00f      	b.n	8007efa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007eda:	6839      	ldr	r1, [r7, #0]
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f9d9 	bl	8008294 <USBD_CtlError>
        err++;
 8007ee2:	7afb      	ldrb	r3, [r7, #11]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ee8:	e007      	b.n	8007efa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f9d1 	bl	8008294 <USBD_CtlError>
      err++;
 8007ef2:	7afb      	ldrb	r3, [r7, #11]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ef8:	bf00      	nop
  }

  if (err != 0U)
 8007efa:	7afb      	ldrb	r3, [r7, #11]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d11c      	bne.n	8007f3a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007f00:	893b      	ldrh	r3, [r7, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d011      	beq.n	8007f2a <USBD_GetDescriptor+0x2b6>
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	88db      	ldrh	r3, [r3, #6]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00d      	beq.n	8007f2a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	88da      	ldrh	r2, [r3, #6]
 8007f12:	893b      	ldrh	r3, [r7, #8]
 8007f14:	4293      	cmp	r3, r2
 8007f16:	bf28      	it	cs
 8007f18:	4613      	movcs	r3, r2
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f1e:	893b      	ldrh	r3, [r7, #8]
 8007f20:	461a      	mov	r2, r3
 8007f22:	68f9      	ldr	r1, [r7, #12]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fa1f 	bl	8008368 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	88db      	ldrh	r3, [r3, #6]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d104      	bne.n	8007f3c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fa76 	bl	8008424 <USBD_CtlSendStatus>
 8007f38:	e000      	b.n	8007f3c <USBD_GetDescriptor+0x2c8>
    return;
 8007f3a:	bf00      	nop
    }
  }
}
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop

08007f44 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	889b      	ldrh	r3, [r3, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d130      	bne.n	8007fb8 <USBD_SetAddress+0x74>
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	88db      	ldrh	r3, [r3, #6]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d12c      	bne.n	8007fb8 <USBD_SetAddress+0x74>
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	885b      	ldrh	r3, [r3, #2]
 8007f62:	2b7f      	cmp	r3, #127	@ 0x7f
 8007f64:	d828      	bhi.n	8007fb8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	885b      	ldrh	r3, [r3, #2]
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f78:	2b03      	cmp	r3, #3
 8007f7a:	d104      	bne.n	8007f86 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f988 	bl	8008294 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f84:	e01d      	b.n	8007fc2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	7bfa      	ldrb	r2, [r7, #15]
 8007f8a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fe9d 	bl	8008cd2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fa43 	bl	8008424 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f9e:	7bfb      	ldrb	r3, [r7, #15]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d004      	beq.n	8007fae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fac:	e009      	b.n	8007fc2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb6:	e004      	b.n	8007fc2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f96a 	bl	8008294 <USBD_CtlError>
  }
}
 8007fc0:	bf00      	nop
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	885b      	ldrh	r3, [r3, #2]
 8007fda:	b2da      	uxtb	r2, r3
 8007fdc:	4b41      	ldr	r3, [pc, #260]	@ (80080e4 <USBD_SetConfig+0x118>)
 8007fde:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007fe0:	4b40      	ldr	r3, [pc, #256]	@ (80080e4 <USBD_SetConfig+0x118>)
 8007fe2:	781b      	ldrb	r3, [r3, #0]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	d904      	bls.n	8007ff2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007fe8:	6839      	ldr	r1, [r7, #0]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f952 	bl	8008294 <USBD_CtlError>
 8007ff0:	e075      	b.n	80080de <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d002      	beq.n	8008002 <USBD_SetConfig+0x36>
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d023      	beq.n	8008048 <USBD_SetConfig+0x7c>
 8008000:	e062      	b.n	80080c8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008002:	4b38      	ldr	r3, [pc, #224]	@ (80080e4 <USBD_SetConfig+0x118>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d01a      	beq.n	8008040 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800800a:	4b36      	ldr	r3, [pc, #216]	@ (80080e4 <USBD_SetConfig+0x118>)
 800800c:	781b      	ldrb	r3, [r3, #0]
 800800e:	461a      	mov	r2, r3
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2203      	movs	r2, #3
 8008018:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800801c:	4b31      	ldr	r3, [pc, #196]	@ (80080e4 <USBD_SetConfig+0x118>)
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f7ff f9e7 	bl	80073f6 <USBD_SetClassConfig>
 8008028:	4603      	mov	r3, r0
 800802a:	2b02      	cmp	r3, #2
 800802c:	d104      	bne.n	8008038 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f92f 	bl	8008294 <USBD_CtlError>
            return;
 8008036:	e052      	b.n	80080de <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f9f3 	bl	8008424 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800803e:	e04e      	b.n	80080de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f000 f9ef 	bl	8008424 <USBD_CtlSendStatus>
        break;
 8008046:	e04a      	b.n	80080de <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008048:	4b26      	ldr	r3, [pc, #152]	@ (80080e4 <USBD_SetConfig+0x118>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d112      	bne.n	8008076 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8008058:	4b22      	ldr	r3, [pc, #136]	@ (80080e4 <USBD_SetConfig+0x118>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	461a      	mov	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008062:	4b20      	ldr	r3, [pc, #128]	@ (80080e4 <USBD_SetConfig+0x118>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7ff f9e3 	bl	8007434 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f9d8 	bl	8008424 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008074:	e033      	b.n	80080de <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008076:	4b1b      	ldr	r3, [pc, #108]	@ (80080e4 <USBD_SetConfig+0x118>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	429a      	cmp	r2, r3
 8008082:	d01d      	beq.n	80080c0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	b2db      	uxtb	r3, r3
 800808a:	4619      	mov	r1, r3
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	f7ff f9d1 	bl	8007434 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008092:	4b14      	ldr	r3, [pc, #80]	@ (80080e4 <USBD_SetConfig+0x118>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800809c:	4b11      	ldr	r3, [pc, #68]	@ (80080e4 <USBD_SetConfig+0x118>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff f9a7 	bl	80073f6 <USBD_SetClassConfig>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d104      	bne.n	80080b8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 f8ef 	bl	8008294 <USBD_CtlError>
            return;
 80080b6:	e012      	b.n	80080de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f9b3 	bl	8008424 <USBD_CtlSendStatus>
        break;
 80080be:	e00e      	b.n	80080de <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f9af 	bl	8008424 <USBD_CtlSendStatus>
        break;
 80080c6:	e00a      	b.n	80080de <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f8e2 	bl	8008294 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80080d0:	4b04      	ldr	r3, [pc, #16]	@ (80080e4 <USBD_SetConfig+0x118>)
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7ff f9ac 	bl	8007434 <USBD_ClrClassConfig>
        break;
 80080dc:	bf00      	nop
    }
  }
}
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	200004dc 	.word	0x200004dc

080080e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	88db      	ldrh	r3, [r3, #6]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d004      	beq.n	8008104 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080fa:	6839      	ldr	r1, [r7, #0]
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f000 f8c9 	bl	8008294 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008102:	e022      	b.n	800814a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800810a:	2b02      	cmp	r3, #2
 800810c:	dc02      	bgt.n	8008114 <USBD_GetConfig+0x2c>
 800810e:	2b00      	cmp	r3, #0
 8008110:	dc03      	bgt.n	800811a <USBD_GetConfig+0x32>
 8008112:	e015      	b.n	8008140 <USBD_GetConfig+0x58>
 8008114:	2b03      	cmp	r3, #3
 8008116:	d00b      	beq.n	8008130 <USBD_GetConfig+0x48>
 8008118:	e012      	b.n	8008140 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3308      	adds	r3, #8
 8008124:	2201      	movs	r2, #1
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f91d 	bl	8008368 <USBD_CtlSendData>
        break;
 800812e:	e00c      	b.n	800814a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	3304      	adds	r3, #4
 8008134:	2201      	movs	r2, #1
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f915 	bl	8008368 <USBD_CtlSendData>
        break;
 800813e:	e004      	b.n	800814a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f8a6 	bl	8008294 <USBD_CtlError>
        break;
 8008148:	bf00      	nop
}
 800814a:	bf00      	nop
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008162:	3b01      	subs	r3, #1
 8008164:	2b02      	cmp	r3, #2
 8008166:	d81e      	bhi.n	80081a6 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	88db      	ldrh	r3, [r3, #6]
 800816c:	2b02      	cmp	r3, #2
 800816e:	d004      	beq.n	800817a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f88e 	bl	8008294 <USBD_CtlError>
        break;
 8008178:	e01a      	b.n	80081b0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2201      	movs	r2, #1
 800817e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	f043 0202 	orr.w	r2, r3, #2
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	330c      	adds	r3, #12
 800819a:	2202      	movs	r2, #2
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f8e2 	bl	8008368 <USBD_CtlSendData>
      break;
 80081a4:	e004      	b.n	80081b0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 f873 	bl	8008294 <USBD_CtlError>
      break;
 80081ae:	bf00      	nop
  }
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	885b      	ldrh	r3, [r3, #2]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d106      	bne.n	80081d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f926 	bl	8008424 <USBD_CtlSendStatus>
  }
}
 80081d8:	bf00      	nop
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081f0:	3b01      	subs	r3, #1
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d80b      	bhi.n	800820e <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	885b      	ldrh	r3, [r3, #2]
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d10c      	bne.n	8008218 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f90c 	bl	8008424 <USBD_CtlSendStatus>
      }
      break;
 800820c:	e004      	b.n	8008218 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f83f 	bl	8008294 <USBD_CtlError>
      break;
 8008216:	e000      	b.n	800821a <USBD_ClrFeature+0x3a>
      break;
 8008218:	bf00      	nop
  }
}
 800821a:	bf00      	nop
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781a      	ldrb	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	785a      	ldrb	r2, [r3, #1]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	3302      	adds	r3, #2
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	3303      	adds	r3, #3
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	021b      	lsls	r3, r3, #8
 800824c:	b29b      	uxth	r3, r3
 800824e:	4413      	add	r3, r2
 8008250:	b29a      	uxth	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	3304      	adds	r3, #4
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	461a      	mov	r2, r3
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	3305      	adds	r3, #5
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	021b      	lsls	r3, r3, #8
 8008266:	b29b      	uxth	r3, r3
 8008268:	4413      	add	r3, r2
 800826a:	b29a      	uxth	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	3306      	adds	r3, #6
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	461a      	mov	r2, r3
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	3307      	adds	r3, #7
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	021b      	lsls	r3, r3, #8
 8008280:	b29b      	uxth	r3, r3
 8008282:	4413      	add	r3, r2
 8008284:	b29a      	uxth	r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	80da      	strh	r2, [r3, #6]

}
 800828a:	bf00      	nop
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	bc80      	pop	{r7}
 8008292:	4770      	bx	lr

08008294 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b082      	sub	sp, #8
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800829e:	2180      	movs	r1, #128	@ 0x80
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fcad 	bl	8008c00 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80082a6:	2100      	movs	r1, #0
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fca9 	bl	8008c00 <USBD_LL_StallEP>
}
 80082ae:	bf00      	nop
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b086      	sub	sp, #24
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	60f8      	str	r0, [r7, #12]
 80082be:	60b9      	str	r1, [r7, #8]
 80082c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082c2:	2300      	movs	r3, #0
 80082c4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d032      	beq.n	8008332 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f000 f834 	bl	800833a <USBD_GetLen>
 80082d2:	4603      	mov	r3, r0
 80082d4:	3301      	adds	r3, #1
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	005b      	lsls	r3, r3, #1
 80082da:	b29a      	uxth	r2, r3
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	1c5a      	adds	r2, r3, #1
 80082e4:	75fa      	strb	r2, [r7, #23]
 80082e6:	461a      	mov	r2, r3
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4413      	add	r3, r2
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	7812      	ldrb	r2, [r2, #0]
 80082f0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80082f2:	7dfb      	ldrb	r3, [r7, #23]
 80082f4:	1c5a      	adds	r2, r3, #1
 80082f6:	75fa      	strb	r2, [r7, #23]
 80082f8:	461a      	mov	r2, r3
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	4413      	add	r3, r2
 80082fe:	2203      	movs	r2, #3
 8008300:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008302:	e012      	b.n	800832a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	1c5a      	adds	r2, r3, #1
 8008308:	60fa      	str	r2, [r7, #12]
 800830a:	7dfa      	ldrb	r2, [r7, #23]
 800830c:	1c51      	adds	r1, r2, #1
 800830e:	75f9      	strb	r1, [r7, #23]
 8008310:	4611      	mov	r1, r2
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	440a      	add	r2, r1
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	1c5a      	adds	r2, r3, #1
 800831e:	75fa      	strb	r2, [r7, #23]
 8008320:	461a      	mov	r2, r3
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	4413      	add	r3, r2
 8008326:	2200      	movs	r2, #0
 8008328:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1e8      	bne.n	8008304 <USBD_GetString+0x4e>
    }
  }
}
 8008332:	bf00      	nop
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800833a:	b480      	push	{r7}
 800833c:	b085      	sub	sp, #20
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008346:	e005      	b.n	8008354 <USBD_GetLen+0x1a>
  {
    len++;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
 800834a:	3301      	adds	r3, #1
 800834c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	3301      	adds	r3, #1
 8008352:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1f5      	bne.n	8008348 <USBD_GetLen+0xe>
  }

  return len;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3714      	adds	r7, #20
 8008362:	46bd      	mov	sp, r7
 8008364:	bc80      	pop	{r7}
 8008366:	4770      	bx	lr

08008368 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	4613      	mov	r3, r2
 8008374:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2202      	movs	r2, #2
 800837a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800837e:	88fa      	ldrh	r2, [r7, #6]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008384:	88fa      	ldrh	r2, [r7, #6]
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800838a:	88fb      	ldrh	r3, [r7, #6]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	2100      	movs	r1, #0
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f000 fcbd 	bl	8008d10 <USBD_LL_Transmit>

  return USBD_OK;
 8008396:	2300      	movs	r3, #0
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	4613      	mov	r3, r2
 80083ac:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083ae:	88fb      	ldrh	r3, [r7, #6]
 80083b0:	68ba      	ldr	r2, [r7, #8]
 80083b2:	2100      	movs	r1, #0
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 fcab 	bl	8008d10 <USBD_LL_Transmit>

  return USBD_OK;
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b084      	sub	sp, #16
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4613      	mov	r3, r2
 80083d0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2203      	movs	r2, #3
 80083d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80083da:	88fa      	ldrh	r2, [r7, #6]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80083e2:	88fa      	ldrh	r2, [r7, #6]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083ea:	88fb      	ldrh	r3, [r7, #6]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	2100      	movs	r1, #0
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f000 fcb0 	bl	8008d56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b084      	sub	sp, #16
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	60b9      	str	r1, [r7, #8]
 800840a:	4613      	mov	r3, r2
 800840c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800840e:	88fb      	ldrh	r3, [r7, #6]
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	2100      	movs	r1, #0
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 fc9e 	bl	8008d56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2204      	movs	r2, #4
 8008430:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008434:	2300      	movs	r3, #0
 8008436:	2200      	movs	r2, #0
 8008438:	2100      	movs	r1, #0
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fc68 	bl	8008d10 <USBD_LL_Transmit>

  return USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b082      	sub	sp, #8
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2205      	movs	r2, #5
 8008456:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800845a:	2300      	movs	r3, #0
 800845c:	2200      	movs	r2, #0
 800845e:	2100      	movs	r1, #0
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fc78 	bl	8008d56 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008470:	b480      	push	{r7}
 8008472:	b087      	sub	sp, #28
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	4613      	mov	r3, r2
 800847c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800847e:	2301      	movs	r3, #1
 8008480:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008482:	2300      	movs	r3, #0
 8008484:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8008486:	4b1e      	ldr	r3, [pc, #120]	@ (8008500 <FATFS_LinkDriverEx+0x90>)
 8008488:	7a5b      	ldrb	r3, [r3, #9]
 800848a:	b2db      	uxtb	r3, r3
 800848c:	2b01      	cmp	r3, #1
 800848e:	d831      	bhi.n	80084f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008490:	4b1b      	ldr	r3, [pc, #108]	@ (8008500 <FATFS_LinkDriverEx+0x90>)
 8008492:	7a5b      	ldrb	r3, [r3, #9]
 8008494:	b2db      	uxtb	r3, r3
 8008496:	461a      	mov	r2, r3
 8008498:	4b19      	ldr	r3, [pc, #100]	@ (8008500 <FATFS_LinkDriverEx+0x90>)
 800849a:	2100      	movs	r1, #0
 800849c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800849e:	4b18      	ldr	r3, [pc, #96]	@ (8008500 <FATFS_LinkDriverEx+0x90>)
 80084a0:	7a5b      	ldrb	r3, [r3, #9]
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	4a16      	ldr	r2, [pc, #88]	@ (8008500 <FATFS_LinkDriverEx+0x90>)
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	4413      	add	r3, r2
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80084ae:	4b14      	ldr	r3, [pc, #80]	@ (8008500 <FATFS_LinkDriverEx+0x90>)
 80084b0:	7a5b      	ldrb	r3, [r3, #9]
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	461a      	mov	r2, r3
 80084b6:	4b12      	ldr	r3, [pc, #72]	@ (8008500 <FATFS_LinkDriverEx+0x90>)
 80084b8:	4413      	add	r3, r2
 80084ba:	79fa      	ldrb	r2, [r7, #7]
 80084bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80084be:	4b10      	ldr	r3, [pc, #64]	@ (8008500 <FATFS_LinkDriverEx+0x90>)
 80084c0:	7a5b      	ldrb	r3, [r3, #9]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	b2d1      	uxtb	r1, r2
 80084c8:	4a0d      	ldr	r2, [pc, #52]	@ (8008500 <FATFS_LinkDriverEx+0x90>)
 80084ca:	7251      	strb	r1, [r2, #9]
 80084cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80084ce:	7dbb      	ldrb	r3, [r7, #22]
 80084d0:	3330      	adds	r3, #48	@ 0x30
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	3301      	adds	r3, #1
 80084dc:	223a      	movs	r2, #58	@ 0x3a
 80084de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	3302      	adds	r3, #2
 80084e4:	222f      	movs	r2, #47	@ 0x2f
 80084e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	3303      	adds	r3, #3
 80084ec:	2200      	movs	r2, #0
 80084ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80084f0:	2300      	movs	r3, #0
 80084f2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bc80      	pop	{r7}
 80084fe:	4770      	bx	lr
 8008500:	200004e0 	.word	0x200004e0

08008504 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800850e:	2200      	movs	r2, #0
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f7ff ffac 	bl	8008470 <FATFS_LinkDriverEx>
 8008518:	4603      	mov	r3, r0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3708      	adds	r7, #8
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
	...

08008524 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008528:	2200      	movs	r2, #0
 800852a:	4912      	ldr	r1, [pc, #72]	@ (8008574 <MX_USB_DEVICE_Init+0x50>)
 800852c:	4812      	ldr	r0, [pc, #72]	@ (8008578 <MX_USB_DEVICE_Init+0x54>)
 800852e:	f7fe ff08 	bl	8007342 <USBD_Init>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008538:	f7f8 fd34 	bl	8000fa4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800853c:	490f      	ldr	r1, [pc, #60]	@ (800857c <MX_USB_DEVICE_Init+0x58>)
 800853e:	480e      	ldr	r0, [pc, #56]	@ (8008578 <MX_USB_DEVICE_Init+0x54>)
 8008540:	f7fe ff2a 	bl	8007398 <USBD_RegisterClass>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d001      	beq.n	800854e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800854a:	f7f8 fd2b 	bl	8000fa4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800854e:	490c      	ldr	r1, [pc, #48]	@ (8008580 <MX_USB_DEVICE_Init+0x5c>)
 8008550:	4809      	ldr	r0, [pc, #36]	@ (8008578 <MX_USB_DEVICE_Init+0x54>)
 8008552:	f7fe fe5b 	bl	800720c <USBD_CDC_RegisterInterface>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800855c:	f7f8 fd22 	bl	8000fa4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008560:	4805      	ldr	r0, [pc, #20]	@ (8008578 <MX_USB_DEVICE_Init+0x54>)
 8008562:	f7fe ff32 	bl	80073ca <USBD_Start>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800856c:	f7f8 fd1a 	bl	8000fa4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008570:	bf00      	nop
 8008572:	bd80      	pop	{r7, pc}
 8008574:	20000140 	.word	0x20000140
 8008578:	200004ec 	.word	0x200004ec
 800857c:	2000002c 	.word	0x2000002c
 8008580:	20000130 	.word	0x20000130

08008584 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008588:	2200      	movs	r2, #0
 800858a:	4905      	ldr	r1, [pc, #20]	@ (80085a0 <CDC_Init_FS+0x1c>)
 800858c:	4805      	ldr	r0, [pc, #20]	@ (80085a4 <CDC_Init_FS+0x20>)
 800858e:	f7fe fe53 	bl	8007238 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008592:	4905      	ldr	r1, [pc, #20]	@ (80085a8 <CDC_Init_FS+0x24>)
 8008594:	4803      	ldr	r0, [pc, #12]	@ (80085a4 <CDC_Init_FS+0x20>)
 8008596:	f7fe fe68 	bl	800726a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800859a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800859c:	4618      	mov	r0, r3
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	20000bb0 	.word	0x20000bb0
 80085a4:	200004ec 	.word	0x200004ec
 80085a8:	200007b0 	.word	0x200007b0

080085ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80085ac:	b480      	push	{r7}
 80085ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bc80      	pop	{r7}
 80085b8:	4770      	bx	lr
	...

080085bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4603      	mov	r3, r0
 80085c4:	6039      	str	r1, [r7, #0]
 80085c6:	71fb      	strb	r3, [r7, #7]
 80085c8:	4613      	mov	r3, r2
 80085ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80085cc:	79fb      	ldrb	r3, [r7, #7]
 80085ce:	2b23      	cmp	r3, #35	@ 0x23
 80085d0:	d84a      	bhi.n	8008668 <CDC_Control_FS+0xac>
 80085d2:	a201      	add	r2, pc, #4	@ (adr r2, 80085d8 <CDC_Control_FS+0x1c>)
 80085d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d8:	08008669 	.word	0x08008669
 80085dc:	08008669 	.word	0x08008669
 80085e0:	08008669 	.word	0x08008669
 80085e4:	08008669 	.word	0x08008669
 80085e8:	08008669 	.word	0x08008669
 80085ec:	08008669 	.word	0x08008669
 80085f0:	08008669 	.word	0x08008669
 80085f4:	08008669 	.word	0x08008669
 80085f8:	08008669 	.word	0x08008669
 80085fc:	08008669 	.word	0x08008669
 8008600:	08008669 	.word	0x08008669
 8008604:	08008669 	.word	0x08008669
 8008608:	08008669 	.word	0x08008669
 800860c:	08008669 	.word	0x08008669
 8008610:	08008669 	.word	0x08008669
 8008614:	08008669 	.word	0x08008669
 8008618:	08008669 	.word	0x08008669
 800861c:	08008669 	.word	0x08008669
 8008620:	08008669 	.word	0x08008669
 8008624:	08008669 	.word	0x08008669
 8008628:	08008669 	.word	0x08008669
 800862c:	08008669 	.word	0x08008669
 8008630:	08008669 	.word	0x08008669
 8008634:	08008669 	.word	0x08008669
 8008638:	08008669 	.word	0x08008669
 800863c:	08008669 	.word	0x08008669
 8008640:	08008669 	.word	0x08008669
 8008644:	08008669 	.word	0x08008669
 8008648:	08008669 	.word	0x08008669
 800864c:	08008669 	.word	0x08008669
 8008650:	08008669 	.word	0x08008669
 8008654:	08008669 	.word	0x08008669
 8008658:	08008669 	.word	0x08008669
 800865c:	08008669 	.word	0x08008669
 8008660:	08008669 	.word	0x08008669
 8008664:	08008669 	.word	0x08008669
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008668:	bf00      	nop
  }

  return (USBD_OK);
 800866a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800866c:	4618      	mov	r0, r3
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	bc80      	pop	{r7}
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop

08008678 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008682:	6879      	ldr	r1, [r7, #4]
 8008684:	4805      	ldr	r0, [pc, #20]	@ (800869c <CDC_Receive_FS+0x24>)
 8008686:	f7fe fdf0 	bl	800726a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800868a:	4804      	ldr	r0, [pc, #16]	@ (800869c <CDC_Receive_FS+0x24>)
 800868c:	f7fe fe2f 	bl	80072ee <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008690:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008692:	4618      	mov	r0, r3
 8008694:	3708      	adds	r7, #8
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop
 800869c:	200004ec 	.word	0x200004ec

080086a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80086b0:	4b0d      	ldr	r3, [pc, #52]	@ (80086e8 <CDC_Transmit_FS+0x48>)
 80086b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d001      	beq.n	80086c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80086c2:	2301      	movs	r3, #1
 80086c4:	e00b      	b.n	80086de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80086c6:	887b      	ldrh	r3, [r7, #2]
 80086c8:	461a      	mov	r2, r3
 80086ca:	6879      	ldr	r1, [r7, #4]
 80086cc:	4806      	ldr	r0, [pc, #24]	@ (80086e8 <CDC_Transmit_FS+0x48>)
 80086ce:	f7fe fdb3 	bl	8007238 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80086d2:	4805      	ldr	r0, [pc, #20]	@ (80086e8 <CDC_Transmit_FS+0x48>)
 80086d4:	f7fe fddc 	bl	8007290 <USBD_CDC_TransmitPacket>
 80086d8:	4603      	mov	r3, r0
 80086da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	200004ec 	.word	0x200004ec

080086ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	6039      	str	r1, [r7, #0]
 80086f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2212      	movs	r2, #18
 80086fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086fe:	4b03      	ldr	r3, [pc, #12]	@ (800870c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008700:	4618      	mov	r0, r3
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	bc80      	pop	{r7}
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	2000015c 	.word	0x2000015c

08008710 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2204      	movs	r2, #4
 8008720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008722:	4b03      	ldr	r3, [pc, #12]	@ (8008730 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008724:	4618      	mov	r0, r3
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	bc80      	pop	{r7}
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	20000170 	.word	0x20000170

08008734 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	4603      	mov	r3, r0
 800873c:	6039      	str	r1, [r7, #0]
 800873e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d105      	bne.n	8008752 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	4907      	ldr	r1, [pc, #28]	@ (8008768 <USBD_FS_ProductStrDescriptor+0x34>)
 800874a:	4808      	ldr	r0, [pc, #32]	@ (800876c <USBD_FS_ProductStrDescriptor+0x38>)
 800874c:	f7ff fdb3 	bl	80082b6 <USBD_GetString>
 8008750:	e004      	b.n	800875c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	4904      	ldr	r1, [pc, #16]	@ (8008768 <USBD_FS_ProductStrDescriptor+0x34>)
 8008756:	4805      	ldr	r0, [pc, #20]	@ (800876c <USBD_FS_ProductStrDescriptor+0x38>)
 8008758:	f7ff fdad 	bl	80082b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800875c:	4b02      	ldr	r3, [pc, #8]	@ (8008768 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20000fb0 	.word	0x20000fb0
 800876c:	0800bb78 	.word	0x0800bb78

08008770 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	6039      	str	r1, [r7, #0]
 800877a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	4904      	ldr	r1, [pc, #16]	@ (8008790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008780:	4804      	ldr	r0, [pc, #16]	@ (8008794 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008782:	f7ff fd98 	bl	80082b6 <USBD_GetString>
  return USBD_StrDesc;
 8008786:	4b02      	ldr	r3, [pc, #8]	@ (8008790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20000fb0 	.word	0x20000fb0
 8008794:	0800bb90 	.word	0x0800bb90

08008798 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	6039      	str	r1, [r7, #0]
 80087a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	221a      	movs	r2, #26
 80087a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087aa:	f000 f843 	bl	8008834 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087ae:	4b02      	ldr	r3, [pc, #8]	@ (80087b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20000174 	.word	0x20000174

080087bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	6039      	str	r1, [r7, #0]
 80087c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d105      	bne.n	80087da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	4907      	ldr	r1, [pc, #28]	@ (80087f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087d2:	4808      	ldr	r0, [pc, #32]	@ (80087f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087d4:	f7ff fd6f 	bl	80082b6 <USBD_GetString>
 80087d8:	e004      	b.n	80087e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4904      	ldr	r1, [pc, #16]	@ (80087f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087de:	4805      	ldr	r0, [pc, #20]	@ (80087f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087e0:	f7ff fd69 	bl	80082b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087e4:	4b02      	ldr	r3, [pc, #8]	@ (80087f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20000fb0 	.word	0x20000fb0
 80087f4:	0800bba4 	.word	0x0800bba4

080087f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	6039      	str	r1, [r7, #0]
 8008802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d105      	bne.n	8008816 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	4907      	ldr	r1, [pc, #28]	@ (800882c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800880e:	4808      	ldr	r0, [pc, #32]	@ (8008830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008810:	f7ff fd51 	bl	80082b6 <USBD_GetString>
 8008814:	e004      	b.n	8008820 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	4904      	ldr	r1, [pc, #16]	@ (800882c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800881a:	4805      	ldr	r0, [pc, #20]	@ (8008830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800881c:	f7ff fd4b 	bl	80082b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008820:	4b02      	ldr	r3, [pc, #8]	@ (800882c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000fb0 	.word	0x20000fb0
 8008830:	0800bbb0 	.word	0x0800bbb0

08008834 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800883a:	4b0f      	ldr	r3, [pc, #60]	@ (8008878 <Get_SerialNum+0x44>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008840:	4b0e      	ldr	r3, [pc, #56]	@ (800887c <Get_SerialNum+0x48>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008846:	4b0e      	ldr	r3, [pc, #56]	@ (8008880 <Get_SerialNum+0x4c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800884c:	68fa      	ldr	r2, [r7, #12]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4413      	add	r3, r2
 8008852:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d009      	beq.n	800886e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800885a:	2208      	movs	r2, #8
 800885c:	4909      	ldr	r1, [pc, #36]	@ (8008884 <Get_SerialNum+0x50>)
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f000 f814 	bl	800888c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008864:	2204      	movs	r2, #4
 8008866:	4908      	ldr	r1, [pc, #32]	@ (8008888 <Get_SerialNum+0x54>)
 8008868:	68b8      	ldr	r0, [r7, #8]
 800886a:	f000 f80f 	bl	800888c <IntToUnicode>
  }
}
 800886e:	bf00      	nop
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	1ffff7e8 	.word	0x1ffff7e8
 800887c:	1ffff7ec 	.word	0x1ffff7ec
 8008880:	1ffff7f0 	.word	0x1ffff7f0
 8008884:	20000176 	.word	0x20000176
 8008888:	20000186 	.word	0x20000186

0800888c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800888c:	b480      	push	{r7}
 800888e:	b087      	sub	sp, #28
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	4613      	mov	r3, r2
 8008898:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800889a:	2300      	movs	r3, #0
 800889c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800889e:	2300      	movs	r3, #0
 80088a0:	75fb      	strb	r3, [r7, #23]
 80088a2:	e027      	b.n	80088f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	0f1b      	lsrs	r3, r3, #28
 80088a8:	2b09      	cmp	r3, #9
 80088aa:	d80b      	bhi.n	80088c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	0f1b      	lsrs	r3, r3, #28
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	7dfb      	ldrb	r3, [r7, #23]
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	4619      	mov	r1, r3
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	440b      	add	r3, r1
 80088bc:	3230      	adds	r2, #48	@ 0x30
 80088be:	b2d2      	uxtb	r2, r2
 80088c0:	701a      	strb	r2, [r3, #0]
 80088c2:	e00a      	b.n	80088da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	0f1b      	lsrs	r3, r3, #28
 80088c8:	b2da      	uxtb	r2, r3
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	4619      	mov	r1, r3
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	440b      	add	r3, r1
 80088d4:	3237      	adds	r2, #55	@ 0x37
 80088d6:	b2d2      	uxtb	r2, r2
 80088d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	011b      	lsls	r3, r3, #4
 80088de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	3301      	adds	r3, #1
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	4413      	add	r3, r2
 80088ea:	2200      	movs	r2, #0
 80088ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	3301      	adds	r3, #1
 80088f2:	75fb      	strb	r3, [r7, #23]
 80088f4:	7dfa      	ldrb	r2, [r7, #23]
 80088f6:	79fb      	ldrb	r3, [r7, #7]
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d3d3      	bcc.n	80088a4 <IntToUnicode+0x18>
  }
}
 80088fc:	bf00      	nop
 80088fe:	bf00      	nop
 8008900:	371c      	adds	r7, #28
 8008902:	46bd      	mov	sp, r7
 8008904:	bc80      	pop	{r7}
 8008906:	4770      	bx	lr

08008908 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a0d      	ldr	r2, [pc, #52]	@ (800894c <HAL_PCD_MspInit+0x44>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d113      	bne.n	8008942 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800891a:	4b0d      	ldr	r3, [pc, #52]	@ (8008950 <HAL_PCD_MspInit+0x48>)
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	4a0c      	ldr	r2, [pc, #48]	@ (8008950 <HAL_PCD_MspInit+0x48>)
 8008920:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008924:	61d3      	str	r3, [r2, #28]
 8008926:	4b0a      	ldr	r3, [pc, #40]	@ (8008950 <HAL_PCD_MspInit+0x48>)
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800892e:	60fb      	str	r3, [r7, #12]
 8008930:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008932:	2200      	movs	r2, #0
 8008934:	2100      	movs	r1, #0
 8008936:	2014      	movs	r0, #20
 8008938:	f7f8 fedf 	bl	80016fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800893c:	2014      	movs	r0, #20
 800893e:	f7f8 fef8 	bl	8001732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008942:	bf00      	nop
 8008944:	3710      	adds	r7, #16
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	40005c00 	.word	0x40005c00
 8008950:	40021000 	.word	0x40021000

08008954 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8008968:	4619      	mov	r1, r3
 800896a:	4610      	mov	r0, r2
 800896c:	f7fe fd75 	bl	800745a <USBD_LL_SetupStage>
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800898a:	78fa      	ldrb	r2, [r7, #3]
 800898c:	6879      	ldr	r1, [r7, #4]
 800898e:	4613      	mov	r3, r2
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	4413      	add	r3, r2
 8008994:	00db      	lsls	r3, r3, #3
 8008996:	440b      	add	r3, r1
 8008998:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	78fb      	ldrb	r3, [r7, #3]
 80089a0:	4619      	mov	r1, r3
 80089a2:	f7fe fda7 	bl	80074f4 <USBD_LL_DataOutStage>
}
 80089a6:	bf00      	nop
 80089a8:	3708      	adds	r7, #8
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}

080089ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ae:	b580      	push	{r7, lr}
 80089b0:	b082      	sub	sp, #8
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
 80089b6:	460b      	mov	r3, r1
 80089b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	6879      	ldr	r1, [r7, #4]
 80089c4:	4613      	mov	r3, r2
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	00db      	lsls	r3, r3, #3
 80089cc:	440b      	add	r3, r1
 80089ce:	3324      	adds	r3, #36	@ 0x24
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	78fb      	ldrb	r3, [r7, #3]
 80089d4:	4619      	mov	r1, r3
 80089d6:	f7fe fdfe 	bl	80075d6 <USBD_LL_DataInStage>
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b082      	sub	sp, #8
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80089f0:	4618      	mov	r0, r3
 80089f2:	f7fe ff0e 	bl	8007812 <USBD_LL_SOF>
}
 80089f6:	bf00      	nop
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a06:	2301      	movs	r3, #1
 8008a08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	799b      	ldrb	r3, [r3, #6]
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d001      	beq.n	8008a16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a12:	f7f8 fac7 	bl	8000fa4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a1c:	7bfa      	ldrb	r2, [r7, #15]
 8008a1e:	4611      	mov	r1, r2
 8008a20:	4618      	mov	r0, r3
 8008a22:	f7fe febe 	bl	80077a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fe fe77 	bl	8007720 <USBD_LL_Reset>
}
 8008a32:	bf00      	nop
 8008a34:	3710      	adds	r7, #16
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
	...

08008a3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b082      	sub	sp, #8
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7fe feb8 	bl	80077c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	7a9b      	ldrb	r3, [r3, #10]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d005      	beq.n	8008a64 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008a58:	4b04      	ldr	r3, [pc, #16]	@ (8008a6c <HAL_PCD_SuspendCallback+0x30>)
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	4a03      	ldr	r2, [pc, #12]	@ (8008a6c <HAL_PCD_SuspendCallback+0x30>)
 8008a5e:	f043 0306 	orr.w	r3, r3, #6
 8008a62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	e000ed00 	.word	0xe000ed00

08008a70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b082      	sub	sp, #8
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe feb2 	bl	80077e8 <USBD_LL_Resume>
}
 8008a84:	bf00      	nop
 8008a86:	3708      	adds	r7, #8
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}

08008a8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008a94:	4a28      	ldr	r2, [pc, #160]	@ (8008b38 <USBD_LL_Init+0xac>)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a26      	ldr	r2, [pc, #152]	@ (8008b38 <USBD_LL_Init+0xac>)
 8008aa0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008aa4:	4b24      	ldr	r3, [pc, #144]	@ (8008b38 <USBD_LL_Init+0xac>)
 8008aa6:	4a25      	ldr	r2, [pc, #148]	@ (8008b3c <USBD_LL_Init+0xb0>)
 8008aa8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008aaa:	4b23      	ldr	r3, [pc, #140]	@ (8008b38 <USBD_LL_Init+0xac>)
 8008aac:	2208      	movs	r2, #8
 8008aae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008ab0:	4b21      	ldr	r3, [pc, #132]	@ (8008b38 <USBD_LL_Init+0xac>)
 8008ab2:	2202      	movs	r2, #2
 8008ab4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008ab6:	4b20      	ldr	r3, [pc, #128]	@ (8008b38 <USBD_LL_Init+0xac>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008abc:	4b1e      	ldr	r3, [pc, #120]	@ (8008b38 <USBD_LL_Init+0xac>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008ac2:	4b1d      	ldr	r3, [pc, #116]	@ (8008b38 <USBD_LL_Init+0xac>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008ac8:	481b      	ldr	r0, [pc, #108]	@ (8008b38 <USBD_LL_Init+0xac>)
 8008aca:	f7f9 fad5 	bl	8002078 <HAL_PCD_Init>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008ad4:	f7f8 fa66 	bl	8000fa4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008ade:	2318      	movs	r3, #24
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	f7fa ffe6 	bl	8003ab4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008aee:	2358      	movs	r3, #88	@ 0x58
 8008af0:	2200      	movs	r2, #0
 8008af2:	2180      	movs	r1, #128	@ 0x80
 8008af4:	f7fa ffde 	bl	8003ab4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008afe:	23c0      	movs	r3, #192	@ 0xc0
 8008b00:	2200      	movs	r2, #0
 8008b02:	2181      	movs	r1, #129	@ 0x81
 8008b04:	f7fa ffd6 	bl	8003ab4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b0e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8008b12:	2200      	movs	r2, #0
 8008b14:	2101      	movs	r1, #1
 8008b16:	f7fa ffcd 	bl	8003ab4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008b24:	2200      	movs	r2, #0
 8008b26:	2182      	movs	r1, #130	@ 0x82
 8008b28:	f7fa ffc4 	bl	8003ab4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	200011b0 	.word	0x200011b0
 8008b3c:	40005c00 	.word	0x40005c00

08008b40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7f9 fb84 	bl	8002264 <HAL_PCD_Start>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b60:	7bfb      	ldrb	r3, [r7, #15]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f94e 	bl	8008e04 <USBD_Get_USB_Status>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3710      	adds	r7, #16
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b084      	sub	sp, #16
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	4608      	mov	r0, r1
 8008b80:	4611      	mov	r1, r2
 8008b82:	461a      	mov	r2, r3
 8008b84:	4603      	mov	r3, r0
 8008b86:	70fb      	strb	r3, [r7, #3]
 8008b88:	460b      	mov	r3, r1
 8008b8a:	70bb      	strb	r3, [r7, #2]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b94:	2300      	movs	r3, #0
 8008b96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008b9e:	78bb      	ldrb	r3, [r7, #2]
 8008ba0:	883a      	ldrh	r2, [r7, #0]
 8008ba2:	78f9      	ldrb	r1, [r7, #3]
 8008ba4:	f7f9 fcd8 	bl	8002558 <HAL_PCD_EP_Open>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f000 f928 	bl	8008e04 <USBD_Get_USB_Status>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b084      	sub	sp, #16
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008bdc:	78fa      	ldrb	r2, [r7, #3]
 8008bde:	4611      	mov	r1, r2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f7f9 fd16 	bl	8002612 <HAL_PCD_EP_Close>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bea:	7bfb      	ldrb	r3, [r7, #15]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f000 f909 	bl	8008e04 <USBD_Get_USB_Status>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3710      	adds	r7, #16
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}

08008c00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c1a:	78fa      	ldrb	r2, [r7, #3]
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7f9 fdbe 	bl	80027a0 <HAL_PCD_EP_SetStall>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 f8ea 	bl	8008e04 <USBD_Get_USB_Status>
 8008c30:	4603      	mov	r3, r0
 8008c32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b084      	sub	sp, #16
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	460b      	mov	r3, r1
 8008c48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c58:	78fa      	ldrb	r2, [r7, #3]
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7f9 fdff 	bl	8002860 <HAL_PCD_EP_ClrStall>
 8008c62:	4603      	mov	r3, r0
 8008c64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f000 f8cb 	bl	8008e04 <USBD_Get_USB_Status>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c72:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3710      	adds	r7, #16
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b085      	sub	sp, #20
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	460b      	mov	r3, r1
 8008c86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008c8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008c90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	da0b      	bge.n	8008cb0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008c98:	78fb      	ldrb	r3, [r7, #3]
 8008c9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008c9e:	68f9      	ldr	r1, [r7, #12]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4413      	add	r3, r2
 8008ca6:	00db      	lsls	r3, r3, #3
 8008ca8:	440b      	add	r3, r1
 8008caa:	3312      	adds	r3, #18
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	e00b      	b.n	8008cc8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008cb6:	68f9      	ldr	r1, [r7, #12]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4413      	add	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	440b      	add	r3, r1
 8008cc2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8008cc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008cc8:	4618      	mov	r0, r3
 8008cca:	3714      	adds	r7, #20
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bc80      	pop	{r7}
 8008cd0:	4770      	bx	lr

08008cd2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008cd2:	b580      	push	{r7, lr}
 8008cd4:	b084      	sub	sp, #16
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	460b      	mov	r3, r1
 8008cdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008cec:	78fa      	ldrb	r2, [r7, #3]
 8008cee:	4611      	mov	r1, r2
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7f9 fc0d 	bl	8002510 <HAL_PCD_SetAddress>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cfa:	7bfb      	ldrb	r3, [r7, #15]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f000 f881 	bl	8008e04 <USBD_Get_USB_Status>
 8008d02:	4603      	mov	r3, r0
 8008d04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	607a      	str	r2, [r7, #4]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	72fb      	strb	r3, [r7, #11]
 8008d20:	4613      	mov	r3, r2
 8008d22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008d32:	893b      	ldrh	r3, [r7, #8]
 8008d34:	7af9      	ldrb	r1, [r7, #11]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	f7f9 fcfb 	bl	8002732 <HAL_PCD_EP_Transmit>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d40:	7dfb      	ldrb	r3, [r7, #23]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f85e 	bl	8008e04 <USBD_Get_USB_Status>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3718      	adds	r7, #24
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b086      	sub	sp, #24
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	60f8      	str	r0, [r7, #12]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	461a      	mov	r2, r3
 8008d62:	460b      	mov	r3, r1
 8008d64:	72fb      	strb	r3, [r7, #11]
 8008d66:	4613      	mov	r3, r2
 8008d68:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8008d78:	893b      	ldrh	r3, [r7, #8]
 8008d7a:	7af9      	ldrb	r1, [r7, #11]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	f7f9 fc90 	bl	80026a2 <HAL_PCD_EP_Receive>
 8008d82:	4603      	mov	r3, r0
 8008d84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d86:	7dfb      	ldrb	r3, [r7, #23]
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f000 f83b 	bl	8008e04 <USBD_Get_USB_Status>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008d92:	7dbb      	ldrb	r3, [r7, #22]
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008dae:	78fa      	ldrb	r2, [r7, #3]
 8008db0:	4611      	mov	r1, r2
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7f9 fca6 	bl	8002704 <HAL_PCD_EP_GetRxCount>
 8008db8:	4603      	mov	r3, r0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3708      	adds	r7, #8
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
	...

08008dc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008dcc:	4b02      	ldr	r3, [pc, #8]	@ (8008dd8 <USBD_static_malloc+0x14>)
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	370c      	adds	r7, #12
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bc80      	pop	{r7}
 8008dd6:	4770      	bx	lr
 8008dd8:	20001488 	.word	0x20001488

08008ddc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]

}
 8008de4:	bf00      	nop
 8008de6:	370c      	adds	r7, #12
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bc80      	pop	{r7}
 8008dec:	4770      	bx	lr

08008dee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dee:	b480      	push	{r7}
 8008df0:	b083      	sub	sp, #12
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
 8008df6:	460b      	mov	r3, r1
 8008df8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008dfa:	bf00      	nop
 8008dfc:	370c      	adds	r7, #12
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bc80      	pop	{r7}
 8008e02:	4770      	bx	lr

08008e04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008e12:	79fb      	ldrb	r3, [r7, #7]
 8008e14:	2b03      	cmp	r3, #3
 8008e16:	d817      	bhi.n	8008e48 <USBD_Get_USB_Status+0x44>
 8008e18:	a201      	add	r2, pc, #4	@ (adr r2, 8008e20 <USBD_Get_USB_Status+0x1c>)
 8008e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1e:	bf00      	nop
 8008e20:	08008e31 	.word	0x08008e31
 8008e24:	08008e37 	.word	0x08008e37
 8008e28:	08008e3d 	.word	0x08008e3d
 8008e2c:	08008e43 	.word	0x08008e43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]
    break;
 8008e34:	e00b      	b.n	8008e4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e36:	2302      	movs	r3, #2
 8008e38:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3a:	e008      	b.n	8008e4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e40:	e005      	b.n	8008e4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e42:	2302      	movs	r3, #2
 8008e44:	73fb      	strb	r3, [r7, #15]
    break;
 8008e46:	e002      	b.n	8008e4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008e48:	2302      	movs	r3, #2
 8008e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e4c:	bf00      	nop
  }
  return usb_status;
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bc80      	pop	{r7}
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop

08008e5c <__cvt>:
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e62:	461d      	mov	r5, r3
 8008e64:	bfbb      	ittet	lt
 8008e66:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008e6a:	461d      	movlt	r5, r3
 8008e6c:	2300      	movge	r3, #0
 8008e6e:	232d      	movlt	r3, #45	@ 0x2d
 8008e70:	b088      	sub	sp, #32
 8008e72:	4614      	mov	r4, r2
 8008e74:	bfb8      	it	lt
 8008e76:	4614      	movlt	r4, r2
 8008e78:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008e7a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008e7c:	7013      	strb	r3, [r2, #0]
 8008e7e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008e80:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008e84:	f023 0820 	bic.w	r8, r3, #32
 8008e88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e8c:	d005      	beq.n	8008e9a <__cvt+0x3e>
 8008e8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008e92:	d100      	bne.n	8008e96 <__cvt+0x3a>
 8008e94:	3601      	adds	r6, #1
 8008e96:	2302      	movs	r3, #2
 8008e98:	e000      	b.n	8008e9c <__cvt+0x40>
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	aa07      	add	r2, sp, #28
 8008e9e:	9204      	str	r2, [sp, #16]
 8008ea0:	aa06      	add	r2, sp, #24
 8008ea2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008ea6:	e9cd 3600 	strd	r3, r6, [sp]
 8008eaa:	4622      	mov	r2, r4
 8008eac:	462b      	mov	r3, r5
 8008eae:	f000 fe6f 	bl	8009b90 <_dtoa_r>
 8008eb2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	d119      	bne.n	8008eee <__cvt+0x92>
 8008eba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ebc:	07db      	lsls	r3, r3, #31
 8008ebe:	d50e      	bpl.n	8008ede <__cvt+0x82>
 8008ec0:	eb00 0906 	add.w	r9, r0, r6
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	4620      	mov	r0, r4
 8008eca:	4629      	mov	r1, r5
 8008ecc:	f7f7 fd6c 	bl	80009a8 <__aeabi_dcmpeq>
 8008ed0:	b108      	cbz	r0, 8008ed6 <__cvt+0x7a>
 8008ed2:	f8cd 901c 	str.w	r9, [sp, #28]
 8008ed6:	2230      	movs	r2, #48	@ 0x30
 8008ed8:	9b07      	ldr	r3, [sp, #28]
 8008eda:	454b      	cmp	r3, r9
 8008edc:	d31e      	bcc.n	8008f1c <__cvt+0xc0>
 8008ede:	4638      	mov	r0, r7
 8008ee0:	9b07      	ldr	r3, [sp, #28]
 8008ee2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008ee4:	1bdb      	subs	r3, r3, r7
 8008ee6:	6013      	str	r3, [r2, #0]
 8008ee8:	b008      	add	sp, #32
 8008eea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008eee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ef2:	eb00 0906 	add.w	r9, r0, r6
 8008ef6:	d1e5      	bne.n	8008ec4 <__cvt+0x68>
 8008ef8:	7803      	ldrb	r3, [r0, #0]
 8008efa:	2b30      	cmp	r3, #48	@ 0x30
 8008efc:	d10a      	bne.n	8008f14 <__cvt+0xb8>
 8008efe:	2200      	movs	r2, #0
 8008f00:	2300      	movs	r3, #0
 8008f02:	4620      	mov	r0, r4
 8008f04:	4629      	mov	r1, r5
 8008f06:	f7f7 fd4f 	bl	80009a8 <__aeabi_dcmpeq>
 8008f0a:	b918      	cbnz	r0, 8008f14 <__cvt+0xb8>
 8008f0c:	f1c6 0601 	rsb	r6, r6, #1
 8008f10:	f8ca 6000 	str.w	r6, [sl]
 8008f14:	f8da 3000 	ldr.w	r3, [sl]
 8008f18:	4499      	add	r9, r3
 8008f1a:	e7d3      	b.n	8008ec4 <__cvt+0x68>
 8008f1c:	1c59      	adds	r1, r3, #1
 8008f1e:	9107      	str	r1, [sp, #28]
 8008f20:	701a      	strb	r2, [r3, #0]
 8008f22:	e7d9      	b.n	8008ed8 <__cvt+0x7c>

08008f24 <__exponent>:
 8008f24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f26:	2900      	cmp	r1, #0
 8008f28:	bfb6      	itet	lt
 8008f2a:	232d      	movlt	r3, #45	@ 0x2d
 8008f2c:	232b      	movge	r3, #43	@ 0x2b
 8008f2e:	4249      	neglt	r1, r1
 8008f30:	2909      	cmp	r1, #9
 8008f32:	7002      	strb	r2, [r0, #0]
 8008f34:	7043      	strb	r3, [r0, #1]
 8008f36:	dd29      	ble.n	8008f8c <__exponent+0x68>
 8008f38:	f10d 0307 	add.w	r3, sp, #7
 8008f3c:	461d      	mov	r5, r3
 8008f3e:	270a      	movs	r7, #10
 8008f40:	fbb1 f6f7 	udiv	r6, r1, r7
 8008f44:	461a      	mov	r2, r3
 8008f46:	fb07 1416 	mls	r4, r7, r6, r1
 8008f4a:	3430      	adds	r4, #48	@ 0x30
 8008f4c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008f50:	460c      	mov	r4, r1
 8008f52:	2c63      	cmp	r4, #99	@ 0x63
 8008f54:	4631      	mov	r1, r6
 8008f56:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f5a:	dcf1      	bgt.n	8008f40 <__exponent+0x1c>
 8008f5c:	3130      	adds	r1, #48	@ 0x30
 8008f5e:	1e94      	subs	r4, r2, #2
 8008f60:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008f64:	4623      	mov	r3, r4
 8008f66:	1c41      	adds	r1, r0, #1
 8008f68:	42ab      	cmp	r3, r5
 8008f6a:	d30a      	bcc.n	8008f82 <__exponent+0x5e>
 8008f6c:	f10d 0309 	add.w	r3, sp, #9
 8008f70:	1a9b      	subs	r3, r3, r2
 8008f72:	42ac      	cmp	r4, r5
 8008f74:	bf88      	it	hi
 8008f76:	2300      	movhi	r3, #0
 8008f78:	3302      	adds	r3, #2
 8008f7a:	4403      	add	r3, r0
 8008f7c:	1a18      	subs	r0, r3, r0
 8008f7e:	b003      	add	sp, #12
 8008f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f82:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008f86:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008f8a:	e7ed      	b.n	8008f68 <__exponent+0x44>
 8008f8c:	2330      	movs	r3, #48	@ 0x30
 8008f8e:	3130      	adds	r1, #48	@ 0x30
 8008f90:	7083      	strb	r3, [r0, #2]
 8008f92:	70c1      	strb	r1, [r0, #3]
 8008f94:	1d03      	adds	r3, r0, #4
 8008f96:	e7f1      	b.n	8008f7c <__exponent+0x58>

08008f98 <_printf_float>:
 8008f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9c:	b091      	sub	sp, #68	@ 0x44
 8008f9e:	460c      	mov	r4, r1
 8008fa0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008fa4:	4616      	mov	r6, r2
 8008fa6:	461f      	mov	r7, r3
 8008fa8:	4605      	mov	r5, r0
 8008faa:	f000 fce1 	bl	8009970 <_localeconv_r>
 8008fae:	6803      	ldr	r3, [r0, #0]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	9308      	str	r3, [sp, #32]
 8008fb4:	f7f7 f8cc 	bl	8000150 <strlen>
 8008fb8:	2300      	movs	r3, #0
 8008fba:	930e      	str	r3, [sp, #56]	@ 0x38
 8008fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8008fc0:	9009      	str	r0, [sp, #36]	@ 0x24
 8008fc2:	3307      	adds	r3, #7
 8008fc4:	f023 0307 	bic.w	r3, r3, #7
 8008fc8:	f103 0208 	add.w	r2, r3, #8
 8008fcc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008fd0:	f8d4 b000 	ldr.w	fp, [r4]
 8008fd4:	f8c8 2000 	str.w	r2, [r8]
 8008fd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008fdc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008fe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fe2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8008fea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008fee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008ff2:	4b9c      	ldr	r3, [pc, #624]	@ (8009264 <_printf_float+0x2cc>)
 8008ff4:	f7f7 fd0a 	bl	8000a0c <__aeabi_dcmpun>
 8008ff8:	bb70      	cbnz	r0, 8009058 <_printf_float+0xc0>
 8008ffa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8009002:	4b98      	ldr	r3, [pc, #608]	@ (8009264 <_printf_float+0x2cc>)
 8009004:	f7f7 fce4 	bl	80009d0 <__aeabi_dcmple>
 8009008:	bb30      	cbnz	r0, 8009058 <_printf_float+0xc0>
 800900a:	2200      	movs	r2, #0
 800900c:	2300      	movs	r3, #0
 800900e:	4640      	mov	r0, r8
 8009010:	4649      	mov	r1, r9
 8009012:	f7f7 fcd3 	bl	80009bc <__aeabi_dcmplt>
 8009016:	b110      	cbz	r0, 800901e <_printf_float+0x86>
 8009018:	232d      	movs	r3, #45	@ 0x2d
 800901a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800901e:	4a92      	ldr	r2, [pc, #584]	@ (8009268 <_printf_float+0x2d0>)
 8009020:	4b92      	ldr	r3, [pc, #584]	@ (800926c <_printf_float+0x2d4>)
 8009022:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009026:	bf94      	ite	ls
 8009028:	4690      	movls	r8, r2
 800902a:	4698      	movhi	r8, r3
 800902c:	2303      	movs	r3, #3
 800902e:	f04f 0900 	mov.w	r9, #0
 8009032:	6123      	str	r3, [r4, #16]
 8009034:	f02b 0304 	bic.w	r3, fp, #4
 8009038:	6023      	str	r3, [r4, #0]
 800903a:	4633      	mov	r3, r6
 800903c:	4621      	mov	r1, r4
 800903e:	4628      	mov	r0, r5
 8009040:	9700      	str	r7, [sp, #0]
 8009042:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009044:	f000 f9d4 	bl	80093f0 <_printf_common>
 8009048:	3001      	adds	r0, #1
 800904a:	f040 8090 	bne.w	800916e <_printf_float+0x1d6>
 800904e:	f04f 30ff 	mov.w	r0, #4294967295
 8009052:	b011      	add	sp, #68	@ 0x44
 8009054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009058:	4642      	mov	r2, r8
 800905a:	464b      	mov	r3, r9
 800905c:	4640      	mov	r0, r8
 800905e:	4649      	mov	r1, r9
 8009060:	f7f7 fcd4 	bl	8000a0c <__aeabi_dcmpun>
 8009064:	b148      	cbz	r0, 800907a <_printf_float+0xe2>
 8009066:	464b      	mov	r3, r9
 8009068:	2b00      	cmp	r3, #0
 800906a:	bfb8      	it	lt
 800906c:	232d      	movlt	r3, #45	@ 0x2d
 800906e:	4a80      	ldr	r2, [pc, #512]	@ (8009270 <_printf_float+0x2d8>)
 8009070:	bfb8      	it	lt
 8009072:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009076:	4b7f      	ldr	r3, [pc, #508]	@ (8009274 <_printf_float+0x2dc>)
 8009078:	e7d3      	b.n	8009022 <_printf_float+0x8a>
 800907a:	6863      	ldr	r3, [r4, #4]
 800907c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009080:	1c5a      	adds	r2, r3, #1
 8009082:	d13f      	bne.n	8009104 <_printf_float+0x16c>
 8009084:	2306      	movs	r3, #6
 8009086:	6063      	str	r3, [r4, #4]
 8009088:	2200      	movs	r2, #0
 800908a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800908e:	6023      	str	r3, [r4, #0]
 8009090:	9206      	str	r2, [sp, #24]
 8009092:	aa0e      	add	r2, sp, #56	@ 0x38
 8009094:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009098:	aa0d      	add	r2, sp, #52	@ 0x34
 800909a:	9203      	str	r2, [sp, #12]
 800909c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80090a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80090a4:	6863      	ldr	r3, [r4, #4]
 80090a6:	4642      	mov	r2, r8
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	4628      	mov	r0, r5
 80090ac:	464b      	mov	r3, r9
 80090ae:	910a      	str	r1, [sp, #40]	@ 0x28
 80090b0:	f7ff fed4 	bl	8008e5c <__cvt>
 80090b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80090b6:	4680      	mov	r8, r0
 80090b8:	2947      	cmp	r1, #71	@ 0x47
 80090ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80090bc:	d128      	bne.n	8009110 <_printf_float+0x178>
 80090be:	1cc8      	adds	r0, r1, #3
 80090c0:	db02      	blt.n	80090c8 <_printf_float+0x130>
 80090c2:	6863      	ldr	r3, [r4, #4]
 80090c4:	4299      	cmp	r1, r3
 80090c6:	dd40      	ble.n	800914a <_printf_float+0x1b2>
 80090c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80090cc:	fa5f fa8a 	uxtb.w	sl, sl
 80090d0:	4652      	mov	r2, sl
 80090d2:	3901      	subs	r1, #1
 80090d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80090d8:	910d      	str	r1, [sp, #52]	@ 0x34
 80090da:	f7ff ff23 	bl	8008f24 <__exponent>
 80090de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090e0:	4681      	mov	r9, r0
 80090e2:	1813      	adds	r3, r2, r0
 80090e4:	2a01      	cmp	r2, #1
 80090e6:	6123      	str	r3, [r4, #16]
 80090e8:	dc02      	bgt.n	80090f0 <_printf_float+0x158>
 80090ea:	6822      	ldr	r2, [r4, #0]
 80090ec:	07d2      	lsls	r2, r2, #31
 80090ee:	d501      	bpl.n	80090f4 <_printf_float+0x15c>
 80090f0:	3301      	adds	r3, #1
 80090f2:	6123      	str	r3, [r4, #16]
 80090f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d09e      	beq.n	800903a <_printf_float+0xa2>
 80090fc:	232d      	movs	r3, #45	@ 0x2d
 80090fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009102:	e79a      	b.n	800903a <_printf_float+0xa2>
 8009104:	2947      	cmp	r1, #71	@ 0x47
 8009106:	d1bf      	bne.n	8009088 <_printf_float+0xf0>
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1bd      	bne.n	8009088 <_printf_float+0xf0>
 800910c:	2301      	movs	r3, #1
 800910e:	e7ba      	b.n	8009086 <_printf_float+0xee>
 8009110:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009114:	d9dc      	bls.n	80090d0 <_printf_float+0x138>
 8009116:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800911a:	d118      	bne.n	800914e <_printf_float+0x1b6>
 800911c:	2900      	cmp	r1, #0
 800911e:	6863      	ldr	r3, [r4, #4]
 8009120:	dd0b      	ble.n	800913a <_printf_float+0x1a2>
 8009122:	6121      	str	r1, [r4, #16]
 8009124:	b913      	cbnz	r3, 800912c <_printf_float+0x194>
 8009126:	6822      	ldr	r2, [r4, #0]
 8009128:	07d0      	lsls	r0, r2, #31
 800912a:	d502      	bpl.n	8009132 <_printf_float+0x19a>
 800912c:	3301      	adds	r3, #1
 800912e:	440b      	add	r3, r1
 8009130:	6123      	str	r3, [r4, #16]
 8009132:	f04f 0900 	mov.w	r9, #0
 8009136:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009138:	e7dc      	b.n	80090f4 <_printf_float+0x15c>
 800913a:	b913      	cbnz	r3, 8009142 <_printf_float+0x1aa>
 800913c:	6822      	ldr	r2, [r4, #0]
 800913e:	07d2      	lsls	r2, r2, #31
 8009140:	d501      	bpl.n	8009146 <_printf_float+0x1ae>
 8009142:	3302      	adds	r3, #2
 8009144:	e7f4      	b.n	8009130 <_printf_float+0x198>
 8009146:	2301      	movs	r3, #1
 8009148:	e7f2      	b.n	8009130 <_printf_float+0x198>
 800914a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800914e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009150:	4299      	cmp	r1, r3
 8009152:	db05      	blt.n	8009160 <_printf_float+0x1c8>
 8009154:	6823      	ldr	r3, [r4, #0]
 8009156:	6121      	str	r1, [r4, #16]
 8009158:	07d8      	lsls	r0, r3, #31
 800915a:	d5ea      	bpl.n	8009132 <_printf_float+0x19a>
 800915c:	1c4b      	adds	r3, r1, #1
 800915e:	e7e7      	b.n	8009130 <_printf_float+0x198>
 8009160:	2900      	cmp	r1, #0
 8009162:	bfcc      	ite	gt
 8009164:	2201      	movgt	r2, #1
 8009166:	f1c1 0202 	rsble	r2, r1, #2
 800916a:	4413      	add	r3, r2
 800916c:	e7e0      	b.n	8009130 <_printf_float+0x198>
 800916e:	6823      	ldr	r3, [r4, #0]
 8009170:	055a      	lsls	r2, r3, #21
 8009172:	d407      	bmi.n	8009184 <_printf_float+0x1ec>
 8009174:	6923      	ldr	r3, [r4, #16]
 8009176:	4642      	mov	r2, r8
 8009178:	4631      	mov	r1, r6
 800917a:	4628      	mov	r0, r5
 800917c:	47b8      	blx	r7
 800917e:	3001      	adds	r0, #1
 8009180:	d12b      	bne.n	80091da <_printf_float+0x242>
 8009182:	e764      	b.n	800904e <_printf_float+0xb6>
 8009184:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009188:	f240 80dc 	bls.w	8009344 <_printf_float+0x3ac>
 800918c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009190:	2200      	movs	r2, #0
 8009192:	2300      	movs	r3, #0
 8009194:	f7f7 fc08 	bl	80009a8 <__aeabi_dcmpeq>
 8009198:	2800      	cmp	r0, #0
 800919a:	d033      	beq.n	8009204 <_printf_float+0x26c>
 800919c:	2301      	movs	r3, #1
 800919e:	4631      	mov	r1, r6
 80091a0:	4628      	mov	r0, r5
 80091a2:	4a35      	ldr	r2, [pc, #212]	@ (8009278 <_printf_float+0x2e0>)
 80091a4:	47b8      	blx	r7
 80091a6:	3001      	adds	r0, #1
 80091a8:	f43f af51 	beq.w	800904e <_printf_float+0xb6>
 80091ac:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80091b0:	4543      	cmp	r3, r8
 80091b2:	db02      	blt.n	80091ba <_printf_float+0x222>
 80091b4:	6823      	ldr	r3, [r4, #0]
 80091b6:	07d8      	lsls	r0, r3, #31
 80091b8:	d50f      	bpl.n	80091da <_printf_float+0x242>
 80091ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80091be:	4631      	mov	r1, r6
 80091c0:	4628      	mov	r0, r5
 80091c2:	47b8      	blx	r7
 80091c4:	3001      	adds	r0, #1
 80091c6:	f43f af42 	beq.w	800904e <_printf_float+0xb6>
 80091ca:	f04f 0900 	mov.w	r9, #0
 80091ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80091d2:	f104 0a1a 	add.w	sl, r4, #26
 80091d6:	45c8      	cmp	r8, r9
 80091d8:	dc09      	bgt.n	80091ee <_printf_float+0x256>
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	079b      	lsls	r3, r3, #30
 80091de:	f100 8102 	bmi.w	80093e6 <_printf_float+0x44e>
 80091e2:	68e0      	ldr	r0, [r4, #12]
 80091e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091e6:	4298      	cmp	r0, r3
 80091e8:	bfb8      	it	lt
 80091ea:	4618      	movlt	r0, r3
 80091ec:	e731      	b.n	8009052 <_printf_float+0xba>
 80091ee:	2301      	movs	r3, #1
 80091f0:	4652      	mov	r2, sl
 80091f2:	4631      	mov	r1, r6
 80091f4:	4628      	mov	r0, r5
 80091f6:	47b8      	blx	r7
 80091f8:	3001      	adds	r0, #1
 80091fa:	f43f af28 	beq.w	800904e <_printf_float+0xb6>
 80091fe:	f109 0901 	add.w	r9, r9, #1
 8009202:	e7e8      	b.n	80091d6 <_printf_float+0x23e>
 8009204:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009206:	2b00      	cmp	r3, #0
 8009208:	dc38      	bgt.n	800927c <_printf_float+0x2e4>
 800920a:	2301      	movs	r3, #1
 800920c:	4631      	mov	r1, r6
 800920e:	4628      	mov	r0, r5
 8009210:	4a19      	ldr	r2, [pc, #100]	@ (8009278 <_printf_float+0x2e0>)
 8009212:	47b8      	blx	r7
 8009214:	3001      	adds	r0, #1
 8009216:	f43f af1a 	beq.w	800904e <_printf_float+0xb6>
 800921a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800921e:	ea59 0303 	orrs.w	r3, r9, r3
 8009222:	d102      	bne.n	800922a <_printf_float+0x292>
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	07d9      	lsls	r1, r3, #31
 8009228:	d5d7      	bpl.n	80091da <_printf_float+0x242>
 800922a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800922e:	4631      	mov	r1, r6
 8009230:	4628      	mov	r0, r5
 8009232:	47b8      	blx	r7
 8009234:	3001      	adds	r0, #1
 8009236:	f43f af0a 	beq.w	800904e <_printf_float+0xb6>
 800923a:	f04f 0a00 	mov.w	sl, #0
 800923e:	f104 0b1a 	add.w	fp, r4, #26
 8009242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009244:	425b      	negs	r3, r3
 8009246:	4553      	cmp	r3, sl
 8009248:	dc01      	bgt.n	800924e <_printf_float+0x2b6>
 800924a:	464b      	mov	r3, r9
 800924c:	e793      	b.n	8009176 <_printf_float+0x1de>
 800924e:	2301      	movs	r3, #1
 8009250:	465a      	mov	r2, fp
 8009252:	4631      	mov	r1, r6
 8009254:	4628      	mov	r0, r5
 8009256:	47b8      	blx	r7
 8009258:	3001      	adds	r0, #1
 800925a:	f43f aef8 	beq.w	800904e <_printf_float+0xb6>
 800925e:	f10a 0a01 	add.w	sl, sl, #1
 8009262:	e7ee      	b.n	8009242 <_printf_float+0x2aa>
 8009264:	7fefffff 	.word	0x7fefffff
 8009268:	0800bbea 	.word	0x0800bbea
 800926c:	0800bbee 	.word	0x0800bbee
 8009270:	0800bbf2 	.word	0x0800bbf2
 8009274:	0800bbf6 	.word	0x0800bbf6
 8009278:	0800bbfa 	.word	0x0800bbfa
 800927c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800927e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009282:	4553      	cmp	r3, sl
 8009284:	bfa8      	it	ge
 8009286:	4653      	movge	r3, sl
 8009288:	2b00      	cmp	r3, #0
 800928a:	4699      	mov	r9, r3
 800928c:	dc36      	bgt.n	80092fc <_printf_float+0x364>
 800928e:	f04f 0b00 	mov.w	fp, #0
 8009292:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009296:	f104 021a 	add.w	r2, r4, #26
 800929a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800929c:	930a      	str	r3, [sp, #40]	@ 0x28
 800929e:	eba3 0309 	sub.w	r3, r3, r9
 80092a2:	455b      	cmp	r3, fp
 80092a4:	dc31      	bgt.n	800930a <_printf_float+0x372>
 80092a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092a8:	459a      	cmp	sl, r3
 80092aa:	dc3a      	bgt.n	8009322 <_printf_float+0x38a>
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	07da      	lsls	r2, r3, #31
 80092b0:	d437      	bmi.n	8009322 <_printf_float+0x38a>
 80092b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092b4:	ebaa 0903 	sub.w	r9, sl, r3
 80092b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092ba:	ebaa 0303 	sub.w	r3, sl, r3
 80092be:	4599      	cmp	r9, r3
 80092c0:	bfa8      	it	ge
 80092c2:	4699      	movge	r9, r3
 80092c4:	f1b9 0f00 	cmp.w	r9, #0
 80092c8:	dc33      	bgt.n	8009332 <_printf_float+0x39a>
 80092ca:	f04f 0800 	mov.w	r8, #0
 80092ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092d2:	f104 0b1a 	add.w	fp, r4, #26
 80092d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80092d8:	ebaa 0303 	sub.w	r3, sl, r3
 80092dc:	eba3 0309 	sub.w	r3, r3, r9
 80092e0:	4543      	cmp	r3, r8
 80092e2:	f77f af7a 	ble.w	80091da <_printf_float+0x242>
 80092e6:	2301      	movs	r3, #1
 80092e8:	465a      	mov	r2, fp
 80092ea:	4631      	mov	r1, r6
 80092ec:	4628      	mov	r0, r5
 80092ee:	47b8      	blx	r7
 80092f0:	3001      	adds	r0, #1
 80092f2:	f43f aeac 	beq.w	800904e <_printf_float+0xb6>
 80092f6:	f108 0801 	add.w	r8, r8, #1
 80092fa:	e7ec      	b.n	80092d6 <_printf_float+0x33e>
 80092fc:	4642      	mov	r2, r8
 80092fe:	4631      	mov	r1, r6
 8009300:	4628      	mov	r0, r5
 8009302:	47b8      	blx	r7
 8009304:	3001      	adds	r0, #1
 8009306:	d1c2      	bne.n	800928e <_printf_float+0x2f6>
 8009308:	e6a1      	b.n	800904e <_printf_float+0xb6>
 800930a:	2301      	movs	r3, #1
 800930c:	4631      	mov	r1, r6
 800930e:	4628      	mov	r0, r5
 8009310:	920a      	str	r2, [sp, #40]	@ 0x28
 8009312:	47b8      	blx	r7
 8009314:	3001      	adds	r0, #1
 8009316:	f43f ae9a 	beq.w	800904e <_printf_float+0xb6>
 800931a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800931c:	f10b 0b01 	add.w	fp, fp, #1
 8009320:	e7bb      	b.n	800929a <_printf_float+0x302>
 8009322:	4631      	mov	r1, r6
 8009324:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009328:	4628      	mov	r0, r5
 800932a:	47b8      	blx	r7
 800932c:	3001      	adds	r0, #1
 800932e:	d1c0      	bne.n	80092b2 <_printf_float+0x31a>
 8009330:	e68d      	b.n	800904e <_printf_float+0xb6>
 8009332:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009334:	464b      	mov	r3, r9
 8009336:	4631      	mov	r1, r6
 8009338:	4628      	mov	r0, r5
 800933a:	4442      	add	r2, r8
 800933c:	47b8      	blx	r7
 800933e:	3001      	adds	r0, #1
 8009340:	d1c3      	bne.n	80092ca <_printf_float+0x332>
 8009342:	e684      	b.n	800904e <_printf_float+0xb6>
 8009344:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009348:	f1ba 0f01 	cmp.w	sl, #1
 800934c:	dc01      	bgt.n	8009352 <_printf_float+0x3ba>
 800934e:	07db      	lsls	r3, r3, #31
 8009350:	d536      	bpl.n	80093c0 <_printf_float+0x428>
 8009352:	2301      	movs	r3, #1
 8009354:	4642      	mov	r2, r8
 8009356:	4631      	mov	r1, r6
 8009358:	4628      	mov	r0, r5
 800935a:	47b8      	blx	r7
 800935c:	3001      	adds	r0, #1
 800935e:	f43f ae76 	beq.w	800904e <_printf_float+0xb6>
 8009362:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009366:	4631      	mov	r1, r6
 8009368:	4628      	mov	r0, r5
 800936a:	47b8      	blx	r7
 800936c:	3001      	adds	r0, #1
 800936e:	f43f ae6e 	beq.w	800904e <_printf_float+0xb6>
 8009372:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009376:	2200      	movs	r2, #0
 8009378:	2300      	movs	r3, #0
 800937a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800937e:	f7f7 fb13 	bl	80009a8 <__aeabi_dcmpeq>
 8009382:	b9c0      	cbnz	r0, 80093b6 <_printf_float+0x41e>
 8009384:	4653      	mov	r3, sl
 8009386:	f108 0201 	add.w	r2, r8, #1
 800938a:	4631      	mov	r1, r6
 800938c:	4628      	mov	r0, r5
 800938e:	47b8      	blx	r7
 8009390:	3001      	adds	r0, #1
 8009392:	d10c      	bne.n	80093ae <_printf_float+0x416>
 8009394:	e65b      	b.n	800904e <_printf_float+0xb6>
 8009396:	2301      	movs	r3, #1
 8009398:	465a      	mov	r2, fp
 800939a:	4631      	mov	r1, r6
 800939c:	4628      	mov	r0, r5
 800939e:	47b8      	blx	r7
 80093a0:	3001      	adds	r0, #1
 80093a2:	f43f ae54 	beq.w	800904e <_printf_float+0xb6>
 80093a6:	f108 0801 	add.w	r8, r8, #1
 80093aa:	45d0      	cmp	r8, sl
 80093ac:	dbf3      	blt.n	8009396 <_printf_float+0x3fe>
 80093ae:	464b      	mov	r3, r9
 80093b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80093b4:	e6e0      	b.n	8009178 <_printf_float+0x1e0>
 80093b6:	f04f 0800 	mov.w	r8, #0
 80093ba:	f104 0b1a 	add.w	fp, r4, #26
 80093be:	e7f4      	b.n	80093aa <_printf_float+0x412>
 80093c0:	2301      	movs	r3, #1
 80093c2:	4642      	mov	r2, r8
 80093c4:	e7e1      	b.n	800938a <_printf_float+0x3f2>
 80093c6:	2301      	movs	r3, #1
 80093c8:	464a      	mov	r2, r9
 80093ca:	4631      	mov	r1, r6
 80093cc:	4628      	mov	r0, r5
 80093ce:	47b8      	blx	r7
 80093d0:	3001      	adds	r0, #1
 80093d2:	f43f ae3c 	beq.w	800904e <_printf_float+0xb6>
 80093d6:	f108 0801 	add.w	r8, r8, #1
 80093da:	68e3      	ldr	r3, [r4, #12]
 80093dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80093de:	1a5b      	subs	r3, r3, r1
 80093e0:	4543      	cmp	r3, r8
 80093e2:	dcf0      	bgt.n	80093c6 <_printf_float+0x42e>
 80093e4:	e6fd      	b.n	80091e2 <_printf_float+0x24a>
 80093e6:	f04f 0800 	mov.w	r8, #0
 80093ea:	f104 0919 	add.w	r9, r4, #25
 80093ee:	e7f4      	b.n	80093da <_printf_float+0x442>

080093f0 <_printf_common>:
 80093f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093f4:	4616      	mov	r6, r2
 80093f6:	4698      	mov	r8, r3
 80093f8:	688a      	ldr	r2, [r1, #8]
 80093fa:	690b      	ldr	r3, [r1, #16]
 80093fc:	4607      	mov	r7, r0
 80093fe:	4293      	cmp	r3, r2
 8009400:	bfb8      	it	lt
 8009402:	4613      	movlt	r3, r2
 8009404:	6033      	str	r3, [r6, #0]
 8009406:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800940a:	460c      	mov	r4, r1
 800940c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009410:	b10a      	cbz	r2, 8009416 <_printf_common+0x26>
 8009412:	3301      	adds	r3, #1
 8009414:	6033      	str	r3, [r6, #0]
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	0699      	lsls	r1, r3, #26
 800941a:	bf42      	ittt	mi
 800941c:	6833      	ldrmi	r3, [r6, #0]
 800941e:	3302      	addmi	r3, #2
 8009420:	6033      	strmi	r3, [r6, #0]
 8009422:	6825      	ldr	r5, [r4, #0]
 8009424:	f015 0506 	ands.w	r5, r5, #6
 8009428:	d106      	bne.n	8009438 <_printf_common+0x48>
 800942a:	f104 0a19 	add.w	sl, r4, #25
 800942e:	68e3      	ldr	r3, [r4, #12]
 8009430:	6832      	ldr	r2, [r6, #0]
 8009432:	1a9b      	subs	r3, r3, r2
 8009434:	42ab      	cmp	r3, r5
 8009436:	dc2b      	bgt.n	8009490 <_printf_common+0xa0>
 8009438:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800943c:	6822      	ldr	r2, [r4, #0]
 800943e:	3b00      	subs	r3, #0
 8009440:	bf18      	it	ne
 8009442:	2301      	movne	r3, #1
 8009444:	0692      	lsls	r2, r2, #26
 8009446:	d430      	bmi.n	80094aa <_printf_common+0xba>
 8009448:	4641      	mov	r1, r8
 800944a:	4638      	mov	r0, r7
 800944c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009450:	47c8      	blx	r9
 8009452:	3001      	adds	r0, #1
 8009454:	d023      	beq.n	800949e <_printf_common+0xae>
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	6922      	ldr	r2, [r4, #16]
 800945a:	f003 0306 	and.w	r3, r3, #6
 800945e:	2b04      	cmp	r3, #4
 8009460:	bf14      	ite	ne
 8009462:	2500      	movne	r5, #0
 8009464:	6833      	ldreq	r3, [r6, #0]
 8009466:	f04f 0600 	mov.w	r6, #0
 800946a:	bf08      	it	eq
 800946c:	68e5      	ldreq	r5, [r4, #12]
 800946e:	f104 041a 	add.w	r4, r4, #26
 8009472:	bf08      	it	eq
 8009474:	1aed      	subeq	r5, r5, r3
 8009476:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800947a:	bf08      	it	eq
 800947c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009480:	4293      	cmp	r3, r2
 8009482:	bfc4      	itt	gt
 8009484:	1a9b      	subgt	r3, r3, r2
 8009486:	18ed      	addgt	r5, r5, r3
 8009488:	42b5      	cmp	r5, r6
 800948a:	d11a      	bne.n	80094c2 <_printf_common+0xd2>
 800948c:	2000      	movs	r0, #0
 800948e:	e008      	b.n	80094a2 <_printf_common+0xb2>
 8009490:	2301      	movs	r3, #1
 8009492:	4652      	mov	r2, sl
 8009494:	4641      	mov	r1, r8
 8009496:	4638      	mov	r0, r7
 8009498:	47c8      	blx	r9
 800949a:	3001      	adds	r0, #1
 800949c:	d103      	bne.n	80094a6 <_printf_common+0xb6>
 800949e:	f04f 30ff 	mov.w	r0, #4294967295
 80094a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094a6:	3501      	adds	r5, #1
 80094a8:	e7c1      	b.n	800942e <_printf_common+0x3e>
 80094aa:	2030      	movs	r0, #48	@ 0x30
 80094ac:	18e1      	adds	r1, r4, r3
 80094ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80094b2:	1c5a      	adds	r2, r3, #1
 80094b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80094b8:	4422      	add	r2, r4
 80094ba:	3302      	adds	r3, #2
 80094bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80094c0:	e7c2      	b.n	8009448 <_printf_common+0x58>
 80094c2:	2301      	movs	r3, #1
 80094c4:	4622      	mov	r2, r4
 80094c6:	4641      	mov	r1, r8
 80094c8:	4638      	mov	r0, r7
 80094ca:	47c8      	blx	r9
 80094cc:	3001      	adds	r0, #1
 80094ce:	d0e6      	beq.n	800949e <_printf_common+0xae>
 80094d0:	3601      	adds	r6, #1
 80094d2:	e7d9      	b.n	8009488 <_printf_common+0x98>

080094d4 <_printf_i>:
 80094d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094d8:	7e0f      	ldrb	r7, [r1, #24]
 80094da:	4691      	mov	r9, r2
 80094dc:	2f78      	cmp	r7, #120	@ 0x78
 80094de:	4680      	mov	r8, r0
 80094e0:	460c      	mov	r4, r1
 80094e2:	469a      	mov	sl, r3
 80094e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80094e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80094ea:	d807      	bhi.n	80094fc <_printf_i+0x28>
 80094ec:	2f62      	cmp	r7, #98	@ 0x62
 80094ee:	d80a      	bhi.n	8009506 <_printf_i+0x32>
 80094f0:	2f00      	cmp	r7, #0
 80094f2:	f000 80d3 	beq.w	800969c <_printf_i+0x1c8>
 80094f6:	2f58      	cmp	r7, #88	@ 0x58
 80094f8:	f000 80ba 	beq.w	8009670 <_printf_i+0x19c>
 80094fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009500:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009504:	e03a      	b.n	800957c <_printf_i+0xa8>
 8009506:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800950a:	2b15      	cmp	r3, #21
 800950c:	d8f6      	bhi.n	80094fc <_printf_i+0x28>
 800950e:	a101      	add	r1, pc, #4	@ (adr r1, 8009514 <_printf_i+0x40>)
 8009510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009514:	0800956d 	.word	0x0800956d
 8009518:	08009581 	.word	0x08009581
 800951c:	080094fd 	.word	0x080094fd
 8009520:	080094fd 	.word	0x080094fd
 8009524:	080094fd 	.word	0x080094fd
 8009528:	080094fd 	.word	0x080094fd
 800952c:	08009581 	.word	0x08009581
 8009530:	080094fd 	.word	0x080094fd
 8009534:	080094fd 	.word	0x080094fd
 8009538:	080094fd 	.word	0x080094fd
 800953c:	080094fd 	.word	0x080094fd
 8009540:	08009683 	.word	0x08009683
 8009544:	080095ab 	.word	0x080095ab
 8009548:	0800963d 	.word	0x0800963d
 800954c:	080094fd 	.word	0x080094fd
 8009550:	080094fd 	.word	0x080094fd
 8009554:	080096a5 	.word	0x080096a5
 8009558:	080094fd 	.word	0x080094fd
 800955c:	080095ab 	.word	0x080095ab
 8009560:	080094fd 	.word	0x080094fd
 8009564:	080094fd 	.word	0x080094fd
 8009568:	08009645 	.word	0x08009645
 800956c:	6833      	ldr	r3, [r6, #0]
 800956e:	1d1a      	adds	r2, r3, #4
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	6032      	str	r2, [r6, #0]
 8009574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009578:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800957c:	2301      	movs	r3, #1
 800957e:	e09e      	b.n	80096be <_printf_i+0x1ea>
 8009580:	6833      	ldr	r3, [r6, #0]
 8009582:	6820      	ldr	r0, [r4, #0]
 8009584:	1d19      	adds	r1, r3, #4
 8009586:	6031      	str	r1, [r6, #0]
 8009588:	0606      	lsls	r6, r0, #24
 800958a:	d501      	bpl.n	8009590 <_printf_i+0xbc>
 800958c:	681d      	ldr	r5, [r3, #0]
 800958e:	e003      	b.n	8009598 <_printf_i+0xc4>
 8009590:	0645      	lsls	r5, r0, #25
 8009592:	d5fb      	bpl.n	800958c <_printf_i+0xb8>
 8009594:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009598:	2d00      	cmp	r5, #0
 800959a:	da03      	bge.n	80095a4 <_printf_i+0xd0>
 800959c:	232d      	movs	r3, #45	@ 0x2d
 800959e:	426d      	negs	r5, r5
 80095a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095a4:	230a      	movs	r3, #10
 80095a6:	4859      	ldr	r0, [pc, #356]	@ (800970c <_printf_i+0x238>)
 80095a8:	e011      	b.n	80095ce <_printf_i+0xfa>
 80095aa:	6821      	ldr	r1, [r4, #0]
 80095ac:	6833      	ldr	r3, [r6, #0]
 80095ae:	0608      	lsls	r0, r1, #24
 80095b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80095b4:	d402      	bmi.n	80095bc <_printf_i+0xe8>
 80095b6:	0649      	lsls	r1, r1, #25
 80095b8:	bf48      	it	mi
 80095ba:	b2ad      	uxthmi	r5, r5
 80095bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80095be:	6033      	str	r3, [r6, #0]
 80095c0:	bf14      	ite	ne
 80095c2:	230a      	movne	r3, #10
 80095c4:	2308      	moveq	r3, #8
 80095c6:	4851      	ldr	r0, [pc, #324]	@ (800970c <_printf_i+0x238>)
 80095c8:	2100      	movs	r1, #0
 80095ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80095ce:	6866      	ldr	r6, [r4, #4]
 80095d0:	2e00      	cmp	r6, #0
 80095d2:	bfa8      	it	ge
 80095d4:	6821      	ldrge	r1, [r4, #0]
 80095d6:	60a6      	str	r6, [r4, #8]
 80095d8:	bfa4      	itt	ge
 80095da:	f021 0104 	bicge.w	r1, r1, #4
 80095de:	6021      	strge	r1, [r4, #0]
 80095e0:	b90d      	cbnz	r5, 80095e6 <_printf_i+0x112>
 80095e2:	2e00      	cmp	r6, #0
 80095e4:	d04b      	beq.n	800967e <_printf_i+0x1aa>
 80095e6:	4616      	mov	r6, r2
 80095e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80095ec:	fb03 5711 	mls	r7, r3, r1, r5
 80095f0:	5dc7      	ldrb	r7, [r0, r7]
 80095f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80095f6:	462f      	mov	r7, r5
 80095f8:	42bb      	cmp	r3, r7
 80095fa:	460d      	mov	r5, r1
 80095fc:	d9f4      	bls.n	80095e8 <_printf_i+0x114>
 80095fe:	2b08      	cmp	r3, #8
 8009600:	d10b      	bne.n	800961a <_printf_i+0x146>
 8009602:	6823      	ldr	r3, [r4, #0]
 8009604:	07df      	lsls	r7, r3, #31
 8009606:	d508      	bpl.n	800961a <_printf_i+0x146>
 8009608:	6923      	ldr	r3, [r4, #16]
 800960a:	6861      	ldr	r1, [r4, #4]
 800960c:	4299      	cmp	r1, r3
 800960e:	bfde      	ittt	le
 8009610:	2330      	movle	r3, #48	@ 0x30
 8009612:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009616:	f106 36ff 	addle.w	r6, r6, #4294967295
 800961a:	1b92      	subs	r2, r2, r6
 800961c:	6122      	str	r2, [r4, #16]
 800961e:	464b      	mov	r3, r9
 8009620:	4621      	mov	r1, r4
 8009622:	4640      	mov	r0, r8
 8009624:	f8cd a000 	str.w	sl, [sp]
 8009628:	aa03      	add	r2, sp, #12
 800962a:	f7ff fee1 	bl	80093f0 <_printf_common>
 800962e:	3001      	adds	r0, #1
 8009630:	d14a      	bne.n	80096c8 <_printf_i+0x1f4>
 8009632:	f04f 30ff 	mov.w	r0, #4294967295
 8009636:	b004      	add	sp, #16
 8009638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800963c:	6823      	ldr	r3, [r4, #0]
 800963e:	f043 0320 	orr.w	r3, r3, #32
 8009642:	6023      	str	r3, [r4, #0]
 8009644:	2778      	movs	r7, #120	@ 0x78
 8009646:	4832      	ldr	r0, [pc, #200]	@ (8009710 <_printf_i+0x23c>)
 8009648:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800964c:	6823      	ldr	r3, [r4, #0]
 800964e:	6831      	ldr	r1, [r6, #0]
 8009650:	061f      	lsls	r7, r3, #24
 8009652:	f851 5b04 	ldr.w	r5, [r1], #4
 8009656:	d402      	bmi.n	800965e <_printf_i+0x18a>
 8009658:	065f      	lsls	r7, r3, #25
 800965a:	bf48      	it	mi
 800965c:	b2ad      	uxthmi	r5, r5
 800965e:	6031      	str	r1, [r6, #0]
 8009660:	07d9      	lsls	r1, r3, #31
 8009662:	bf44      	itt	mi
 8009664:	f043 0320 	orrmi.w	r3, r3, #32
 8009668:	6023      	strmi	r3, [r4, #0]
 800966a:	b11d      	cbz	r5, 8009674 <_printf_i+0x1a0>
 800966c:	2310      	movs	r3, #16
 800966e:	e7ab      	b.n	80095c8 <_printf_i+0xf4>
 8009670:	4826      	ldr	r0, [pc, #152]	@ (800970c <_printf_i+0x238>)
 8009672:	e7e9      	b.n	8009648 <_printf_i+0x174>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	f023 0320 	bic.w	r3, r3, #32
 800967a:	6023      	str	r3, [r4, #0]
 800967c:	e7f6      	b.n	800966c <_printf_i+0x198>
 800967e:	4616      	mov	r6, r2
 8009680:	e7bd      	b.n	80095fe <_printf_i+0x12a>
 8009682:	6833      	ldr	r3, [r6, #0]
 8009684:	6825      	ldr	r5, [r4, #0]
 8009686:	1d18      	adds	r0, r3, #4
 8009688:	6961      	ldr	r1, [r4, #20]
 800968a:	6030      	str	r0, [r6, #0]
 800968c:	062e      	lsls	r6, r5, #24
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	d501      	bpl.n	8009696 <_printf_i+0x1c2>
 8009692:	6019      	str	r1, [r3, #0]
 8009694:	e002      	b.n	800969c <_printf_i+0x1c8>
 8009696:	0668      	lsls	r0, r5, #25
 8009698:	d5fb      	bpl.n	8009692 <_printf_i+0x1be>
 800969a:	8019      	strh	r1, [r3, #0]
 800969c:	2300      	movs	r3, #0
 800969e:	4616      	mov	r6, r2
 80096a0:	6123      	str	r3, [r4, #16]
 80096a2:	e7bc      	b.n	800961e <_printf_i+0x14a>
 80096a4:	6833      	ldr	r3, [r6, #0]
 80096a6:	2100      	movs	r1, #0
 80096a8:	1d1a      	adds	r2, r3, #4
 80096aa:	6032      	str	r2, [r6, #0]
 80096ac:	681e      	ldr	r6, [r3, #0]
 80096ae:	6862      	ldr	r2, [r4, #4]
 80096b0:	4630      	mov	r0, r6
 80096b2:	f000 f9d4 	bl	8009a5e <memchr>
 80096b6:	b108      	cbz	r0, 80096bc <_printf_i+0x1e8>
 80096b8:	1b80      	subs	r0, r0, r6
 80096ba:	6060      	str	r0, [r4, #4]
 80096bc:	6863      	ldr	r3, [r4, #4]
 80096be:	6123      	str	r3, [r4, #16]
 80096c0:	2300      	movs	r3, #0
 80096c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096c6:	e7aa      	b.n	800961e <_printf_i+0x14a>
 80096c8:	4632      	mov	r2, r6
 80096ca:	4649      	mov	r1, r9
 80096cc:	4640      	mov	r0, r8
 80096ce:	6923      	ldr	r3, [r4, #16]
 80096d0:	47d0      	blx	sl
 80096d2:	3001      	adds	r0, #1
 80096d4:	d0ad      	beq.n	8009632 <_printf_i+0x15e>
 80096d6:	6823      	ldr	r3, [r4, #0]
 80096d8:	079b      	lsls	r3, r3, #30
 80096da:	d413      	bmi.n	8009704 <_printf_i+0x230>
 80096dc:	68e0      	ldr	r0, [r4, #12]
 80096de:	9b03      	ldr	r3, [sp, #12]
 80096e0:	4298      	cmp	r0, r3
 80096e2:	bfb8      	it	lt
 80096e4:	4618      	movlt	r0, r3
 80096e6:	e7a6      	b.n	8009636 <_printf_i+0x162>
 80096e8:	2301      	movs	r3, #1
 80096ea:	4632      	mov	r2, r6
 80096ec:	4649      	mov	r1, r9
 80096ee:	4640      	mov	r0, r8
 80096f0:	47d0      	blx	sl
 80096f2:	3001      	adds	r0, #1
 80096f4:	d09d      	beq.n	8009632 <_printf_i+0x15e>
 80096f6:	3501      	adds	r5, #1
 80096f8:	68e3      	ldr	r3, [r4, #12]
 80096fa:	9903      	ldr	r1, [sp, #12]
 80096fc:	1a5b      	subs	r3, r3, r1
 80096fe:	42ab      	cmp	r3, r5
 8009700:	dcf2      	bgt.n	80096e8 <_printf_i+0x214>
 8009702:	e7eb      	b.n	80096dc <_printf_i+0x208>
 8009704:	2500      	movs	r5, #0
 8009706:	f104 0619 	add.w	r6, r4, #25
 800970a:	e7f5      	b.n	80096f8 <_printf_i+0x224>
 800970c:	0800bbfc 	.word	0x0800bbfc
 8009710:	0800bc0d 	.word	0x0800bc0d

08009714 <std>:
 8009714:	2300      	movs	r3, #0
 8009716:	b510      	push	{r4, lr}
 8009718:	4604      	mov	r4, r0
 800971a:	e9c0 3300 	strd	r3, r3, [r0]
 800971e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009722:	6083      	str	r3, [r0, #8]
 8009724:	8181      	strh	r1, [r0, #12]
 8009726:	6643      	str	r3, [r0, #100]	@ 0x64
 8009728:	81c2      	strh	r2, [r0, #14]
 800972a:	6183      	str	r3, [r0, #24]
 800972c:	4619      	mov	r1, r3
 800972e:	2208      	movs	r2, #8
 8009730:	305c      	adds	r0, #92	@ 0x5c
 8009732:	f000 f914 	bl	800995e <memset>
 8009736:	4b0d      	ldr	r3, [pc, #52]	@ (800976c <std+0x58>)
 8009738:	6224      	str	r4, [r4, #32]
 800973a:	6263      	str	r3, [r4, #36]	@ 0x24
 800973c:	4b0c      	ldr	r3, [pc, #48]	@ (8009770 <std+0x5c>)
 800973e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009740:	4b0c      	ldr	r3, [pc, #48]	@ (8009774 <std+0x60>)
 8009742:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009744:	4b0c      	ldr	r3, [pc, #48]	@ (8009778 <std+0x64>)
 8009746:	6323      	str	r3, [r4, #48]	@ 0x30
 8009748:	4b0c      	ldr	r3, [pc, #48]	@ (800977c <std+0x68>)
 800974a:	429c      	cmp	r4, r3
 800974c:	d006      	beq.n	800975c <std+0x48>
 800974e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009752:	4294      	cmp	r4, r2
 8009754:	d002      	beq.n	800975c <std+0x48>
 8009756:	33d0      	adds	r3, #208	@ 0xd0
 8009758:	429c      	cmp	r4, r3
 800975a:	d105      	bne.n	8009768 <std+0x54>
 800975c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009764:	f000 b978 	b.w	8009a58 <__retarget_lock_init_recursive>
 8009768:	bd10      	pop	{r4, pc}
 800976a:	bf00      	nop
 800976c:	080098d9 	.word	0x080098d9
 8009770:	080098fb 	.word	0x080098fb
 8009774:	08009933 	.word	0x08009933
 8009778:	08009957 	.word	0x08009957
 800977c:	200016a8 	.word	0x200016a8

08009780 <stdio_exit_handler>:
 8009780:	4a02      	ldr	r2, [pc, #8]	@ (800978c <stdio_exit_handler+0xc>)
 8009782:	4903      	ldr	r1, [pc, #12]	@ (8009790 <stdio_exit_handler+0x10>)
 8009784:	4803      	ldr	r0, [pc, #12]	@ (8009794 <stdio_exit_handler+0x14>)
 8009786:	f000 b869 	b.w	800985c <_fwalk_sglue>
 800978a:	bf00      	nop
 800978c:	20000190 	.word	0x20000190
 8009790:	0800b3cd 	.word	0x0800b3cd
 8009794:	200001a0 	.word	0x200001a0

08009798 <cleanup_stdio>:
 8009798:	6841      	ldr	r1, [r0, #4]
 800979a:	4b0c      	ldr	r3, [pc, #48]	@ (80097cc <cleanup_stdio+0x34>)
 800979c:	b510      	push	{r4, lr}
 800979e:	4299      	cmp	r1, r3
 80097a0:	4604      	mov	r4, r0
 80097a2:	d001      	beq.n	80097a8 <cleanup_stdio+0x10>
 80097a4:	f001 fe12 	bl	800b3cc <_fflush_r>
 80097a8:	68a1      	ldr	r1, [r4, #8]
 80097aa:	4b09      	ldr	r3, [pc, #36]	@ (80097d0 <cleanup_stdio+0x38>)
 80097ac:	4299      	cmp	r1, r3
 80097ae:	d002      	beq.n	80097b6 <cleanup_stdio+0x1e>
 80097b0:	4620      	mov	r0, r4
 80097b2:	f001 fe0b 	bl	800b3cc <_fflush_r>
 80097b6:	68e1      	ldr	r1, [r4, #12]
 80097b8:	4b06      	ldr	r3, [pc, #24]	@ (80097d4 <cleanup_stdio+0x3c>)
 80097ba:	4299      	cmp	r1, r3
 80097bc:	d004      	beq.n	80097c8 <cleanup_stdio+0x30>
 80097be:	4620      	mov	r0, r4
 80097c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097c4:	f001 be02 	b.w	800b3cc <_fflush_r>
 80097c8:	bd10      	pop	{r4, pc}
 80097ca:	bf00      	nop
 80097cc:	200016a8 	.word	0x200016a8
 80097d0:	20001710 	.word	0x20001710
 80097d4:	20001778 	.word	0x20001778

080097d8 <global_stdio_init.part.0>:
 80097d8:	b510      	push	{r4, lr}
 80097da:	4b0b      	ldr	r3, [pc, #44]	@ (8009808 <global_stdio_init.part.0+0x30>)
 80097dc:	4c0b      	ldr	r4, [pc, #44]	@ (800980c <global_stdio_init.part.0+0x34>)
 80097de:	4a0c      	ldr	r2, [pc, #48]	@ (8009810 <global_stdio_init.part.0+0x38>)
 80097e0:	4620      	mov	r0, r4
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	2104      	movs	r1, #4
 80097e6:	2200      	movs	r2, #0
 80097e8:	f7ff ff94 	bl	8009714 <std>
 80097ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80097f0:	2201      	movs	r2, #1
 80097f2:	2109      	movs	r1, #9
 80097f4:	f7ff ff8e 	bl	8009714 <std>
 80097f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80097fc:	2202      	movs	r2, #2
 80097fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009802:	2112      	movs	r1, #18
 8009804:	f7ff bf86 	b.w	8009714 <std>
 8009808:	200017e0 	.word	0x200017e0
 800980c:	200016a8 	.word	0x200016a8
 8009810:	08009781 	.word	0x08009781

08009814 <__sfp_lock_acquire>:
 8009814:	4801      	ldr	r0, [pc, #4]	@ (800981c <__sfp_lock_acquire+0x8>)
 8009816:	f000 b920 	b.w	8009a5a <__retarget_lock_acquire_recursive>
 800981a:	bf00      	nop
 800981c:	200017e9 	.word	0x200017e9

08009820 <__sfp_lock_release>:
 8009820:	4801      	ldr	r0, [pc, #4]	@ (8009828 <__sfp_lock_release+0x8>)
 8009822:	f000 b91b 	b.w	8009a5c <__retarget_lock_release_recursive>
 8009826:	bf00      	nop
 8009828:	200017e9 	.word	0x200017e9

0800982c <__sinit>:
 800982c:	b510      	push	{r4, lr}
 800982e:	4604      	mov	r4, r0
 8009830:	f7ff fff0 	bl	8009814 <__sfp_lock_acquire>
 8009834:	6a23      	ldr	r3, [r4, #32]
 8009836:	b11b      	cbz	r3, 8009840 <__sinit+0x14>
 8009838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800983c:	f7ff bff0 	b.w	8009820 <__sfp_lock_release>
 8009840:	4b04      	ldr	r3, [pc, #16]	@ (8009854 <__sinit+0x28>)
 8009842:	6223      	str	r3, [r4, #32]
 8009844:	4b04      	ldr	r3, [pc, #16]	@ (8009858 <__sinit+0x2c>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d1f5      	bne.n	8009838 <__sinit+0xc>
 800984c:	f7ff ffc4 	bl	80097d8 <global_stdio_init.part.0>
 8009850:	e7f2      	b.n	8009838 <__sinit+0xc>
 8009852:	bf00      	nop
 8009854:	08009799 	.word	0x08009799
 8009858:	200017e0 	.word	0x200017e0

0800985c <_fwalk_sglue>:
 800985c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009860:	4607      	mov	r7, r0
 8009862:	4688      	mov	r8, r1
 8009864:	4614      	mov	r4, r2
 8009866:	2600      	movs	r6, #0
 8009868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800986c:	f1b9 0901 	subs.w	r9, r9, #1
 8009870:	d505      	bpl.n	800987e <_fwalk_sglue+0x22>
 8009872:	6824      	ldr	r4, [r4, #0]
 8009874:	2c00      	cmp	r4, #0
 8009876:	d1f7      	bne.n	8009868 <_fwalk_sglue+0xc>
 8009878:	4630      	mov	r0, r6
 800987a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800987e:	89ab      	ldrh	r3, [r5, #12]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d907      	bls.n	8009894 <_fwalk_sglue+0x38>
 8009884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009888:	3301      	adds	r3, #1
 800988a:	d003      	beq.n	8009894 <_fwalk_sglue+0x38>
 800988c:	4629      	mov	r1, r5
 800988e:	4638      	mov	r0, r7
 8009890:	47c0      	blx	r8
 8009892:	4306      	orrs	r6, r0
 8009894:	3568      	adds	r5, #104	@ 0x68
 8009896:	e7e9      	b.n	800986c <_fwalk_sglue+0x10>

08009898 <siprintf>:
 8009898:	b40e      	push	{r1, r2, r3}
 800989a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800989e:	b500      	push	{lr}
 80098a0:	b09c      	sub	sp, #112	@ 0x70
 80098a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80098a4:	9002      	str	r0, [sp, #8]
 80098a6:	9006      	str	r0, [sp, #24]
 80098a8:	9107      	str	r1, [sp, #28]
 80098aa:	9104      	str	r1, [sp, #16]
 80098ac:	4808      	ldr	r0, [pc, #32]	@ (80098d0 <siprintf+0x38>)
 80098ae:	4909      	ldr	r1, [pc, #36]	@ (80098d4 <siprintf+0x3c>)
 80098b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80098b4:	9105      	str	r1, [sp, #20]
 80098b6:	6800      	ldr	r0, [r0, #0]
 80098b8:	a902      	add	r1, sp, #8
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	f001 fc0a 	bl	800b0d4 <_svfiprintf_r>
 80098c0:	2200      	movs	r2, #0
 80098c2:	9b02      	ldr	r3, [sp, #8]
 80098c4:	701a      	strb	r2, [r3, #0]
 80098c6:	b01c      	add	sp, #112	@ 0x70
 80098c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80098cc:	b003      	add	sp, #12
 80098ce:	4770      	bx	lr
 80098d0:	2000019c 	.word	0x2000019c
 80098d4:	ffff0208 	.word	0xffff0208

080098d8 <__sread>:
 80098d8:	b510      	push	{r4, lr}
 80098da:	460c      	mov	r4, r1
 80098dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e0:	f000 f86c 	bl	80099bc <_read_r>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	bfab      	itete	ge
 80098e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80098ea:	89a3      	ldrhlt	r3, [r4, #12]
 80098ec:	181b      	addge	r3, r3, r0
 80098ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80098f2:	bfac      	ite	ge
 80098f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80098f6:	81a3      	strhlt	r3, [r4, #12]
 80098f8:	bd10      	pop	{r4, pc}

080098fa <__swrite>:
 80098fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098fe:	461f      	mov	r7, r3
 8009900:	898b      	ldrh	r3, [r1, #12]
 8009902:	4605      	mov	r5, r0
 8009904:	05db      	lsls	r3, r3, #23
 8009906:	460c      	mov	r4, r1
 8009908:	4616      	mov	r6, r2
 800990a:	d505      	bpl.n	8009918 <__swrite+0x1e>
 800990c:	2302      	movs	r3, #2
 800990e:	2200      	movs	r2, #0
 8009910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009914:	f000 f840 	bl	8009998 <_lseek_r>
 8009918:	89a3      	ldrh	r3, [r4, #12]
 800991a:	4632      	mov	r2, r6
 800991c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009920:	81a3      	strh	r3, [r4, #12]
 8009922:	4628      	mov	r0, r5
 8009924:	463b      	mov	r3, r7
 8009926:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800992a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800992e:	f000 b857 	b.w	80099e0 <_write_r>

08009932 <__sseek>:
 8009932:	b510      	push	{r4, lr}
 8009934:	460c      	mov	r4, r1
 8009936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800993a:	f000 f82d 	bl	8009998 <_lseek_r>
 800993e:	1c43      	adds	r3, r0, #1
 8009940:	89a3      	ldrh	r3, [r4, #12]
 8009942:	bf15      	itete	ne
 8009944:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009946:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800994a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800994e:	81a3      	strheq	r3, [r4, #12]
 8009950:	bf18      	it	ne
 8009952:	81a3      	strhne	r3, [r4, #12]
 8009954:	bd10      	pop	{r4, pc}

08009956 <__sclose>:
 8009956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800995a:	f000 b80d 	b.w	8009978 <_close_r>

0800995e <memset>:
 800995e:	4603      	mov	r3, r0
 8009960:	4402      	add	r2, r0
 8009962:	4293      	cmp	r3, r2
 8009964:	d100      	bne.n	8009968 <memset+0xa>
 8009966:	4770      	bx	lr
 8009968:	f803 1b01 	strb.w	r1, [r3], #1
 800996c:	e7f9      	b.n	8009962 <memset+0x4>
	...

08009970 <_localeconv_r>:
 8009970:	4800      	ldr	r0, [pc, #0]	@ (8009974 <_localeconv_r+0x4>)
 8009972:	4770      	bx	lr
 8009974:	200002dc 	.word	0x200002dc

08009978 <_close_r>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	2300      	movs	r3, #0
 800997c:	4d05      	ldr	r5, [pc, #20]	@ (8009994 <_close_r+0x1c>)
 800997e:	4604      	mov	r4, r0
 8009980:	4608      	mov	r0, r1
 8009982:	602b      	str	r3, [r5, #0]
 8009984:	f7f7 fcc9 	bl	800131a <_close>
 8009988:	1c43      	adds	r3, r0, #1
 800998a:	d102      	bne.n	8009992 <_close_r+0x1a>
 800998c:	682b      	ldr	r3, [r5, #0]
 800998e:	b103      	cbz	r3, 8009992 <_close_r+0x1a>
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	bd38      	pop	{r3, r4, r5, pc}
 8009994:	200017e4 	.word	0x200017e4

08009998 <_lseek_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4604      	mov	r4, r0
 800999c:	4608      	mov	r0, r1
 800999e:	4611      	mov	r1, r2
 80099a0:	2200      	movs	r2, #0
 80099a2:	4d05      	ldr	r5, [pc, #20]	@ (80099b8 <_lseek_r+0x20>)
 80099a4:	602a      	str	r2, [r5, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	f7f7 fcdb 	bl	8001362 <_lseek>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_lseek_r+0x1e>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_lseek_r+0x1e>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	200017e4 	.word	0x200017e4

080099bc <_read_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4604      	mov	r4, r0
 80099c0:	4608      	mov	r0, r1
 80099c2:	4611      	mov	r1, r2
 80099c4:	2200      	movs	r2, #0
 80099c6:	4d05      	ldr	r5, [pc, #20]	@ (80099dc <_read_r+0x20>)
 80099c8:	602a      	str	r2, [r5, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	f7f7 fc6c 	bl	80012a8 <_read>
 80099d0:	1c43      	adds	r3, r0, #1
 80099d2:	d102      	bne.n	80099da <_read_r+0x1e>
 80099d4:	682b      	ldr	r3, [r5, #0]
 80099d6:	b103      	cbz	r3, 80099da <_read_r+0x1e>
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	bd38      	pop	{r3, r4, r5, pc}
 80099dc:	200017e4 	.word	0x200017e4

080099e0 <_write_r>:
 80099e0:	b538      	push	{r3, r4, r5, lr}
 80099e2:	4604      	mov	r4, r0
 80099e4:	4608      	mov	r0, r1
 80099e6:	4611      	mov	r1, r2
 80099e8:	2200      	movs	r2, #0
 80099ea:	4d05      	ldr	r5, [pc, #20]	@ (8009a00 <_write_r+0x20>)
 80099ec:	602a      	str	r2, [r5, #0]
 80099ee:	461a      	mov	r2, r3
 80099f0:	f7f7 fc77 	bl	80012e2 <_write>
 80099f4:	1c43      	adds	r3, r0, #1
 80099f6:	d102      	bne.n	80099fe <_write_r+0x1e>
 80099f8:	682b      	ldr	r3, [r5, #0]
 80099fa:	b103      	cbz	r3, 80099fe <_write_r+0x1e>
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	bd38      	pop	{r3, r4, r5, pc}
 8009a00:	200017e4 	.word	0x200017e4

08009a04 <__errno>:
 8009a04:	4b01      	ldr	r3, [pc, #4]	@ (8009a0c <__errno+0x8>)
 8009a06:	6818      	ldr	r0, [r3, #0]
 8009a08:	4770      	bx	lr
 8009a0a:	bf00      	nop
 8009a0c:	2000019c 	.word	0x2000019c

08009a10 <__libc_init_array>:
 8009a10:	b570      	push	{r4, r5, r6, lr}
 8009a12:	2600      	movs	r6, #0
 8009a14:	4d0c      	ldr	r5, [pc, #48]	@ (8009a48 <__libc_init_array+0x38>)
 8009a16:	4c0d      	ldr	r4, [pc, #52]	@ (8009a4c <__libc_init_array+0x3c>)
 8009a18:	1b64      	subs	r4, r4, r5
 8009a1a:	10a4      	asrs	r4, r4, #2
 8009a1c:	42a6      	cmp	r6, r4
 8009a1e:	d109      	bne.n	8009a34 <__libc_init_array+0x24>
 8009a20:	f002 f870 	bl	800bb04 <_init>
 8009a24:	2600      	movs	r6, #0
 8009a26:	4d0a      	ldr	r5, [pc, #40]	@ (8009a50 <__libc_init_array+0x40>)
 8009a28:	4c0a      	ldr	r4, [pc, #40]	@ (8009a54 <__libc_init_array+0x44>)
 8009a2a:	1b64      	subs	r4, r4, r5
 8009a2c:	10a4      	asrs	r4, r4, #2
 8009a2e:	42a6      	cmp	r6, r4
 8009a30:	d105      	bne.n	8009a3e <__libc_init_array+0x2e>
 8009a32:	bd70      	pop	{r4, r5, r6, pc}
 8009a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a38:	4798      	blx	r3
 8009a3a:	3601      	adds	r6, #1
 8009a3c:	e7ee      	b.n	8009a1c <__libc_init_array+0xc>
 8009a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a42:	4798      	blx	r3
 8009a44:	3601      	adds	r6, #1
 8009a46:	e7f2      	b.n	8009a2e <__libc_init_array+0x1e>
 8009a48:	0800bf60 	.word	0x0800bf60
 8009a4c:	0800bf60 	.word	0x0800bf60
 8009a50:	0800bf60 	.word	0x0800bf60
 8009a54:	0800bf64 	.word	0x0800bf64

08009a58 <__retarget_lock_init_recursive>:
 8009a58:	4770      	bx	lr

08009a5a <__retarget_lock_acquire_recursive>:
 8009a5a:	4770      	bx	lr

08009a5c <__retarget_lock_release_recursive>:
 8009a5c:	4770      	bx	lr

08009a5e <memchr>:
 8009a5e:	4603      	mov	r3, r0
 8009a60:	b510      	push	{r4, lr}
 8009a62:	b2c9      	uxtb	r1, r1
 8009a64:	4402      	add	r2, r0
 8009a66:	4293      	cmp	r3, r2
 8009a68:	4618      	mov	r0, r3
 8009a6a:	d101      	bne.n	8009a70 <memchr+0x12>
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	e003      	b.n	8009a78 <memchr+0x1a>
 8009a70:	7804      	ldrb	r4, [r0, #0]
 8009a72:	3301      	adds	r3, #1
 8009a74:	428c      	cmp	r4, r1
 8009a76:	d1f6      	bne.n	8009a66 <memchr+0x8>
 8009a78:	bd10      	pop	{r4, pc}

08009a7a <quorem>:
 8009a7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7e:	6903      	ldr	r3, [r0, #16]
 8009a80:	690c      	ldr	r4, [r1, #16]
 8009a82:	4607      	mov	r7, r0
 8009a84:	42a3      	cmp	r3, r4
 8009a86:	db7e      	blt.n	8009b86 <quorem+0x10c>
 8009a88:	3c01      	subs	r4, #1
 8009a8a:	00a3      	lsls	r3, r4, #2
 8009a8c:	f100 0514 	add.w	r5, r0, #20
 8009a90:	f101 0814 	add.w	r8, r1, #20
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a9a:	9301      	str	r3, [sp, #4]
 8009a9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009aa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009aac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ab0:	d32e      	bcc.n	8009b10 <quorem+0x96>
 8009ab2:	f04f 0a00 	mov.w	sl, #0
 8009ab6:	46c4      	mov	ip, r8
 8009ab8:	46ae      	mov	lr, r5
 8009aba:	46d3      	mov	fp, sl
 8009abc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ac0:	b298      	uxth	r0, r3
 8009ac2:	fb06 a000 	mla	r0, r6, r0, sl
 8009ac6:	0c1b      	lsrs	r3, r3, #16
 8009ac8:	0c02      	lsrs	r2, r0, #16
 8009aca:	fb06 2303 	mla	r3, r6, r3, r2
 8009ace:	f8de 2000 	ldr.w	r2, [lr]
 8009ad2:	b280      	uxth	r0, r0
 8009ad4:	b292      	uxth	r2, r2
 8009ad6:	1a12      	subs	r2, r2, r0
 8009ad8:	445a      	add	r2, fp
 8009ada:	f8de 0000 	ldr.w	r0, [lr]
 8009ade:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009ae8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009aec:	b292      	uxth	r2, r2
 8009aee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009af2:	45e1      	cmp	r9, ip
 8009af4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009af8:	f84e 2b04 	str.w	r2, [lr], #4
 8009afc:	d2de      	bcs.n	8009abc <quorem+0x42>
 8009afe:	9b00      	ldr	r3, [sp, #0]
 8009b00:	58eb      	ldr	r3, [r5, r3]
 8009b02:	b92b      	cbnz	r3, 8009b10 <quorem+0x96>
 8009b04:	9b01      	ldr	r3, [sp, #4]
 8009b06:	3b04      	subs	r3, #4
 8009b08:	429d      	cmp	r5, r3
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	d32f      	bcc.n	8009b6e <quorem+0xf4>
 8009b0e:	613c      	str	r4, [r7, #16]
 8009b10:	4638      	mov	r0, r7
 8009b12:	f001 f97b 	bl	800ae0c <__mcmp>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	db25      	blt.n	8009b66 <quorem+0xec>
 8009b1a:	4629      	mov	r1, r5
 8009b1c:	2000      	movs	r0, #0
 8009b1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b22:	f8d1 c000 	ldr.w	ip, [r1]
 8009b26:	fa1f fe82 	uxth.w	lr, r2
 8009b2a:	fa1f f38c 	uxth.w	r3, ip
 8009b2e:	eba3 030e 	sub.w	r3, r3, lr
 8009b32:	4403      	add	r3, r0
 8009b34:	0c12      	lsrs	r2, r2, #16
 8009b36:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009b3a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b44:	45c1      	cmp	r9, r8
 8009b46:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009b4a:	f841 3b04 	str.w	r3, [r1], #4
 8009b4e:	d2e6      	bcs.n	8009b1e <quorem+0xa4>
 8009b50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b58:	b922      	cbnz	r2, 8009b64 <quorem+0xea>
 8009b5a:	3b04      	subs	r3, #4
 8009b5c:	429d      	cmp	r5, r3
 8009b5e:	461a      	mov	r2, r3
 8009b60:	d30b      	bcc.n	8009b7a <quorem+0x100>
 8009b62:	613c      	str	r4, [r7, #16]
 8009b64:	3601      	adds	r6, #1
 8009b66:	4630      	mov	r0, r6
 8009b68:	b003      	add	sp, #12
 8009b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6e:	6812      	ldr	r2, [r2, #0]
 8009b70:	3b04      	subs	r3, #4
 8009b72:	2a00      	cmp	r2, #0
 8009b74:	d1cb      	bne.n	8009b0e <quorem+0x94>
 8009b76:	3c01      	subs	r4, #1
 8009b78:	e7c6      	b.n	8009b08 <quorem+0x8e>
 8009b7a:	6812      	ldr	r2, [r2, #0]
 8009b7c:	3b04      	subs	r3, #4
 8009b7e:	2a00      	cmp	r2, #0
 8009b80:	d1ef      	bne.n	8009b62 <quorem+0xe8>
 8009b82:	3c01      	subs	r4, #1
 8009b84:	e7ea      	b.n	8009b5c <quorem+0xe2>
 8009b86:	2000      	movs	r0, #0
 8009b88:	e7ee      	b.n	8009b68 <quorem+0xee>
 8009b8a:	0000      	movs	r0, r0
 8009b8c:	0000      	movs	r0, r0
	...

08009b90 <_dtoa_r>:
 8009b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b94:	4614      	mov	r4, r2
 8009b96:	461d      	mov	r5, r3
 8009b98:	69c7      	ldr	r7, [r0, #28]
 8009b9a:	b097      	sub	sp, #92	@ 0x5c
 8009b9c:	4683      	mov	fp, r0
 8009b9e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009ba2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009ba4:	b97f      	cbnz	r7, 8009bc6 <_dtoa_r+0x36>
 8009ba6:	2010      	movs	r0, #16
 8009ba8:	f000 fe02 	bl	800a7b0 <malloc>
 8009bac:	4602      	mov	r2, r0
 8009bae:	f8cb 001c 	str.w	r0, [fp, #28]
 8009bb2:	b920      	cbnz	r0, 8009bbe <_dtoa_r+0x2e>
 8009bb4:	21ef      	movs	r1, #239	@ 0xef
 8009bb6:	4ba8      	ldr	r3, [pc, #672]	@ (8009e58 <_dtoa_r+0x2c8>)
 8009bb8:	48a8      	ldr	r0, [pc, #672]	@ (8009e5c <_dtoa_r+0x2cc>)
 8009bba:	f001 fc67 	bl	800b48c <__assert_func>
 8009bbe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009bc2:	6007      	str	r7, [r0, #0]
 8009bc4:	60c7      	str	r7, [r0, #12]
 8009bc6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009bca:	6819      	ldr	r1, [r3, #0]
 8009bcc:	b159      	cbz	r1, 8009be6 <_dtoa_r+0x56>
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	2301      	movs	r3, #1
 8009bd2:	4093      	lsls	r3, r2
 8009bd4:	604a      	str	r2, [r1, #4]
 8009bd6:	608b      	str	r3, [r1, #8]
 8009bd8:	4658      	mov	r0, fp
 8009bda:	f000 fedf 	bl	800a99c <_Bfree>
 8009bde:	2200      	movs	r2, #0
 8009be0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009be4:	601a      	str	r2, [r3, #0]
 8009be6:	1e2b      	subs	r3, r5, #0
 8009be8:	bfaf      	iteee	ge
 8009bea:	2300      	movge	r3, #0
 8009bec:	2201      	movlt	r2, #1
 8009bee:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009bf2:	9303      	strlt	r3, [sp, #12]
 8009bf4:	bfa8      	it	ge
 8009bf6:	6033      	strge	r3, [r6, #0]
 8009bf8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009bfc:	4b98      	ldr	r3, [pc, #608]	@ (8009e60 <_dtoa_r+0x2d0>)
 8009bfe:	bfb8      	it	lt
 8009c00:	6032      	strlt	r2, [r6, #0]
 8009c02:	ea33 0308 	bics.w	r3, r3, r8
 8009c06:	d112      	bne.n	8009c2e <_dtoa_r+0x9e>
 8009c08:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009c0c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009c0e:	6013      	str	r3, [r2, #0]
 8009c10:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009c14:	4323      	orrs	r3, r4
 8009c16:	f000 8550 	beq.w	800a6ba <_dtoa_r+0xb2a>
 8009c1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009c1c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009e64 <_dtoa_r+0x2d4>
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 8552 	beq.w	800a6ca <_dtoa_r+0xb3a>
 8009c26:	f10a 0303 	add.w	r3, sl, #3
 8009c2a:	f000 bd4c 	b.w	800a6c6 <_dtoa_r+0xb36>
 8009c2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c32:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009c36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f7f6 feb3 	bl	80009a8 <__aeabi_dcmpeq>
 8009c42:	4607      	mov	r7, r0
 8009c44:	b158      	cbz	r0, 8009c5e <_dtoa_r+0xce>
 8009c46:	2301      	movs	r3, #1
 8009c48:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009c4a:	6013      	str	r3, [r2, #0]
 8009c4c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009c4e:	b113      	cbz	r3, 8009c56 <_dtoa_r+0xc6>
 8009c50:	4b85      	ldr	r3, [pc, #532]	@ (8009e68 <_dtoa_r+0x2d8>)
 8009c52:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009c54:	6013      	str	r3, [r2, #0]
 8009c56:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009e6c <_dtoa_r+0x2dc>
 8009c5a:	f000 bd36 	b.w	800a6ca <_dtoa_r+0xb3a>
 8009c5e:	ab14      	add	r3, sp, #80	@ 0x50
 8009c60:	9301      	str	r3, [sp, #4]
 8009c62:	ab15      	add	r3, sp, #84	@ 0x54
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	4658      	mov	r0, fp
 8009c68:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009c6c:	f001 f97e 	bl	800af6c <__d2b>
 8009c70:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009c74:	4681      	mov	r9, r0
 8009c76:	2e00      	cmp	r6, #0
 8009c78:	d077      	beq.n	8009d6a <_dtoa_r+0x1da>
 8009c7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009c80:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c88:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009c8c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009c90:	9712      	str	r7, [sp, #72]	@ 0x48
 8009c92:	4619      	mov	r1, r3
 8009c94:	2200      	movs	r2, #0
 8009c96:	4b76      	ldr	r3, [pc, #472]	@ (8009e70 <_dtoa_r+0x2e0>)
 8009c98:	f7f6 fa66 	bl	8000168 <__aeabi_dsub>
 8009c9c:	a368      	add	r3, pc, #416	@ (adr r3, 8009e40 <_dtoa_r+0x2b0>)
 8009c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca2:	f7f6 fc19 	bl	80004d8 <__aeabi_dmul>
 8009ca6:	a368      	add	r3, pc, #416	@ (adr r3, 8009e48 <_dtoa_r+0x2b8>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	f7f6 fa5e 	bl	800016c <__adddf3>
 8009cb0:	4604      	mov	r4, r0
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	460d      	mov	r5, r1
 8009cb6:	f7f6 fba5 	bl	8000404 <__aeabi_i2d>
 8009cba:	a365      	add	r3, pc, #404	@ (adr r3, 8009e50 <_dtoa_r+0x2c0>)
 8009cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc0:	f7f6 fc0a 	bl	80004d8 <__aeabi_dmul>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4620      	mov	r0, r4
 8009cca:	4629      	mov	r1, r5
 8009ccc:	f7f6 fa4e 	bl	800016c <__adddf3>
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	460d      	mov	r5, r1
 8009cd4:	f7f6 feb0 	bl	8000a38 <__aeabi_d2iz>
 8009cd8:	2200      	movs	r2, #0
 8009cda:	4607      	mov	r7, r0
 8009cdc:	2300      	movs	r3, #0
 8009cde:	4620      	mov	r0, r4
 8009ce0:	4629      	mov	r1, r5
 8009ce2:	f7f6 fe6b 	bl	80009bc <__aeabi_dcmplt>
 8009ce6:	b140      	cbz	r0, 8009cfa <_dtoa_r+0x16a>
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f7f6 fb8b 	bl	8000404 <__aeabi_i2d>
 8009cee:	4622      	mov	r2, r4
 8009cf0:	462b      	mov	r3, r5
 8009cf2:	f7f6 fe59 	bl	80009a8 <__aeabi_dcmpeq>
 8009cf6:	b900      	cbnz	r0, 8009cfa <_dtoa_r+0x16a>
 8009cf8:	3f01      	subs	r7, #1
 8009cfa:	2f16      	cmp	r7, #22
 8009cfc:	d853      	bhi.n	8009da6 <_dtoa_r+0x216>
 8009cfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d02:	4b5c      	ldr	r3, [pc, #368]	@ (8009e74 <_dtoa_r+0x2e4>)
 8009d04:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	f7f6 fe56 	bl	80009bc <__aeabi_dcmplt>
 8009d10:	2800      	cmp	r0, #0
 8009d12:	d04a      	beq.n	8009daa <_dtoa_r+0x21a>
 8009d14:	2300      	movs	r3, #0
 8009d16:	3f01      	subs	r7, #1
 8009d18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d1a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009d1c:	1b9b      	subs	r3, r3, r6
 8009d1e:	1e5a      	subs	r2, r3, #1
 8009d20:	bf46      	itte	mi
 8009d22:	f1c3 0801 	rsbmi	r8, r3, #1
 8009d26:	2300      	movmi	r3, #0
 8009d28:	f04f 0800 	movpl.w	r8, #0
 8009d2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d2e:	bf48      	it	mi
 8009d30:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009d32:	2f00      	cmp	r7, #0
 8009d34:	db3b      	blt.n	8009dae <_dtoa_r+0x21e>
 8009d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d38:	970e      	str	r7, [sp, #56]	@ 0x38
 8009d3a:	443b      	add	r3, r7
 8009d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d3e:	2300      	movs	r3, #0
 8009d40:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d44:	2b09      	cmp	r3, #9
 8009d46:	d866      	bhi.n	8009e16 <_dtoa_r+0x286>
 8009d48:	2b05      	cmp	r3, #5
 8009d4a:	bfc4      	itt	gt
 8009d4c:	3b04      	subgt	r3, #4
 8009d4e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009d50:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d52:	bfc8      	it	gt
 8009d54:	2400      	movgt	r4, #0
 8009d56:	f1a3 0302 	sub.w	r3, r3, #2
 8009d5a:	bfd8      	it	le
 8009d5c:	2401      	movle	r4, #1
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d864      	bhi.n	8009e2c <_dtoa_r+0x29c>
 8009d62:	e8df f003 	tbb	[pc, r3]
 8009d66:	382b      	.short	0x382b
 8009d68:	5636      	.short	0x5636
 8009d6a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009d6e:	441e      	add	r6, r3
 8009d70:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	bfc1      	itttt	gt
 8009d78:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009d7c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009d80:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009d84:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009d88:	bfd6      	itet	le
 8009d8a:	f1c3 0320 	rsble	r3, r3, #32
 8009d8e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009d92:	fa04 f003 	lslle.w	r0, r4, r3
 8009d96:	f7f6 fb25 	bl	80003e4 <__aeabi_ui2d>
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009da0:	3e01      	subs	r6, #1
 8009da2:	9212      	str	r2, [sp, #72]	@ 0x48
 8009da4:	e775      	b.n	8009c92 <_dtoa_r+0x102>
 8009da6:	2301      	movs	r3, #1
 8009da8:	e7b6      	b.n	8009d18 <_dtoa_r+0x188>
 8009daa:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009dac:	e7b5      	b.n	8009d1a <_dtoa_r+0x18a>
 8009dae:	427b      	negs	r3, r7
 8009db0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009db2:	2300      	movs	r3, #0
 8009db4:	eba8 0807 	sub.w	r8, r8, r7
 8009db8:	930e      	str	r3, [sp, #56]	@ 0x38
 8009dba:	e7c2      	b.n	8009d42 <_dtoa_r+0x1b2>
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	dc35      	bgt.n	8009e32 <_dtoa_r+0x2a2>
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	461a      	mov	r2, r3
 8009dca:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009dce:	9221      	str	r2, [sp, #132]	@ 0x84
 8009dd0:	e00b      	b.n	8009dea <_dtoa_r+0x25a>
 8009dd2:	2301      	movs	r3, #1
 8009dd4:	e7f3      	b.n	8009dbe <_dtoa_r+0x22e>
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009dda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ddc:	18fb      	adds	r3, r7, r3
 8009dde:	9308      	str	r3, [sp, #32]
 8009de0:	3301      	adds	r3, #1
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	9307      	str	r3, [sp, #28]
 8009de6:	bfb8      	it	lt
 8009de8:	2301      	movlt	r3, #1
 8009dea:	2100      	movs	r1, #0
 8009dec:	2204      	movs	r2, #4
 8009dee:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009df2:	f102 0514 	add.w	r5, r2, #20
 8009df6:	429d      	cmp	r5, r3
 8009df8:	d91f      	bls.n	8009e3a <_dtoa_r+0x2aa>
 8009dfa:	6041      	str	r1, [r0, #4]
 8009dfc:	4658      	mov	r0, fp
 8009dfe:	f000 fd8d 	bl	800a91c <_Balloc>
 8009e02:	4682      	mov	sl, r0
 8009e04:	2800      	cmp	r0, #0
 8009e06:	d139      	bne.n	8009e7c <_dtoa_r+0x2ec>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	f240 11af 	movw	r1, #431	@ 0x1af
 8009e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8009e78 <_dtoa_r+0x2e8>)
 8009e10:	e6d2      	b.n	8009bb8 <_dtoa_r+0x28>
 8009e12:	2301      	movs	r3, #1
 8009e14:	e7e0      	b.n	8009dd8 <_dtoa_r+0x248>
 8009e16:	2401      	movs	r4, #1
 8009e18:	2300      	movs	r3, #0
 8009e1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009e1c:	9320      	str	r3, [sp, #128]	@ 0x80
 8009e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8009e22:	2200      	movs	r2, #0
 8009e24:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009e28:	2312      	movs	r3, #18
 8009e2a:	e7d0      	b.n	8009dce <_dtoa_r+0x23e>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e30:	e7f5      	b.n	8009e1e <_dtoa_r+0x28e>
 8009e32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e34:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009e38:	e7d7      	b.n	8009dea <_dtoa_r+0x25a>
 8009e3a:	3101      	adds	r1, #1
 8009e3c:	0052      	lsls	r2, r2, #1
 8009e3e:	e7d8      	b.n	8009df2 <_dtoa_r+0x262>
 8009e40:	636f4361 	.word	0x636f4361
 8009e44:	3fd287a7 	.word	0x3fd287a7
 8009e48:	8b60c8b3 	.word	0x8b60c8b3
 8009e4c:	3fc68a28 	.word	0x3fc68a28
 8009e50:	509f79fb 	.word	0x509f79fb
 8009e54:	3fd34413 	.word	0x3fd34413
 8009e58:	0800bc2b 	.word	0x0800bc2b
 8009e5c:	0800bc42 	.word	0x0800bc42
 8009e60:	7ff00000 	.word	0x7ff00000
 8009e64:	0800bc27 	.word	0x0800bc27
 8009e68:	0800bbfb 	.word	0x0800bbfb
 8009e6c:	0800bbfa 	.word	0x0800bbfa
 8009e70:	3ff80000 	.word	0x3ff80000
 8009e74:	0800bd38 	.word	0x0800bd38
 8009e78:	0800bc9a 	.word	0x0800bc9a
 8009e7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009e80:	6018      	str	r0, [r3, #0]
 8009e82:	9b07      	ldr	r3, [sp, #28]
 8009e84:	2b0e      	cmp	r3, #14
 8009e86:	f200 80a4 	bhi.w	8009fd2 <_dtoa_r+0x442>
 8009e8a:	2c00      	cmp	r4, #0
 8009e8c:	f000 80a1 	beq.w	8009fd2 <_dtoa_r+0x442>
 8009e90:	2f00      	cmp	r7, #0
 8009e92:	dd33      	ble.n	8009efc <_dtoa_r+0x36c>
 8009e94:	4b86      	ldr	r3, [pc, #536]	@ (800a0b0 <_dtoa_r+0x520>)
 8009e96:	f007 020f 	and.w	r2, r7, #15
 8009e9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e9e:	05f8      	lsls	r0, r7, #23
 8009ea0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009ea4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009ea8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009eac:	d516      	bpl.n	8009edc <_dtoa_r+0x34c>
 8009eae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009eb2:	4b80      	ldr	r3, [pc, #512]	@ (800a0b4 <_dtoa_r+0x524>)
 8009eb4:	2603      	movs	r6, #3
 8009eb6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009eba:	f7f6 fc37 	bl	800072c <__aeabi_ddiv>
 8009ebe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ec2:	f004 040f 	and.w	r4, r4, #15
 8009ec6:	4d7b      	ldr	r5, [pc, #492]	@ (800a0b4 <_dtoa_r+0x524>)
 8009ec8:	b954      	cbnz	r4, 8009ee0 <_dtoa_r+0x350>
 8009eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ed2:	f7f6 fc2b 	bl	800072c <__aeabi_ddiv>
 8009ed6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009eda:	e028      	b.n	8009f2e <_dtoa_r+0x39e>
 8009edc:	2602      	movs	r6, #2
 8009ede:	e7f2      	b.n	8009ec6 <_dtoa_r+0x336>
 8009ee0:	07e1      	lsls	r1, r4, #31
 8009ee2:	d508      	bpl.n	8009ef6 <_dtoa_r+0x366>
 8009ee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ee8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009eec:	f7f6 faf4 	bl	80004d8 <__aeabi_dmul>
 8009ef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ef4:	3601      	adds	r6, #1
 8009ef6:	1064      	asrs	r4, r4, #1
 8009ef8:	3508      	adds	r5, #8
 8009efa:	e7e5      	b.n	8009ec8 <_dtoa_r+0x338>
 8009efc:	f000 80d2 	beq.w	800a0a4 <_dtoa_r+0x514>
 8009f00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f04:	427c      	negs	r4, r7
 8009f06:	4b6a      	ldr	r3, [pc, #424]	@ (800a0b0 <_dtoa_r+0x520>)
 8009f08:	f004 020f 	and.w	r2, r4, #15
 8009f0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f14:	f7f6 fae0 	bl	80004d8 <__aeabi_dmul>
 8009f18:	2602      	movs	r6, #2
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f20:	4d64      	ldr	r5, [pc, #400]	@ (800a0b4 <_dtoa_r+0x524>)
 8009f22:	1124      	asrs	r4, r4, #4
 8009f24:	2c00      	cmp	r4, #0
 8009f26:	f040 80b2 	bne.w	800a08e <_dtoa_r+0x4fe>
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d1d3      	bne.n	8009ed6 <_dtoa_r+0x346>
 8009f2e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009f32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	f000 80b7 	beq.w	800a0a8 <_dtoa_r+0x518>
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	4629      	mov	r1, r5
 8009f40:	4b5d      	ldr	r3, [pc, #372]	@ (800a0b8 <_dtoa_r+0x528>)
 8009f42:	f7f6 fd3b 	bl	80009bc <__aeabi_dcmplt>
 8009f46:	2800      	cmp	r0, #0
 8009f48:	f000 80ae 	beq.w	800a0a8 <_dtoa_r+0x518>
 8009f4c:	9b07      	ldr	r3, [sp, #28]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	f000 80aa 	beq.w	800a0a8 <_dtoa_r+0x518>
 8009f54:	9b08      	ldr	r3, [sp, #32]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	dd37      	ble.n	8009fca <_dtoa_r+0x43a>
 8009f5a:	1e7b      	subs	r3, r7, #1
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	9304      	str	r3, [sp, #16]
 8009f60:	2200      	movs	r2, #0
 8009f62:	4629      	mov	r1, r5
 8009f64:	4b55      	ldr	r3, [pc, #340]	@ (800a0bc <_dtoa_r+0x52c>)
 8009f66:	f7f6 fab7 	bl	80004d8 <__aeabi_dmul>
 8009f6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f6e:	9c08      	ldr	r4, [sp, #32]
 8009f70:	3601      	adds	r6, #1
 8009f72:	4630      	mov	r0, r6
 8009f74:	f7f6 fa46 	bl	8000404 <__aeabi_i2d>
 8009f78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f7c:	f7f6 faac 	bl	80004d8 <__aeabi_dmul>
 8009f80:	2200      	movs	r2, #0
 8009f82:	4b4f      	ldr	r3, [pc, #316]	@ (800a0c0 <_dtoa_r+0x530>)
 8009f84:	f7f6 f8f2 	bl	800016c <__adddf3>
 8009f88:	4605      	mov	r5, r0
 8009f8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009f8e:	2c00      	cmp	r4, #0
 8009f90:	f040 809a 	bne.w	800a0c8 <_dtoa_r+0x538>
 8009f94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	4b4a      	ldr	r3, [pc, #296]	@ (800a0c4 <_dtoa_r+0x534>)
 8009f9c:	f7f6 f8e4 	bl	8000168 <__aeabi_dsub>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009fa8:	462a      	mov	r2, r5
 8009faa:	4633      	mov	r3, r6
 8009fac:	f7f6 fd24 	bl	80009f8 <__aeabi_dcmpgt>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	f040 828e 	bne.w	800a4d2 <_dtoa_r+0x942>
 8009fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009fba:	462a      	mov	r2, r5
 8009fbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009fc0:	f7f6 fcfc 	bl	80009bc <__aeabi_dcmplt>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	f040 8127 	bne.w	800a218 <_dtoa_r+0x688>
 8009fca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009fce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009fd2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f2c0 8163 	blt.w	800a2a0 <_dtoa_r+0x710>
 8009fda:	2f0e      	cmp	r7, #14
 8009fdc:	f300 8160 	bgt.w	800a2a0 <_dtoa_r+0x710>
 8009fe0:	4b33      	ldr	r3, [pc, #204]	@ (800a0b0 <_dtoa_r+0x520>)
 8009fe2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009fe6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009fea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009fee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	da03      	bge.n	8009ffc <_dtoa_r+0x46c>
 8009ff4:	9b07      	ldr	r3, [sp, #28]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f340 8100 	ble.w	800a1fc <_dtoa_r+0x66c>
 8009ffc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a000:	4656      	mov	r6, sl
 800a002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a006:	4620      	mov	r0, r4
 800a008:	4629      	mov	r1, r5
 800a00a:	f7f6 fb8f 	bl	800072c <__aeabi_ddiv>
 800a00e:	f7f6 fd13 	bl	8000a38 <__aeabi_d2iz>
 800a012:	4680      	mov	r8, r0
 800a014:	f7f6 f9f6 	bl	8000404 <__aeabi_i2d>
 800a018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a01c:	f7f6 fa5c 	bl	80004d8 <__aeabi_dmul>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	4620      	mov	r0, r4
 800a026:	4629      	mov	r1, r5
 800a028:	f7f6 f89e 	bl	8000168 <__aeabi_dsub>
 800a02c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a030:	9d07      	ldr	r5, [sp, #28]
 800a032:	f806 4b01 	strb.w	r4, [r6], #1
 800a036:	eba6 040a 	sub.w	r4, r6, sl
 800a03a:	42a5      	cmp	r5, r4
 800a03c:	4602      	mov	r2, r0
 800a03e:	460b      	mov	r3, r1
 800a040:	f040 8116 	bne.w	800a270 <_dtoa_r+0x6e0>
 800a044:	f7f6 f892 	bl	800016c <__adddf3>
 800a048:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a04c:	4604      	mov	r4, r0
 800a04e:	460d      	mov	r5, r1
 800a050:	f7f6 fcd2 	bl	80009f8 <__aeabi_dcmpgt>
 800a054:	2800      	cmp	r0, #0
 800a056:	f040 80f8 	bne.w	800a24a <_dtoa_r+0x6ba>
 800a05a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a05e:	4620      	mov	r0, r4
 800a060:	4629      	mov	r1, r5
 800a062:	f7f6 fca1 	bl	80009a8 <__aeabi_dcmpeq>
 800a066:	b118      	cbz	r0, 800a070 <_dtoa_r+0x4e0>
 800a068:	f018 0f01 	tst.w	r8, #1
 800a06c:	f040 80ed 	bne.w	800a24a <_dtoa_r+0x6ba>
 800a070:	4649      	mov	r1, r9
 800a072:	4658      	mov	r0, fp
 800a074:	f000 fc92 	bl	800a99c <_Bfree>
 800a078:	2300      	movs	r3, #0
 800a07a:	7033      	strb	r3, [r6, #0]
 800a07c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a07e:	3701      	adds	r7, #1
 800a080:	601f      	str	r7, [r3, #0]
 800a082:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 8320 	beq.w	800a6ca <_dtoa_r+0xb3a>
 800a08a:	601e      	str	r6, [r3, #0]
 800a08c:	e31d      	b.n	800a6ca <_dtoa_r+0xb3a>
 800a08e:	07e2      	lsls	r2, r4, #31
 800a090:	d505      	bpl.n	800a09e <_dtoa_r+0x50e>
 800a092:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a096:	f7f6 fa1f 	bl	80004d8 <__aeabi_dmul>
 800a09a:	2301      	movs	r3, #1
 800a09c:	3601      	adds	r6, #1
 800a09e:	1064      	asrs	r4, r4, #1
 800a0a0:	3508      	adds	r5, #8
 800a0a2:	e73f      	b.n	8009f24 <_dtoa_r+0x394>
 800a0a4:	2602      	movs	r6, #2
 800a0a6:	e742      	b.n	8009f2e <_dtoa_r+0x39e>
 800a0a8:	9c07      	ldr	r4, [sp, #28]
 800a0aa:	9704      	str	r7, [sp, #16]
 800a0ac:	e761      	b.n	8009f72 <_dtoa_r+0x3e2>
 800a0ae:	bf00      	nop
 800a0b0:	0800bd38 	.word	0x0800bd38
 800a0b4:	0800bd10 	.word	0x0800bd10
 800a0b8:	3ff00000 	.word	0x3ff00000
 800a0bc:	40240000 	.word	0x40240000
 800a0c0:	401c0000 	.word	0x401c0000
 800a0c4:	40140000 	.word	0x40140000
 800a0c8:	4b70      	ldr	r3, [pc, #448]	@ (800a28c <_dtoa_r+0x6fc>)
 800a0ca:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a0cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a0d0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a0d4:	4454      	add	r4, sl
 800a0d6:	2900      	cmp	r1, #0
 800a0d8:	d045      	beq.n	800a166 <_dtoa_r+0x5d6>
 800a0da:	2000      	movs	r0, #0
 800a0dc:	496c      	ldr	r1, [pc, #432]	@ (800a290 <_dtoa_r+0x700>)
 800a0de:	f7f6 fb25 	bl	800072c <__aeabi_ddiv>
 800a0e2:	4633      	mov	r3, r6
 800a0e4:	462a      	mov	r2, r5
 800a0e6:	f7f6 f83f 	bl	8000168 <__aeabi_dsub>
 800a0ea:	4656      	mov	r6, sl
 800a0ec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a0f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0f4:	f7f6 fca0 	bl	8000a38 <__aeabi_d2iz>
 800a0f8:	4605      	mov	r5, r0
 800a0fa:	f7f6 f983 	bl	8000404 <__aeabi_i2d>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a106:	f7f6 f82f 	bl	8000168 <__aeabi_dsub>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	3530      	adds	r5, #48	@ 0x30
 800a110:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a114:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a118:	f806 5b01 	strb.w	r5, [r6], #1
 800a11c:	f7f6 fc4e 	bl	80009bc <__aeabi_dcmplt>
 800a120:	2800      	cmp	r0, #0
 800a122:	d163      	bne.n	800a1ec <_dtoa_r+0x65c>
 800a124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a128:	2000      	movs	r0, #0
 800a12a:	495a      	ldr	r1, [pc, #360]	@ (800a294 <_dtoa_r+0x704>)
 800a12c:	f7f6 f81c 	bl	8000168 <__aeabi_dsub>
 800a130:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a134:	f7f6 fc42 	bl	80009bc <__aeabi_dcmplt>
 800a138:	2800      	cmp	r0, #0
 800a13a:	f040 8087 	bne.w	800a24c <_dtoa_r+0x6bc>
 800a13e:	42a6      	cmp	r6, r4
 800a140:	f43f af43 	beq.w	8009fca <_dtoa_r+0x43a>
 800a144:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a148:	2200      	movs	r2, #0
 800a14a:	4b53      	ldr	r3, [pc, #332]	@ (800a298 <_dtoa_r+0x708>)
 800a14c:	f7f6 f9c4 	bl	80004d8 <__aeabi_dmul>
 800a150:	2200      	movs	r2, #0
 800a152:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a15a:	4b4f      	ldr	r3, [pc, #316]	@ (800a298 <_dtoa_r+0x708>)
 800a15c:	f7f6 f9bc 	bl	80004d8 <__aeabi_dmul>
 800a160:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a164:	e7c4      	b.n	800a0f0 <_dtoa_r+0x560>
 800a166:	4631      	mov	r1, r6
 800a168:	4628      	mov	r0, r5
 800a16a:	f7f6 f9b5 	bl	80004d8 <__aeabi_dmul>
 800a16e:	4656      	mov	r6, sl
 800a170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a174:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a176:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a17a:	f7f6 fc5d 	bl	8000a38 <__aeabi_d2iz>
 800a17e:	4605      	mov	r5, r0
 800a180:	f7f6 f940 	bl	8000404 <__aeabi_i2d>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a18c:	f7f5 ffec 	bl	8000168 <__aeabi_dsub>
 800a190:	4602      	mov	r2, r0
 800a192:	460b      	mov	r3, r1
 800a194:	3530      	adds	r5, #48	@ 0x30
 800a196:	f806 5b01 	strb.w	r5, [r6], #1
 800a19a:	42a6      	cmp	r6, r4
 800a19c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a1a0:	f04f 0200 	mov.w	r2, #0
 800a1a4:	d124      	bne.n	800a1f0 <_dtoa_r+0x660>
 800a1a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a1aa:	4b39      	ldr	r3, [pc, #228]	@ (800a290 <_dtoa_r+0x700>)
 800a1ac:	f7f5 ffde 	bl	800016c <__adddf3>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b8:	f7f6 fc1e 	bl	80009f8 <__aeabi_dcmpgt>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	d145      	bne.n	800a24c <_dtoa_r+0x6bc>
 800a1c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	4932      	ldr	r1, [pc, #200]	@ (800a290 <_dtoa_r+0x700>)
 800a1c8:	f7f5 ffce 	bl	8000168 <__aeabi_dsub>
 800a1cc:	4602      	mov	r2, r0
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1d4:	f7f6 fbf2 	bl	80009bc <__aeabi_dcmplt>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	f43f aef6 	beq.w	8009fca <_dtoa_r+0x43a>
 800a1de:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a1e0:	1e73      	subs	r3, r6, #1
 800a1e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a1e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a1e8:	2b30      	cmp	r3, #48	@ 0x30
 800a1ea:	d0f8      	beq.n	800a1de <_dtoa_r+0x64e>
 800a1ec:	9f04      	ldr	r7, [sp, #16]
 800a1ee:	e73f      	b.n	800a070 <_dtoa_r+0x4e0>
 800a1f0:	4b29      	ldr	r3, [pc, #164]	@ (800a298 <_dtoa_r+0x708>)
 800a1f2:	f7f6 f971 	bl	80004d8 <__aeabi_dmul>
 800a1f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1fa:	e7bc      	b.n	800a176 <_dtoa_r+0x5e6>
 800a1fc:	d10c      	bne.n	800a218 <_dtoa_r+0x688>
 800a1fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a202:	2200      	movs	r2, #0
 800a204:	4b25      	ldr	r3, [pc, #148]	@ (800a29c <_dtoa_r+0x70c>)
 800a206:	f7f6 f967 	bl	80004d8 <__aeabi_dmul>
 800a20a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a20e:	f7f6 fbe9 	bl	80009e4 <__aeabi_dcmpge>
 800a212:	2800      	cmp	r0, #0
 800a214:	f000 815b 	beq.w	800a4ce <_dtoa_r+0x93e>
 800a218:	2400      	movs	r4, #0
 800a21a:	4625      	mov	r5, r4
 800a21c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a21e:	4656      	mov	r6, sl
 800a220:	43db      	mvns	r3, r3
 800a222:	9304      	str	r3, [sp, #16]
 800a224:	2700      	movs	r7, #0
 800a226:	4621      	mov	r1, r4
 800a228:	4658      	mov	r0, fp
 800a22a:	f000 fbb7 	bl	800a99c <_Bfree>
 800a22e:	2d00      	cmp	r5, #0
 800a230:	d0dc      	beq.n	800a1ec <_dtoa_r+0x65c>
 800a232:	b12f      	cbz	r7, 800a240 <_dtoa_r+0x6b0>
 800a234:	42af      	cmp	r7, r5
 800a236:	d003      	beq.n	800a240 <_dtoa_r+0x6b0>
 800a238:	4639      	mov	r1, r7
 800a23a:	4658      	mov	r0, fp
 800a23c:	f000 fbae 	bl	800a99c <_Bfree>
 800a240:	4629      	mov	r1, r5
 800a242:	4658      	mov	r0, fp
 800a244:	f000 fbaa 	bl	800a99c <_Bfree>
 800a248:	e7d0      	b.n	800a1ec <_dtoa_r+0x65c>
 800a24a:	9704      	str	r7, [sp, #16]
 800a24c:	4633      	mov	r3, r6
 800a24e:	461e      	mov	r6, r3
 800a250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a254:	2a39      	cmp	r2, #57	@ 0x39
 800a256:	d107      	bne.n	800a268 <_dtoa_r+0x6d8>
 800a258:	459a      	cmp	sl, r3
 800a25a:	d1f8      	bne.n	800a24e <_dtoa_r+0x6be>
 800a25c:	9a04      	ldr	r2, [sp, #16]
 800a25e:	3201      	adds	r2, #1
 800a260:	9204      	str	r2, [sp, #16]
 800a262:	2230      	movs	r2, #48	@ 0x30
 800a264:	f88a 2000 	strb.w	r2, [sl]
 800a268:	781a      	ldrb	r2, [r3, #0]
 800a26a:	3201      	adds	r2, #1
 800a26c:	701a      	strb	r2, [r3, #0]
 800a26e:	e7bd      	b.n	800a1ec <_dtoa_r+0x65c>
 800a270:	2200      	movs	r2, #0
 800a272:	4b09      	ldr	r3, [pc, #36]	@ (800a298 <_dtoa_r+0x708>)
 800a274:	f7f6 f930 	bl	80004d8 <__aeabi_dmul>
 800a278:	2200      	movs	r2, #0
 800a27a:	2300      	movs	r3, #0
 800a27c:	4604      	mov	r4, r0
 800a27e:	460d      	mov	r5, r1
 800a280:	f7f6 fb92 	bl	80009a8 <__aeabi_dcmpeq>
 800a284:	2800      	cmp	r0, #0
 800a286:	f43f aebc 	beq.w	800a002 <_dtoa_r+0x472>
 800a28a:	e6f1      	b.n	800a070 <_dtoa_r+0x4e0>
 800a28c:	0800bd38 	.word	0x0800bd38
 800a290:	3fe00000 	.word	0x3fe00000
 800a294:	3ff00000 	.word	0x3ff00000
 800a298:	40240000 	.word	0x40240000
 800a29c:	40140000 	.word	0x40140000
 800a2a0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a2a2:	2a00      	cmp	r2, #0
 800a2a4:	f000 80db 	beq.w	800a45e <_dtoa_r+0x8ce>
 800a2a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a2aa:	2a01      	cmp	r2, #1
 800a2ac:	f300 80bf 	bgt.w	800a42e <_dtoa_r+0x89e>
 800a2b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a2b2:	2a00      	cmp	r2, #0
 800a2b4:	f000 80b7 	beq.w	800a426 <_dtoa_r+0x896>
 800a2b8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a2bc:	4646      	mov	r6, r8
 800a2be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a2c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2c2:	2101      	movs	r1, #1
 800a2c4:	441a      	add	r2, r3
 800a2c6:	4658      	mov	r0, fp
 800a2c8:	4498      	add	r8, r3
 800a2ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2cc:	f000 fc1a 	bl	800ab04 <__i2b>
 800a2d0:	4605      	mov	r5, r0
 800a2d2:	b15e      	cbz	r6, 800a2ec <_dtoa_r+0x75c>
 800a2d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	dd08      	ble.n	800a2ec <_dtoa_r+0x75c>
 800a2da:	42b3      	cmp	r3, r6
 800a2dc:	bfa8      	it	ge
 800a2de:	4633      	movge	r3, r6
 800a2e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2e2:	eba8 0803 	sub.w	r8, r8, r3
 800a2e6:	1af6      	subs	r6, r6, r3
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a2ee:	b1f3      	cbz	r3, 800a32e <_dtoa_r+0x79e>
 800a2f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	f000 80b7 	beq.w	800a466 <_dtoa_r+0x8d6>
 800a2f8:	b18c      	cbz	r4, 800a31e <_dtoa_r+0x78e>
 800a2fa:	4629      	mov	r1, r5
 800a2fc:	4622      	mov	r2, r4
 800a2fe:	4658      	mov	r0, fp
 800a300:	f000 fcbe 	bl	800ac80 <__pow5mult>
 800a304:	464a      	mov	r2, r9
 800a306:	4601      	mov	r1, r0
 800a308:	4605      	mov	r5, r0
 800a30a:	4658      	mov	r0, fp
 800a30c:	f000 fc10 	bl	800ab30 <__multiply>
 800a310:	4649      	mov	r1, r9
 800a312:	9004      	str	r0, [sp, #16]
 800a314:	4658      	mov	r0, fp
 800a316:	f000 fb41 	bl	800a99c <_Bfree>
 800a31a:	9b04      	ldr	r3, [sp, #16]
 800a31c:	4699      	mov	r9, r3
 800a31e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a320:	1b1a      	subs	r2, r3, r4
 800a322:	d004      	beq.n	800a32e <_dtoa_r+0x79e>
 800a324:	4649      	mov	r1, r9
 800a326:	4658      	mov	r0, fp
 800a328:	f000 fcaa 	bl	800ac80 <__pow5mult>
 800a32c:	4681      	mov	r9, r0
 800a32e:	2101      	movs	r1, #1
 800a330:	4658      	mov	r0, fp
 800a332:	f000 fbe7 	bl	800ab04 <__i2b>
 800a336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a338:	4604      	mov	r4, r0
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	f000 81c9 	beq.w	800a6d2 <_dtoa_r+0xb42>
 800a340:	461a      	mov	r2, r3
 800a342:	4601      	mov	r1, r0
 800a344:	4658      	mov	r0, fp
 800a346:	f000 fc9b 	bl	800ac80 <__pow5mult>
 800a34a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a34c:	4604      	mov	r4, r0
 800a34e:	2b01      	cmp	r3, #1
 800a350:	f300 808f 	bgt.w	800a472 <_dtoa_r+0x8e2>
 800a354:	9b02      	ldr	r3, [sp, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	f040 8087 	bne.w	800a46a <_dtoa_r+0x8da>
 800a35c:	9b03      	ldr	r3, [sp, #12]
 800a35e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a362:	2b00      	cmp	r3, #0
 800a364:	f040 8083 	bne.w	800a46e <_dtoa_r+0x8de>
 800a368:	9b03      	ldr	r3, [sp, #12]
 800a36a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a36e:	0d1b      	lsrs	r3, r3, #20
 800a370:	051b      	lsls	r3, r3, #20
 800a372:	b12b      	cbz	r3, 800a380 <_dtoa_r+0x7f0>
 800a374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a376:	f108 0801 	add.w	r8, r8, #1
 800a37a:	3301      	adds	r3, #1
 800a37c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a37e:	2301      	movs	r3, #1
 800a380:	930a      	str	r3, [sp, #40]	@ 0x28
 800a382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 81aa 	beq.w	800a6de <_dtoa_r+0xb4e>
 800a38a:	6923      	ldr	r3, [r4, #16]
 800a38c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a390:	6918      	ldr	r0, [r3, #16]
 800a392:	f000 fb6b 	bl	800aa6c <__hi0bits>
 800a396:	f1c0 0020 	rsb	r0, r0, #32
 800a39a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a39c:	4418      	add	r0, r3
 800a39e:	f010 001f 	ands.w	r0, r0, #31
 800a3a2:	d071      	beq.n	800a488 <_dtoa_r+0x8f8>
 800a3a4:	f1c0 0320 	rsb	r3, r0, #32
 800a3a8:	2b04      	cmp	r3, #4
 800a3aa:	dd65      	ble.n	800a478 <_dtoa_r+0x8e8>
 800a3ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ae:	f1c0 001c 	rsb	r0, r0, #28
 800a3b2:	4403      	add	r3, r0
 800a3b4:	4480      	add	r8, r0
 800a3b6:	4406      	add	r6, r0
 800a3b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3ba:	f1b8 0f00 	cmp.w	r8, #0
 800a3be:	dd05      	ble.n	800a3cc <_dtoa_r+0x83c>
 800a3c0:	4649      	mov	r1, r9
 800a3c2:	4642      	mov	r2, r8
 800a3c4:	4658      	mov	r0, fp
 800a3c6:	f000 fcb5 	bl	800ad34 <__lshift>
 800a3ca:	4681      	mov	r9, r0
 800a3cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	dd05      	ble.n	800a3de <_dtoa_r+0x84e>
 800a3d2:	4621      	mov	r1, r4
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	4658      	mov	r0, fp
 800a3d8:	f000 fcac 	bl	800ad34 <__lshift>
 800a3dc:	4604      	mov	r4, r0
 800a3de:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d053      	beq.n	800a48c <_dtoa_r+0x8fc>
 800a3e4:	4621      	mov	r1, r4
 800a3e6:	4648      	mov	r0, r9
 800a3e8:	f000 fd10 	bl	800ae0c <__mcmp>
 800a3ec:	2800      	cmp	r0, #0
 800a3ee:	da4d      	bge.n	800a48c <_dtoa_r+0x8fc>
 800a3f0:	1e7b      	subs	r3, r7, #1
 800a3f2:	4649      	mov	r1, r9
 800a3f4:	9304      	str	r3, [sp, #16]
 800a3f6:	220a      	movs	r2, #10
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4658      	mov	r0, fp
 800a3fc:	f000 faf0 	bl	800a9e0 <__multadd>
 800a400:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a402:	4681      	mov	r9, r0
 800a404:	2b00      	cmp	r3, #0
 800a406:	f000 816c 	beq.w	800a6e2 <_dtoa_r+0xb52>
 800a40a:	2300      	movs	r3, #0
 800a40c:	4629      	mov	r1, r5
 800a40e:	220a      	movs	r2, #10
 800a410:	4658      	mov	r0, fp
 800a412:	f000 fae5 	bl	800a9e0 <__multadd>
 800a416:	9b08      	ldr	r3, [sp, #32]
 800a418:	4605      	mov	r5, r0
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	dc61      	bgt.n	800a4e2 <_dtoa_r+0x952>
 800a41e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a420:	2b02      	cmp	r3, #2
 800a422:	dc3b      	bgt.n	800a49c <_dtoa_r+0x90c>
 800a424:	e05d      	b.n	800a4e2 <_dtoa_r+0x952>
 800a426:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a428:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a42c:	e746      	b.n	800a2bc <_dtoa_r+0x72c>
 800a42e:	9b07      	ldr	r3, [sp, #28]
 800a430:	1e5c      	subs	r4, r3, #1
 800a432:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a434:	42a3      	cmp	r3, r4
 800a436:	bfbf      	itttt	lt
 800a438:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a43a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a43c:	1ae3      	sublt	r3, r4, r3
 800a43e:	18d2      	addlt	r2, r2, r3
 800a440:	bfa8      	it	ge
 800a442:	1b1c      	subge	r4, r3, r4
 800a444:	9b07      	ldr	r3, [sp, #28]
 800a446:	bfbe      	ittt	lt
 800a448:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a44a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a44c:	2400      	movlt	r4, #0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	bfb5      	itete	lt
 800a452:	eba8 0603 	sublt.w	r6, r8, r3
 800a456:	4646      	movge	r6, r8
 800a458:	2300      	movlt	r3, #0
 800a45a:	9b07      	ldrge	r3, [sp, #28]
 800a45c:	e730      	b.n	800a2c0 <_dtoa_r+0x730>
 800a45e:	4646      	mov	r6, r8
 800a460:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a462:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a464:	e735      	b.n	800a2d2 <_dtoa_r+0x742>
 800a466:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a468:	e75c      	b.n	800a324 <_dtoa_r+0x794>
 800a46a:	2300      	movs	r3, #0
 800a46c:	e788      	b.n	800a380 <_dtoa_r+0x7f0>
 800a46e:	9b02      	ldr	r3, [sp, #8]
 800a470:	e786      	b.n	800a380 <_dtoa_r+0x7f0>
 800a472:	2300      	movs	r3, #0
 800a474:	930a      	str	r3, [sp, #40]	@ 0x28
 800a476:	e788      	b.n	800a38a <_dtoa_r+0x7fa>
 800a478:	d09f      	beq.n	800a3ba <_dtoa_r+0x82a>
 800a47a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a47c:	331c      	adds	r3, #28
 800a47e:	441a      	add	r2, r3
 800a480:	4498      	add	r8, r3
 800a482:	441e      	add	r6, r3
 800a484:	9209      	str	r2, [sp, #36]	@ 0x24
 800a486:	e798      	b.n	800a3ba <_dtoa_r+0x82a>
 800a488:	4603      	mov	r3, r0
 800a48a:	e7f6      	b.n	800a47a <_dtoa_r+0x8ea>
 800a48c:	9b07      	ldr	r3, [sp, #28]
 800a48e:	9704      	str	r7, [sp, #16]
 800a490:	2b00      	cmp	r3, #0
 800a492:	dc20      	bgt.n	800a4d6 <_dtoa_r+0x946>
 800a494:	9308      	str	r3, [sp, #32]
 800a496:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a498:	2b02      	cmp	r3, #2
 800a49a:	dd1e      	ble.n	800a4da <_dtoa_r+0x94a>
 800a49c:	9b08      	ldr	r3, [sp, #32]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f47f aebc 	bne.w	800a21c <_dtoa_r+0x68c>
 800a4a4:	4621      	mov	r1, r4
 800a4a6:	2205      	movs	r2, #5
 800a4a8:	4658      	mov	r0, fp
 800a4aa:	f000 fa99 	bl	800a9e0 <__multadd>
 800a4ae:	4601      	mov	r1, r0
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	4648      	mov	r0, r9
 800a4b4:	f000 fcaa 	bl	800ae0c <__mcmp>
 800a4b8:	2800      	cmp	r0, #0
 800a4ba:	f77f aeaf 	ble.w	800a21c <_dtoa_r+0x68c>
 800a4be:	2331      	movs	r3, #49	@ 0x31
 800a4c0:	4656      	mov	r6, sl
 800a4c2:	f806 3b01 	strb.w	r3, [r6], #1
 800a4c6:	9b04      	ldr	r3, [sp, #16]
 800a4c8:	3301      	adds	r3, #1
 800a4ca:	9304      	str	r3, [sp, #16]
 800a4cc:	e6aa      	b.n	800a224 <_dtoa_r+0x694>
 800a4ce:	9c07      	ldr	r4, [sp, #28]
 800a4d0:	9704      	str	r7, [sp, #16]
 800a4d2:	4625      	mov	r5, r4
 800a4d4:	e7f3      	b.n	800a4be <_dtoa_r+0x92e>
 800a4d6:	9b07      	ldr	r3, [sp, #28]
 800a4d8:	9308      	str	r3, [sp, #32]
 800a4da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 8104 	beq.w	800a6ea <_dtoa_r+0xb5a>
 800a4e2:	2e00      	cmp	r6, #0
 800a4e4:	dd05      	ble.n	800a4f2 <_dtoa_r+0x962>
 800a4e6:	4629      	mov	r1, r5
 800a4e8:	4632      	mov	r2, r6
 800a4ea:	4658      	mov	r0, fp
 800a4ec:	f000 fc22 	bl	800ad34 <__lshift>
 800a4f0:	4605      	mov	r5, r0
 800a4f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d05a      	beq.n	800a5ae <_dtoa_r+0xa1e>
 800a4f8:	4658      	mov	r0, fp
 800a4fa:	6869      	ldr	r1, [r5, #4]
 800a4fc:	f000 fa0e 	bl	800a91c <_Balloc>
 800a500:	4606      	mov	r6, r0
 800a502:	b928      	cbnz	r0, 800a510 <_dtoa_r+0x980>
 800a504:	4602      	mov	r2, r0
 800a506:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a50a:	4b83      	ldr	r3, [pc, #524]	@ (800a718 <_dtoa_r+0xb88>)
 800a50c:	f7ff bb54 	b.w	8009bb8 <_dtoa_r+0x28>
 800a510:	692a      	ldr	r2, [r5, #16]
 800a512:	f105 010c 	add.w	r1, r5, #12
 800a516:	3202      	adds	r2, #2
 800a518:	0092      	lsls	r2, r2, #2
 800a51a:	300c      	adds	r0, #12
 800a51c:	f000 ffa8 	bl	800b470 <memcpy>
 800a520:	2201      	movs	r2, #1
 800a522:	4631      	mov	r1, r6
 800a524:	4658      	mov	r0, fp
 800a526:	f000 fc05 	bl	800ad34 <__lshift>
 800a52a:	462f      	mov	r7, r5
 800a52c:	4605      	mov	r5, r0
 800a52e:	f10a 0301 	add.w	r3, sl, #1
 800a532:	9307      	str	r3, [sp, #28]
 800a534:	9b08      	ldr	r3, [sp, #32]
 800a536:	4453      	add	r3, sl
 800a538:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a53a:	9b02      	ldr	r3, [sp, #8]
 800a53c:	f003 0301 	and.w	r3, r3, #1
 800a540:	930a      	str	r3, [sp, #40]	@ 0x28
 800a542:	9b07      	ldr	r3, [sp, #28]
 800a544:	4621      	mov	r1, r4
 800a546:	3b01      	subs	r3, #1
 800a548:	4648      	mov	r0, r9
 800a54a:	9302      	str	r3, [sp, #8]
 800a54c:	f7ff fa95 	bl	8009a7a <quorem>
 800a550:	4639      	mov	r1, r7
 800a552:	9008      	str	r0, [sp, #32]
 800a554:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a558:	4648      	mov	r0, r9
 800a55a:	f000 fc57 	bl	800ae0c <__mcmp>
 800a55e:	462a      	mov	r2, r5
 800a560:	9009      	str	r0, [sp, #36]	@ 0x24
 800a562:	4621      	mov	r1, r4
 800a564:	4658      	mov	r0, fp
 800a566:	f000 fc6d 	bl	800ae44 <__mdiff>
 800a56a:	68c2      	ldr	r2, [r0, #12]
 800a56c:	4606      	mov	r6, r0
 800a56e:	bb02      	cbnz	r2, 800a5b2 <_dtoa_r+0xa22>
 800a570:	4601      	mov	r1, r0
 800a572:	4648      	mov	r0, r9
 800a574:	f000 fc4a 	bl	800ae0c <__mcmp>
 800a578:	4602      	mov	r2, r0
 800a57a:	4631      	mov	r1, r6
 800a57c:	4658      	mov	r0, fp
 800a57e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a580:	f000 fa0c 	bl	800a99c <_Bfree>
 800a584:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a586:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a588:	9e07      	ldr	r6, [sp, #28]
 800a58a:	ea43 0102 	orr.w	r1, r3, r2
 800a58e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a590:	4319      	orrs	r1, r3
 800a592:	d110      	bne.n	800a5b6 <_dtoa_r+0xa26>
 800a594:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a598:	d029      	beq.n	800a5ee <_dtoa_r+0xa5e>
 800a59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	dd02      	ble.n	800a5a6 <_dtoa_r+0xa16>
 800a5a0:	9b08      	ldr	r3, [sp, #32]
 800a5a2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a5a6:	9b02      	ldr	r3, [sp, #8]
 800a5a8:	f883 8000 	strb.w	r8, [r3]
 800a5ac:	e63b      	b.n	800a226 <_dtoa_r+0x696>
 800a5ae:	4628      	mov	r0, r5
 800a5b0:	e7bb      	b.n	800a52a <_dtoa_r+0x99a>
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	e7e1      	b.n	800a57a <_dtoa_r+0x9ea>
 800a5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	db04      	blt.n	800a5c6 <_dtoa_r+0xa36>
 800a5bc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a5be:	430b      	orrs	r3, r1
 800a5c0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5c2:	430b      	orrs	r3, r1
 800a5c4:	d120      	bne.n	800a608 <_dtoa_r+0xa78>
 800a5c6:	2a00      	cmp	r2, #0
 800a5c8:	dded      	ble.n	800a5a6 <_dtoa_r+0xa16>
 800a5ca:	4649      	mov	r1, r9
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	4658      	mov	r0, fp
 800a5d0:	f000 fbb0 	bl	800ad34 <__lshift>
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	4681      	mov	r9, r0
 800a5d8:	f000 fc18 	bl	800ae0c <__mcmp>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	dc03      	bgt.n	800a5e8 <_dtoa_r+0xa58>
 800a5e0:	d1e1      	bne.n	800a5a6 <_dtoa_r+0xa16>
 800a5e2:	f018 0f01 	tst.w	r8, #1
 800a5e6:	d0de      	beq.n	800a5a6 <_dtoa_r+0xa16>
 800a5e8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a5ec:	d1d8      	bne.n	800a5a0 <_dtoa_r+0xa10>
 800a5ee:	2339      	movs	r3, #57	@ 0x39
 800a5f0:	9a02      	ldr	r2, [sp, #8]
 800a5f2:	7013      	strb	r3, [r2, #0]
 800a5f4:	4633      	mov	r3, r6
 800a5f6:	461e      	mov	r6, r3
 800a5f8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	2a39      	cmp	r2, #57	@ 0x39
 800a600:	d052      	beq.n	800a6a8 <_dtoa_r+0xb18>
 800a602:	3201      	adds	r2, #1
 800a604:	701a      	strb	r2, [r3, #0]
 800a606:	e60e      	b.n	800a226 <_dtoa_r+0x696>
 800a608:	2a00      	cmp	r2, #0
 800a60a:	dd07      	ble.n	800a61c <_dtoa_r+0xa8c>
 800a60c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a610:	d0ed      	beq.n	800a5ee <_dtoa_r+0xa5e>
 800a612:	9a02      	ldr	r2, [sp, #8]
 800a614:	f108 0301 	add.w	r3, r8, #1
 800a618:	7013      	strb	r3, [r2, #0]
 800a61a:	e604      	b.n	800a226 <_dtoa_r+0x696>
 800a61c:	9b07      	ldr	r3, [sp, #28]
 800a61e:	9a07      	ldr	r2, [sp, #28]
 800a620:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a624:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a626:	4293      	cmp	r3, r2
 800a628:	d028      	beq.n	800a67c <_dtoa_r+0xaec>
 800a62a:	4649      	mov	r1, r9
 800a62c:	2300      	movs	r3, #0
 800a62e:	220a      	movs	r2, #10
 800a630:	4658      	mov	r0, fp
 800a632:	f000 f9d5 	bl	800a9e0 <__multadd>
 800a636:	42af      	cmp	r7, r5
 800a638:	4681      	mov	r9, r0
 800a63a:	f04f 0300 	mov.w	r3, #0
 800a63e:	f04f 020a 	mov.w	r2, #10
 800a642:	4639      	mov	r1, r7
 800a644:	4658      	mov	r0, fp
 800a646:	d107      	bne.n	800a658 <_dtoa_r+0xac8>
 800a648:	f000 f9ca 	bl	800a9e0 <__multadd>
 800a64c:	4607      	mov	r7, r0
 800a64e:	4605      	mov	r5, r0
 800a650:	9b07      	ldr	r3, [sp, #28]
 800a652:	3301      	adds	r3, #1
 800a654:	9307      	str	r3, [sp, #28]
 800a656:	e774      	b.n	800a542 <_dtoa_r+0x9b2>
 800a658:	f000 f9c2 	bl	800a9e0 <__multadd>
 800a65c:	4629      	mov	r1, r5
 800a65e:	4607      	mov	r7, r0
 800a660:	2300      	movs	r3, #0
 800a662:	220a      	movs	r2, #10
 800a664:	4658      	mov	r0, fp
 800a666:	f000 f9bb 	bl	800a9e0 <__multadd>
 800a66a:	4605      	mov	r5, r0
 800a66c:	e7f0      	b.n	800a650 <_dtoa_r+0xac0>
 800a66e:	9b08      	ldr	r3, [sp, #32]
 800a670:	2700      	movs	r7, #0
 800a672:	2b00      	cmp	r3, #0
 800a674:	bfcc      	ite	gt
 800a676:	461e      	movgt	r6, r3
 800a678:	2601      	movle	r6, #1
 800a67a:	4456      	add	r6, sl
 800a67c:	4649      	mov	r1, r9
 800a67e:	2201      	movs	r2, #1
 800a680:	4658      	mov	r0, fp
 800a682:	f000 fb57 	bl	800ad34 <__lshift>
 800a686:	4621      	mov	r1, r4
 800a688:	4681      	mov	r9, r0
 800a68a:	f000 fbbf 	bl	800ae0c <__mcmp>
 800a68e:	2800      	cmp	r0, #0
 800a690:	dcb0      	bgt.n	800a5f4 <_dtoa_r+0xa64>
 800a692:	d102      	bne.n	800a69a <_dtoa_r+0xb0a>
 800a694:	f018 0f01 	tst.w	r8, #1
 800a698:	d1ac      	bne.n	800a5f4 <_dtoa_r+0xa64>
 800a69a:	4633      	mov	r3, r6
 800a69c:	461e      	mov	r6, r3
 800a69e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6a2:	2a30      	cmp	r2, #48	@ 0x30
 800a6a4:	d0fa      	beq.n	800a69c <_dtoa_r+0xb0c>
 800a6a6:	e5be      	b.n	800a226 <_dtoa_r+0x696>
 800a6a8:	459a      	cmp	sl, r3
 800a6aa:	d1a4      	bne.n	800a5f6 <_dtoa_r+0xa66>
 800a6ac:	9b04      	ldr	r3, [sp, #16]
 800a6ae:	3301      	adds	r3, #1
 800a6b0:	9304      	str	r3, [sp, #16]
 800a6b2:	2331      	movs	r3, #49	@ 0x31
 800a6b4:	f88a 3000 	strb.w	r3, [sl]
 800a6b8:	e5b5      	b.n	800a226 <_dtoa_r+0x696>
 800a6ba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a6bc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a71c <_dtoa_r+0xb8c>
 800a6c0:	b11b      	cbz	r3, 800a6ca <_dtoa_r+0xb3a>
 800a6c2:	f10a 0308 	add.w	r3, sl, #8
 800a6c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a6c8:	6013      	str	r3, [r2, #0]
 800a6ca:	4650      	mov	r0, sl
 800a6cc:	b017      	add	sp, #92	@ 0x5c
 800a6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	f77f ae3d 	ble.w	800a354 <_dtoa_r+0x7c4>
 800a6da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6dc:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6de:	2001      	movs	r0, #1
 800a6e0:	e65b      	b.n	800a39a <_dtoa_r+0x80a>
 800a6e2:	9b08      	ldr	r3, [sp, #32]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f77f aed6 	ble.w	800a496 <_dtoa_r+0x906>
 800a6ea:	4656      	mov	r6, sl
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	4648      	mov	r0, r9
 800a6f0:	f7ff f9c3 	bl	8009a7a <quorem>
 800a6f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a6f8:	9b08      	ldr	r3, [sp, #32]
 800a6fa:	f806 8b01 	strb.w	r8, [r6], #1
 800a6fe:	eba6 020a 	sub.w	r2, r6, sl
 800a702:	4293      	cmp	r3, r2
 800a704:	ddb3      	ble.n	800a66e <_dtoa_r+0xade>
 800a706:	4649      	mov	r1, r9
 800a708:	2300      	movs	r3, #0
 800a70a:	220a      	movs	r2, #10
 800a70c:	4658      	mov	r0, fp
 800a70e:	f000 f967 	bl	800a9e0 <__multadd>
 800a712:	4681      	mov	r9, r0
 800a714:	e7ea      	b.n	800a6ec <_dtoa_r+0xb5c>
 800a716:	bf00      	nop
 800a718:	0800bc9a 	.word	0x0800bc9a
 800a71c:	0800bc1e 	.word	0x0800bc1e

0800a720 <_free_r>:
 800a720:	b538      	push	{r3, r4, r5, lr}
 800a722:	4605      	mov	r5, r0
 800a724:	2900      	cmp	r1, #0
 800a726:	d040      	beq.n	800a7aa <_free_r+0x8a>
 800a728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a72c:	1f0c      	subs	r4, r1, #4
 800a72e:	2b00      	cmp	r3, #0
 800a730:	bfb8      	it	lt
 800a732:	18e4      	addlt	r4, r4, r3
 800a734:	f000 f8e6 	bl	800a904 <__malloc_lock>
 800a738:	4a1c      	ldr	r2, [pc, #112]	@ (800a7ac <_free_r+0x8c>)
 800a73a:	6813      	ldr	r3, [r2, #0]
 800a73c:	b933      	cbnz	r3, 800a74c <_free_r+0x2c>
 800a73e:	6063      	str	r3, [r4, #4]
 800a740:	6014      	str	r4, [r2, #0]
 800a742:	4628      	mov	r0, r5
 800a744:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a748:	f000 b8e2 	b.w	800a910 <__malloc_unlock>
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	d908      	bls.n	800a762 <_free_r+0x42>
 800a750:	6820      	ldr	r0, [r4, #0]
 800a752:	1821      	adds	r1, r4, r0
 800a754:	428b      	cmp	r3, r1
 800a756:	bf01      	itttt	eq
 800a758:	6819      	ldreq	r1, [r3, #0]
 800a75a:	685b      	ldreq	r3, [r3, #4]
 800a75c:	1809      	addeq	r1, r1, r0
 800a75e:	6021      	streq	r1, [r4, #0]
 800a760:	e7ed      	b.n	800a73e <_free_r+0x1e>
 800a762:	461a      	mov	r2, r3
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	b10b      	cbz	r3, 800a76c <_free_r+0x4c>
 800a768:	42a3      	cmp	r3, r4
 800a76a:	d9fa      	bls.n	800a762 <_free_r+0x42>
 800a76c:	6811      	ldr	r1, [r2, #0]
 800a76e:	1850      	adds	r0, r2, r1
 800a770:	42a0      	cmp	r0, r4
 800a772:	d10b      	bne.n	800a78c <_free_r+0x6c>
 800a774:	6820      	ldr	r0, [r4, #0]
 800a776:	4401      	add	r1, r0
 800a778:	1850      	adds	r0, r2, r1
 800a77a:	4283      	cmp	r3, r0
 800a77c:	6011      	str	r1, [r2, #0]
 800a77e:	d1e0      	bne.n	800a742 <_free_r+0x22>
 800a780:	6818      	ldr	r0, [r3, #0]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	4408      	add	r0, r1
 800a786:	6010      	str	r0, [r2, #0]
 800a788:	6053      	str	r3, [r2, #4]
 800a78a:	e7da      	b.n	800a742 <_free_r+0x22>
 800a78c:	d902      	bls.n	800a794 <_free_r+0x74>
 800a78e:	230c      	movs	r3, #12
 800a790:	602b      	str	r3, [r5, #0]
 800a792:	e7d6      	b.n	800a742 <_free_r+0x22>
 800a794:	6820      	ldr	r0, [r4, #0]
 800a796:	1821      	adds	r1, r4, r0
 800a798:	428b      	cmp	r3, r1
 800a79a:	bf01      	itttt	eq
 800a79c:	6819      	ldreq	r1, [r3, #0]
 800a79e:	685b      	ldreq	r3, [r3, #4]
 800a7a0:	1809      	addeq	r1, r1, r0
 800a7a2:	6021      	streq	r1, [r4, #0]
 800a7a4:	6063      	str	r3, [r4, #4]
 800a7a6:	6054      	str	r4, [r2, #4]
 800a7a8:	e7cb      	b.n	800a742 <_free_r+0x22>
 800a7aa:	bd38      	pop	{r3, r4, r5, pc}
 800a7ac:	200017f0 	.word	0x200017f0

0800a7b0 <malloc>:
 800a7b0:	4b02      	ldr	r3, [pc, #8]	@ (800a7bc <malloc+0xc>)
 800a7b2:	4601      	mov	r1, r0
 800a7b4:	6818      	ldr	r0, [r3, #0]
 800a7b6:	f000 b825 	b.w	800a804 <_malloc_r>
 800a7ba:	bf00      	nop
 800a7bc:	2000019c 	.word	0x2000019c

0800a7c0 <sbrk_aligned>:
 800a7c0:	b570      	push	{r4, r5, r6, lr}
 800a7c2:	4e0f      	ldr	r6, [pc, #60]	@ (800a800 <sbrk_aligned+0x40>)
 800a7c4:	460c      	mov	r4, r1
 800a7c6:	6831      	ldr	r1, [r6, #0]
 800a7c8:	4605      	mov	r5, r0
 800a7ca:	b911      	cbnz	r1, 800a7d2 <sbrk_aligned+0x12>
 800a7cc:	f000 fe40 	bl	800b450 <_sbrk_r>
 800a7d0:	6030      	str	r0, [r6, #0]
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	f000 fe3b 	bl	800b450 <_sbrk_r>
 800a7da:	1c43      	adds	r3, r0, #1
 800a7dc:	d103      	bne.n	800a7e6 <sbrk_aligned+0x26>
 800a7de:	f04f 34ff 	mov.w	r4, #4294967295
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	bd70      	pop	{r4, r5, r6, pc}
 800a7e6:	1cc4      	adds	r4, r0, #3
 800a7e8:	f024 0403 	bic.w	r4, r4, #3
 800a7ec:	42a0      	cmp	r0, r4
 800a7ee:	d0f8      	beq.n	800a7e2 <sbrk_aligned+0x22>
 800a7f0:	1a21      	subs	r1, r4, r0
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	f000 fe2c 	bl	800b450 <_sbrk_r>
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	d1f2      	bne.n	800a7e2 <sbrk_aligned+0x22>
 800a7fc:	e7ef      	b.n	800a7de <sbrk_aligned+0x1e>
 800a7fe:	bf00      	nop
 800a800:	200017ec 	.word	0x200017ec

0800a804 <_malloc_r>:
 800a804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a808:	1ccd      	adds	r5, r1, #3
 800a80a:	f025 0503 	bic.w	r5, r5, #3
 800a80e:	3508      	adds	r5, #8
 800a810:	2d0c      	cmp	r5, #12
 800a812:	bf38      	it	cc
 800a814:	250c      	movcc	r5, #12
 800a816:	2d00      	cmp	r5, #0
 800a818:	4606      	mov	r6, r0
 800a81a:	db01      	blt.n	800a820 <_malloc_r+0x1c>
 800a81c:	42a9      	cmp	r1, r5
 800a81e:	d904      	bls.n	800a82a <_malloc_r+0x26>
 800a820:	230c      	movs	r3, #12
 800a822:	6033      	str	r3, [r6, #0]
 800a824:	2000      	movs	r0, #0
 800a826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a82a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a900 <_malloc_r+0xfc>
 800a82e:	f000 f869 	bl	800a904 <__malloc_lock>
 800a832:	f8d8 3000 	ldr.w	r3, [r8]
 800a836:	461c      	mov	r4, r3
 800a838:	bb44      	cbnz	r4, 800a88c <_malloc_r+0x88>
 800a83a:	4629      	mov	r1, r5
 800a83c:	4630      	mov	r0, r6
 800a83e:	f7ff ffbf 	bl	800a7c0 <sbrk_aligned>
 800a842:	1c43      	adds	r3, r0, #1
 800a844:	4604      	mov	r4, r0
 800a846:	d158      	bne.n	800a8fa <_malloc_r+0xf6>
 800a848:	f8d8 4000 	ldr.w	r4, [r8]
 800a84c:	4627      	mov	r7, r4
 800a84e:	2f00      	cmp	r7, #0
 800a850:	d143      	bne.n	800a8da <_malloc_r+0xd6>
 800a852:	2c00      	cmp	r4, #0
 800a854:	d04b      	beq.n	800a8ee <_malloc_r+0xea>
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	4639      	mov	r1, r7
 800a85a:	4630      	mov	r0, r6
 800a85c:	eb04 0903 	add.w	r9, r4, r3
 800a860:	f000 fdf6 	bl	800b450 <_sbrk_r>
 800a864:	4581      	cmp	r9, r0
 800a866:	d142      	bne.n	800a8ee <_malloc_r+0xea>
 800a868:	6821      	ldr	r1, [r4, #0]
 800a86a:	4630      	mov	r0, r6
 800a86c:	1a6d      	subs	r5, r5, r1
 800a86e:	4629      	mov	r1, r5
 800a870:	f7ff ffa6 	bl	800a7c0 <sbrk_aligned>
 800a874:	3001      	adds	r0, #1
 800a876:	d03a      	beq.n	800a8ee <_malloc_r+0xea>
 800a878:	6823      	ldr	r3, [r4, #0]
 800a87a:	442b      	add	r3, r5
 800a87c:	6023      	str	r3, [r4, #0]
 800a87e:	f8d8 3000 	ldr.w	r3, [r8]
 800a882:	685a      	ldr	r2, [r3, #4]
 800a884:	bb62      	cbnz	r2, 800a8e0 <_malloc_r+0xdc>
 800a886:	f8c8 7000 	str.w	r7, [r8]
 800a88a:	e00f      	b.n	800a8ac <_malloc_r+0xa8>
 800a88c:	6822      	ldr	r2, [r4, #0]
 800a88e:	1b52      	subs	r2, r2, r5
 800a890:	d420      	bmi.n	800a8d4 <_malloc_r+0xd0>
 800a892:	2a0b      	cmp	r2, #11
 800a894:	d917      	bls.n	800a8c6 <_malloc_r+0xc2>
 800a896:	1961      	adds	r1, r4, r5
 800a898:	42a3      	cmp	r3, r4
 800a89a:	6025      	str	r5, [r4, #0]
 800a89c:	bf18      	it	ne
 800a89e:	6059      	strne	r1, [r3, #4]
 800a8a0:	6863      	ldr	r3, [r4, #4]
 800a8a2:	bf08      	it	eq
 800a8a4:	f8c8 1000 	streq.w	r1, [r8]
 800a8a8:	5162      	str	r2, [r4, r5]
 800a8aa:	604b      	str	r3, [r1, #4]
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	f000 f82f 	bl	800a910 <__malloc_unlock>
 800a8b2:	f104 000b 	add.w	r0, r4, #11
 800a8b6:	1d23      	adds	r3, r4, #4
 800a8b8:	f020 0007 	bic.w	r0, r0, #7
 800a8bc:	1ac2      	subs	r2, r0, r3
 800a8be:	bf1c      	itt	ne
 800a8c0:	1a1b      	subne	r3, r3, r0
 800a8c2:	50a3      	strne	r3, [r4, r2]
 800a8c4:	e7af      	b.n	800a826 <_malloc_r+0x22>
 800a8c6:	6862      	ldr	r2, [r4, #4]
 800a8c8:	42a3      	cmp	r3, r4
 800a8ca:	bf0c      	ite	eq
 800a8cc:	f8c8 2000 	streq.w	r2, [r8]
 800a8d0:	605a      	strne	r2, [r3, #4]
 800a8d2:	e7eb      	b.n	800a8ac <_malloc_r+0xa8>
 800a8d4:	4623      	mov	r3, r4
 800a8d6:	6864      	ldr	r4, [r4, #4]
 800a8d8:	e7ae      	b.n	800a838 <_malloc_r+0x34>
 800a8da:	463c      	mov	r4, r7
 800a8dc:	687f      	ldr	r7, [r7, #4]
 800a8de:	e7b6      	b.n	800a84e <_malloc_r+0x4a>
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	42a3      	cmp	r3, r4
 800a8e6:	d1fb      	bne.n	800a8e0 <_malloc_r+0xdc>
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	6053      	str	r3, [r2, #4]
 800a8ec:	e7de      	b.n	800a8ac <_malloc_r+0xa8>
 800a8ee:	230c      	movs	r3, #12
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	6033      	str	r3, [r6, #0]
 800a8f4:	f000 f80c 	bl	800a910 <__malloc_unlock>
 800a8f8:	e794      	b.n	800a824 <_malloc_r+0x20>
 800a8fa:	6005      	str	r5, [r0, #0]
 800a8fc:	e7d6      	b.n	800a8ac <_malloc_r+0xa8>
 800a8fe:	bf00      	nop
 800a900:	200017f0 	.word	0x200017f0

0800a904 <__malloc_lock>:
 800a904:	4801      	ldr	r0, [pc, #4]	@ (800a90c <__malloc_lock+0x8>)
 800a906:	f7ff b8a8 	b.w	8009a5a <__retarget_lock_acquire_recursive>
 800a90a:	bf00      	nop
 800a90c:	200017e8 	.word	0x200017e8

0800a910 <__malloc_unlock>:
 800a910:	4801      	ldr	r0, [pc, #4]	@ (800a918 <__malloc_unlock+0x8>)
 800a912:	f7ff b8a3 	b.w	8009a5c <__retarget_lock_release_recursive>
 800a916:	bf00      	nop
 800a918:	200017e8 	.word	0x200017e8

0800a91c <_Balloc>:
 800a91c:	b570      	push	{r4, r5, r6, lr}
 800a91e:	69c6      	ldr	r6, [r0, #28]
 800a920:	4604      	mov	r4, r0
 800a922:	460d      	mov	r5, r1
 800a924:	b976      	cbnz	r6, 800a944 <_Balloc+0x28>
 800a926:	2010      	movs	r0, #16
 800a928:	f7ff ff42 	bl	800a7b0 <malloc>
 800a92c:	4602      	mov	r2, r0
 800a92e:	61e0      	str	r0, [r4, #28]
 800a930:	b920      	cbnz	r0, 800a93c <_Balloc+0x20>
 800a932:	216b      	movs	r1, #107	@ 0x6b
 800a934:	4b17      	ldr	r3, [pc, #92]	@ (800a994 <_Balloc+0x78>)
 800a936:	4818      	ldr	r0, [pc, #96]	@ (800a998 <_Balloc+0x7c>)
 800a938:	f000 fda8 	bl	800b48c <__assert_func>
 800a93c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a940:	6006      	str	r6, [r0, #0]
 800a942:	60c6      	str	r6, [r0, #12]
 800a944:	69e6      	ldr	r6, [r4, #28]
 800a946:	68f3      	ldr	r3, [r6, #12]
 800a948:	b183      	cbz	r3, 800a96c <_Balloc+0x50>
 800a94a:	69e3      	ldr	r3, [r4, #28]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a952:	b9b8      	cbnz	r0, 800a984 <_Balloc+0x68>
 800a954:	2101      	movs	r1, #1
 800a956:	fa01 f605 	lsl.w	r6, r1, r5
 800a95a:	1d72      	adds	r2, r6, #5
 800a95c:	4620      	mov	r0, r4
 800a95e:	0092      	lsls	r2, r2, #2
 800a960:	f000 fdb2 	bl	800b4c8 <_calloc_r>
 800a964:	b160      	cbz	r0, 800a980 <_Balloc+0x64>
 800a966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a96a:	e00e      	b.n	800a98a <_Balloc+0x6e>
 800a96c:	2221      	movs	r2, #33	@ 0x21
 800a96e:	2104      	movs	r1, #4
 800a970:	4620      	mov	r0, r4
 800a972:	f000 fda9 	bl	800b4c8 <_calloc_r>
 800a976:	69e3      	ldr	r3, [r4, #28]
 800a978:	60f0      	str	r0, [r6, #12]
 800a97a:	68db      	ldr	r3, [r3, #12]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d1e4      	bne.n	800a94a <_Balloc+0x2e>
 800a980:	2000      	movs	r0, #0
 800a982:	bd70      	pop	{r4, r5, r6, pc}
 800a984:	6802      	ldr	r2, [r0, #0]
 800a986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a98a:	2300      	movs	r3, #0
 800a98c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a990:	e7f7      	b.n	800a982 <_Balloc+0x66>
 800a992:	bf00      	nop
 800a994:	0800bc2b 	.word	0x0800bc2b
 800a998:	0800bcab 	.word	0x0800bcab

0800a99c <_Bfree>:
 800a99c:	b570      	push	{r4, r5, r6, lr}
 800a99e:	69c6      	ldr	r6, [r0, #28]
 800a9a0:	4605      	mov	r5, r0
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	b976      	cbnz	r6, 800a9c4 <_Bfree+0x28>
 800a9a6:	2010      	movs	r0, #16
 800a9a8:	f7ff ff02 	bl	800a7b0 <malloc>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	61e8      	str	r0, [r5, #28]
 800a9b0:	b920      	cbnz	r0, 800a9bc <_Bfree+0x20>
 800a9b2:	218f      	movs	r1, #143	@ 0x8f
 800a9b4:	4b08      	ldr	r3, [pc, #32]	@ (800a9d8 <_Bfree+0x3c>)
 800a9b6:	4809      	ldr	r0, [pc, #36]	@ (800a9dc <_Bfree+0x40>)
 800a9b8:	f000 fd68 	bl	800b48c <__assert_func>
 800a9bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9c0:	6006      	str	r6, [r0, #0]
 800a9c2:	60c6      	str	r6, [r0, #12]
 800a9c4:	b13c      	cbz	r4, 800a9d6 <_Bfree+0x3a>
 800a9c6:	69eb      	ldr	r3, [r5, #28]
 800a9c8:	6862      	ldr	r2, [r4, #4]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a9d0:	6021      	str	r1, [r4, #0]
 800a9d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a9d6:	bd70      	pop	{r4, r5, r6, pc}
 800a9d8:	0800bc2b 	.word	0x0800bc2b
 800a9dc:	0800bcab 	.word	0x0800bcab

0800a9e0 <__multadd>:
 800a9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	461e      	mov	r6, r3
 800a9ea:	2000      	movs	r0, #0
 800a9ec:	690d      	ldr	r5, [r1, #16]
 800a9ee:	f101 0c14 	add.w	ip, r1, #20
 800a9f2:	f8dc 3000 	ldr.w	r3, [ip]
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	b299      	uxth	r1, r3
 800a9fa:	fb02 6101 	mla	r1, r2, r1, r6
 800a9fe:	0c1e      	lsrs	r6, r3, #16
 800aa00:	0c0b      	lsrs	r3, r1, #16
 800aa02:	fb02 3306 	mla	r3, r2, r6, r3
 800aa06:	b289      	uxth	r1, r1
 800aa08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa0c:	4285      	cmp	r5, r0
 800aa0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa12:	f84c 1b04 	str.w	r1, [ip], #4
 800aa16:	dcec      	bgt.n	800a9f2 <__multadd+0x12>
 800aa18:	b30e      	cbz	r6, 800aa5e <__multadd+0x7e>
 800aa1a:	68a3      	ldr	r3, [r4, #8]
 800aa1c:	42ab      	cmp	r3, r5
 800aa1e:	dc19      	bgt.n	800aa54 <__multadd+0x74>
 800aa20:	6861      	ldr	r1, [r4, #4]
 800aa22:	4638      	mov	r0, r7
 800aa24:	3101      	adds	r1, #1
 800aa26:	f7ff ff79 	bl	800a91c <_Balloc>
 800aa2a:	4680      	mov	r8, r0
 800aa2c:	b928      	cbnz	r0, 800aa3a <__multadd+0x5a>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	21ba      	movs	r1, #186	@ 0xba
 800aa32:	4b0c      	ldr	r3, [pc, #48]	@ (800aa64 <__multadd+0x84>)
 800aa34:	480c      	ldr	r0, [pc, #48]	@ (800aa68 <__multadd+0x88>)
 800aa36:	f000 fd29 	bl	800b48c <__assert_func>
 800aa3a:	6922      	ldr	r2, [r4, #16]
 800aa3c:	f104 010c 	add.w	r1, r4, #12
 800aa40:	3202      	adds	r2, #2
 800aa42:	0092      	lsls	r2, r2, #2
 800aa44:	300c      	adds	r0, #12
 800aa46:	f000 fd13 	bl	800b470 <memcpy>
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4638      	mov	r0, r7
 800aa4e:	f7ff ffa5 	bl	800a99c <_Bfree>
 800aa52:	4644      	mov	r4, r8
 800aa54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aa58:	3501      	adds	r5, #1
 800aa5a:	615e      	str	r6, [r3, #20]
 800aa5c:	6125      	str	r5, [r4, #16]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa64:	0800bc9a 	.word	0x0800bc9a
 800aa68:	0800bcab 	.word	0x0800bcab

0800aa6c <__hi0bits>:
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aa72:	bf3a      	itte	cc
 800aa74:	0403      	lslcc	r3, r0, #16
 800aa76:	2010      	movcc	r0, #16
 800aa78:	2000      	movcs	r0, #0
 800aa7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa7e:	bf3c      	itt	cc
 800aa80:	021b      	lslcc	r3, r3, #8
 800aa82:	3008      	addcc	r0, #8
 800aa84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa88:	bf3c      	itt	cc
 800aa8a:	011b      	lslcc	r3, r3, #4
 800aa8c:	3004      	addcc	r0, #4
 800aa8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa92:	bf3c      	itt	cc
 800aa94:	009b      	lslcc	r3, r3, #2
 800aa96:	3002      	addcc	r0, #2
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	db05      	blt.n	800aaa8 <__hi0bits+0x3c>
 800aa9c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aaa0:	f100 0001 	add.w	r0, r0, #1
 800aaa4:	bf08      	it	eq
 800aaa6:	2020      	moveq	r0, #32
 800aaa8:	4770      	bx	lr

0800aaaa <__lo0bits>:
 800aaaa:	6803      	ldr	r3, [r0, #0]
 800aaac:	4602      	mov	r2, r0
 800aaae:	f013 0007 	ands.w	r0, r3, #7
 800aab2:	d00b      	beq.n	800aacc <__lo0bits+0x22>
 800aab4:	07d9      	lsls	r1, r3, #31
 800aab6:	d421      	bmi.n	800aafc <__lo0bits+0x52>
 800aab8:	0798      	lsls	r0, r3, #30
 800aaba:	bf49      	itett	mi
 800aabc:	085b      	lsrmi	r3, r3, #1
 800aabe:	089b      	lsrpl	r3, r3, #2
 800aac0:	2001      	movmi	r0, #1
 800aac2:	6013      	strmi	r3, [r2, #0]
 800aac4:	bf5c      	itt	pl
 800aac6:	2002      	movpl	r0, #2
 800aac8:	6013      	strpl	r3, [r2, #0]
 800aaca:	4770      	bx	lr
 800aacc:	b299      	uxth	r1, r3
 800aace:	b909      	cbnz	r1, 800aad4 <__lo0bits+0x2a>
 800aad0:	2010      	movs	r0, #16
 800aad2:	0c1b      	lsrs	r3, r3, #16
 800aad4:	b2d9      	uxtb	r1, r3
 800aad6:	b909      	cbnz	r1, 800aadc <__lo0bits+0x32>
 800aad8:	3008      	adds	r0, #8
 800aada:	0a1b      	lsrs	r3, r3, #8
 800aadc:	0719      	lsls	r1, r3, #28
 800aade:	bf04      	itt	eq
 800aae0:	091b      	lsreq	r3, r3, #4
 800aae2:	3004      	addeq	r0, #4
 800aae4:	0799      	lsls	r1, r3, #30
 800aae6:	bf04      	itt	eq
 800aae8:	089b      	lsreq	r3, r3, #2
 800aaea:	3002      	addeq	r0, #2
 800aaec:	07d9      	lsls	r1, r3, #31
 800aaee:	d403      	bmi.n	800aaf8 <__lo0bits+0x4e>
 800aaf0:	085b      	lsrs	r3, r3, #1
 800aaf2:	f100 0001 	add.w	r0, r0, #1
 800aaf6:	d003      	beq.n	800ab00 <__lo0bits+0x56>
 800aaf8:	6013      	str	r3, [r2, #0]
 800aafa:	4770      	bx	lr
 800aafc:	2000      	movs	r0, #0
 800aafe:	4770      	bx	lr
 800ab00:	2020      	movs	r0, #32
 800ab02:	4770      	bx	lr

0800ab04 <__i2b>:
 800ab04:	b510      	push	{r4, lr}
 800ab06:	460c      	mov	r4, r1
 800ab08:	2101      	movs	r1, #1
 800ab0a:	f7ff ff07 	bl	800a91c <_Balloc>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	b928      	cbnz	r0, 800ab1e <__i2b+0x1a>
 800ab12:	f240 1145 	movw	r1, #325	@ 0x145
 800ab16:	4b04      	ldr	r3, [pc, #16]	@ (800ab28 <__i2b+0x24>)
 800ab18:	4804      	ldr	r0, [pc, #16]	@ (800ab2c <__i2b+0x28>)
 800ab1a:	f000 fcb7 	bl	800b48c <__assert_func>
 800ab1e:	2301      	movs	r3, #1
 800ab20:	6144      	str	r4, [r0, #20]
 800ab22:	6103      	str	r3, [r0, #16]
 800ab24:	bd10      	pop	{r4, pc}
 800ab26:	bf00      	nop
 800ab28:	0800bc9a 	.word	0x0800bc9a
 800ab2c:	0800bcab 	.word	0x0800bcab

0800ab30 <__multiply>:
 800ab30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab34:	4614      	mov	r4, r2
 800ab36:	690a      	ldr	r2, [r1, #16]
 800ab38:	6923      	ldr	r3, [r4, #16]
 800ab3a:	460f      	mov	r7, r1
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	bfa2      	ittt	ge
 800ab40:	4623      	movge	r3, r4
 800ab42:	460c      	movge	r4, r1
 800ab44:	461f      	movge	r7, r3
 800ab46:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ab4a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ab4e:	68a3      	ldr	r3, [r4, #8]
 800ab50:	6861      	ldr	r1, [r4, #4]
 800ab52:	eb0a 0609 	add.w	r6, sl, r9
 800ab56:	42b3      	cmp	r3, r6
 800ab58:	b085      	sub	sp, #20
 800ab5a:	bfb8      	it	lt
 800ab5c:	3101      	addlt	r1, #1
 800ab5e:	f7ff fedd 	bl	800a91c <_Balloc>
 800ab62:	b930      	cbnz	r0, 800ab72 <__multiply+0x42>
 800ab64:	4602      	mov	r2, r0
 800ab66:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ab6a:	4b43      	ldr	r3, [pc, #268]	@ (800ac78 <__multiply+0x148>)
 800ab6c:	4843      	ldr	r0, [pc, #268]	@ (800ac7c <__multiply+0x14c>)
 800ab6e:	f000 fc8d 	bl	800b48c <__assert_func>
 800ab72:	f100 0514 	add.w	r5, r0, #20
 800ab76:	462b      	mov	r3, r5
 800ab78:	2200      	movs	r2, #0
 800ab7a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab7e:	4543      	cmp	r3, r8
 800ab80:	d321      	bcc.n	800abc6 <__multiply+0x96>
 800ab82:	f107 0114 	add.w	r1, r7, #20
 800ab86:	f104 0214 	add.w	r2, r4, #20
 800ab8a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ab8e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ab92:	9302      	str	r3, [sp, #8]
 800ab94:	1b13      	subs	r3, r2, r4
 800ab96:	3b15      	subs	r3, #21
 800ab98:	f023 0303 	bic.w	r3, r3, #3
 800ab9c:	3304      	adds	r3, #4
 800ab9e:	f104 0715 	add.w	r7, r4, #21
 800aba2:	42ba      	cmp	r2, r7
 800aba4:	bf38      	it	cc
 800aba6:	2304      	movcc	r3, #4
 800aba8:	9301      	str	r3, [sp, #4]
 800abaa:	9b02      	ldr	r3, [sp, #8]
 800abac:	9103      	str	r1, [sp, #12]
 800abae:	428b      	cmp	r3, r1
 800abb0:	d80c      	bhi.n	800abcc <__multiply+0x9c>
 800abb2:	2e00      	cmp	r6, #0
 800abb4:	dd03      	ble.n	800abbe <__multiply+0x8e>
 800abb6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d05a      	beq.n	800ac74 <__multiply+0x144>
 800abbe:	6106      	str	r6, [r0, #16]
 800abc0:	b005      	add	sp, #20
 800abc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc6:	f843 2b04 	str.w	r2, [r3], #4
 800abca:	e7d8      	b.n	800ab7e <__multiply+0x4e>
 800abcc:	f8b1 a000 	ldrh.w	sl, [r1]
 800abd0:	f1ba 0f00 	cmp.w	sl, #0
 800abd4:	d023      	beq.n	800ac1e <__multiply+0xee>
 800abd6:	46a9      	mov	r9, r5
 800abd8:	f04f 0c00 	mov.w	ip, #0
 800abdc:	f104 0e14 	add.w	lr, r4, #20
 800abe0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800abe4:	f8d9 3000 	ldr.w	r3, [r9]
 800abe8:	fa1f fb87 	uxth.w	fp, r7
 800abec:	b29b      	uxth	r3, r3
 800abee:	fb0a 330b 	mla	r3, sl, fp, r3
 800abf2:	4463      	add	r3, ip
 800abf4:	f8d9 c000 	ldr.w	ip, [r9]
 800abf8:	0c3f      	lsrs	r7, r7, #16
 800abfa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800abfe:	fb0a c707 	mla	r7, sl, r7, ip
 800ac02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac0c:	4572      	cmp	r2, lr
 800ac0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac12:	f849 3b04 	str.w	r3, [r9], #4
 800ac16:	d8e3      	bhi.n	800abe0 <__multiply+0xb0>
 800ac18:	9b01      	ldr	r3, [sp, #4]
 800ac1a:	f845 c003 	str.w	ip, [r5, r3]
 800ac1e:	9b03      	ldr	r3, [sp, #12]
 800ac20:	3104      	adds	r1, #4
 800ac22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac26:	f1b9 0f00 	cmp.w	r9, #0
 800ac2a:	d021      	beq.n	800ac70 <__multiply+0x140>
 800ac2c:	46ae      	mov	lr, r5
 800ac2e:	f04f 0a00 	mov.w	sl, #0
 800ac32:	682b      	ldr	r3, [r5, #0]
 800ac34:	f104 0c14 	add.w	ip, r4, #20
 800ac38:	f8bc b000 	ldrh.w	fp, [ip]
 800ac3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	fb09 770b 	mla	r7, r9, fp, r7
 800ac46:	4457      	add	r7, sl
 800ac48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac4c:	f84e 3b04 	str.w	r3, [lr], #4
 800ac50:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac58:	f8be 3000 	ldrh.w	r3, [lr]
 800ac5c:	4562      	cmp	r2, ip
 800ac5e:	fb09 330a 	mla	r3, r9, sl, r3
 800ac62:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ac66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac6a:	d8e5      	bhi.n	800ac38 <__multiply+0x108>
 800ac6c:	9f01      	ldr	r7, [sp, #4]
 800ac6e:	51eb      	str	r3, [r5, r7]
 800ac70:	3504      	adds	r5, #4
 800ac72:	e79a      	b.n	800abaa <__multiply+0x7a>
 800ac74:	3e01      	subs	r6, #1
 800ac76:	e79c      	b.n	800abb2 <__multiply+0x82>
 800ac78:	0800bc9a 	.word	0x0800bc9a
 800ac7c:	0800bcab 	.word	0x0800bcab

0800ac80 <__pow5mult>:
 800ac80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac84:	4615      	mov	r5, r2
 800ac86:	f012 0203 	ands.w	r2, r2, #3
 800ac8a:	4607      	mov	r7, r0
 800ac8c:	460e      	mov	r6, r1
 800ac8e:	d007      	beq.n	800aca0 <__pow5mult+0x20>
 800ac90:	4c25      	ldr	r4, [pc, #148]	@ (800ad28 <__pow5mult+0xa8>)
 800ac92:	3a01      	subs	r2, #1
 800ac94:	2300      	movs	r3, #0
 800ac96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac9a:	f7ff fea1 	bl	800a9e0 <__multadd>
 800ac9e:	4606      	mov	r6, r0
 800aca0:	10ad      	asrs	r5, r5, #2
 800aca2:	d03d      	beq.n	800ad20 <__pow5mult+0xa0>
 800aca4:	69fc      	ldr	r4, [r7, #28]
 800aca6:	b97c      	cbnz	r4, 800acc8 <__pow5mult+0x48>
 800aca8:	2010      	movs	r0, #16
 800acaa:	f7ff fd81 	bl	800a7b0 <malloc>
 800acae:	4602      	mov	r2, r0
 800acb0:	61f8      	str	r0, [r7, #28]
 800acb2:	b928      	cbnz	r0, 800acc0 <__pow5mult+0x40>
 800acb4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800acb8:	4b1c      	ldr	r3, [pc, #112]	@ (800ad2c <__pow5mult+0xac>)
 800acba:	481d      	ldr	r0, [pc, #116]	@ (800ad30 <__pow5mult+0xb0>)
 800acbc:	f000 fbe6 	bl	800b48c <__assert_func>
 800acc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acc4:	6004      	str	r4, [r0, #0]
 800acc6:	60c4      	str	r4, [r0, #12]
 800acc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800accc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acd0:	b94c      	cbnz	r4, 800ace6 <__pow5mult+0x66>
 800acd2:	f240 2171 	movw	r1, #625	@ 0x271
 800acd6:	4638      	mov	r0, r7
 800acd8:	f7ff ff14 	bl	800ab04 <__i2b>
 800acdc:	2300      	movs	r3, #0
 800acde:	4604      	mov	r4, r0
 800ace0:	f8c8 0008 	str.w	r0, [r8, #8]
 800ace4:	6003      	str	r3, [r0, #0]
 800ace6:	f04f 0900 	mov.w	r9, #0
 800acea:	07eb      	lsls	r3, r5, #31
 800acec:	d50a      	bpl.n	800ad04 <__pow5mult+0x84>
 800acee:	4631      	mov	r1, r6
 800acf0:	4622      	mov	r2, r4
 800acf2:	4638      	mov	r0, r7
 800acf4:	f7ff ff1c 	bl	800ab30 <__multiply>
 800acf8:	4680      	mov	r8, r0
 800acfa:	4631      	mov	r1, r6
 800acfc:	4638      	mov	r0, r7
 800acfe:	f7ff fe4d 	bl	800a99c <_Bfree>
 800ad02:	4646      	mov	r6, r8
 800ad04:	106d      	asrs	r5, r5, #1
 800ad06:	d00b      	beq.n	800ad20 <__pow5mult+0xa0>
 800ad08:	6820      	ldr	r0, [r4, #0]
 800ad0a:	b938      	cbnz	r0, 800ad1c <__pow5mult+0x9c>
 800ad0c:	4622      	mov	r2, r4
 800ad0e:	4621      	mov	r1, r4
 800ad10:	4638      	mov	r0, r7
 800ad12:	f7ff ff0d 	bl	800ab30 <__multiply>
 800ad16:	6020      	str	r0, [r4, #0]
 800ad18:	f8c0 9000 	str.w	r9, [r0]
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	e7e4      	b.n	800acea <__pow5mult+0x6a>
 800ad20:	4630      	mov	r0, r6
 800ad22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad26:	bf00      	nop
 800ad28:	0800bd04 	.word	0x0800bd04
 800ad2c:	0800bc2b 	.word	0x0800bc2b
 800ad30:	0800bcab 	.word	0x0800bcab

0800ad34 <__lshift>:
 800ad34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad38:	460c      	mov	r4, r1
 800ad3a:	4607      	mov	r7, r0
 800ad3c:	4691      	mov	r9, r2
 800ad3e:	6923      	ldr	r3, [r4, #16]
 800ad40:	6849      	ldr	r1, [r1, #4]
 800ad42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad46:	68a3      	ldr	r3, [r4, #8]
 800ad48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad4c:	f108 0601 	add.w	r6, r8, #1
 800ad50:	42b3      	cmp	r3, r6
 800ad52:	db0b      	blt.n	800ad6c <__lshift+0x38>
 800ad54:	4638      	mov	r0, r7
 800ad56:	f7ff fde1 	bl	800a91c <_Balloc>
 800ad5a:	4605      	mov	r5, r0
 800ad5c:	b948      	cbnz	r0, 800ad72 <__lshift+0x3e>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ad64:	4b27      	ldr	r3, [pc, #156]	@ (800ae04 <__lshift+0xd0>)
 800ad66:	4828      	ldr	r0, [pc, #160]	@ (800ae08 <__lshift+0xd4>)
 800ad68:	f000 fb90 	bl	800b48c <__assert_func>
 800ad6c:	3101      	adds	r1, #1
 800ad6e:	005b      	lsls	r3, r3, #1
 800ad70:	e7ee      	b.n	800ad50 <__lshift+0x1c>
 800ad72:	2300      	movs	r3, #0
 800ad74:	f100 0114 	add.w	r1, r0, #20
 800ad78:	f100 0210 	add.w	r2, r0, #16
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	4553      	cmp	r3, sl
 800ad80:	db33      	blt.n	800adea <__lshift+0xb6>
 800ad82:	6920      	ldr	r0, [r4, #16]
 800ad84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad88:	f104 0314 	add.w	r3, r4, #20
 800ad8c:	f019 091f 	ands.w	r9, r9, #31
 800ad90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad98:	d02b      	beq.n	800adf2 <__lshift+0xbe>
 800ad9a:	468a      	mov	sl, r1
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f1c9 0e20 	rsb	lr, r9, #32
 800ada2:	6818      	ldr	r0, [r3, #0]
 800ada4:	fa00 f009 	lsl.w	r0, r0, r9
 800ada8:	4310      	orrs	r0, r2
 800adaa:	f84a 0b04 	str.w	r0, [sl], #4
 800adae:	f853 2b04 	ldr.w	r2, [r3], #4
 800adb2:	459c      	cmp	ip, r3
 800adb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800adb8:	d8f3      	bhi.n	800ada2 <__lshift+0x6e>
 800adba:	ebac 0304 	sub.w	r3, ip, r4
 800adbe:	3b15      	subs	r3, #21
 800adc0:	f023 0303 	bic.w	r3, r3, #3
 800adc4:	3304      	adds	r3, #4
 800adc6:	f104 0015 	add.w	r0, r4, #21
 800adca:	4584      	cmp	ip, r0
 800adcc:	bf38      	it	cc
 800adce:	2304      	movcc	r3, #4
 800add0:	50ca      	str	r2, [r1, r3]
 800add2:	b10a      	cbz	r2, 800add8 <__lshift+0xa4>
 800add4:	f108 0602 	add.w	r6, r8, #2
 800add8:	3e01      	subs	r6, #1
 800adda:	4638      	mov	r0, r7
 800addc:	4621      	mov	r1, r4
 800adde:	612e      	str	r6, [r5, #16]
 800ade0:	f7ff fddc 	bl	800a99c <_Bfree>
 800ade4:	4628      	mov	r0, r5
 800ade6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adea:	f842 0f04 	str.w	r0, [r2, #4]!
 800adee:	3301      	adds	r3, #1
 800adf0:	e7c5      	b.n	800ad7e <__lshift+0x4a>
 800adf2:	3904      	subs	r1, #4
 800adf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800adf8:	459c      	cmp	ip, r3
 800adfa:	f841 2f04 	str.w	r2, [r1, #4]!
 800adfe:	d8f9      	bhi.n	800adf4 <__lshift+0xc0>
 800ae00:	e7ea      	b.n	800add8 <__lshift+0xa4>
 800ae02:	bf00      	nop
 800ae04:	0800bc9a 	.word	0x0800bc9a
 800ae08:	0800bcab 	.word	0x0800bcab

0800ae0c <__mcmp>:
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	690a      	ldr	r2, [r1, #16]
 800ae10:	6900      	ldr	r0, [r0, #16]
 800ae12:	b530      	push	{r4, r5, lr}
 800ae14:	1a80      	subs	r0, r0, r2
 800ae16:	d10e      	bne.n	800ae36 <__mcmp+0x2a>
 800ae18:	3314      	adds	r3, #20
 800ae1a:	3114      	adds	r1, #20
 800ae1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae2c:	4295      	cmp	r5, r2
 800ae2e:	d003      	beq.n	800ae38 <__mcmp+0x2c>
 800ae30:	d205      	bcs.n	800ae3e <__mcmp+0x32>
 800ae32:	f04f 30ff 	mov.w	r0, #4294967295
 800ae36:	bd30      	pop	{r4, r5, pc}
 800ae38:	42a3      	cmp	r3, r4
 800ae3a:	d3f3      	bcc.n	800ae24 <__mcmp+0x18>
 800ae3c:	e7fb      	b.n	800ae36 <__mcmp+0x2a>
 800ae3e:	2001      	movs	r0, #1
 800ae40:	e7f9      	b.n	800ae36 <__mcmp+0x2a>
	...

0800ae44 <__mdiff>:
 800ae44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae48:	4689      	mov	r9, r1
 800ae4a:	4606      	mov	r6, r0
 800ae4c:	4611      	mov	r1, r2
 800ae4e:	4648      	mov	r0, r9
 800ae50:	4614      	mov	r4, r2
 800ae52:	f7ff ffdb 	bl	800ae0c <__mcmp>
 800ae56:	1e05      	subs	r5, r0, #0
 800ae58:	d112      	bne.n	800ae80 <__mdiff+0x3c>
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f7ff fd5d 	bl	800a91c <_Balloc>
 800ae62:	4602      	mov	r2, r0
 800ae64:	b928      	cbnz	r0, 800ae72 <__mdiff+0x2e>
 800ae66:	f240 2137 	movw	r1, #567	@ 0x237
 800ae6a:	4b3e      	ldr	r3, [pc, #248]	@ (800af64 <__mdiff+0x120>)
 800ae6c:	483e      	ldr	r0, [pc, #248]	@ (800af68 <__mdiff+0x124>)
 800ae6e:	f000 fb0d 	bl	800b48c <__assert_func>
 800ae72:	2301      	movs	r3, #1
 800ae74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae78:	4610      	mov	r0, r2
 800ae7a:	b003      	add	sp, #12
 800ae7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae80:	bfbc      	itt	lt
 800ae82:	464b      	movlt	r3, r9
 800ae84:	46a1      	movlt	r9, r4
 800ae86:	4630      	mov	r0, r6
 800ae88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ae8c:	bfba      	itte	lt
 800ae8e:	461c      	movlt	r4, r3
 800ae90:	2501      	movlt	r5, #1
 800ae92:	2500      	movge	r5, #0
 800ae94:	f7ff fd42 	bl	800a91c <_Balloc>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	b918      	cbnz	r0, 800aea4 <__mdiff+0x60>
 800ae9c:	f240 2145 	movw	r1, #581	@ 0x245
 800aea0:	4b30      	ldr	r3, [pc, #192]	@ (800af64 <__mdiff+0x120>)
 800aea2:	e7e3      	b.n	800ae6c <__mdiff+0x28>
 800aea4:	f100 0b14 	add.w	fp, r0, #20
 800aea8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aeac:	f109 0310 	add.w	r3, r9, #16
 800aeb0:	60c5      	str	r5, [r0, #12]
 800aeb2:	f04f 0c00 	mov.w	ip, #0
 800aeb6:	f109 0514 	add.w	r5, r9, #20
 800aeba:	46d9      	mov	r9, fp
 800aebc:	6926      	ldr	r6, [r4, #16]
 800aebe:	f104 0e14 	add.w	lr, r4, #20
 800aec2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aec6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aeca:	9301      	str	r3, [sp, #4]
 800aecc:	9b01      	ldr	r3, [sp, #4]
 800aece:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aed2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aed6:	b281      	uxth	r1, r0
 800aed8:	9301      	str	r3, [sp, #4]
 800aeda:	fa1f f38a 	uxth.w	r3, sl
 800aede:	1a5b      	subs	r3, r3, r1
 800aee0:	0c00      	lsrs	r0, r0, #16
 800aee2:	4463      	add	r3, ip
 800aee4:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aee8:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aef2:	4576      	cmp	r6, lr
 800aef4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aef8:	f849 3b04 	str.w	r3, [r9], #4
 800aefc:	d8e6      	bhi.n	800aecc <__mdiff+0x88>
 800aefe:	1b33      	subs	r3, r6, r4
 800af00:	3b15      	subs	r3, #21
 800af02:	f023 0303 	bic.w	r3, r3, #3
 800af06:	3415      	adds	r4, #21
 800af08:	3304      	adds	r3, #4
 800af0a:	42a6      	cmp	r6, r4
 800af0c:	bf38      	it	cc
 800af0e:	2304      	movcc	r3, #4
 800af10:	441d      	add	r5, r3
 800af12:	445b      	add	r3, fp
 800af14:	461e      	mov	r6, r3
 800af16:	462c      	mov	r4, r5
 800af18:	4544      	cmp	r4, r8
 800af1a:	d30e      	bcc.n	800af3a <__mdiff+0xf6>
 800af1c:	f108 0103 	add.w	r1, r8, #3
 800af20:	1b49      	subs	r1, r1, r5
 800af22:	f021 0103 	bic.w	r1, r1, #3
 800af26:	3d03      	subs	r5, #3
 800af28:	45a8      	cmp	r8, r5
 800af2a:	bf38      	it	cc
 800af2c:	2100      	movcc	r1, #0
 800af2e:	440b      	add	r3, r1
 800af30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af34:	b199      	cbz	r1, 800af5e <__mdiff+0x11a>
 800af36:	6117      	str	r7, [r2, #16]
 800af38:	e79e      	b.n	800ae78 <__mdiff+0x34>
 800af3a:	46e6      	mov	lr, ip
 800af3c:	f854 1b04 	ldr.w	r1, [r4], #4
 800af40:	fa1f fc81 	uxth.w	ip, r1
 800af44:	44f4      	add	ip, lr
 800af46:	0c08      	lsrs	r0, r1, #16
 800af48:	4471      	add	r1, lr
 800af4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800af4e:	b289      	uxth	r1, r1
 800af50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800af54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af58:	f846 1b04 	str.w	r1, [r6], #4
 800af5c:	e7dc      	b.n	800af18 <__mdiff+0xd4>
 800af5e:	3f01      	subs	r7, #1
 800af60:	e7e6      	b.n	800af30 <__mdiff+0xec>
 800af62:	bf00      	nop
 800af64:	0800bc9a 	.word	0x0800bc9a
 800af68:	0800bcab 	.word	0x0800bcab

0800af6c <__d2b>:
 800af6c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800af70:	2101      	movs	r1, #1
 800af72:	4690      	mov	r8, r2
 800af74:	4699      	mov	r9, r3
 800af76:	9e08      	ldr	r6, [sp, #32]
 800af78:	f7ff fcd0 	bl	800a91c <_Balloc>
 800af7c:	4604      	mov	r4, r0
 800af7e:	b930      	cbnz	r0, 800af8e <__d2b+0x22>
 800af80:	4602      	mov	r2, r0
 800af82:	f240 310f 	movw	r1, #783	@ 0x30f
 800af86:	4b23      	ldr	r3, [pc, #140]	@ (800b014 <__d2b+0xa8>)
 800af88:	4823      	ldr	r0, [pc, #140]	@ (800b018 <__d2b+0xac>)
 800af8a:	f000 fa7f 	bl	800b48c <__assert_func>
 800af8e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af96:	b10d      	cbz	r5, 800af9c <__d2b+0x30>
 800af98:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af9c:	9301      	str	r3, [sp, #4]
 800af9e:	f1b8 0300 	subs.w	r3, r8, #0
 800afa2:	d024      	beq.n	800afee <__d2b+0x82>
 800afa4:	4668      	mov	r0, sp
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	f7ff fd7f 	bl	800aaaa <__lo0bits>
 800afac:	e9dd 1200 	ldrd	r1, r2, [sp]
 800afb0:	b1d8      	cbz	r0, 800afea <__d2b+0x7e>
 800afb2:	f1c0 0320 	rsb	r3, r0, #32
 800afb6:	fa02 f303 	lsl.w	r3, r2, r3
 800afba:	430b      	orrs	r3, r1
 800afbc:	40c2      	lsrs	r2, r0
 800afbe:	6163      	str	r3, [r4, #20]
 800afc0:	9201      	str	r2, [sp, #4]
 800afc2:	9b01      	ldr	r3, [sp, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	bf0c      	ite	eq
 800afc8:	2201      	moveq	r2, #1
 800afca:	2202      	movne	r2, #2
 800afcc:	61a3      	str	r3, [r4, #24]
 800afce:	6122      	str	r2, [r4, #16]
 800afd0:	b1ad      	cbz	r5, 800affe <__d2b+0x92>
 800afd2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800afd6:	4405      	add	r5, r0
 800afd8:	6035      	str	r5, [r6, #0]
 800afda:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800afde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afe0:	6018      	str	r0, [r3, #0]
 800afe2:	4620      	mov	r0, r4
 800afe4:	b002      	add	sp, #8
 800afe6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800afea:	6161      	str	r1, [r4, #20]
 800afec:	e7e9      	b.n	800afc2 <__d2b+0x56>
 800afee:	a801      	add	r0, sp, #4
 800aff0:	f7ff fd5b 	bl	800aaaa <__lo0bits>
 800aff4:	9b01      	ldr	r3, [sp, #4]
 800aff6:	2201      	movs	r2, #1
 800aff8:	6163      	str	r3, [r4, #20]
 800affa:	3020      	adds	r0, #32
 800affc:	e7e7      	b.n	800afce <__d2b+0x62>
 800affe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b002:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b006:	6030      	str	r0, [r6, #0]
 800b008:	6918      	ldr	r0, [r3, #16]
 800b00a:	f7ff fd2f 	bl	800aa6c <__hi0bits>
 800b00e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b012:	e7e4      	b.n	800afde <__d2b+0x72>
 800b014:	0800bc9a 	.word	0x0800bc9a
 800b018:	0800bcab 	.word	0x0800bcab

0800b01c <__ssputs_r>:
 800b01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b020:	461f      	mov	r7, r3
 800b022:	688e      	ldr	r6, [r1, #8]
 800b024:	4682      	mov	sl, r0
 800b026:	42be      	cmp	r6, r7
 800b028:	460c      	mov	r4, r1
 800b02a:	4690      	mov	r8, r2
 800b02c:	680b      	ldr	r3, [r1, #0]
 800b02e:	d82d      	bhi.n	800b08c <__ssputs_r+0x70>
 800b030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b034:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b038:	d026      	beq.n	800b088 <__ssputs_r+0x6c>
 800b03a:	6965      	ldr	r5, [r4, #20]
 800b03c:	6909      	ldr	r1, [r1, #16]
 800b03e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b042:	eba3 0901 	sub.w	r9, r3, r1
 800b046:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b04a:	1c7b      	adds	r3, r7, #1
 800b04c:	444b      	add	r3, r9
 800b04e:	106d      	asrs	r5, r5, #1
 800b050:	429d      	cmp	r5, r3
 800b052:	bf38      	it	cc
 800b054:	461d      	movcc	r5, r3
 800b056:	0553      	lsls	r3, r2, #21
 800b058:	d527      	bpl.n	800b0aa <__ssputs_r+0x8e>
 800b05a:	4629      	mov	r1, r5
 800b05c:	f7ff fbd2 	bl	800a804 <_malloc_r>
 800b060:	4606      	mov	r6, r0
 800b062:	b360      	cbz	r0, 800b0be <__ssputs_r+0xa2>
 800b064:	464a      	mov	r2, r9
 800b066:	6921      	ldr	r1, [r4, #16]
 800b068:	f000 fa02 	bl	800b470 <memcpy>
 800b06c:	89a3      	ldrh	r3, [r4, #12]
 800b06e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b076:	81a3      	strh	r3, [r4, #12]
 800b078:	6126      	str	r6, [r4, #16]
 800b07a:	444e      	add	r6, r9
 800b07c:	6026      	str	r6, [r4, #0]
 800b07e:	463e      	mov	r6, r7
 800b080:	6165      	str	r5, [r4, #20]
 800b082:	eba5 0509 	sub.w	r5, r5, r9
 800b086:	60a5      	str	r5, [r4, #8]
 800b088:	42be      	cmp	r6, r7
 800b08a:	d900      	bls.n	800b08e <__ssputs_r+0x72>
 800b08c:	463e      	mov	r6, r7
 800b08e:	4632      	mov	r2, r6
 800b090:	4641      	mov	r1, r8
 800b092:	6820      	ldr	r0, [r4, #0]
 800b094:	f000 f9c2 	bl	800b41c <memmove>
 800b098:	2000      	movs	r0, #0
 800b09a:	68a3      	ldr	r3, [r4, #8]
 800b09c:	1b9b      	subs	r3, r3, r6
 800b09e:	60a3      	str	r3, [r4, #8]
 800b0a0:	6823      	ldr	r3, [r4, #0]
 800b0a2:	4433      	add	r3, r6
 800b0a4:	6023      	str	r3, [r4, #0]
 800b0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0aa:	462a      	mov	r2, r5
 800b0ac:	f000 fa32 	bl	800b514 <_realloc_r>
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	2800      	cmp	r0, #0
 800b0b4:	d1e0      	bne.n	800b078 <__ssputs_r+0x5c>
 800b0b6:	4650      	mov	r0, sl
 800b0b8:	6921      	ldr	r1, [r4, #16]
 800b0ba:	f7ff fb31 	bl	800a720 <_free_r>
 800b0be:	230c      	movs	r3, #12
 800b0c0:	f8ca 3000 	str.w	r3, [sl]
 800b0c4:	89a3      	ldrh	r3, [r4, #12]
 800b0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ce:	81a3      	strh	r3, [r4, #12]
 800b0d0:	e7e9      	b.n	800b0a6 <__ssputs_r+0x8a>
	...

0800b0d4 <_svfiprintf_r>:
 800b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	4698      	mov	r8, r3
 800b0da:	898b      	ldrh	r3, [r1, #12]
 800b0dc:	4607      	mov	r7, r0
 800b0de:	061b      	lsls	r3, r3, #24
 800b0e0:	460d      	mov	r5, r1
 800b0e2:	4614      	mov	r4, r2
 800b0e4:	b09d      	sub	sp, #116	@ 0x74
 800b0e6:	d510      	bpl.n	800b10a <_svfiprintf_r+0x36>
 800b0e8:	690b      	ldr	r3, [r1, #16]
 800b0ea:	b973      	cbnz	r3, 800b10a <_svfiprintf_r+0x36>
 800b0ec:	2140      	movs	r1, #64	@ 0x40
 800b0ee:	f7ff fb89 	bl	800a804 <_malloc_r>
 800b0f2:	6028      	str	r0, [r5, #0]
 800b0f4:	6128      	str	r0, [r5, #16]
 800b0f6:	b930      	cbnz	r0, 800b106 <_svfiprintf_r+0x32>
 800b0f8:	230c      	movs	r3, #12
 800b0fa:	603b      	str	r3, [r7, #0]
 800b0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b100:	b01d      	add	sp, #116	@ 0x74
 800b102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b106:	2340      	movs	r3, #64	@ 0x40
 800b108:	616b      	str	r3, [r5, #20]
 800b10a:	2300      	movs	r3, #0
 800b10c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b10e:	2320      	movs	r3, #32
 800b110:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b114:	2330      	movs	r3, #48	@ 0x30
 800b116:	f04f 0901 	mov.w	r9, #1
 800b11a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b11e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b2b8 <_svfiprintf_r+0x1e4>
 800b122:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b126:	4623      	mov	r3, r4
 800b128:	469a      	mov	sl, r3
 800b12a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b12e:	b10a      	cbz	r2, 800b134 <_svfiprintf_r+0x60>
 800b130:	2a25      	cmp	r2, #37	@ 0x25
 800b132:	d1f9      	bne.n	800b128 <_svfiprintf_r+0x54>
 800b134:	ebba 0b04 	subs.w	fp, sl, r4
 800b138:	d00b      	beq.n	800b152 <_svfiprintf_r+0x7e>
 800b13a:	465b      	mov	r3, fp
 800b13c:	4622      	mov	r2, r4
 800b13e:	4629      	mov	r1, r5
 800b140:	4638      	mov	r0, r7
 800b142:	f7ff ff6b 	bl	800b01c <__ssputs_r>
 800b146:	3001      	adds	r0, #1
 800b148:	f000 80a7 	beq.w	800b29a <_svfiprintf_r+0x1c6>
 800b14c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b14e:	445a      	add	r2, fp
 800b150:	9209      	str	r2, [sp, #36]	@ 0x24
 800b152:	f89a 3000 	ldrb.w	r3, [sl]
 800b156:	2b00      	cmp	r3, #0
 800b158:	f000 809f 	beq.w	800b29a <_svfiprintf_r+0x1c6>
 800b15c:	2300      	movs	r3, #0
 800b15e:	f04f 32ff 	mov.w	r2, #4294967295
 800b162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b166:	f10a 0a01 	add.w	sl, sl, #1
 800b16a:	9304      	str	r3, [sp, #16]
 800b16c:	9307      	str	r3, [sp, #28]
 800b16e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b172:	931a      	str	r3, [sp, #104]	@ 0x68
 800b174:	4654      	mov	r4, sl
 800b176:	2205      	movs	r2, #5
 800b178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b17c:	484e      	ldr	r0, [pc, #312]	@ (800b2b8 <_svfiprintf_r+0x1e4>)
 800b17e:	f7fe fc6e 	bl	8009a5e <memchr>
 800b182:	9a04      	ldr	r2, [sp, #16]
 800b184:	b9d8      	cbnz	r0, 800b1be <_svfiprintf_r+0xea>
 800b186:	06d0      	lsls	r0, r2, #27
 800b188:	bf44      	itt	mi
 800b18a:	2320      	movmi	r3, #32
 800b18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b190:	0711      	lsls	r1, r2, #28
 800b192:	bf44      	itt	mi
 800b194:	232b      	movmi	r3, #43	@ 0x2b
 800b196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b19a:	f89a 3000 	ldrb.w	r3, [sl]
 800b19e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1a0:	d015      	beq.n	800b1ce <_svfiprintf_r+0xfa>
 800b1a2:	4654      	mov	r4, sl
 800b1a4:	2000      	movs	r0, #0
 800b1a6:	f04f 0c0a 	mov.w	ip, #10
 800b1aa:	9a07      	ldr	r2, [sp, #28]
 800b1ac:	4621      	mov	r1, r4
 800b1ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b1b2:	3b30      	subs	r3, #48	@ 0x30
 800b1b4:	2b09      	cmp	r3, #9
 800b1b6:	d94b      	bls.n	800b250 <_svfiprintf_r+0x17c>
 800b1b8:	b1b0      	cbz	r0, 800b1e8 <_svfiprintf_r+0x114>
 800b1ba:	9207      	str	r2, [sp, #28]
 800b1bc:	e014      	b.n	800b1e8 <_svfiprintf_r+0x114>
 800b1be:	eba0 0308 	sub.w	r3, r0, r8
 800b1c2:	fa09 f303 	lsl.w	r3, r9, r3
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	46a2      	mov	sl, r4
 800b1ca:	9304      	str	r3, [sp, #16]
 800b1cc:	e7d2      	b.n	800b174 <_svfiprintf_r+0xa0>
 800b1ce:	9b03      	ldr	r3, [sp, #12]
 800b1d0:	1d19      	adds	r1, r3, #4
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	9103      	str	r1, [sp, #12]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	bfbb      	ittet	lt
 800b1da:	425b      	neglt	r3, r3
 800b1dc:	f042 0202 	orrlt.w	r2, r2, #2
 800b1e0:	9307      	strge	r3, [sp, #28]
 800b1e2:	9307      	strlt	r3, [sp, #28]
 800b1e4:	bfb8      	it	lt
 800b1e6:	9204      	strlt	r2, [sp, #16]
 800b1e8:	7823      	ldrb	r3, [r4, #0]
 800b1ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800b1ec:	d10a      	bne.n	800b204 <_svfiprintf_r+0x130>
 800b1ee:	7863      	ldrb	r3, [r4, #1]
 800b1f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b1f2:	d132      	bne.n	800b25a <_svfiprintf_r+0x186>
 800b1f4:	9b03      	ldr	r3, [sp, #12]
 800b1f6:	3402      	adds	r4, #2
 800b1f8:	1d1a      	adds	r2, r3, #4
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	9203      	str	r2, [sp, #12]
 800b1fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b202:	9305      	str	r3, [sp, #20]
 800b204:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b2bc <_svfiprintf_r+0x1e8>
 800b208:	2203      	movs	r2, #3
 800b20a:	4650      	mov	r0, sl
 800b20c:	7821      	ldrb	r1, [r4, #0]
 800b20e:	f7fe fc26 	bl	8009a5e <memchr>
 800b212:	b138      	cbz	r0, 800b224 <_svfiprintf_r+0x150>
 800b214:	2240      	movs	r2, #64	@ 0x40
 800b216:	9b04      	ldr	r3, [sp, #16]
 800b218:	eba0 000a 	sub.w	r0, r0, sl
 800b21c:	4082      	lsls	r2, r0
 800b21e:	4313      	orrs	r3, r2
 800b220:	3401      	adds	r4, #1
 800b222:	9304      	str	r3, [sp, #16]
 800b224:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b228:	2206      	movs	r2, #6
 800b22a:	4825      	ldr	r0, [pc, #148]	@ (800b2c0 <_svfiprintf_r+0x1ec>)
 800b22c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b230:	f7fe fc15 	bl	8009a5e <memchr>
 800b234:	2800      	cmp	r0, #0
 800b236:	d036      	beq.n	800b2a6 <_svfiprintf_r+0x1d2>
 800b238:	4b22      	ldr	r3, [pc, #136]	@ (800b2c4 <_svfiprintf_r+0x1f0>)
 800b23a:	bb1b      	cbnz	r3, 800b284 <_svfiprintf_r+0x1b0>
 800b23c:	9b03      	ldr	r3, [sp, #12]
 800b23e:	3307      	adds	r3, #7
 800b240:	f023 0307 	bic.w	r3, r3, #7
 800b244:	3308      	adds	r3, #8
 800b246:	9303      	str	r3, [sp, #12]
 800b248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b24a:	4433      	add	r3, r6
 800b24c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b24e:	e76a      	b.n	800b126 <_svfiprintf_r+0x52>
 800b250:	460c      	mov	r4, r1
 800b252:	2001      	movs	r0, #1
 800b254:	fb0c 3202 	mla	r2, ip, r2, r3
 800b258:	e7a8      	b.n	800b1ac <_svfiprintf_r+0xd8>
 800b25a:	2300      	movs	r3, #0
 800b25c:	f04f 0c0a 	mov.w	ip, #10
 800b260:	4619      	mov	r1, r3
 800b262:	3401      	adds	r4, #1
 800b264:	9305      	str	r3, [sp, #20]
 800b266:	4620      	mov	r0, r4
 800b268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b26c:	3a30      	subs	r2, #48	@ 0x30
 800b26e:	2a09      	cmp	r2, #9
 800b270:	d903      	bls.n	800b27a <_svfiprintf_r+0x1a6>
 800b272:	2b00      	cmp	r3, #0
 800b274:	d0c6      	beq.n	800b204 <_svfiprintf_r+0x130>
 800b276:	9105      	str	r1, [sp, #20]
 800b278:	e7c4      	b.n	800b204 <_svfiprintf_r+0x130>
 800b27a:	4604      	mov	r4, r0
 800b27c:	2301      	movs	r3, #1
 800b27e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b282:	e7f0      	b.n	800b266 <_svfiprintf_r+0x192>
 800b284:	ab03      	add	r3, sp, #12
 800b286:	9300      	str	r3, [sp, #0]
 800b288:	462a      	mov	r2, r5
 800b28a:	4638      	mov	r0, r7
 800b28c:	4b0e      	ldr	r3, [pc, #56]	@ (800b2c8 <_svfiprintf_r+0x1f4>)
 800b28e:	a904      	add	r1, sp, #16
 800b290:	f7fd fe82 	bl	8008f98 <_printf_float>
 800b294:	1c42      	adds	r2, r0, #1
 800b296:	4606      	mov	r6, r0
 800b298:	d1d6      	bne.n	800b248 <_svfiprintf_r+0x174>
 800b29a:	89ab      	ldrh	r3, [r5, #12]
 800b29c:	065b      	lsls	r3, r3, #25
 800b29e:	f53f af2d 	bmi.w	800b0fc <_svfiprintf_r+0x28>
 800b2a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b2a4:	e72c      	b.n	800b100 <_svfiprintf_r+0x2c>
 800b2a6:	ab03      	add	r3, sp, #12
 800b2a8:	9300      	str	r3, [sp, #0]
 800b2aa:	462a      	mov	r2, r5
 800b2ac:	4638      	mov	r0, r7
 800b2ae:	4b06      	ldr	r3, [pc, #24]	@ (800b2c8 <_svfiprintf_r+0x1f4>)
 800b2b0:	a904      	add	r1, sp, #16
 800b2b2:	f7fe f90f 	bl	80094d4 <_printf_i>
 800b2b6:	e7ed      	b.n	800b294 <_svfiprintf_r+0x1c0>
 800b2b8:	0800be00 	.word	0x0800be00
 800b2bc:	0800be06 	.word	0x0800be06
 800b2c0:	0800be0a 	.word	0x0800be0a
 800b2c4:	08008f99 	.word	0x08008f99
 800b2c8:	0800b01d 	.word	0x0800b01d

0800b2cc <__sflush_r>:
 800b2cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d2:	0716      	lsls	r6, r2, #28
 800b2d4:	4605      	mov	r5, r0
 800b2d6:	460c      	mov	r4, r1
 800b2d8:	d454      	bmi.n	800b384 <__sflush_r+0xb8>
 800b2da:	684b      	ldr	r3, [r1, #4]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	dc02      	bgt.n	800b2e6 <__sflush_r+0x1a>
 800b2e0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	dd48      	ble.n	800b378 <__sflush_r+0xac>
 800b2e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2e8:	2e00      	cmp	r6, #0
 800b2ea:	d045      	beq.n	800b378 <__sflush_r+0xac>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b2f2:	682f      	ldr	r7, [r5, #0]
 800b2f4:	6a21      	ldr	r1, [r4, #32]
 800b2f6:	602b      	str	r3, [r5, #0]
 800b2f8:	d030      	beq.n	800b35c <__sflush_r+0x90>
 800b2fa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b2fc:	89a3      	ldrh	r3, [r4, #12]
 800b2fe:	0759      	lsls	r1, r3, #29
 800b300:	d505      	bpl.n	800b30e <__sflush_r+0x42>
 800b302:	6863      	ldr	r3, [r4, #4]
 800b304:	1ad2      	subs	r2, r2, r3
 800b306:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b308:	b10b      	cbz	r3, 800b30e <__sflush_r+0x42>
 800b30a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b30c:	1ad2      	subs	r2, r2, r3
 800b30e:	2300      	movs	r3, #0
 800b310:	4628      	mov	r0, r5
 800b312:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b314:	6a21      	ldr	r1, [r4, #32]
 800b316:	47b0      	blx	r6
 800b318:	1c43      	adds	r3, r0, #1
 800b31a:	89a3      	ldrh	r3, [r4, #12]
 800b31c:	d106      	bne.n	800b32c <__sflush_r+0x60>
 800b31e:	6829      	ldr	r1, [r5, #0]
 800b320:	291d      	cmp	r1, #29
 800b322:	d82b      	bhi.n	800b37c <__sflush_r+0xb0>
 800b324:	4a28      	ldr	r2, [pc, #160]	@ (800b3c8 <__sflush_r+0xfc>)
 800b326:	410a      	asrs	r2, r1
 800b328:	07d6      	lsls	r6, r2, #31
 800b32a:	d427      	bmi.n	800b37c <__sflush_r+0xb0>
 800b32c:	2200      	movs	r2, #0
 800b32e:	6062      	str	r2, [r4, #4]
 800b330:	6922      	ldr	r2, [r4, #16]
 800b332:	04d9      	lsls	r1, r3, #19
 800b334:	6022      	str	r2, [r4, #0]
 800b336:	d504      	bpl.n	800b342 <__sflush_r+0x76>
 800b338:	1c42      	adds	r2, r0, #1
 800b33a:	d101      	bne.n	800b340 <__sflush_r+0x74>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	b903      	cbnz	r3, 800b342 <__sflush_r+0x76>
 800b340:	6560      	str	r0, [r4, #84]	@ 0x54
 800b342:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b344:	602f      	str	r7, [r5, #0]
 800b346:	b1b9      	cbz	r1, 800b378 <__sflush_r+0xac>
 800b348:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b34c:	4299      	cmp	r1, r3
 800b34e:	d002      	beq.n	800b356 <__sflush_r+0x8a>
 800b350:	4628      	mov	r0, r5
 800b352:	f7ff f9e5 	bl	800a720 <_free_r>
 800b356:	2300      	movs	r3, #0
 800b358:	6363      	str	r3, [r4, #52]	@ 0x34
 800b35a:	e00d      	b.n	800b378 <__sflush_r+0xac>
 800b35c:	2301      	movs	r3, #1
 800b35e:	4628      	mov	r0, r5
 800b360:	47b0      	blx	r6
 800b362:	4602      	mov	r2, r0
 800b364:	1c50      	adds	r0, r2, #1
 800b366:	d1c9      	bne.n	800b2fc <__sflush_r+0x30>
 800b368:	682b      	ldr	r3, [r5, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d0c6      	beq.n	800b2fc <__sflush_r+0x30>
 800b36e:	2b1d      	cmp	r3, #29
 800b370:	d001      	beq.n	800b376 <__sflush_r+0xaa>
 800b372:	2b16      	cmp	r3, #22
 800b374:	d11d      	bne.n	800b3b2 <__sflush_r+0xe6>
 800b376:	602f      	str	r7, [r5, #0]
 800b378:	2000      	movs	r0, #0
 800b37a:	e021      	b.n	800b3c0 <__sflush_r+0xf4>
 800b37c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b380:	b21b      	sxth	r3, r3
 800b382:	e01a      	b.n	800b3ba <__sflush_r+0xee>
 800b384:	690f      	ldr	r7, [r1, #16]
 800b386:	2f00      	cmp	r7, #0
 800b388:	d0f6      	beq.n	800b378 <__sflush_r+0xac>
 800b38a:	0793      	lsls	r3, r2, #30
 800b38c:	bf18      	it	ne
 800b38e:	2300      	movne	r3, #0
 800b390:	680e      	ldr	r6, [r1, #0]
 800b392:	bf08      	it	eq
 800b394:	694b      	ldreq	r3, [r1, #20]
 800b396:	1bf6      	subs	r6, r6, r7
 800b398:	600f      	str	r7, [r1, #0]
 800b39a:	608b      	str	r3, [r1, #8]
 800b39c:	2e00      	cmp	r6, #0
 800b39e:	ddeb      	ble.n	800b378 <__sflush_r+0xac>
 800b3a0:	4633      	mov	r3, r6
 800b3a2:	463a      	mov	r2, r7
 800b3a4:	4628      	mov	r0, r5
 800b3a6:	6a21      	ldr	r1, [r4, #32]
 800b3a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b3ac:	47e0      	blx	ip
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	dc07      	bgt.n	800b3c2 <__sflush_r+0xf6>
 800b3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b3be:	81a3      	strh	r3, [r4, #12]
 800b3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3c2:	4407      	add	r7, r0
 800b3c4:	1a36      	subs	r6, r6, r0
 800b3c6:	e7e9      	b.n	800b39c <__sflush_r+0xd0>
 800b3c8:	dfbffffe 	.word	0xdfbffffe

0800b3cc <_fflush_r>:
 800b3cc:	b538      	push	{r3, r4, r5, lr}
 800b3ce:	690b      	ldr	r3, [r1, #16]
 800b3d0:	4605      	mov	r5, r0
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	b913      	cbnz	r3, 800b3dc <_fflush_r+0x10>
 800b3d6:	2500      	movs	r5, #0
 800b3d8:	4628      	mov	r0, r5
 800b3da:	bd38      	pop	{r3, r4, r5, pc}
 800b3dc:	b118      	cbz	r0, 800b3e6 <_fflush_r+0x1a>
 800b3de:	6a03      	ldr	r3, [r0, #32]
 800b3e0:	b90b      	cbnz	r3, 800b3e6 <_fflush_r+0x1a>
 800b3e2:	f7fe fa23 	bl	800982c <__sinit>
 800b3e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d0f3      	beq.n	800b3d6 <_fflush_r+0xa>
 800b3ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b3f0:	07d0      	lsls	r0, r2, #31
 800b3f2:	d404      	bmi.n	800b3fe <_fflush_r+0x32>
 800b3f4:	0599      	lsls	r1, r3, #22
 800b3f6:	d402      	bmi.n	800b3fe <_fflush_r+0x32>
 800b3f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3fa:	f7fe fb2e 	bl	8009a5a <__retarget_lock_acquire_recursive>
 800b3fe:	4628      	mov	r0, r5
 800b400:	4621      	mov	r1, r4
 800b402:	f7ff ff63 	bl	800b2cc <__sflush_r>
 800b406:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b408:	4605      	mov	r5, r0
 800b40a:	07da      	lsls	r2, r3, #31
 800b40c:	d4e4      	bmi.n	800b3d8 <_fflush_r+0xc>
 800b40e:	89a3      	ldrh	r3, [r4, #12]
 800b410:	059b      	lsls	r3, r3, #22
 800b412:	d4e1      	bmi.n	800b3d8 <_fflush_r+0xc>
 800b414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b416:	f7fe fb21 	bl	8009a5c <__retarget_lock_release_recursive>
 800b41a:	e7dd      	b.n	800b3d8 <_fflush_r+0xc>

0800b41c <memmove>:
 800b41c:	4288      	cmp	r0, r1
 800b41e:	b510      	push	{r4, lr}
 800b420:	eb01 0402 	add.w	r4, r1, r2
 800b424:	d902      	bls.n	800b42c <memmove+0x10>
 800b426:	4284      	cmp	r4, r0
 800b428:	4623      	mov	r3, r4
 800b42a:	d807      	bhi.n	800b43c <memmove+0x20>
 800b42c:	1e43      	subs	r3, r0, #1
 800b42e:	42a1      	cmp	r1, r4
 800b430:	d008      	beq.n	800b444 <memmove+0x28>
 800b432:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b436:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b43a:	e7f8      	b.n	800b42e <memmove+0x12>
 800b43c:	4601      	mov	r1, r0
 800b43e:	4402      	add	r2, r0
 800b440:	428a      	cmp	r2, r1
 800b442:	d100      	bne.n	800b446 <memmove+0x2a>
 800b444:	bd10      	pop	{r4, pc}
 800b446:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b44a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b44e:	e7f7      	b.n	800b440 <memmove+0x24>

0800b450 <_sbrk_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	2300      	movs	r3, #0
 800b454:	4d05      	ldr	r5, [pc, #20]	@ (800b46c <_sbrk_r+0x1c>)
 800b456:	4604      	mov	r4, r0
 800b458:	4608      	mov	r0, r1
 800b45a:	602b      	str	r3, [r5, #0]
 800b45c:	f7f5 ff8e 	bl	800137c <_sbrk>
 800b460:	1c43      	adds	r3, r0, #1
 800b462:	d102      	bne.n	800b46a <_sbrk_r+0x1a>
 800b464:	682b      	ldr	r3, [r5, #0]
 800b466:	b103      	cbz	r3, 800b46a <_sbrk_r+0x1a>
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	200017e4 	.word	0x200017e4

0800b470 <memcpy>:
 800b470:	440a      	add	r2, r1
 800b472:	4291      	cmp	r1, r2
 800b474:	f100 33ff 	add.w	r3, r0, #4294967295
 800b478:	d100      	bne.n	800b47c <memcpy+0xc>
 800b47a:	4770      	bx	lr
 800b47c:	b510      	push	{r4, lr}
 800b47e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b482:	4291      	cmp	r1, r2
 800b484:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b488:	d1f9      	bne.n	800b47e <memcpy+0xe>
 800b48a:	bd10      	pop	{r4, pc}

0800b48c <__assert_func>:
 800b48c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b48e:	4614      	mov	r4, r2
 800b490:	461a      	mov	r2, r3
 800b492:	4b09      	ldr	r3, [pc, #36]	@ (800b4b8 <__assert_func+0x2c>)
 800b494:	4605      	mov	r5, r0
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	68d8      	ldr	r0, [r3, #12]
 800b49a:	b954      	cbnz	r4, 800b4b2 <__assert_func+0x26>
 800b49c:	4b07      	ldr	r3, [pc, #28]	@ (800b4bc <__assert_func+0x30>)
 800b49e:	461c      	mov	r4, r3
 800b4a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4a4:	9100      	str	r1, [sp, #0]
 800b4a6:	462b      	mov	r3, r5
 800b4a8:	4905      	ldr	r1, [pc, #20]	@ (800b4c0 <__assert_func+0x34>)
 800b4aa:	f000 f86f 	bl	800b58c <fiprintf>
 800b4ae:	f000 f87f 	bl	800b5b0 <abort>
 800b4b2:	4b04      	ldr	r3, [pc, #16]	@ (800b4c4 <__assert_func+0x38>)
 800b4b4:	e7f4      	b.n	800b4a0 <__assert_func+0x14>
 800b4b6:	bf00      	nop
 800b4b8:	2000019c 	.word	0x2000019c
 800b4bc:	0800be56 	.word	0x0800be56
 800b4c0:	0800be28 	.word	0x0800be28
 800b4c4:	0800be1b 	.word	0x0800be1b

0800b4c8 <_calloc_r>:
 800b4c8:	b570      	push	{r4, r5, r6, lr}
 800b4ca:	fba1 5402 	umull	r5, r4, r1, r2
 800b4ce:	b93c      	cbnz	r4, 800b4e0 <_calloc_r+0x18>
 800b4d0:	4629      	mov	r1, r5
 800b4d2:	f7ff f997 	bl	800a804 <_malloc_r>
 800b4d6:	4606      	mov	r6, r0
 800b4d8:	b928      	cbnz	r0, 800b4e6 <_calloc_r+0x1e>
 800b4da:	2600      	movs	r6, #0
 800b4dc:	4630      	mov	r0, r6
 800b4de:	bd70      	pop	{r4, r5, r6, pc}
 800b4e0:	220c      	movs	r2, #12
 800b4e2:	6002      	str	r2, [r0, #0]
 800b4e4:	e7f9      	b.n	800b4da <_calloc_r+0x12>
 800b4e6:	462a      	mov	r2, r5
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	f7fe fa38 	bl	800995e <memset>
 800b4ee:	e7f5      	b.n	800b4dc <_calloc_r+0x14>

0800b4f0 <__ascii_mbtowc>:
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	b901      	cbnz	r1, 800b4f6 <__ascii_mbtowc+0x6>
 800b4f4:	a901      	add	r1, sp, #4
 800b4f6:	b142      	cbz	r2, 800b50a <__ascii_mbtowc+0x1a>
 800b4f8:	b14b      	cbz	r3, 800b50e <__ascii_mbtowc+0x1e>
 800b4fa:	7813      	ldrb	r3, [r2, #0]
 800b4fc:	600b      	str	r3, [r1, #0]
 800b4fe:	7812      	ldrb	r2, [r2, #0]
 800b500:	1e10      	subs	r0, r2, #0
 800b502:	bf18      	it	ne
 800b504:	2001      	movne	r0, #1
 800b506:	b002      	add	sp, #8
 800b508:	4770      	bx	lr
 800b50a:	4610      	mov	r0, r2
 800b50c:	e7fb      	b.n	800b506 <__ascii_mbtowc+0x16>
 800b50e:	f06f 0001 	mvn.w	r0, #1
 800b512:	e7f8      	b.n	800b506 <__ascii_mbtowc+0x16>

0800b514 <_realloc_r>:
 800b514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b518:	4680      	mov	r8, r0
 800b51a:	4615      	mov	r5, r2
 800b51c:	460c      	mov	r4, r1
 800b51e:	b921      	cbnz	r1, 800b52a <_realloc_r+0x16>
 800b520:	4611      	mov	r1, r2
 800b522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b526:	f7ff b96d 	b.w	800a804 <_malloc_r>
 800b52a:	b92a      	cbnz	r2, 800b538 <_realloc_r+0x24>
 800b52c:	f7ff f8f8 	bl	800a720 <_free_r>
 800b530:	2400      	movs	r4, #0
 800b532:	4620      	mov	r0, r4
 800b534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b538:	f000 f841 	bl	800b5be <_malloc_usable_size_r>
 800b53c:	4285      	cmp	r5, r0
 800b53e:	4606      	mov	r6, r0
 800b540:	d802      	bhi.n	800b548 <_realloc_r+0x34>
 800b542:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b546:	d8f4      	bhi.n	800b532 <_realloc_r+0x1e>
 800b548:	4629      	mov	r1, r5
 800b54a:	4640      	mov	r0, r8
 800b54c:	f7ff f95a 	bl	800a804 <_malloc_r>
 800b550:	4607      	mov	r7, r0
 800b552:	2800      	cmp	r0, #0
 800b554:	d0ec      	beq.n	800b530 <_realloc_r+0x1c>
 800b556:	42b5      	cmp	r5, r6
 800b558:	462a      	mov	r2, r5
 800b55a:	4621      	mov	r1, r4
 800b55c:	bf28      	it	cs
 800b55e:	4632      	movcs	r2, r6
 800b560:	f7ff ff86 	bl	800b470 <memcpy>
 800b564:	4621      	mov	r1, r4
 800b566:	4640      	mov	r0, r8
 800b568:	f7ff f8da 	bl	800a720 <_free_r>
 800b56c:	463c      	mov	r4, r7
 800b56e:	e7e0      	b.n	800b532 <_realloc_r+0x1e>

0800b570 <__ascii_wctomb>:
 800b570:	4603      	mov	r3, r0
 800b572:	4608      	mov	r0, r1
 800b574:	b141      	cbz	r1, 800b588 <__ascii_wctomb+0x18>
 800b576:	2aff      	cmp	r2, #255	@ 0xff
 800b578:	d904      	bls.n	800b584 <__ascii_wctomb+0x14>
 800b57a:	228a      	movs	r2, #138	@ 0x8a
 800b57c:	f04f 30ff 	mov.w	r0, #4294967295
 800b580:	601a      	str	r2, [r3, #0]
 800b582:	4770      	bx	lr
 800b584:	2001      	movs	r0, #1
 800b586:	700a      	strb	r2, [r1, #0]
 800b588:	4770      	bx	lr
	...

0800b58c <fiprintf>:
 800b58c:	b40e      	push	{r1, r2, r3}
 800b58e:	b503      	push	{r0, r1, lr}
 800b590:	4601      	mov	r1, r0
 800b592:	ab03      	add	r3, sp, #12
 800b594:	4805      	ldr	r0, [pc, #20]	@ (800b5ac <fiprintf+0x20>)
 800b596:	f853 2b04 	ldr.w	r2, [r3], #4
 800b59a:	6800      	ldr	r0, [r0, #0]
 800b59c:	9301      	str	r3, [sp, #4]
 800b59e:	f000 f83d 	bl	800b61c <_vfiprintf_r>
 800b5a2:	b002      	add	sp, #8
 800b5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b5a8:	b003      	add	sp, #12
 800b5aa:	4770      	bx	lr
 800b5ac:	2000019c 	.word	0x2000019c

0800b5b0 <abort>:
 800b5b0:	2006      	movs	r0, #6
 800b5b2:	b508      	push	{r3, lr}
 800b5b4:	f000 fa06 	bl	800b9c4 <raise>
 800b5b8:	2001      	movs	r0, #1
 800b5ba:	f7f5 fe6a 	bl	8001292 <_exit>

0800b5be <_malloc_usable_size_r>:
 800b5be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5c2:	1f18      	subs	r0, r3, #4
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	bfbc      	itt	lt
 800b5c8:	580b      	ldrlt	r3, [r1, r0]
 800b5ca:	18c0      	addlt	r0, r0, r3
 800b5cc:	4770      	bx	lr

0800b5ce <__sfputc_r>:
 800b5ce:	6893      	ldr	r3, [r2, #8]
 800b5d0:	b410      	push	{r4}
 800b5d2:	3b01      	subs	r3, #1
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	6093      	str	r3, [r2, #8]
 800b5d8:	da07      	bge.n	800b5ea <__sfputc_r+0x1c>
 800b5da:	6994      	ldr	r4, [r2, #24]
 800b5dc:	42a3      	cmp	r3, r4
 800b5de:	db01      	blt.n	800b5e4 <__sfputc_r+0x16>
 800b5e0:	290a      	cmp	r1, #10
 800b5e2:	d102      	bne.n	800b5ea <__sfputc_r+0x1c>
 800b5e4:	bc10      	pop	{r4}
 800b5e6:	f000 b931 	b.w	800b84c <__swbuf_r>
 800b5ea:	6813      	ldr	r3, [r2, #0]
 800b5ec:	1c58      	adds	r0, r3, #1
 800b5ee:	6010      	str	r0, [r2, #0]
 800b5f0:	7019      	strb	r1, [r3, #0]
 800b5f2:	4608      	mov	r0, r1
 800b5f4:	bc10      	pop	{r4}
 800b5f6:	4770      	bx	lr

0800b5f8 <__sfputs_r>:
 800b5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	460f      	mov	r7, r1
 800b5fe:	4614      	mov	r4, r2
 800b600:	18d5      	adds	r5, r2, r3
 800b602:	42ac      	cmp	r4, r5
 800b604:	d101      	bne.n	800b60a <__sfputs_r+0x12>
 800b606:	2000      	movs	r0, #0
 800b608:	e007      	b.n	800b61a <__sfputs_r+0x22>
 800b60a:	463a      	mov	r2, r7
 800b60c:	4630      	mov	r0, r6
 800b60e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b612:	f7ff ffdc 	bl	800b5ce <__sfputc_r>
 800b616:	1c43      	adds	r3, r0, #1
 800b618:	d1f3      	bne.n	800b602 <__sfputs_r+0xa>
 800b61a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b61c <_vfiprintf_r>:
 800b61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b620:	460d      	mov	r5, r1
 800b622:	4614      	mov	r4, r2
 800b624:	4698      	mov	r8, r3
 800b626:	4606      	mov	r6, r0
 800b628:	b09d      	sub	sp, #116	@ 0x74
 800b62a:	b118      	cbz	r0, 800b634 <_vfiprintf_r+0x18>
 800b62c:	6a03      	ldr	r3, [r0, #32]
 800b62e:	b90b      	cbnz	r3, 800b634 <_vfiprintf_r+0x18>
 800b630:	f7fe f8fc 	bl	800982c <__sinit>
 800b634:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b636:	07d9      	lsls	r1, r3, #31
 800b638:	d405      	bmi.n	800b646 <_vfiprintf_r+0x2a>
 800b63a:	89ab      	ldrh	r3, [r5, #12]
 800b63c:	059a      	lsls	r2, r3, #22
 800b63e:	d402      	bmi.n	800b646 <_vfiprintf_r+0x2a>
 800b640:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b642:	f7fe fa0a 	bl	8009a5a <__retarget_lock_acquire_recursive>
 800b646:	89ab      	ldrh	r3, [r5, #12]
 800b648:	071b      	lsls	r3, r3, #28
 800b64a:	d501      	bpl.n	800b650 <_vfiprintf_r+0x34>
 800b64c:	692b      	ldr	r3, [r5, #16]
 800b64e:	b99b      	cbnz	r3, 800b678 <_vfiprintf_r+0x5c>
 800b650:	4629      	mov	r1, r5
 800b652:	4630      	mov	r0, r6
 800b654:	f000 f938 	bl	800b8c8 <__swsetup_r>
 800b658:	b170      	cbz	r0, 800b678 <_vfiprintf_r+0x5c>
 800b65a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b65c:	07dc      	lsls	r4, r3, #31
 800b65e:	d504      	bpl.n	800b66a <_vfiprintf_r+0x4e>
 800b660:	f04f 30ff 	mov.w	r0, #4294967295
 800b664:	b01d      	add	sp, #116	@ 0x74
 800b666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b66a:	89ab      	ldrh	r3, [r5, #12]
 800b66c:	0598      	lsls	r0, r3, #22
 800b66e:	d4f7      	bmi.n	800b660 <_vfiprintf_r+0x44>
 800b670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b672:	f7fe f9f3 	bl	8009a5c <__retarget_lock_release_recursive>
 800b676:	e7f3      	b.n	800b660 <_vfiprintf_r+0x44>
 800b678:	2300      	movs	r3, #0
 800b67a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b67c:	2320      	movs	r3, #32
 800b67e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b682:	2330      	movs	r3, #48	@ 0x30
 800b684:	f04f 0901 	mov.w	r9, #1
 800b688:	f8cd 800c 	str.w	r8, [sp, #12]
 800b68c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b838 <_vfiprintf_r+0x21c>
 800b690:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b694:	4623      	mov	r3, r4
 800b696:	469a      	mov	sl, r3
 800b698:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b69c:	b10a      	cbz	r2, 800b6a2 <_vfiprintf_r+0x86>
 800b69e:	2a25      	cmp	r2, #37	@ 0x25
 800b6a0:	d1f9      	bne.n	800b696 <_vfiprintf_r+0x7a>
 800b6a2:	ebba 0b04 	subs.w	fp, sl, r4
 800b6a6:	d00b      	beq.n	800b6c0 <_vfiprintf_r+0xa4>
 800b6a8:	465b      	mov	r3, fp
 800b6aa:	4622      	mov	r2, r4
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	f7ff ffa2 	bl	800b5f8 <__sfputs_r>
 800b6b4:	3001      	adds	r0, #1
 800b6b6:	f000 80a7 	beq.w	800b808 <_vfiprintf_r+0x1ec>
 800b6ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b6bc:	445a      	add	r2, fp
 800b6be:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f000 809f 	beq.w	800b808 <_vfiprintf_r+0x1ec>
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6d4:	f10a 0a01 	add.w	sl, sl, #1
 800b6d8:	9304      	str	r3, [sp, #16]
 800b6da:	9307      	str	r3, [sp, #28]
 800b6dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b6e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b6e2:	4654      	mov	r4, sl
 800b6e4:	2205      	movs	r2, #5
 800b6e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ea:	4853      	ldr	r0, [pc, #332]	@ (800b838 <_vfiprintf_r+0x21c>)
 800b6ec:	f7fe f9b7 	bl	8009a5e <memchr>
 800b6f0:	9a04      	ldr	r2, [sp, #16]
 800b6f2:	b9d8      	cbnz	r0, 800b72c <_vfiprintf_r+0x110>
 800b6f4:	06d1      	lsls	r1, r2, #27
 800b6f6:	bf44      	itt	mi
 800b6f8:	2320      	movmi	r3, #32
 800b6fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b6fe:	0713      	lsls	r3, r2, #28
 800b700:	bf44      	itt	mi
 800b702:	232b      	movmi	r3, #43	@ 0x2b
 800b704:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b708:	f89a 3000 	ldrb.w	r3, [sl]
 800b70c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b70e:	d015      	beq.n	800b73c <_vfiprintf_r+0x120>
 800b710:	4654      	mov	r4, sl
 800b712:	2000      	movs	r0, #0
 800b714:	f04f 0c0a 	mov.w	ip, #10
 800b718:	9a07      	ldr	r2, [sp, #28]
 800b71a:	4621      	mov	r1, r4
 800b71c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b720:	3b30      	subs	r3, #48	@ 0x30
 800b722:	2b09      	cmp	r3, #9
 800b724:	d94b      	bls.n	800b7be <_vfiprintf_r+0x1a2>
 800b726:	b1b0      	cbz	r0, 800b756 <_vfiprintf_r+0x13a>
 800b728:	9207      	str	r2, [sp, #28]
 800b72a:	e014      	b.n	800b756 <_vfiprintf_r+0x13a>
 800b72c:	eba0 0308 	sub.w	r3, r0, r8
 800b730:	fa09 f303 	lsl.w	r3, r9, r3
 800b734:	4313      	orrs	r3, r2
 800b736:	46a2      	mov	sl, r4
 800b738:	9304      	str	r3, [sp, #16]
 800b73a:	e7d2      	b.n	800b6e2 <_vfiprintf_r+0xc6>
 800b73c:	9b03      	ldr	r3, [sp, #12]
 800b73e:	1d19      	adds	r1, r3, #4
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	9103      	str	r1, [sp, #12]
 800b744:	2b00      	cmp	r3, #0
 800b746:	bfbb      	ittet	lt
 800b748:	425b      	neglt	r3, r3
 800b74a:	f042 0202 	orrlt.w	r2, r2, #2
 800b74e:	9307      	strge	r3, [sp, #28]
 800b750:	9307      	strlt	r3, [sp, #28]
 800b752:	bfb8      	it	lt
 800b754:	9204      	strlt	r2, [sp, #16]
 800b756:	7823      	ldrb	r3, [r4, #0]
 800b758:	2b2e      	cmp	r3, #46	@ 0x2e
 800b75a:	d10a      	bne.n	800b772 <_vfiprintf_r+0x156>
 800b75c:	7863      	ldrb	r3, [r4, #1]
 800b75e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b760:	d132      	bne.n	800b7c8 <_vfiprintf_r+0x1ac>
 800b762:	9b03      	ldr	r3, [sp, #12]
 800b764:	3402      	adds	r4, #2
 800b766:	1d1a      	adds	r2, r3, #4
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	9203      	str	r2, [sp, #12]
 800b76c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b770:	9305      	str	r3, [sp, #20]
 800b772:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b83c <_vfiprintf_r+0x220>
 800b776:	2203      	movs	r2, #3
 800b778:	4650      	mov	r0, sl
 800b77a:	7821      	ldrb	r1, [r4, #0]
 800b77c:	f7fe f96f 	bl	8009a5e <memchr>
 800b780:	b138      	cbz	r0, 800b792 <_vfiprintf_r+0x176>
 800b782:	2240      	movs	r2, #64	@ 0x40
 800b784:	9b04      	ldr	r3, [sp, #16]
 800b786:	eba0 000a 	sub.w	r0, r0, sl
 800b78a:	4082      	lsls	r2, r0
 800b78c:	4313      	orrs	r3, r2
 800b78e:	3401      	adds	r4, #1
 800b790:	9304      	str	r3, [sp, #16]
 800b792:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b796:	2206      	movs	r2, #6
 800b798:	4829      	ldr	r0, [pc, #164]	@ (800b840 <_vfiprintf_r+0x224>)
 800b79a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b79e:	f7fe f95e 	bl	8009a5e <memchr>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	d03f      	beq.n	800b826 <_vfiprintf_r+0x20a>
 800b7a6:	4b27      	ldr	r3, [pc, #156]	@ (800b844 <_vfiprintf_r+0x228>)
 800b7a8:	bb1b      	cbnz	r3, 800b7f2 <_vfiprintf_r+0x1d6>
 800b7aa:	9b03      	ldr	r3, [sp, #12]
 800b7ac:	3307      	adds	r3, #7
 800b7ae:	f023 0307 	bic.w	r3, r3, #7
 800b7b2:	3308      	adds	r3, #8
 800b7b4:	9303      	str	r3, [sp, #12]
 800b7b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7b8:	443b      	add	r3, r7
 800b7ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b7bc:	e76a      	b.n	800b694 <_vfiprintf_r+0x78>
 800b7be:	460c      	mov	r4, r1
 800b7c0:	2001      	movs	r0, #1
 800b7c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7c6:	e7a8      	b.n	800b71a <_vfiprintf_r+0xfe>
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	f04f 0c0a 	mov.w	ip, #10
 800b7ce:	4619      	mov	r1, r3
 800b7d0:	3401      	adds	r4, #1
 800b7d2:	9305      	str	r3, [sp, #20]
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7da:	3a30      	subs	r2, #48	@ 0x30
 800b7dc:	2a09      	cmp	r2, #9
 800b7de:	d903      	bls.n	800b7e8 <_vfiprintf_r+0x1cc>
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d0c6      	beq.n	800b772 <_vfiprintf_r+0x156>
 800b7e4:	9105      	str	r1, [sp, #20]
 800b7e6:	e7c4      	b.n	800b772 <_vfiprintf_r+0x156>
 800b7e8:	4604      	mov	r4, r0
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7f0:	e7f0      	b.n	800b7d4 <_vfiprintf_r+0x1b8>
 800b7f2:	ab03      	add	r3, sp, #12
 800b7f4:	9300      	str	r3, [sp, #0]
 800b7f6:	462a      	mov	r2, r5
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	4b13      	ldr	r3, [pc, #76]	@ (800b848 <_vfiprintf_r+0x22c>)
 800b7fc:	a904      	add	r1, sp, #16
 800b7fe:	f7fd fbcb 	bl	8008f98 <_printf_float>
 800b802:	4607      	mov	r7, r0
 800b804:	1c78      	adds	r0, r7, #1
 800b806:	d1d6      	bne.n	800b7b6 <_vfiprintf_r+0x19a>
 800b808:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b80a:	07d9      	lsls	r1, r3, #31
 800b80c:	d405      	bmi.n	800b81a <_vfiprintf_r+0x1fe>
 800b80e:	89ab      	ldrh	r3, [r5, #12]
 800b810:	059a      	lsls	r2, r3, #22
 800b812:	d402      	bmi.n	800b81a <_vfiprintf_r+0x1fe>
 800b814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b816:	f7fe f921 	bl	8009a5c <__retarget_lock_release_recursive>
 800b81a:	89ab      	ldrh	r3, [r5, #12]
 800b81c:	065b      	lsls	r3, r3, #25
 800b81e:	f53f af1f 	bmi.w	800b660 <_vfiprintf_r+0x44>
 800b822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b824:	e71e      	b.n	800b664 <_vfiprintf_r+0x48>
 800b826:	ab03      	add	r3, sp, #12
 800b828:	9300      	str	r3, [sp, #0]
 800b82a:	462a      	mov	r2, r5
 800b82c:	4630      	mov	r0, r6
 800b82e:	4b06      	ldr	r3, [pc, #24]	@ (800b848 <_vfiprintf_r+0x22c>)
 800b830:	a904      	add	r1, sp, #16
 800b832:	f7fd fe4f 	bl	80094d4 <_printf_i>
 800b836:	e7e4      	b.n	800b802 <_vfiprintf_r+0x1e6>
 800b838:	0800be00 	.word	0x0800be00
 800b83c:	0800be06 	.word	0x0800be06
 800b840:	0800be0a 	.word	0x0800be0a
 800b844:	08008f99 	.word	0x08008f99
 800b848:	0800b5f9 	.word	0x0800b5f9

0800b84c <__swbuf_r>:
 800b84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84e:	460e      	mov	r6, r1
 800b850:	4614      	mov	r4, r2
 800b852:	4605      	mov	r5, r0
 800b854:	b118      	cbz	r0, 800b85e <__swbuf_r+0x12>
 800b856:	6a03      	ldr	r3, [r0, #32]
 800b858:	b90b      	cbnz	r3, 800b85e <__swbuf_r+0x12>
 800b85a:	f7fd ffe7 	bl	800982c <__sinit>
 800b85e:	69a3      	ldr	r3, [r4, #24]
 800b860:	60a3      	str	r3, [r4, #8]
 800b862:	89a3      	ldrh	r3, [r4, #12]
 800b864:	071a      	lsls	r2, r3, #28
 800b866:	d501      	bpl.n	800b86c <__swbuf_r+0x20>
 800b868:	6923      	ldr	r3, [r4, #16]
 800b86a:	b943      	cbnz	r3, 800b87e <__swbuf_r+0x32>
 800b86c:	4621      	mov	r1, r4
 800b86e:	4628      	mov	r0, r5
 800b870:	f000 f82a 	bl	800b8c8 <__swsetup_r>
 800b874:	b118      	cbz	r0, 800b87e <__swbuf_r+0x32>
 800b876:	f04f 37ff 	mov.w	r7, #4294967295
 800b87a:	4638      	mov	r0, r7
 800b87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b87e:	6823      	ldr	r3, [r4, #0]
 800b880:	6922      	ldr	r2, [r4, #16]
 800b882:	b2f6      	uxtb	r6, r6
 800b884:	1a98      	subs	r0, r3, r2
 800b886:	6963      	ldr	r3, [r4, #20]
 800b888:	4637      	mov	r7, r6
 800b88a:	4283      	cmp	r3, r0
 800b88c:	dc05      	bgt.n	800b89a <__swbuf_r+0x4e>
 800b88e:	4621      	mov	r1, r4
 800b890:	4628      	mov	r0, r5
 800b892:	f7ff fd9b 	bl	800b3cc <_fflush_r>
 800b896:	2800      	cmp	r0, #0
 800b898:	d1ed      	bne.n	800b876 <__swbuf_r+0x2a>
 800b89a:	68a3      	ldr	r3, [r4, #8]
 800b89c:	3b01      	subs	r3, #1
 800b89e:	60a3      	str	r3, [r4, #8]
 800b8a0:	6823      	ldr	r3, [r4, #0]
 800b8a2:	1c5a      	adds	r2, r3, #1
 800b8a4:	6022      	str	r2, [r4, #0]
 800b8a6:	701e      	strb	r6, [r3, #0]
 800b8a8:	6962      	ldr	r2, [r4, #20]
 800b8aa:	1c43      	adds	r3, r0, #1
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d004      	beq.n	800b8ba <__swbuf_r+0x6e>
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	07db      	lsls	r3, r3, #31
 800b8b4:	d5e1      	bpl.n	800b87a <__swbuf_r+0x2e>
 800b8b6:	2e0a      	cmp	r6, #10
 800b8b8:	d1df      	bne.n	800b87a <__swbuf_r+0x2e>
 800b8ba:	4621      	mov	r1, r4
 800b8bc:	4628      	mov	r0, r5
 800b8be:	f7ff fd85 	bl	800b3cc <_fflush_r>
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	d0d9      	beq.n	800b87a <__swbuf_r+0x2e>
 800b8c6:	e7d6      	b.n	800b876 <__swbuf_r+0x2a>

0800b8c8 <__swsetup_r>:
 800b8c8:	b538      	push	{r3, r4, r5, lr}
 800b8ca:	4b29      	ldr	r3, [pc, #164]	@ (800b970 <__swsetup_r+0xa8>)
 800b8cc:	4605      	mov	r5, r0
 800b8ce:	6818      	ldr	r0, [r3, #0]
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	b118      	cbz	r0, 800b8dc <__swsetup_r+0x14>
 800b8d4:	6a03      	ldr	r3, [r0, #32]
 800b8d6:	b90b      	cbnz	r3, 800b8dc <__swsetup_r+0x14>
 800b8d8:	f7fd ffa8 	bl	800982c <__sinit>
 800b8dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8e0:	0719      	lsls	r1, r3, #28
 800b8e2:	d422      	bmi.n	800b92a <__swsetup_r+0x62>
 800b8e4:	06da      	lsls	r2, r3, #27
 800b8e6:	d407      	bmi.n	800b8f8 <__swsetup_r+0x30>
 800b8e8:	2209      	movs	r2, #9
 800b8ea:	602a      	str	r2, [r5, #0]
 800b8ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f4:	81a3      	strh	r3, [r4, #12]
 800b8f6:	e033      	b.n	800b960 <__swsetup_r+0x98>
 800b8f8:	0758      	lsls	r0, r3, #29
 800b8fa:	d512      	bpl.n	800b922 <__swsetup_r+0x5a>
 800b8fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8fe:	b141      	cbz	r1, 800b912 <__swsetup_r+0x4a>
 800b900:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b904:	4299      	cmp	r1, r3
 800b906:	d002      	beq.n	800b90e <__swsetup_r+0x46>
 800b908:	4628      	mov	r0, r5
 800b90a:	f7fe ff09 	bl	800a720 <_free_r>
 800b90e:	2300      	movs	r3, #0
 800b910:	6363      	str	r3, [r4, #52]	@ 0x34
 800b912:	89a3      	ldrh	r3, [r4, #12]
 800b914:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b918:	81a3      	strh	r3, [r4, #12]
 800b91a:	2300      	movs	r3, #0
 800b91c:	6063      	str	r3, [r4, #4]
 800b91e:	6923      	ldr	r3, [r4, #16]
 800b920:	6023      	str	r3, [r4, #0]
 800b922:	89a3      	ldrh	r3, [r4, #12]
 800b924:	f043 0308 	orr.w	r3, r3, #8
 800b928:	81a3      	strh	r3, [r4, #12]
 800b92a:	6923      	ldr	r3, [r4, #16]
 800b92c:	b94b      	cbnz	r3, 800b942 <__swsetup_r+0x7a>
 800b92e:	89a3      	ldrh	r3, [r4, #12]
 800b930:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b938:	d003      	beq.n	800b942 <__swsetup_r+0x7a>
 800b93a:	4621      	mov	r1, r4
 800b93c:	4628      	mov	r0, r5
 800b93e:	f000 f882 	bl	800ba46 <__smakebuf_r>
 800b942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b946:	f013 0201 	ands.w	r2, r3, #1
 800b94a:	d00a      	beq.n	800b962 <__swsetup_r+0x9a>
 800b94c:	2200      	movs	r2, #0
 800b94e:	60a2      	str	r2, [r4, #8]
 800b950:	6962      	ldr	r2, [r4, #20]
 800b952:	4252      	negs	r2, r2
 800b954:	61a2      	str	r2, [r4, #24]
 800b956:	6922      	ldr	r2, [r4, #16]
 800b958:	b942      	cbnz	r2, 800b96c <__swsetup_r+0xa4>
 800b95a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b95e:	d1c5      	bne.n	800b8ec <__swsetup_r+0x24>
 800b960:	bd38      	pop	{r3, r4, r5, pc}
 800b962:	0799      	lsls	r1, r3, #30
 800b964:	bf58      	it	pl
 800b966:	6962      	ldrpl	r2, [r4, #20]
 800b968:	60a2      	str	r2, [r4, #8]
 800b96a:	e7f4      	b.n	800b956 <__swsetup_r+0x8e>
 800b96c:	2000      	movs	r0, #0
 800b96e:	e7f7      	b.n	800b960 <__swsetup_r+0x98>
 800b970:	2000019c 	.word	0x2000019c

0800b974 <_raise_r>:
 800b974:	291f      	cmp	r1, #31
 800b976:	b538      	push	{r3, r4, r5, lr}
 800b978:	4605      	mov	r5, r0
 800b97a:	460c      	mov	r4, r1
 800b97c:	d904      	bls.n	800b988 <_raise_r+0x14>
 800b97e:	2316      	movs	r3, #22
 800b980:	6003      	str	r3, [r0, #0]
 800b982:	f04f 30ff 	mov.w	r0, #4294967295
 800b986:	bd38      	pop	{r3, r4, r5, pc}
 800b988:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b98a:	b112      	cbz	r2, 800b992 <_raise_r+0x1e>
 800b98c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b990:	b94b      	cbnz	r3, 800b9a6 <_raise_r+0x32>
 800b992:	4628      	mov	r0, r5
 800b994:	f000 f830 	bl	800b9f8 <_getpid_r>
 800b998:	4622      	mov	r2, r4
 800b99a:	4601      	mov	r1, r0
 800b99c:	4628      	mov	r0, r5
 800b99e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9a2:	f000 b817 	b.w	800b9d4 <_kill_r>
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d00a      	beq.n	800b9c0 <_raise_r+0x4c>
 800b9aa:	1c59      	adds	r1, r3, #1
 800b9ac:	d103      	bne.n	800b9b6 <_raise_r+0x42>
 800b9ae:	2316      	movs	r3, #22
 800b9b0:	6003      	str	r3, [r0, #0]
 800b9b2:	2001      	movs	r0, #1
 800b9b4:	e7e7      	b.n	800b986 <_raise_r+0x12>
 800b9b6:	2100      	movs	r1, #0
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b9be:	4798      	blx	r3
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	e7e0      	b.n	800b986 <_raise_r+0x12>

0800b9c4 <raise>:
 800b9c4:	4b02      	ldr	r3, [pc, #8]	@ (800b9d0 <raise+0xc>)
 800b9c6:	4601      	mov	r1, r0
 800b9c8:	6818      	ldr	r0, [r3, #0]
 800b9ca:	f7ff bfd3 	b.w	800b974 <_raise_r>
 800b9ce:	bf00      	nop
 800b9d0:	2000019c 	.word	0x2000019c

0800b9d4 <_kill_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	4d06      	ldr	r5, [pc, #24]	@ (800b9f4 <_kill_r+0x20>)
 800b9da:	4604      	mov	r4, r0
 800b9dc:	4608      	mov	r0, r1
 800b9de:	4611      	mov	r1, r2
 800b9e0:	602b      	str	r3, [r5, #0]
 800b9e2:	f7f5 fc46 	bl	8001272 <_kill>
 800b9e6:	1c43      	adds	r3, r0, #1
 800b9e8:	d102      	bne.n	800b9f0 <_kill_r+0x1c>
 800b9ea:	682b      	ldr	r3, [r5, #0]
 800b9ec:	b103      	cbz	r3, 800b9f0 <_kill_r+0x1c>
 800b9ee:	6023      	str	r3, [r4, #0]
 800b9f0:	bd38      	pop	{r3, r4, r5, pc}
 800b9f2:	bf00      	nop
 800b9f4:	200017e4 	.word	0x200017e4

0800b9f8 <_getpid_r>:
 800b9f8:	f7f5 bc34 	b.w	8001264 <_getpid>

0800b9fc <__swhatbuf_r>:
 800b9fc:	b570      	push	{r4, r5, r6, lr}
 800b9fe:	460c      	mov	r4, r1
 800ba00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba04:	4615      	mov	r5, r2
 800ba06:	2900      	cmp	r1, #0
 800ba08:	461e      	mov	r6, r3
 800ba0a:	b096      	sub	sp, #88	@ 0x58
 800ba0c:	da0c      	bge.n	800ba28 <__swhatbuf_r+0x2c>
 800ba0e:	89a3      	ldrh	r3, [r4, #12]
 800ba10:	2100      	movs	r1, #0
 800ba12:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba16:	bf14      	ite	ne
 800ba18:	2340      	movne	r3, #64	@ 0x40
 800ba1a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba1e:	2000      	movs	r0, #0
 800ba20:	6031      	str	r1, [r6, #0]
 800ba22:	602b      	str	r3, [r5, #0]
 800ba24:	b016      	add	sp, #88	@ 0x58
 800ba26:	bd70      	pop	{r4, r5, r6, pc}
 800ba28:	466a      	mov	r2, sp
 800ba2a:	f000 f849 	bl	800bac0 <_fstat_r>
 800ba2e:	2800      	cmp	r0, #0
 800ba30:	dbed      	blt.n	800ba0e <__swhatbuf_r+0x12>
 800ba32:	9901      	ldr	r1, [sp, #4]
 800ba34:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ba38:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ba3c:	4259      	negs	r1, r3
 800ba3e:	4159      	adcs	r1, r3
 800ba40:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba44:	e7eb      	b.n	800ba1e <__swhatbuf_r+0x22>

0800ba46 <__smakebuf_r>:
 800ba46:	898b      	ldrh	r3, [r1, #12]
 800ba48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba4a:	079d      	lsls	r5, r3, #30
 800ba4c:	4606      	mov	r6, r0
 800ba4e:	460c      	mov	r4, r1
 800ba50:	d507      	bpl.n	800ba62 <__smakebuf_r+0x1c>
 800ba52:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ba56:	6023      	str	r3, [r4, #0]
 800ba58:	6123      	str	r3, [r4, #16]
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	6163      	str	r3, [r4, #20]
 800ba5e:	b003      	add	sp, #12
 800ba60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba62:	466a      	mov	r2, sp
 800ba64:	ab01      	add	r3, sp, #4
 800ba66:	f7ff ffc9 	bl	800b9fc <__swhatbuf_r>
 800ba6a:	9f00      	ldr	r7, [sp, #0]
 800ba6c:	4605      	mov	r5, r0
 800ba6e:	4639      	mov	r1, r7
 800ba70:	4630      	mov	r0, r6
 800ba72:	f7fe fec7 	bl	800a804 <_malloc_r>
 800ba76:	b948      	cbnz	r0, 800ba8c <__smakebuf_r+0x46>
 800ba78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba7c:	059a      	lsls	r2, r3, #22
 800ba7e:	d4ee      	bmi.n	800ba5e <__smakebuf_r+0x18>
 800ba80:	f023 0303 	bic.w	r3, r3, #3
 800ba84:	f043 0302 	orr.w	r3, r3, #2
 800ba88:	81a3      	strh	r3, [r4, #12]
 800ba8a:	e7e2      	b.n	800ba52 <__smakebuf_r+0xc>
 800ba8c:	89a3      	ldrh	r3, [r4, #12]
 800ba8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ba92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba96:	81a3      	strh	r3, [r4, #12]
 800ba98:	9b01      	ldr	r3, [sp, #4]
 800ba9a:	6020      	str	r0, [r4, #0]
 800ba9c:	b15b      	cbz	r3, 800bab6 <__smakebuf_r+0x70>
 800ba9e:	4630      	mov	r0, r6
 800baa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baa4:	f000 f81e 	bl	800bae4 <_isatty_r>
 800baa8:	b128      	cbz	r0, 800bab6 <__smakebuf_r+0x70>
 800baaa:	89a3      	ldrh	r3, [r4, #12]
 800baac:	f023 0303 	bic.w	r3, r3, #3
 800bab0:	f043 0301 	orr.w	r3, r3, #1
 800bab4:	81a3      	strh	r3, [r4, #12]
 800bab6:	89a3      	ldrh	r3, [r4, #12]
 800bab8:	431d      	orrs	r5, r3
 800baba:	81a5      	strh	r5, [r4, #12]
 800babc:	e7cf      	b.n	800ba5e <__smakebuf_r+0x18>
	...

0800bac0 <_fstat_r>:
 800bac0:	b538      	push	{r3, r4, r5, lr}
 800bac2:	2300      	movs	r3, #0
 800bac4:	4d06      	ldr	r5, [pc, #24]	@ (800bae0 <_fstat_r+0x20>)
 800bac6:	4604      	mov	r4, r0
 800bac8:	4608      	mov	r0, r1
 800baca:	4611      	mov	r1, r2
 800bacc:	602b      	str	r3, [r5, #0]
 800bace:	f7f5 fc2f 	bl	8001330 <_fstat>
 800bad2:	1c43      	adds	r3, r0, #1
 800bad4:	d102      	bne.n	800badc <_fstat_r+0x1c>
 800bad6:	682b      	ldr	r3, [r5, #0]
 800bad8:	b103      	cbz	r3, 800badc <_fstat_r+0x1c>
 800bada:	6023      	str	r3, [r4, #0]
 800badc:	bd38      	pop	{r3, r4, r5, pc}
 800bade:	bf00      	nop
 800bae0:	200017e4 	.word	0x200017e4

0800bae4 <_isatty_r>:
 800bae4:	b538      	push	{r3, r4, r5, lr}
 800bae6:	2300      	movs	r3, #0
 800bae8:	4d05      	ldr	r5, [pc, #20]	@ (800bb00 <_isatty_r+0x1c>)
 800baea:	4604      	mov	r4, r0
 800baec:	4608      	mov	r0, r1
 800baee:	602b      	str	r3, [r5, #0]
 800baf0:	f7f5 fc2d 	bl	800134e <_isatty>
 800baf4:	1c43      	adds	r3, r0, #1
 800baf6:	d102      	bne.n	800bafe <_isatty_r+0x1a>
 800baf8:	682b      	ldr	r3, [r5, #0]
 800bafa:	b103      	cbz	r3, 800bafe <_isatty_r+0x1a>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	bd38      	pop	{r3, r4, r5, pc}
 800bb00:	200017e4 	.word	0x200017e4

0800bb04 <_init>:
 800bb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb06:	bf00      	nop
 800bb08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb0a:	bc08      	pop	{r3}
 800bb0c:	469e      	mov	lr, r3
 800bb0e:	4770      	bx	lr

0800bb10 <_fini>:
 800bb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb12:	bf00      	nop
 800bb14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb16:	bc08      	pop	{r3}
 800bb18:	469e      	mov	lr, r3
 800bb1a:	4770      	bx	lr
