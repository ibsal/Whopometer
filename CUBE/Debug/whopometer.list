
whopometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbf4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800cd08  0800cd08  0000dd08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d198  0800d198  0000f358  2**0
                  CONTENTS
  4 .ARM          00000008  0800d198  0800d198  0000e198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1a0  0800d1a0  0000f358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1a0  0800d1a0  0000e1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d1a4  0800d1a4  0000e1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000358  20000000  0800d1a8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b4  20000358  0800d500  0000f358  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000180c  0800d500  0000f80c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f358  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146c5  00000000  00000000  0000f381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a16  00000000  00000000  00023a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  00027460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e30  00000000  00000000  00028748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba19  00000000  00000000  00029578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c27  00000000  00000000  00044f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d195  00000000  00000000  0005cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9d4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e5c  00000000  00000000  000e9d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000efbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000358 	.word	0x20000358
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ccec 	.word	0x0800ccec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000035c 	.word	0x2000035c
 800014c:	0800ccec 	.word	0x0800ccec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	@ 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <h3lis331dl_read_reg>:
  *
  */
int32_t __weak h3lis331dl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	461a      	mov	r2, r3
 8000e18:	460b      	mov	r3, r1
 8000e1a:	72fb      	strb	r3, [r7, #11]
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d102      	bne.n	8000e2c <h3lis331dl_read_reg+0x20>
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <h3lis331dl_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	685c      	ldr	r4, [r3, #4]
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	68d8      	ldr	r0, [r3, #12]
 8000e34:	893b      	ldrh	r3, [r7, #8]
 8000e36:	7af9      	ldrb	r1, [r7, #11]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	47a0      	blx	r4
 8000e3c:	6178      	str	r0, [r7, #20]

  return ret;
 8000e3e:	697b      	ldr	r3, [r7, #20]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	371c      	adds	r7, #28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd90      	pop	{r4, r7, pc}

08000e48 <h3lis331dl_write_reg>:
  *
  */
int32_t __weak h3lis331dl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	461a      	mov	r2, r3
 8000e54:	460b      	mov	r3, r1
 8000e56:	72fb      	strb	r3, [r7, #11]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d102      	bne.n	8000e68 <h3lis331dl_write_reg+0x20>
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295
 8000e66:	e009      	b.n	8000e7c <h3lis331dl_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	681c      	ldr	r4, [r3, #0]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	68d8      	ldr	r0, [r3, #12]
 8000e70:	893b      	ldrh	r3, [r7, #8]
 8000e72:	7af9      	ldrb	r1, [r7, #11]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	47a0      	blx	r4
 8000e78:	6178      	str	r0, [r7, #20]

  return ret;
 8000e7a:	697b      	ldr	r3, [r7, #20]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	371c      	adds	r7, #28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd90      	pop	{r4, r7, pc}

08000e84 <h3lis331dl_from_fs100_to_mg>:
  * @{
  *
  */

float_t h3lis331dl_from_fs100_to_mg(int16_t lsb)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 3.0625f);
 8000e8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff66 	bl	8000d64 <__aeabi_i2f>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4904      	ldr	r1, [pc, #16]	@ (8000eac <h3lis331dl_from_fs100_to_mg+0x28>)
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff f95f 	bl	8000160 <__aeabi_fmul>
 8000ea2:	4603      	mov	r3, r0
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40440000 	.word	0x40440000

08000eb0 <h3lis331dl_data_rate_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_data_rate_set(const stmdev_ctx_t *ctx,
                                 h3lis331dl_dr_t val)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	70fb      	strb	r3, [r7, #3]
  h3lis331dl_ctrl_reg1_t ctrl_reg1;
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG1,
 8000ebc:	f107 0208 	add.w	r2, r7, #8
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	2120      	movs	r1, #32
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ffa1 	bl	8000e0c <h3lis331dl_read_reg>
 8000eca:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg1, 1);

  if (ret == 0)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d118      	bne.n	8000f04 <h3lis331dl_data_rate_set+0x54>
  {
    ctrl_reg1.pm = (uint8_t)val & 0x07U;
 8000ed2:	78fb      	ldrb	r3, [r7, #3]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	7a3b      	ldrb	r3, [r7, #8]
 8000edc:	f362 1347 	bfi	r3, r2, #5, #3
 8000ee0:	723b      	strb	r3, [r7, #8]
    ctrl_reg1.dr = ((uint8_t)val & 0x30U) >> 4;
 8000ee2:	78fb      	ldrb	r3, [r7, #3]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	7a3b      	ldrb	r3, [r7, #8]
 8000eee:	f362 03c4 	bfi	r3, r2, #3, #2
 8000ef2:	723b      	strb	r3, [r7, #8]
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG1,
 8000ef4:	f107 0208 	add.w	r2, r7, #8
 8000ef8:	2301      	movs	r3, #1
 8000efa:	2120      	movs	r1, #32
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ffa3 	bl	8000e48 <h3lis331dl_write_reg>
 8000f02:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl_reg1, 1);
  }

  return ret;
 8000f04:	68fb      	ldr	r3, [r7, #12]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <h3lis331dl_full_scale_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_full_scale_set(const stmdev_ctx_t *ctx,
                                  h3lis331dl_fs_t val)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b084      	sub	sp, #16
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	460b      	mov	r3, r1
 8000f18:	70fb      	strb	r3, [r7, #3]
  h3lis331dl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000f1a:	f107 0208 	add.w	r2, r7, #8
 8000f1e:	2301      	movs	r3, #1
 8000f20:	2123      	movs	r1, #35	@ 0x23
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ff72 	bl	8000e0c <h3lis331dl_read_reg>
 8000f28:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d10f      	bne.n	8000f50 <h3lis331dl_full_scale_set+0x42>
  {
    ctrl_reg4.fs = (uint8_t)val;
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	7a3b      	ldrb	r3, [r7, #8]
 8000f3a:	f362 1305 	bfi	r3, r2, #4, #2
 8000f3e:	723b      	strb	r3, [r7, #8]
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000f40:	f107 0208 	add.w	r2, r7, #8
 8000f44:	2301      	movs	r3, #1
 8000f46:	2123      	movs	r1, #35	@ 0x23
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff7d 	bl	8000e48 <h3lis331dl_write_reg>
 8000f4e:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8000f50:	68fb      	ldr	r3, [r7, #12]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <h3lis331dl_block_data_update_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_block_data_update_set(const stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	460b      	mov	r3, r1
 8000f64:	70fb      	strb	r3, [r7, #3]
  h3lis331dl_ctrl_reg4_t ctrl_reg4;
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000f66:	f107 0208 	add.w	r2, r7, #8
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	2123      	movs	r1, #35	@ 0x23
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff4c 	bl	8000e0c <h3lis331dl_read_reg>
 8000f74:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg4, 1);

  if (ret == 0)
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10f      	bne.n	8000f9c <h3lis331dl_block_data_update_set+0x42>
  {
    ctrl_reg4.bdu = val;
 8000f7c:	78fb      	ldrb	r3, [r7, #3]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	7a3b      	ldrb	r3, [r7, #8]
 8000f86:	f362 13c7 	bfi	r3, r2, #7, #1
 8000f8a:	723b      	strb	r3, [r7, #8]
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG4,
 8000f8c:	f107 0208 	add.w	r2, r7, #8
 8000f90:	2301      	movs	r3, #1
 8000f92:	2123      	movs	r1, #35	@ 0x23
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff57 	bl	8000e48 <h3lis331dl_write_reg>
 8000f9a:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl_reg4, 1);
  }

  return ret;
 8000f9c:	68fb      	ldr	r3, [r7, #12]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <h3lis331dl_status_reg_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_status_reg_get(const stmdev_ctx_t *ctx,
                                  h3lis331dl_status_reg_t *val)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
 8000fae:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_STATUS_REG,
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	2127      	movs	r1, #39	@ 0x27
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff ff28 	bl	8000e0c <h3lis331dl_read_reg>
 8000fbc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *) val, 1);

  return ret;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <h3lis331dl_acceleration_raw_get>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_acceleration_raw_get(const stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_OUT_X_L, buff, 6);
 8000fd2:	f107 020c 	add.w	r2, r7, #12
 8000fd6:	2306      	movs	r3, #6
 8000fd8:	2128      	movs	r1, #40	@ 0x28
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ff16 	bl	8000e0c <h3lis331dl_read_reg>
 8000fe0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8000fe2:	7b7b      	ldrb	r3, [r7, #13]
 8000fe4:	b21a      	sxth	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	021b      	lsls	r3, r3, #8
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	7b3a      	ldrb	r2, [r7, #12]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001002:	7bfa      	ldrb	r2, [r7, #15]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	3302      	adds	r3, #2
 8001008:	b212      	sxth	r2, r2
 800100a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	3302      	adds	r3, #2
 8001010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001014:	b29b      	uxth	r3, r3
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b29b      	uxth	r3, r3
 800101a:	7bba      	ldrb	r2, [r7, #14]
 800101c:	4413      	add	r3, r2
 800101e:	b29a      	uxth	r2, r3
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	3302      	adds	r3, #2
 8001024:	b212      	sxth	r2, r2
 8001026:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001028:	7c7a      	ldrb	r2, [r7, #17]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	3304      	adds	r3, #4
 800102e:	b212      	sxth	r2, r2
 8001030:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	3304      	adds	r3, #4
 8001036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103a:	b29b      	uxth	r3, r3
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b29b      	uxth	r3, r3
 8001040:	7c3a      	ldrb	r2, [r7, #16]
 8001042:	4413      	add	r3, r2
 8001044:	b29a      	uxth	r2, r3
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	3304      	adds	r3, #4
 800104a:	b212      	sxth	r2, r2
 800104c:	801a      	strh	r2, [r3, #0]

  return ret;
 800104e:	697b      	ldr	r3, [r7, #20]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <h3lis331dl_device_id_get>:
  * @param  buff        buffer that stores data read
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_WHO_AM_I, buff, 1);
 8001062:	2301      	movs	r3, #1
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	210f      	movs	r1, #15
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff fecf 	bl	8000e0c <h3lis331dl_read_reg>
 800106e:	60f8      	str	r0, [r7, #12]

  return ret;
 8001070:	68fb      	ldr	r3, [r7, #12]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <h3lis331dl_hp_path_set>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t h3lis331dl_hp_path_set(const stmdev_ctx_t *ctx,
                               h3lis331dl_hpen_t val)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b084      	sub	sp, #16
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	70fb      	strb	r3, [r7, #3]
  h3lis331dl_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = h3lis331dl_read_reg(ctx, H3LIS331DL_CTRL_REG2,
 8001086:	f107 0208 	add.w	r2, r7, #8
 800108a:	2301      	movs	r3, #1
 800108c:	2121      	movs	r1, #33	@ 0x21
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff febc 	bl	8000e0c <h3lis331dl_read_reg>
 8001094:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl_reg2, 1);

  if (ret == 0)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d118      	bne.n	80010ce <h3lis331dl_hp_path_set+0x54>
  {
    ctrl_reg2.hpen = (uint8_t)val & 0x03U;
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	7a3b      	ldrb	r3, [r7, #8]
 80010a6:	f362 0383 	bfi	r3, r2, #2, #2
 80010aa:	723b      	strb	r3, [r7, #8]
    ctrl_reg2.fds = ((uint8_t)val & 0x04U) >> 2;
 80010ac:	78fb      	ldrb	r3, [r7, #3]
 80010ae:	089b      	lsrs	r3, r3, #2
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	7a3b      	ldrb	r3, [r7, #8]
 80010b8:	f362 1304 	bfi	r3, r2, #4, #1
 80010bc:	723b      	strb	r3, [r7, #8]
    ret = h3lis331dl_write_reg(ctx, H3LIS331DL_CTRL_REG2,
 80010be:	f107 0208 	add.w	r2, r7, #8
 80010c2:	2301      	movs	r3, #1
 80010c4:	2121      	movs	r1, #33	@ 0x21
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff febe 	bl	8000e48 <h3lis331dl_write_reg>
 80010cc:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl_reg2, 1);
  }

  return ret;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <platform_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


// Define platform_write, platform_read, and platform_delay functions for HIG Accel
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp, uint16_t len){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af04      	add	r7, sp, #16
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	607a      	str	r2, [r7, #4]
 80010e2:	461a      	mov	r2, r3
 80010e4:	460b      	mov	r3, r1
 80010e6:	72fb      	strb	r3, [r7, #11]
 80010e8:	4613      	mov	r3, r2
 80010ea:	813b      	strh	r3, [r7, #8]
	/* Write multiple command */
	reg |= 0x80;
 80010ec:	7afb      	ldrb	r3, [r7, #11]
 80010ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80010f2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Write(handle, H3LIS331DL_I2C_ADD_L, reg,
 80010f4:	7afb      	ldrb	r3, [r7, #11]
 80010f6:	b29a      	uxth	r2, r3
 80010f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010fc:	9302      	str	r3, [sp, #8]
 80010fe:	893b      	ldrh	r3, [r7, #8]
 8001100:	9301      	str	r3, [sp, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2301      	movs	r3, #1
 8001108:	2131      	movs	r1, #49	@ 0x31
 800110a:	68f8      	ldr	r0, [r7, #12]
 800110c:	f001 f986 	bl	800241c <HAL_I2C_Mem_Write>
	                    I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
}
 8001110:	bf00      	nop
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len){
 800111a:	b580      	push	{r7, lr}
 800111c:	b088      	sub	sp, #32
 800111e:	af04      	add	r7, sp, #16
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	461a      	mov	r2, r3
 8001126:	460b      	mov	r3, r1
 8001128:	72fb      	strb	r3, [r7, #11]
 800112a:	4613      	mov	r3, r2
 800112c:	813b      	strh	r3, [r7, #8]
	reg |= 0x80;
 800112e:	7afb      	ldrb	r3, [r7, #11]
 8001130:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001134:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Mem_Read(handle, H3LIS331DL_I2C_ADD_L, reg,
 8001136:	7afb      	ldrb	r3, [r7, #11]
 8001138:	b29a      	uxth	r2, r3
 800113a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	893b      	ldrh	r3, [r7, #8]
 8001142:	9301      	str	r3, [sp, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2301      	movs	r3, #1
 800114a:	2131      	movs	r1, #49	@ 0x31
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f001 fa5f 	bl	8002610 <HAL_I2C_Mem_Read>
	                   I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
}
 8001152:	bf00      	nop
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <platform_delay>:

/** Optional (may be required by driver) **/
static void platform_delay(uint32_t millisec){
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	HAL_Delay(millisec);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 fd47 	bl	8001bf8 <HAL_Delay>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
	...

08001174 <main>:

int main(void)
{
 8001174:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001178:	b094      	sub	sp, #80	@ 0x50
 800117a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117c:	f000 fcda 	bl	8001b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001180:	f000 f90e 	bl	80013a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001184:	f000 fa30 	bl	80015e8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001188:	f000 f966 	bl	8001458 <MX_I2C1_Init>
  MX_SPI1_Init();
 800118c:	f000 f9c0 	bl	8001510 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001190:	f000 f9f4 	bl	800157c <MX_SPI2_Init>
  MX_I2C2_Init();
 8001194:	f000 f98e 	bl	80014b4 <MX_I2C2_Init>
  MX_FATFS_Init();
 8001198:	f006 fe90 	bl	8007ebc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800119c:	f008 fab6 	bl	800970c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80011a0:	2064      	movs	r0, #100	@ 0x64
 80011a2:	f000 fd29 	bl	8001bf8 <HAL_Delay>
  //MPU6050_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(1000);
 80011a6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011aa:	f000 fd25 	bl	8001bf8 <HAL_Delay>

  stmdev_ctx_t dev_ctx;
  uint8_t *ctxbegin = "/nBeggining CTX stuff/n";
 80011ae:	4b6f      	ldr	r3, [pc, #444]	@ (800136c <main+0x1f8>)
 80011b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  CDC_Transmit_FS(ctxbegin, strlen(ctxbegin));
 80011b2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80011b4:	f7fe ffcc 	bl	8000150 <strlen>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4619      	mov	r1, r3
 80011bc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80011be:	f008 fb63 	bl	8009888 <CDC_Transmit_FS>

  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 80011c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001370 <main+0x1fc>)
 80011c4:	61fb      	str	r3, [r7, #28]
  dev_ctx.read_reg = platform_read;
 80011c6:	4b6b      	ldr	r3, [pc, #428]	@ (8001374 <main+0x200>)
 80011c8:	623b      	str	r3, [r7, #32]
  dev_ctx.mdelay = platform_delay;
 80011ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001378 <main+0x204>)
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
  dev_ctx.handle = &SENSOR_BUS;
 80011ce:	4b6b      	ldr	r3, [pc, #428]	@ (800137c <main+0x208>)
 80011d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  whoamI = 0;
 80011d2:	4b6b      	ldr	r3, [pc, #428]	@ (8001380 <main+0x20c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	701a      	strb	r2, [r3, #0]

  HAL_Delay(1000);
 80011d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011dc:	f000 fd0c 	bl	8001bf8 <HAL_Delay>
  uint8_t *idgen = "/nBeggining ID Get stuff/n";
 80011e0:	4b68      	ldr	r3, [pc, #416]	@ (8001384 <main+0x210>)
 80011e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  CDC_Transmit_FS(idgen, strlen(idgen));
 80011e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80011e6:	f7fe ffb3 	bl	8000150 <strlen>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4619      	mov	r1, r3
 80011ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80011f0:	f008 fb4a 	bl	8009888 <CDC_Transmit_FS>

  h3lis331dl_device_id_get(&dev_ctx, &whoamI);
 80011f4:	f107 031c 	add.w	r3, r7, #28
 80011f8:	4961      	ldr	r1, [pc, #388]	@ (8001380 <main+0x20c>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff ff2c 	bl	8001058 <h3lis331dl_device_id_get>
  if ( whoamI != H3LIS331DL_ID ){
 8001200:	4b5f      	ldr	r3, [pc, #380]	@ (8001380 <main+0x20c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b32      	cmp	r3, #50	@ 0x32
 8001206:	d01e      	beq.n	8001246 <main+0xd2>
 	 while(1){
 		uint8_t *yikes = "/nWho am I is not H3LIS331DL_ID /n";
 8001208:	4b5f      	ldr	r3, [pc, #380]	@ (8001388 <main+0x214>)
 800120a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 		CDC_Transmit_FS(yikes, strlen(yikes));
 800120c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800120e:	f7fe ff9f 	bl	8000150 <strlen>
 8001212:	4603      	mov	r3, r0
 8001214:	4619      	mov	r1, r3
 8001216:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001218:	f008 fb36 	bl	8009888 <CDC_Transmit_FS>
 		HAL_Delay(100);
 800121c:	2064      	movs	r0, #100	@ 0x64
 800121e:	f000 fceb 	bl	8001bf8 <HAL_Delay>
 		CDC_Transmit_FS((uint8_t *) whoamI, strlen(whoamI));
 8001222:	4b57      	ldr	r3, [pc, #348]	@ (8001380 <main+0x20c>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	461c      	mov	r4, r3
 8001228:	4b55      	ldr	r3, [pc, #340]	@ (8001380 <main+0x20c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7fe ff8f 	bl	8000150 <strlen>
 8001232:	4603      	mov	r3, r0
 8001234:	4619      	mov	r1, r3
 8001236:	4620      	mov	r0, r4
 8001238:	f008 fb26 	bl	8009888 <CDC_Transmit_FS>
 		HAL_Delay(100);
 800123c:	2064      	movs	r0, #100	@ 0x64
 800123e:	f000 fcdb 	bl	8001bf8 <HAL_Delay>
 	 while(1){
 8001242:	bf00      	nop
 8001244:	e7e0      	b.n	8001208 <main+0x94>
 	 }
  }
  HAL_Delay(1000);
 8001246:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800124a:	f000 fcd5 	bl	8001bf8 <HAL_Delay>
  uint8_t *idgenyes = "/nID Get was succesful, moving on /n";
 800124e:	4b4f      	ldr	r3, [pc, #316]	@ (800138c <main+0x218>)
 8001250:	637b      	str	r3, [r7, #52]	@ 0x34
  CDC_Transmit_FS(idgenyes, strlen(idgenyes));
 8001252:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001254:	f7fe ff7c 	bl	8000150 <strlen>
 8001258:	4603      	mov	r3, r0
 800125a:	4619      	mov	r1, r3
 800125c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800125e:	f008 fb13 	bl	8009888 <CDC_Transmit_FS>

  /* Enable Block Data Update */
  h3lis331dl_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	2101      	movs	r1, #1
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fe76 	bl	8000f5a <h3lis331dl_block_data_update_set>
  /* Set full scale */
  h3lis331dl_full_scale_set(&dev_ctx, H3LIS331DL_100g);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fe4a 	bl	8000f0e <h3lis331dl_full_scale_set>
  /* Configure filtering chain */
  h3lis331dl_hp_path_set(&dev_ctx, H3LIS331DL_HP_DISABLE);
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	2100      	movs	r1, #0
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fefa 	bl	800107a <h3lis331dl_hp_path_set>
  //h3lis331dl_hp_path_set(&dev_ctx, H3LIS331DL_HP_ON_OUT);
  //h3lis331dl_hp_reset_get(&dev_ctx);
  /* Set Output Data Rate */
  h3lis331dl_data_rate_set(&dev_ctx, H3LIS331DL_ODR_5Hz);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	2105      	movs	r1, #5
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fe0f 	bl	8000eb0 <h3lis331dl_data_rate_set>

  HAL_Delay(1000);
 8001292:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001296:	f000 fcaf 	bl	8001bf8 <HAL_Delay>
   uint8_t *configed = "/nDevice Config Done/n";
 800129a:	4b3d      	ldr	r3, [pc, #244]	@ (8001390 <main+0x21c>)
 800129c:	633b      	str	r3, [r7, #48]	@ 0x30
   CDC_Transmit_FS(configed, strlen(configed));
 800129e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80012a0:	f7fe ff56 	bl	8000150 <strlen>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4619      	mov	r1, r3
 80012a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80012aa:	f008 faed 	bl	8009888 <CDC_Transmit_FS>

  /* Read samples in polling mode (no int) */
  while (1) {
    /* Read output only if new value is available */
    h3lis331dl_reg_t reg;
    h3lis331dl_status_reg_get(&dev_ctx, &reg.status_reg);
 80012ae:	f107 0218 	add.w	r2, r7, #24
 80012b2:	f107 031c 	add.w	r3, r7, #28
 80012b6:	4611      	mov	r1, r2
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fe74 	bl	8000fa6 <h3lis331dl_status_reg_get>

    if (reg.status_reg.zyxda) {
 80012be:	7e3b      	ldrb	r3, [r7, #24]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f1      	beq.n	80012ae <main+0x13a>
      /* Read acceleration data */
      memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 80012ca:	2206      	movs	r2, #6
 80012cc:	2100      	movs	r1, #0
 80012ce:	4831      	ldr	r0, [pc, #196]	@ (8001394 <main+0x220>)
 80012d0:	f009 fc39 	bl	800ab46 <memset>
      h3lis331dl_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	492e      	ldr	r1, [pc, #184]	@ (8001394 <main+0x220>)
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fe74 	bl	8000fc8 <h3lis331dl_acceleration_raw_get>
      acceleration_mg[0] = h3lis331dl_from_fs100_to_mg(
 80012e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001394 <main+0x220>)
 80012e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fdcc 	bl	8000e84 <h3lis331dl_from_fs100_to_mg>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001398 <main+0x224>)
 80012f0:	6013      	str	r3, [r2, #0]
                             data_raw_acceleration[0]);
      acceleration_mg[1] = h3lis331dl_from_fs100_to_mg(
 80012f2:	4b28      	ldr	r3, [pc, #160]	@ (8001394 <main+0x220>)
 80012f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fdc3 	bl	8000e84 <h3lis331dl_from_fs100_to_mg>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a25      	ldr	r2, [pc, #148]	@ (8001398 <main+0x224>)
 8001302:	6053      	str	r3, [r2, #4]
                             data_raw_acceleration[1]);
      acceleration_mg[2] = h3lis331dl_from_fs100_to_mg(
 8001304:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <main+0x220>)
 8001306:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fdba 	bl	8000e84 <h3lis331dl_from_fs100_to_mg>
 8001310:	4603      	mov	r3, r0
 8001312:	4a21      	ldr	r2, [pc, #132]	@ (8001398 <main+0x224>)
 8001314:	6093      	str	r3, [r2, #8]
                             data_raw_acceleration[2]);
      char buffer[20];
      sprintf(buffer, "X %.2f Y %.2f Z %.2f", acceleration_mg[0], acceleration_mg[1], acceleration_mg[2]);
 8001316:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <main+0x224>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f938 	bl	8000590 <__aeabi_f2d>
 8001320:	4680      	mov	r8, r0
 8001322:	4689      	mov	r9, r1
 8001324:	4b1c      	ldr	r3, [pc, #112]	@ (8001398 <main+0x224>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f931 	bl	8000590 <__aeabi_f2d>
 800132e:	4604      	mov	r4, r0
 8001330:	460d      	mov	r5, r1
 8001332:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <main+0x224>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f92a 	bl	8000590 <__aeabi_f2d>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	1d38      	adds	r0, r7, #4
 8001342:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001346:	e9cd 4500 	strd	r4, r5, [sp]
 800134a:	4642      	mov	r2, r8
 800134c:	464b      	mov	r3, r9
 800134e:	4913      	ldr	r1, [pc, #76]	@ (800139c <main+0x228>)
 8001350:	f009 fb96 	bl	800aa80 <siprintf>
      CDC_Transmit_FS(buffer, strlen(buffer));
 8001354:	1d3b      	adds	r3, r7, #4
 8001356:	4618      	mov	r0, r3
 8001358:	f7fe fefa 	bl	8000150 <strlen>
 800135c:	4602      	mov	r2, r0
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f008 fa90 	bl	8009888 <CDC_Transmit_FS>
  while (1) {
 8001368:	e7a1      	b.n	80012ae <main+0x13a>
 800136a:	bf00      	nop
 800136c:	0800cd08 	.word	0x0800cd08
 8001370:	080010d9 	.word	0x080010d9
 8001374:	0800111b 	.word	0x0800111b
 8001378:	0800115d 	.word	0x0800115d
 800137c:	2000038c 	.word	0x2000038c
 8001380:	20000388 	.word	0x20000388
 8001384:	0800cd20 	.word	0x0800cd20
 8001388:	0800cd3c 	.word	0x0800cd3c
 800138c:	0800cd60 	.word	0x0800cd60
 8001390:	0800cd88 	.word	0x0800cd88
 8001394:	20000374 	.word	0x20000374
 8001398:	2000037c 	.word	0x2000037c
 800139c:	0800cda0 	.word	0x0800cda0

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b094      	sub	sp, #80	@ 0x50
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013aa:	2228      	movs	r2, #40	@ 0x28
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f009 fbc9 	bl	800ab46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013d0:	2301      	movs	r3, #1
 80013d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80013da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80013de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e0:	2301      	movs	r3, #1
 80013e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e4:	2302      	movs	r3, #2
 80013e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013ee:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80013f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 fc91 	bl	8004d20 <HAL_RCC_OscConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001404:	f000 f948 	bl	8001698 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001408:	230f      	movs	r3, #15
 800140a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001414:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001418:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	2102      	movs	r1, #2
 8001424:	4618      	mov	r0, r3
 8001426:	f003 fefd 	bl	8005224 <HAL_RCC_ClockConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001430:	f000 f932 	bl	8001698 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001434:	2310      	movs	r3, #16
 8001436:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8001438:	2300      	movs	r3, #0
 800143a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	4618      	mov	r0, r3
 8001440:	f004 f86c 	bl	800551c <HAL_RCCEx_PeriphCLKConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800144a:	f000 f925 	bl	8001698 <Error_Handler>
  }
}
 800144e:	bf00      	nop
 8001450:	3750      	adds	r7, #80	@ 0x50
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800145c:	4b12      	ldr	r3, [pc, #72]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800145e:	4a13      	ldr	r2, [pc, #76]	@ (80014ac <MX_I2C1_Init+0x54>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001464:	4a12      	ldr	r2, [pc, #72]	@ (80014b0 <MX_I2C1_Init+0x58>)
 8001466:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001468:	4b0f      	ldr	r3, [pc, #60]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001470:	2200      	movs	r2, #0
 8001472:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001476:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800147a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800147c:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001482:	4b09      	ldr	r3, [pc, #36]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001488:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <MX_I2C1_Init+0x50>)
 800148a:	2200      	movs	r2, #0
 800148c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001490:	2200      	movs	r2, #0
 8001492:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <MX_I2C1_Init+0x50>)
 8001496:	f000 fe7d 	bl	8002194 <HAL_I2C_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014a0:	f000 f8fa 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	2000038c 	.word	0x2000038c
 80014ac:	40005400 	.word	0x40005400
 80014b0:	000186a0 	.word	0x000186a0

080014b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014b8:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <MX_I2C2_Init+0x50>)
 80014ba:	4a13      	ldr	r2, [pc, #76]	@ (8001508 <MX_I2C2_Init+0x54>)
 80014bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014be:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <MX_I2C2_Init+0x50>)
 80014c0:	4a12      	ldr	r2, [pc, #72]	@ (800150c <MX_I2C2_Init+0x58>)
 80014c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <MX_I2C2_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <MX_I2C2_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001504 <MX_I2C2_Init+0x50>)
 80014d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001504 <MX_I2C2_Init+0x50>)
 80014da:	2200      	movs	r2, #0
 80014dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014de:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <MX_I2C2_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e4:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <MX_I2C2_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ea:	4b06      	ldr	r3, [pc, #24]	@ (8001504 <MX_I2C2_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	@ (8001504 <MX_I2C2_Init+0x50>)
 80014f2:	f000 fe4f 	bl	8002194 <HAL_I2C_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80014fc:	f000 f8cc 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200003e0 	.word	0x200003e0
 8001508:	40005800 	.word	0x40005800
 800150c:	000186a0 	.word	0x000186a0

08001510 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001514:	4b17      	ldr	r3, [pc, #92]	@ (8001574 <MX_SPI1_Init+0x64>)
 8001516:	4a18      	ldr	r2, [pc, #96]	@ (8001578 <MX_SPI1_Init+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800151a:	4b16      	ldr	r3, [pc, #88]	@ (8001574 <MX_SPI1_Init+0x64>)
 800151c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001520:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001522:	4b14      	ldr	r3, [pc, #80]	@ (8001574 <MX_SPI1_Init+0x64>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001528:	4b12      	ldr	r3, [pc, #72]	@ (8001574 <MX_SPI1_Init+0x64>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <MX_SPI1_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001534:	4b0f      	ldr	r3, [pc, #60]	@ (8001574 <MX_SPI1_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800153a:	4b0e      	ldr	r3, [pc, #56]	@ (8001574 <MX_SPI1_Init+0x64>)
 800153c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001540:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001542:	4b0c      	ldr	r3, [pc, #48]	@ (8001574 <MX_SPI1_Init+0x64>)
 8001544:	2230      	movs	r2, #48	@ 0x30
 8001546:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001548:	4b0a      	ldr	r3, [pc, #40]	@ (8001574 <MX_SPI1_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800154e:	4b09      	ldr	r3, [pc, #36]	@ (8001574 <MX_SPI1_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001554:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <MX_SPI1_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <MX_SPI1_Init+0x64>)
 800155c:	220a      	movs	r2, #10
 800155e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001560:	4804      	ldr	r0, [pc, #16]	@ (8001574 <MX_SPI1_Init+0x64>)
 8001562:	f004 f891 	bl	8005688 <HAL_SPI_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800156c:	f000 f894 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001570:	bf00      	nop
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000434 	.word	0x20000434
 8001578:	40013000 	.word	0x40013000

0800157c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001580:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <MX_SPI2_Init+0x64>)
 8001582:	4a18      	ldr	r2, [pc, #96]	@ (80015e4 <MX_SPI2_Init+0x68>)
 8001584:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001586:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <MX_SPI2_Init+0x64>)
 8001588:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800158c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800158e:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <MX_SPI2_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001594:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <MX_SPI2_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800159a:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <MX_SPI2_Init+0x64>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <MX_SPI2_Init+0x64>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <MX_SPI2_Init+0x64>)
 80015a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <MX_SPI2_Init+0x64>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <MX_SPI2_Init+0x64>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ba:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <MX_SPI2_Init+0x64>)
 80015bc:	2200      	movs	r2, #0
 80015be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c0:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <MX_SPI2_Init+0x64>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80015c6:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <MX_SPI2_Init+0x64>)
 80015c8:	220a      	movs	r2, #10
 80015ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80015cc:	4804      	ldr	r0, [pc, #16]	@ (80015e0 <MX_SPI2_Init+0x64>)
 80015ce:	f004 f85b 	bl	8005688 <HAL_SPI_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80015d8:	f000 f85e 	bl	8001698 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	2000048c 	.word	0x2000048c
 80015e4:	40003800 	.word	0x40003800

080015e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fc:	4b23      	ldr	r3, [pc, #140]	@ (800168c <MX_GPIO_Init+0xa4>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a22      	ldr	r2, [pc, #136]	@ (800168c <MX_GPIO_Init+0xa4>)
 8001602:	f043 0320 	orr.w	r3, r3, #32
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b20      	ldr	r3, [pc, #128]	@ (800168c <MX_GPIO_Init+0xa4>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0320 	and.w	r3, r3, #32
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001614:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <MX_GPIO_Init+0xa4>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a1c      	ldr	r2, [pc, #112]	@ (800168c <MX_GPIO_Init+0xa4>)
 800161a:	f043 0304 	orr.w	r3, r3, #4
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <MX_GPIO_Init+0xa4>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0304 	and.w	r3, r3, #4
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800162c:	4b17      	ldr	r3, [pc, #92]	@ (800168c <MX_GPIO_Init+0xa4>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a16      	ldr	r2, [pc, #88]	@ (800168c <MX_GPIO_Init+0xa4>)
 8001632:	f043 0308 	orr.w	r3, r3, #8
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b14      	ldr	r3, [pc, #80]	@ (800168c <MX_GPIO_Init+0xa4>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0308 	and.w	r3, r3, #8
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2110      	movs	r1, #16
 8001648:	4811      	ldr	r0, [pc, #68]	@ (8001690 <MX_GPIO_Init+0xa8>)
 800164a:	f000 fd8b 	bl	8002164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 800164e:	2310      	movs	r3, #16
 8001650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2302      	movs	r3, #2
 800165c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 0310 	add.w	r3, r7, #16
 8001662:	4619      	mov	r1, r3
 8001664:	480a      	ldr	r0, [pc, #40]	@ (8001690 <MX_GPIO_Init+0xa8>)
 8001666:	f000 fbf9 	bl	8001e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 800166a:	2314      	movs	r3, #20
 800166c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	4619      	mov	r1, r3
 800167c:	4805      	ldr	r0, [pc, #20]	@ (8001694 <MX_GPIO_Init+0xac>)
 800167e:	f000 fbed 	bl	8001e5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001682:	bf00      	nop
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	40010800 	.word	0x40010800
 8001694:	40010c00 	.word	0x40010c00

08001698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800169c:	b672      	cpsid	i
}
 800169e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <Error_Handler+0x8>

080016a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016aa:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_MspInit+0x5c>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	4a14      	ldr	r2, [pc, #80]	@ (8001700 <HAL_MspInit+0x5c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	6193      	str	r3, [r2, #24]
 80016b6:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <HAL_MspInit+0x5c>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <HAL_MspInit+0x5c>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001700 <HAL_MspInit+0x5c>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <HAL_MspInit+0x5c>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <HAL_MspInit+0x60>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4a04      	ldr	r2, [pc, #16]	@ (8001704 <HAL_MspInit+0x60>)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f6:	bf00      	nop
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr
 8001700:	40021000 	.word	0x40021000
 8001704:	40010000 	.word	0x40010000

08001708 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08a      	sub	sp, #40	@ 0x28
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001710:	f107 0318 	add.w	r3, r7, #24
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a2b      	ldr	r2, [pc, #172]	@ (80017d0 <HAL_I2C_MspInit+0xc8>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d124      	bne.n	8001772 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001728:	4b2a      	ldr	r3, [pc, #168]	@ (80017d4 <HAL_I2C_MspInit+0xcc>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	4a29      	ldr	r2, [pc, #164]	@ (80017d4 <HAL_I2C_MspInit+0xcc>)
 800172e:	f043 0308 	orr.w	r3, r3, #8
 8001732:	6193      	str	r3, [r2, #24]
 8001734:	4b27      	ldr	r3, [pc, #156]	@ (80017d4 <HAL_I2C_MspInit+0xcc>)
 8001736:	699b      	ldr	r3, [r3, #24]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001740:	23c0      	movs	r3, #192	@ 0xc0
 8001742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001744:	2312      	movs	r3, #18
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001748:	2303      	movs	r3, #3
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f107 0318 	add.w	r3, r7, #24
 8001750:	4619      	mov	r1, r3
 8001752:	4821      	ldr	r0, [pc, #132]	@ (80017d8 <HAL_I2C_MspInit+0xd0>)
 8001754:	f000 fb82 	bl	8001e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001758:	4b1e      	ldr	r3, [pc, #120]	@ (80017d4 <HAL_I2C_MspInit+0xcc>)
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	4a1d      	ldr	r2, [pc, #116]	@ (80017d4 <HAL_I2C_MspInit+0xcc>)
 800175e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001762:	61d3      	str	r3, [r2, #28]
 8001764:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <HAL_I2C_MspInit+0xcc>)
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001770:	e029      	b.n	80017c6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a19      	ldr	r2, [pc, #100]	@ (80017dc <HAL_I2C_MspInit+0xd4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d124      	bne.n	80017c6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	4b15      	ldr	r3, [pc, #84]	@ (80017d4 <HAL_I2C_MspInit+0xcc>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	4a14      	ldr	r2, [pc, #80]	@ (80017d4 <HAL_I2C_MspInit+0xcc>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	6193      	str	r3, [r2, #24]
 8001788:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_I2C_MspInit+0xcc>)
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001794:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800179a:	2312      	movs	r3, #18
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f107 0318 	add.w	r3, r7, #24
 80017a6:	4619      	mov	r1, r3
 80017a8:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <HAL_I2C_MspInit+0xd0>)
 80017aa:	f000 fb57 	bl	8001e5c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <HAL_I2C_MspInit+0xcc>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a08      	ldr	r2, [pc, #32]	@ (80017d4 <HAL_I2C_MspInit+0xcc>)
 80017b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_I2C_MspInit+0xcc>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017c2:	60bb      	str	r3, [r7, #8]
 80017c4:	68bb      	ldr	r3, [r7, #8]
}
 80017c6:	bf00      	nop
 80017c8:	3728      	adds	r7, #40	@ 0x28
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40005400 	.word	0x40005400
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010c00 	.word	0x40010c00
 80017dc:	40005800 	.word	0x40005800

080017e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	@ 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a37      	ldr	r2, [pc, #220]	@ (80018d8 <HAL_SPI_MspInit+0xf8>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d130      	bne.n	8001862 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001800:	4b36      	ldr	r3, [pc, #216]	@ (80018dc <HAL_SPI_MspInit+0xfc>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a35      	ldr	r2, [pc, #212]	@ (80018dc <HAL_SPI_MspInit+0xfc>)
 8001806:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b33      	ldr	r3, [pc, #204]	@ (80018dc <HAL_SPI_MspInit+0xfc>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	4b30      	ldr	r3, [pc, #192]	@ (80018dc <HAL_SPI_MspInit+0xfc>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a2f      	ldr	r2, [pc, #188]	@ (80018dc <HAL_SPI_MspInit+0xfc>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b2d      	ldr	r3, [pc, #180]	@ (80018dc <HAL_SPI_MspInit+0xfc>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001830:	23a0      	movs	r3, #160	@ 0xa0
 8001832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0318 	add.w	r3, r7, #24
 8001840:	4619      	mov	r1, r3
 8001842:	4827      	ldr	r0, [pc, #156]	@ (80018e0 <HAL_SPI_MspInit+0x100>)
 8001844:	f000 fb0a 	bl	8001e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001848:	2340      	movs	r3, #64	@ 0x40
 800184a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0318 	add.w	r3, r7, #24
 8001858:	4619      	mov	r1, r3
 800185a:	4821      	ldr	r0, [pc, #132]	@ (80018e0 <HAL_SPI_MspInit+0x100>)
 800185c:	f000 fafe 	bl	8001e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001860:	e036      	b.n	80018d0 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a1f      	ldr	r2, [pc, #124]	@ (80018e4 <HAL_SPI_MspInit+0x104>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d131      	bne.n	80018d0 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800186c:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <HAL_SPI_MspInit+0xfc>)
 800186e:	69db      	ldr	r3, [r3, #28]
 8001870:	4a1a      	ldr	r2, [pc, #104]	@ (80018dc <HAL_SPI_MspInit+0xfc>)
 8001872:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001876:	61d3      	str	r3, [r2, #28]
 8001878:	4b18      	ldr	r3, [pc, #96]	@ (80018dc <HAL_SPI_MspInit+0xfc>)
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001884:	4b15      	ldr	r3, [pc, #84]	@ (80018dc <HAL_SPI_MspInit+0xfc>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a14      	ldr	r2, [pc, #80]	@ (80018dc <HAL_SPI_MspInit+0xfc>)
 800188a:	f043 0308 	orr.w	r3, r3, #8
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <HAL_SPI_MspInit+0xfc>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800189c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018aa:	f107 0318 	add.w	r3, r7, #24
 80018ae:	4619      	mov	r1, r3
 80018b0:	480d      	ldr	r0, [pc, #52]	@ (80018e8 <HAL_SPI_MspInit+0x108>)
 80018b2:	f000 fad3 	bl	8001e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80018b6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c4:	f107 0318 	add.w	r3, r7, #24
 80018c8:	4619      	mov	r1, r3
 80018ca:	4807      	ldr	r0, [pc, #28]	@ (80018e8 <HAL_SPI_MspInit+0x108>)
 80018cc:	f000 fac6 	bl	8001e5c <HAL_GPIO_Init>
}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	@ 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40013000 	.word	0x40013000
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40010800 	.word	0x40010800
 80018e4:	40003800 	.word	0x40003800
 80018e8:	40010c00 	.word	0x40010c00

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <NMI_Handler+0x4>

080018f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <HardFault_Handler+0x4>

080018fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001900:	bf00      	nop
 8001902:	e7fd      	b.n	8001900 <MemManage_Handler+0x4>

08001904 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <BusFault_Handler+0x4>

0800190c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <UsageFault_Handler+0x4>

08001914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	bc80      	pop	{r7}
 800191e:	4770      	bx	lr

08001920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193c:	f000 f940 	bl	8001bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}

08001944 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001948:	4802      	ldr	r0, [pc, #8]	@ (8001954 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800194a:	f001 fda4 	bl	8003496 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	200011c8 	.word	0x200011c8

08001958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr

08001966 <_kill>:

int _kill(int pid, int sig)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
 800196e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001970:	f009 f93c 	bl	800abec <__errno>
 8001974:	4603      	mov	r3, r0
 8001976:	2216      	movs	r2, #22
 8001978:	601a      	str	r2, [r3, #0]
  return -1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <_exit>:

void _exit (int status)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800198e:	f04f 31ff 	mov.w	r1, #4294967295
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffe7 	bl	8001966 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <_exit+0x12>

0800199c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e00a      	b.n	80019c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ae:	f3af 8000 	nop.w
 80019b2:	4601      	mov	r1, r0
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	60ba      	str	r2, [r7, #8]
 80019ba:	b2ca      	uxtb	r2, r1
 80019bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbf0      	blt.n	80019ae <_read+0x12>
  }

  return len;
 80019cc:	687b      	ldr	r3, [r7, #4]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e009      	b.n	80019fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	60ba      	str	r2, [r7, #8]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3301      	adds	r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbf1      	blt.n	80019e8 <_write+0x12>
  }
  return len;
 8001a04:	687b      	ldr	r3, [r7, #4]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_close>:

int _close(int file)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a34:	605a      	str	r2, [r3, #4]
  return 0;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr

08001a42 <_isatty>:

int _isatty(int file)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr

08001a56 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b085      	sub	sp, #20
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr
	...

08001a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a78:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <_sbrk+0x5c>)
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <_sbrk+0x60>)
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a84:	4b13      	ldr	r3, [pc, #76]	@ (8001ad4 <_sbrk+0x64>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d102      	bne.n	8001a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <_sbrk+0x64>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ad8 <_sbrk+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <_sbrk+0x64>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4413      	add	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d207      	bcs.n	8001ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa0:	f009 f8a4 	bl	800abec <__errno>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	220c      	movs	r2, #12
 8001aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001aae:	e009      	b.n	8001ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <_sbrk+0x64>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab6:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <_sbrk+0x64>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4413      	add	r3, r2
 8001abe:	4a05      	ldr	r2, [pc, #20]	@ (8001ad4 <_sbrk+0x64>)
 8001ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	20005000 	.word	0x20005000
 8001ad0:	00000400 	.word	0x00000400
 8001ad4:	200004e4 	.word	0x200004e4
 8001ad8:	20001810 	.word	0x20001810

08001adc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr

08001ae8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ae8:	f7ff fff8 	bl	8001adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aec:	480b      	ldr	r0, [pc, #44]	@ (8001b1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aee:	490c      	ldr	r1, [pc, #48]	@ (8001b20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001af0:	4a0c      	ldr	r2, [pc, #48]	@ (8001b24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a09      	ldr	r2, [pc, #36]	@ (8001b28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b04:	4c09      	ldr	r4, [pc, #36]	@ (8001b2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b12:	f009 f871 	bl	800abf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b16:	f7ff fb2d 	bl	8001174 <main>
  bx lr
 8001b1a:	4770      	bx	lr
  ldr r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b20:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 8001b24:	0800d1a8 	.word	0x0800d1a8
  ldr r2, =_sbss
 8001b28:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 8001b2c:	2000180c 	.word	0x2000180c

08001b30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC1_2_IRQHandler>
	...

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b38:	4b08      	ldr	r3, [pc, #32]	@ (8001b5c <HAL_Init+0x28>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a07      	ldr	r2, [pc, #28]	@ (8001b5c <HAL_Init+0x28>)
 8001b3e:	f043 0310 	orr.w	r3, r3, #16
 8001b42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b44:	2003      	movs	r0, #3
 8001b46:	f000 f947 	bl	8001dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4a:	200f      	movs	r0, #15
 8001b4c:	f000 f808 	bl	8001b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b50:	f7ff fda8 	bl	80016a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40022000 	.word	0x40022000

08001b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b68:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <HAL_InitTick+0x54>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_InitTick+0x58>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	4619      	mov	r1, r3
 8001b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f95f 	bl	8001e42 <HAL_SYSTICK_Config>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00e      	b.n	8001bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b0f      	cmp	r3, #15
 8001b92:	d80a      	bhi.n	8001baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b94:	2200      	movs	r2, #0
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f000 f927 	bl	8001dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ba0:	4a06      	ldr	r2, [pc, #24]	@ (8001bbc <HAL_InitTick+0x5c>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	e000      	b.n	8001bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	20000004 	.word	0x20000004

08001bc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc4:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <HAL_IncTick+0x1c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <HAL_IncTick+0x20>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a03      	ldr	r2, [pc, #12]	@ (8001be0 <HAL_IncTick+0x20>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr
 8001bdc:	20000008 	.word	0x20000008
 8001be0:	200004e8 	.word	0x200004e8

08001be4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b02      	ldr	r3, [pc, #8]	@ (8001bf4 <HAL_GetTick+0x10>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	200004e8 	.word	0x200004e8

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff fff0 	bl	8001be4 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <HAL_Delay+0x44>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffe0 	bl	8001be4 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000008 	.word	0x20000008

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0c      	ldr	r3, [pc, #48]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c72:	4a04      	ldr	r2, [pc, #16]	@ (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	60d3      	str	r3, [r2, #12]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bc80      	pop	{r7}
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4906      	ldr	r1, [pc, #24]	@ (8001cd8 <__NVIC_EnableIRQ+0x34>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	@ (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	@ (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	@ 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	@ 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001da4:	d301      	bcc.n	8001daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001da6:	2301      	movs	r3, #1
 8001da8:	e00f      	b.n	8001dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001daa:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <SysTick_Config+0x40>)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db2:	210f      	movs	r1, #15
 8001db4:	f04f 30ff 	mov.w	r0, #4294967295
 8001db8:	f7ff ff90 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dbc:	4b05      	ldr	r3, [pc, #20]	@ (8001dd4 <SysTick_Config+0x40>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc2:	4b04      	ldr	r3, [pc, #16]	@ (8001dd4 <SysTick_Config+0x40>)
 8001dc4:	2207      	movs	r2, #7
 8001dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	e000e010 	.word	0xe000e010

08001dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f7ff ff2d 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001de6:	bf00      	nop
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b086      	sub	sp, #24
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	4603      	mov	r3, r0
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	607a      	str	r2, [r7, #4]
 8001dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e00:	f7ff ff42 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	6978      	ldr	r0, [r7, #20]
 8001e0c:	f7ff ff90 	bl	8001d30 <NVIC_EncodePriority>
 8001e10:	4602      	mov	r2, r0
 8001e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e16:	4611      	mov	r1, r2
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff ff5f 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b082      	sub	sp, #8
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff ff35 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f7ff ffa2 	bl	8001d94 <SysTick_Config>
 8001e50:	4603      	mov	r3, r0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b08b      	sub	sp, #44	@ 0x2c
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e66:	2300      	movs	r3, #0
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e6e:	e169      	b.n	8002144 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e70:	2201      	movs	r2, #1
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	f040 8158 	bne.w	800213e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	4a9a      	ldr	r2, [pc, #616]	@ (80020fc <HAL_GPIO_Init+0x2a0>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d05e      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001e98:	4a98      	ldr	r2, [pc, #608]	@ (80020fc <HAL_GPIO_Init+0x2a0>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d875      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001e9e:	4a98      	ldr	r2, [pc, #608]	@ (8002100 <HAL_GPIO_Init+0x2a4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d058      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001ea4:	4a96      	ldr	r2, [pc, #600]	@ (8002100 <HAL_GPIO_Init+0x2a4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d86f      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001eaa:	4a96      	ldr	r2, [pc, #600]	@ (8002104 <HAL_GPIO_Init+0x2a8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d052      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001eb0:	4a94      	ldr	r2, [pc, #592]	@ (8002104 <HAL_GPIO_Init+0x2a8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d869      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001eb6:	4a94      	ldr	r2, [pc, #592]	@ (8002108 <HAL_GPIO_Init+0x2ac>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d04c      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001ebc:	4a92      	ldr	r2, [pc, #584]	@ (8002108 <HAL_GPIO_Init+0x2ac>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d863      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001ec2:	4a92      	ldr	r2, [pc, #584]	@ (800210c <HAL_GPIO_Init+0x2b0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d046      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
 8001ec8:	4a90      	ldr	r2, [pc, #576]	@ (800210c <HAL_GPIO_Init+0x2b0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d85d      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001ece:	2b12      	cmp	r3, #18
 8001ed0:	d82a      	bhi.n	8001f28 <HAL_GPIO_Init+0xcc>
 8001ed2:	2b12      	cmp	r3, #18
 8001ed4:	d859      	bhi.n	8001f8a <HAL_GPIO_Init+0x12e>
 8001ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8001edc <HAL_GPIO_Init+0x80>)
 8001ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001edc:	08001f57 	.word	0x08001f57
 8001ee0:	08001f31 	.word	0x08001f31
 8001ee4:	08001f43 	.word	0x08001f43
 8001ee8:	08001f85 	.word	0x08001f85
 8001eec:	08001f8b 	.word	0x08001f8b
 8001ef0:	08001f8b 	.word	0x08001f8b
 8001ef4:	08001f8b 	.word	0x08001f8b
 8001ef8:	08001f8b 	.word	0x08001f8b
 8001efc:	08001f8b 	.word	0x08001f8b
 8001f00:	08001f8b 	.word	0x08001f8b
 8001f04:	08001f8b 	.word	0x08001f8b
 8001f08:	08001f8b 	.word	0x08001f8b
 8001f0c:	08001f8b 	.word	0x08001f8b
 8001f10:	08001f8b 	.word	0x08001f8b
 8001f14:	08001f8b 	.word	0x08001f8b
 8001f18:	08001f8b 	.word	0x08001f8b
 8001f1c:	08001f8b 	.word	0x08001f8b
 8001f20:	08001f39 	.word	0x08001f39
 8001f24:	08001f4d 	.word	0x08001f4d
 8001f28:	4a79      	ldr	r2, [pc, #484]	@ (8002110 <HAL_GPIO_Init+0x2b4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d013      	beq.n	8001f56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f2e:	e02c      	b.n	8001f8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	623b      	str	r3, [r7, #32]
          break;
 8001f36:	e029      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	623b      	str	r3, [r7, #32]
          break;
 8001f40:	e024      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	3308      	adds	r3, #8
 8001f48:	623b      	str	r3, [r7, #32]
          break;
 8001f4a:	e01f      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	330c      	adds	r3, #12
 8001f52:	623b      	str	r3, [r7, #32]
          break;
 8001f54:	e01a      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d102      	bne.n	8001f64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f5e:	2304      	movs	r3, #4
 8001f60:	623b      	str	r3, [r7, #32]
          break;
 8001f62:	e013      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d105      	bne.n	8001f78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f6c:	2308      	movs	r3, #8
 8001f6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	611a      	str	r2, [r3, #16]
          break;
 8001f76:	e009      	b.n	8001f8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	615a      	str	r2, [r3, #20]
          break;
 8001f82:	e003      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f84:	2300      	movs	r3, #0
 8001f86:	623b      	str	r3, [r7, #32]
          break;
 8001f88:	e000      	b.n	8001f8c <HAL_GPIO_Init+0x130>
          break;
 8001f8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2bff      	cmp	r3, #255	@ 0xff
 8001f90:	d801      	bhi.n	8001f96 <HAL_GPIO_Init+0x13a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	e001      	b.n	8001f9a <HAL_GPIO_Init+0x13e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2bff      	cmp	r3, #255	@ 0xff
 8001fa0:	d802      	bhi.n	8001fa8 <HAL_GPIO_Init+0x14c>
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	e002      	b.n	8001fae <HAL_GPIO_Init+0x152>
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	3b08      	subs	r3, #8
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	210f      	movs	r1, #15
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	401a      	ands	r2, r3
 8001fc0:	6a39      	ldr	r1, [r7, #32]
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 80b1 	beq.w	800213e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fdc:	4b4d      	ldr	r3, [pc, #308]	@ (8002114 <HAL_GPIO_Init+0x2b8>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	4a4c      	ldr	r2, [pc, #304]	@ (8002114 <HAL_GPIO_Init+0x2b8>)
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	6193      	str	r3, [r2, #24]
 8001fe8:	4b4a      	ldr	r3, [pc, #296]	@ (8002114 <HAL_GPIO_Init+0x2b8>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ff4:	4a48      	ldr	r2, [pc, #288]	@ (8002118 <HAL_GPIO_Init+0x2bc>)
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff8:	089b      	lsrs	r3, r3, #2
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002000:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	220f      	movs	r2, #15
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a40      	ldr	r2, [pc, #256]	@ (800211c <HAL_GPIO_Init+0x2c0>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d013      	beq.n	8002048 <HAL_GPIO_Init+0x1ec>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a3f      	ldr	r2, [pc, #252]	@ (8002120 <HAL_GPIO_Init+0x2c4>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d00d      	beq.n	8002044 <HAL_GPIO_Init+0x1e8>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a3e      	ldr	r2, [pc, #248]	@ (8002124 <HAL_GPIO_Init+0x2c8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d007      	beq.n	8002040 <HAL_GPIO_Init+0x1e4>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3d      	ldr	r2, [pc, #244]	@ (8002128 <HAL_GPIO_Init+0x2cc>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d101      	bne.n	800203c <HAL_GPIO_Init+0x1e0>
 8002038:	2303      	movs	r3, #3
 800203a:	e006      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 800203c:	2304      	movs	r3, #4
 800203e:	e004      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 8002040:	2302      	movs	r3, #2
 8002042:	e002      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_GPIO_Init+0x1ee>
 8002048:	2300      	movs	r3, #0
 800204a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800204c:	f002 0203 	and.w	r2, r2, #3
 8002050:	0092      	lsls	r2, r2, #2
 8002052:	4093      	lsls	r3, r2
 8002054:	68fa      	ldr	r2, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800205a:	492f      	ldr	r1, [pc, #188]	@ (8002118 <HAL_GPIO_Init+0x2bc>)
 800205c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3302      	adds	r3, #2
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002074:	4b2d      	ldr	r3, [pc, #180]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	492c      	ldr	r1, [pc, #176]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]
 8002080:	e006      	b.n	8002090 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002082:	4b2a      	ldr	r3, [pc, #168]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	43db      	mvns	r3, r3
 800208a:	4928      	ldr	r1, [pc, #160]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 800208c:	4013      	ands	r3, r2
 800208e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800209c:	4b23      	ldr	r3, [pc, #140]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 800209e:	68da      	ldr	r2, [r3, #12]
 80020a0:	4922      	ldr	r1, [pc, #136]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60cb      	str	r3, [r1, #12]
 80020a8:	e006      	b.n	80020b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020aa:	4b20      	ldr	r3, [pc, #128]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 80020ac:	68da      	ldr	r2, [r3, #12]
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	491e      	ldr	r1, [pc, #120]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 80020b4:	4013      	ands	r3, r2
 80020b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d006      	beq.n	80020d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020c4:	4b19      	ldr	r3, [pc, #100]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4918      	ldr	r1, [pc, #96]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020d2:	4b16      	ldr	r3, [pc, #88]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 80020d4:	685a      	ldr	r2, [r3, #4]
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	43db      	mvns	r3, r3
 80020da:	4914      	ldr	r1, [pc, #80]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 80020dc:	4013      	ands	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d021      	beq.n	8002130 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020ec:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	490e      	ldr	r1, [pc, #56]	@ (800212c <HAL_GPIO_Init+0x2d0>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	600b      	str	r3, [r1, #0]
 80020f8:	e021      	b.n	800213e <HAL_GPIO_Init+0x2e2>
 80020fa:	bf00      	nop
 80020fc:	10320000 	.word	0x10320000
 8002100:	10310000 	.word	0x10310000
 8002104:	10220000 	.word	0x10220000
 8002108:	10210000 	.word	0x10210000
 800210c:	10120000 	.word	0x10120000
 8002110:	10110000 	.word	0x10110000
 8002114:	40021000 	.word	0x40021000
 8002118:	40010000 	.word	0x40010000
 800211c:	40010800 	.word	0x40010800
 8002120:	40010c00 	.word	0x40010c00
 8002124:	40011000 	.word	0x40011000
 8002128:	40011400 	.word	0x40011400
 800212c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002130:	4b0b      	ldr	r3, [pc, #44]	@ (8002160 <HAL_GPIO_Init+0x304>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	43db      	mvns	r3, r3
 8002138:	4909      	ldr	r1, [pc, #36]	@ (8002160 <HAL_GPIO_Init+0x304>)
 800213a:	4013      	ands	r3, r2
 800213c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	3301      	adds	r3, #1
 8002142:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	f47f ae8e 	bne.w	8001e70 <HAL_GPIO_Init+0x14>
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	372c      	adds	r7, #44	@ 0x2c
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	40010400 	.word	0x40010400

08002164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	460b      	mov	r3, r1
 800216e:	807b      	strh	r3, [r7, #2]
 8002170:	4613      	mov	r3, r2
 8002172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002174:	787b      	ldrb	r3, [r7, #1]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d003      	beq.n	8002182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002180:	e003      	b.n	800218a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	041a      	lsls	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr

08002194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e12b      	b.n	80023fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff faa4 	bl	8001708 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2224      	movs	r2, #36	@ 0x24
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0201 	bic.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021f8:	f003 f95e 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 80021fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4a81      	ldr	r2, [pc, #516]	@ (8002408 <HAL_I2C_Init+0x274>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d807      	bhi.n	8002218 <HAL_I2C_Init+0x84>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4a80      	ldr	r2, [pc, #512]	@ (800240c <HAL_I2C_Init+0x278>)
 800220c:	4293      	cmp	r3, r2
 800220e:	bf94      	ite	ls
 8002210:	2301      	movls	r3, #1
 8002212:	2300      	movhi	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	e006      	b.n	8002226 <HAL_I2C_Init+0x92>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	4a7d      	ldr	r2, [pc, #500]	@ (8002410 <HAL_I2C_Init+0x27c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	bf94      	ite	ls
 8002220:	2301      	movls	r3, #1
 8002222:	2300      	movhi	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e0e7      	b.n	80023fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	4a78      	ldr	r2, [pc, #480]	@ (8002414 <HAL_I2C_Init+0x280>)
 8002232:	fba2 2303 	umull	r2, r3, r2, r3
 8002236:	0c9b      	lsrs	r3, r3, #18
 8002238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	430a      	orrs	r2, r1
 800224c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	4a6a      	ldr	r2, [pc, #424]	@ (8002408 <HAL_I2C_Init+0x274>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d802      	bhi.n	8002268 <HAL_I2C_Init+0xd4>
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	3301      	adds	r3, #1
 8002266:	e009      	b.n	800227c <HAL_I2C_Init+0xe8>
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800226e:	fb02 f303 	mul.w	r3, r2, r3
 8002272:	4a69      	ldr	r2, [pc, #420]	@ (8002418 <HAL_I2C_Init+0x284>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	099b      	lsrs	r3, r3, #6
 800227a:	3301      	adds	r3, #1
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	430b      	orrs	r3, r1
 8002282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800228e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	495c      	ldr	r1, [pc, #368]	@ (8002408 <HAL_I2C_Init+0x274>)
 8002298:	428b      	cmp	r3, r1
 800229a:	d819      	bhi.n	80022d0 <HAL_I2C_Init+0x13c>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1e59      	subs	r1, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80022aa:	1c59      	adds	r1, r3, #1
 80022ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80022b0:	400b      	ands	r3, r1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d00a      	beq.n	80022cc <HAL_I2C_Init+0x138>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1e59      	subs	r1, r3, #1
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ca:	e051      	b.n	8002370 <HAL_I2C_Init+0x1dc>
 80022cc:	2304      	movs	r3, #4
 80022ce:	e04f      	b.n	8002370 <HAL_I2C_Init+0x1dc>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d111      	bne.n	80022fc <HAL_I2C_Init+0x168>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	1e58      	subs	r0, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6859      	ldr	r1, [r3, #4]
 80022e0:	460b      	mov	r3, r1
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	440b      	add	r3, r1
 80022e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	e012      	b.n	8002322 <HAL_I2C_Init+0x18e>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e58      	subs	r0, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	0099      	lsls	r1, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002312:	3301      	adds	r3, #1
 8002314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002318:	2b00      	cmp	r3, #0
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_Init+0x196>
 8002326:	2301      	movs	r3, #1
 8002328:	e022      	b.n	8002370 <HAL_I2C_Init+0x1dc>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10e      	bne.n	8002350 <HAL_I2C_Init+0x1bc>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1e58      	subs	r0, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6859      	ldr	r1, [r3, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	440b      	add	r3, r1
 8002340:	fbb0 f3f3 	udiv	r3, r0, r3
 8002344:	3301      	adds	r3, #1
 8002346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800234a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800234e:	e00f      	b.n	8002370 <HAL_I2C_Init+0x1dc>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1e58      	subs	r0, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	0099      	lsls	r1, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	fbb0 f3f3 	udiv	r3, r0, r3
 8002366:	3301      	adds	r3, #1
 8002368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	6809      	ldr	r1, [r1, #0]
 8002374:	4313      	orrs	r3, r2
 8002376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69da      	ldr	r2, [r3, #28]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	430a      	orrs	r2, r1
 8002392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800239e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6911      	ldr	r1, [r2, #16]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68d2      	ldr	r2, [r2, #12]
 80023aa:	4311      	orrs	r1, r2
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6812      	ldr	r2, [r2, #0]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2220      	movs	r2, #32
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3710      	adds	r7, #16
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	000186a0 	.word	0x000186a0
 800240c:	001e847f 	.word	0x001e847f
 8002410:	003d08ff 	.word	0x003d08ff
 8002414:	431bde83 	.word	0x431bde83
 8002418:	10624dd3 	.word	0x10624dd3

0800241c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af02      	add	r7, sp, #8
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	4608      	mov	r0, r1
 8002426:	4611      	mov	r1, r2
 8002428:	461a      	mov	r2, r3
 800242a:	4603      	mov	r3, r0
 800242c:	817b      	strh	r3, [r7, #10]
 800242e:	460b      	mov	r3, r1
 8002430:	813b      	strh	r3, [r7, #8]
 8002432:	4613      	mov	r3, r2
 8002434:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002436:	f7ff fbd5 	bl	8001be4 <HAL_GetTick>
 800243a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b20      	cmp	r3, #32
 8002446:	f040 80d9 	bne.w	80025fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	2319      	movs	r3, #25
 8002450:	2201      	movs	r2, #1
 8002452:	496d      	ldr	r1, [pc, #436]	@ (8002608 <HAL_I2C_Mem_Write+0x1ec>)
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 fccd 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002460:	2302      	movs	r3, #2
 8002462:	e0cc      	b.n	80025fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_I2C_Mem_Write+0x56>
 800246e:	2302      	movs	r3, #2
 8002470:	e0c5      	b.n	80025fe <HAL_I2C_Mem_Write+0x1e2>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d007      	beq.n	8002498 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2221      	movs	r2, #33	@ 0x21
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2240      	movs	r2, #64	@ 0x40
 80024b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a3a      	ldr	r2, [r7, #32]
 80024c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80024c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4a4d      	ldr	r2, [pc, #308]	@ (800260c <HAL_I2C_Mem_Write+0x1f0>)
 80024d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024da:	88f8      	ldrh	r0, [r7, #6]
 80024dc:	893a      	ldrh	r2, [r7, #8]
 80024de:	8979      	ldrh	r1, [r7, #10]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	4603      	mov	r3, r0
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fb04 	bl	8002af8 <I2C_RequestMemoryWrite>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d052      	beq.n	800259c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e081      	b.n	80025fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 fd92 	bl	8003028 <I2C_WaitOnTXEFlagUntilTimeout>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00d      	beq.n	8002526 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	2b04      	cmp	r3, #4
 8002510:	d107      	bne.n	8002522 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002520:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e06b      	b.n	80025fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252a:	781a      	ldrb	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b04      	cmp	r3, #4
 8002562:	d11b      	bne.n	800259c <HAL_I2C_Mem_Write+0x180>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002568:	2b00      	cmp	r3, #0
 800256a:	d017      	beq.n	800259c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	1c5a      	adds	r2, r3, #1
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002586:	3b01      	subs	r3, #1
 8002588:	b29a      	uxth	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1aa      	bne.n	80024fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025a4:	697a      	ldr	r2, [r7, #20]
 80025a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 fd85 	bl	80030b8 <I2C_WaitOnBTFFlagUntilTimeout>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00d      	beq.n	80025d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d107      	bne.n	80025cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e016      	b.n	80025fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2220      	movs	r2, #32
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
  }
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3718      	adds	r7, #24
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	00100002 	.word	0x00100002
 800260c:	ffff0000 	.word	0xffff0000

08002610 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b08c      	sub	sp, #48	@ 0x30
 8002614:	af02      	add	r7, sp, #8
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	4608      	mov	r0, r1
 800261a:	4611      	mov	r1, r2
 800261c:	461a      	mov	r2, r3
 800261e:	4603      	mov	r3, r0
 8002620:	817b      	strh	r3, [r7, #10]
 8002622:	460b      	mov	r3, r1
 8002624:	813b      	strh	r3, [r7, #8]
 8002626:	4613      	mov	r3, r2
 8002628:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800262e:	f7ff fad9 	bl	8001be4 <HAL_GetTick>
 8002632:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b20      	cmp	r3, #32
 800263e:	f040 8250 	bne.w	8002ae2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	2319      	movs	r3, #25
 8002648:	2201      	movs	r2, #1
 800264a:	4982      	ldr	r1, [pc, #520]	@ (8002854 <HAL_I2C_Mem_Read+0x244>)
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 fbd1 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002658:	2302      	movs	r3, #2
 800265a:	e243      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002662:	2b01      	cmp	r3, #1
 8002664:	d101      	bne.n	800266a <HAL_I2C_Mem_Read+0x5a>
 8002666:	2302      	movs	r3, #2
 8002668:	e23c      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4d4>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b01      	cmp	r3, #1
 800267e:	d007      	beq.n	8002690 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800269e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2222      	movs	r2, #34	@ 0x22
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2240      	movs	r2, #64	@ 0x40
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80026c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4a62      	ldr	r2, [pc, #392]	@ (8002858 <HAL_I2C_Mem_Read+0x248>)
 80026d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026d2:	88f8      	ldrh	r0, [r7, #6]
 80026d4:	893a      	ldrh	r2, [r7, #8]
 80026d6:	8979      	ldrh	r1, [r7, #10]
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	4603      	mov	r3, r0
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 fa9e 	bl	8002c24 <I2C_RequestMemoryRead>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e1f8      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d113      	bne.n	8002722 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026fa:	2300      	movs	r3, #0
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	e1cc      	b.n	8002abc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002726:	2b01      	cmp	r3, #1
 8002728:	d11e      	bne.n	8002768 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002738:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800273a:	b672      	cpsid	i
}
 800273c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	61bb      	str	r3, [r7, #24]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	61bb      	str	r3, [r7, #24]
 8002752:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002762:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002764:	b662      	cpsie	i
}
 8002766:	e035      	b.n	80027d4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276c:	2b02      	cmp	r3, #2
 800276e:	d11e      	bne.n	80027ae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800277e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002780:	b672      	cpsid	i
}
 8002782:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002784:	2300      	movs	r3, #0
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027aa:	b662      	cpsie	i
}
 80027ac:	e012      	b.n	80027d4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80027bc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80027d4:	e172      	b.n	8002abc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027da:	2b03      	cmp	r3, #3
 80027dc:	f200 811f 	bhi.w	8002a1e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d123      	bne.n	8002830 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fcab 	bl	8003148 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e173      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	691a      	ldr	r2, [r3, #16]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002818:	3b01      	subs	r3, #1
 800281a:	b29a      	uxth	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	3b01      	subs	r3, #1
 8002828:	b29a      	uxth	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800282e:	e145      	b.n	8002abc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002834:	2b02      	cmp	r3, #2
 8002836:	d152      	bne.n	80028de <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800283e:	2200      	movs	r2, #0
 8002840:	4906      	ldr	r1, [pc, #24]	@ (800285c <HAL_I2C_Mem_Read+0x24c>)
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fad6 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e148      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4d4>
 8002852:	bf00      	nop
 8002854:	00100002 	.word	0x00100002
 8002858:	ffff0000 	.word	0xffff0000
 800285c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002860:	b672      	cpsid	i
}
 8002862:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80028a6:	b662      	cpsie	i
}
 80028a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	1c5a      	adds	r2, r3, #1
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028dc:	e0ee      	b.n	8002abc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	9300      	str	r3, [sp, #0]
 80028e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e4:	2200      	movs	r2, #0
 80028e6:	4981      	ldr	r1, [pc, #516]	@ (8002aec <HAL_I2C_Mem_Read+0x4dc>)
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 fa83 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0f5      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002906:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002908:	b672      	cpsid	i
}
 800290a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691a      	ldr	r2, [r3, #16]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	b2d2      	uxtb	r2, r2
 8002918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	1c5a      	adds	r2, r3, #1
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800293e:	4b6c      	ldr	r3, [pc, #432]	@ (8002af0 <HAL_I2C_Mem_Read+0x4e0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	08db      	lsrs	r3, r3, #3
 8002944:	4a6b      	ldr	r2, [pc, #428]	@ (8002af4 <HAL_I2C_Mem_Read+0x4e4>)
 8002946:	fba2 2303 	umull	r2, r3, r2, r3
 800294a:	0a1a      	lsrs	r2, r3, #8
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	00da      	lsls	r2, r3, #3
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	3b01      	subs	r3, #1
 800295c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d118      	bne.n	8002996 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	f043 0220 	orr.w	r2, r3, #32
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002986:	b662      	cpsie	i
}
 8002988:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e0a6      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d1d9      	bne.n	8002958 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80029e6:	b662      	cpsie	i
}
 80029e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	691a      	ldr	r2, [r3, #16]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a1c:	e04e      	b.n	8002abc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a20:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fb90 	bl	8003148 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e058      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691a      	ldr	r2, [r3, #16]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d124      	bne.n	8002abc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d107      	bne.n	8002a8a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a88:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f47f ae88 	bne.w	80027d6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e000      	b.n	8002ae4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002ae2:	2302      	movs	r3, #2
  }
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3728      	adds	r7, #40	@ 0x28
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	00010004 	.word	0x00010004
 8002af0:	20000000 	.word	0x20000000
 8002af4:	14f8b589 	.word	0x14f8b589

08002af8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b088      	sub	sp, #32
 8002afc:	af02      	add	r7, sp, #8
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	4608      	mov	r0, r1
 8002b02:	4611      	mov	r1, r2
 8002b04:	461a      	mov	r2, r3
 8002b06:	4603      	mov	r3, r0
 8002b08:	817b      	strh	r3, [r7, #10]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	813b      	strh	r3, [r7, #8]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 f960 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d00d      	beq.n	8002b56 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b48:	d103      	bne.n	8002b52 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e05f      	b.n	8002c16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b56:	897b      	ldrh	r3, [r7, #10]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b68:	6a3a      	ldr	r2, [r7, #32]
 8002b6a:	492d      	ldr	r1, [pc, #180]	@ (8002c20 <I2C_RequestMemoryWrite+0x128>)
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f9bb 	bl	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e04c      	b.n	8002c16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	617b      	str	r3, [r7, #20]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	617b      	str	r3, [r7, #20]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	617b      	str	r3, [r7, #20]
 8002b90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b94:	6a39      	ldr	r1, [r7, #32]
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fa46 	bl	8003028 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d107      	bne.n	8002bba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bb8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e02b      	b.n	8002c16 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bc4:	893b      	ldrh	r3, [r7, #8]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	611a      	str	r2, [r3, #16]
 8002bce:	e021      	b.n	8002c14 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002bd0:	893b      	ldrh	r3, [r7, #8]
 8002bd2:	0a1b      	lsrs	r3, r3, #8
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be0:	6a39      	ldr	r1, [r7, #32]
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 fa20 	bl	8003028 <I2C_WaitOnTXEFlagUntilTimeout>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00d      	beq.n	8002c0a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d107      	bne.n	8002c06 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e005      	b.n	8002c16 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c0a:	893b      	ldrh	r3, [r7, #8]
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	00010002 	.word	0x00010002

08002c24 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	817b      	strh	r3, [r7, #10]
 8002c36:	460b      	mov	r3, r1
 8002c38:	813b      	strh	r3, [r7, #8]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 f8c2 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00d      	beq.n	8002c92 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c84:	d103      	bne.n	8002c8e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e0aa      	b.n	8002de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c92:	897b      	ldrh	r3, [r7, #10]
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ca0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	6a3a      	ldr	r2, [r7, #32]
 8002ca6:	4952      	ldr	r1, [pc, #328]	@ (8002df0 <I2C_RequestMemoryRead+0x1cc>)
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f91d 	bl	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e097      	b.n	8002de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	617b      	str	r3, [r7, #20]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	617b      	str	r3, [r7, #20]
 8002ccc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cd0:	6a39      	ldr	r1, [r7, #32]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f9a8 	bl	8003028 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d107      	bne.n	8002cf6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e076      	b.n	8002de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d00:	893b      	ldrh	r3, [r7, #8]
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	611a      	str	r2, [r3, #16]
 8002d0a:	e021      	b.n	8002d50 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d0c:	893b      	ldrh	r3, [r7, #8]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d1c:	6a39      	ldr	r1, [r7, #32]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 f982 	bl	8003028 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d107      	bne.n	8002d42 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e050      	b.n	8002de8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d46:	893b      	ldrh	r3, [r7, #8]
 8002d48:	b2da      	uxtb	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d52:	6a39      	ldr	r1, [r7, #32]
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f967 	bl	8003028 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00d      	beq.n	8002d7c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d107      	bne.n	8002d78 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d76:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e035      	b.n	8002de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d8a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f82b 	bl	8002df4 <I2C_WaitOnFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00d      	beq.n	8002dc0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002db2:	d103      	bne.n	8002dbc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002dba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e013      	b.n	8002de8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002dc0:	897b      	ldrh	r3, [r7, #10]
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd2:	6a3a      	ldr	r2, [r7, #32]
 8002dd4:	4906      	ldr	r1, [pc, #24]	@ (8002df0 <I2C_RequestMemoryRead+0x1cc>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f886 	bl	8002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	00010002 	.word	0x00010002

08002df4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e04:	e048      	b.n	8002e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e0c:	d044      	beq.n	8002e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0e:	f7fe fee9 	bl	8001be4 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d302      	bcc.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d139      	bne.n	8002e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	0c1b      	lsrs	r3, r3, #16
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d10d      	bne.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	43da      	mvns	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	bf0c      	ite	eq
 8002e40:	2301      	moveq	r3, #1
 8002e42:	2300      	movne	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	461a      	mov	r2, r3
 8002e48:	e00c      	b.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	43da      	mvns	r2, r3
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4013      	ands	r3, r2
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d116      	bne.n	8002e98 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2220      	movs	r2, #32
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	f043 0220 	orr.w	r2, r3, #32
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e023      	b.n	8002ee0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	0c1b      	lsrs	r3, r3, #16
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d10d      	bne.n	8002ebe <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	43da      	mvns	r2, r3
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	4013      	ands	r3, r2
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf0c      	ite	eq
 8002eb4:	2301      	moveq	r3, #1
 8002eb6:	2300      	movne	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	461a      	mov	r2, r3
 8002ebc:	e00c      	b.n	8002ed8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	43da      	mvns	r2, r3
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf0c      	ite	eq
 8002ed0:	2301      	moveq	r3, #1
 8002ed2:	2300      	movne	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	79fb      	ldrb	r3, [r7, #7]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d093      	beq.n	8002e06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ef6:	e071      	b.n	8002fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f06:	d123      	bne.n	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f16:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3c:	f043 0204 	orr.w	r2, r3, #4
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e067      	b.n	8003020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f56:	d041      	beq.n	8002fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f58:	f7fe fe44 	bl	8001be4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d302      	bcc.n	8002f6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d136      	bne.n	8002fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d10c      	bne.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	43da      	mvns	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	4013      	ands	r3, r2
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bf14      	ite	ne
 8002f8a:	2301      	movne	r3, #1
 8002f8c:	2300      	moveq	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	e00b      	b.n	8002faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	43da      	mvns	r2, r3
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf14      	ite	ne
 8002fa4:	2301      	movne	r3, #1
 8002fa6:	2300      	moveq	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d016      	beq.n	8002fdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	f043 0220 	orr.w	r2, r3, #32
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e021      	b.n	8003020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d10c      	bne.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	43da      	mvns	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf14      	ite	ne
 8002ff8:	2301      	movne	r3, #1
 8002ffa:	2300      	moveq	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e00b      	b.n	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	43da      	mvns	r2, r3
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4013      	ands	r3, r2
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	bf14      	ite	ne
 8003012:	2301      	movne	r3, #1
 8003014:	2300      	moveq	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	f47f af6d 	bne.w	8002ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003034:	e034      	b.n	80030a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f8e3 	bl	8003202 <I2C_IsAcknowledgeFailed>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e034      	b.n	80030b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d028      	beq.n	80030a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800304e:	f7fe fdc9 	bl	8001be4 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	429a      	cmp	r2, r3
 800305c:	d302      	bcc.n	8003064 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d11d      	bne.n	80030a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306e:	2b80      	cmp	r3, #128	@ 0x80
 8003070:	d016      	beq.n	80030a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308c:	f043 0220 	orr.w	r2, r3, #32
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e007      	b.n	80030b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030aa:	2b80      	cmp	r3, #128	@ 0x80
 80030ac:	d1c3      	bne.n	8003036 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030c4:	e034      	b.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f89b 	bl	8003202 <I2C_IsAcknowledgeFailed>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d001      	beq.n	80030d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e034      	b.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d028      	beq.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7fe fd81 	bl	8001be4 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d11d      	bne.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b04      	cmp	r3, #4
 8003100:	d016      	beq.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e007      	b.n	8003140 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f003 0304 	and.w	r3, r3, #4
 800313a:	2b04      	cmp	r3, #4
 800313c:	d1c3      	bne.n	80030c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003154:	e049      	b.n	80031ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0310 	and.w	r3, r3, #16
 8003160:	2b10      	cmp	r3, #16
 8003162:	d119      	bne.n	8003198 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0210 	mvn.w	r2, #16
 800316c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e030      	b.n	80031fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003198:	f7fe fd24 	bl	8001be4 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	68ba      	ldr	r2, [r7, #8]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d302      	bcc.n	80031ae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d11d      	bne.n	80031ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031b8:	2b40      	cmp	r3, #64	@ 0x40
 80031ba:	d016      	beq.n	80031ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	f043 0220 	orr.w	r2, r3, #32
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e007      	b.n	80031fa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f4:	2b40      	cmp	r3, #64	@ 0x40
 80031f6:	d1ae      	bne.n	8003156 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}

08003202 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003214:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003218:	d11b      	bne.n	8003252 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003222:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	f043 0204 	orr.w	r2, r3, #4
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr

0800325e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b084      	sub	sp, #16
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0e8      	b.n	8003442 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f006 fc33 	bl	8009af0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2203      	movs	r2, #3
 800328e:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f002 fa9a 	bl	80057d6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3304      	adds	r3, #4
 80032aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ac:	f002 fa70 	bl	8005790 <USB_CoreInit>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d005      	beq.n	80032c2 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2202      	movs	r2, #2
 80032ba:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e0bf      	b.n	8003442 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f002 fa9e 	bl	800580a <USB_SetCurrentMode>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0b0      	b.n	8003442 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032e0:	2300      	movs	r3, #0
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e03e      	b.n	8003364 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032e6:	7bfa      	ldrb	r2, [r7, #15]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	4413      	add	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	440b      	add	r3, r1
 80032f4:	3311      	adds	r3, #17
 80032f6:	2201      	movs	r2, #1
 80032f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032fa:	7bfa      	ldrb	r2, [r7, #15]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	440b      	add	r3, r1
 8003308:	3310      	adds	r3, #16
 800330a:	7bfa      	ldrb	r2, [r7, #15]
 800330c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800330e:	7bfa      	ldrb	r2, [r7, #15]
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	4613      	mov	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	440b      	add	r3, r1
 800331c:	3313      	adds	r3, #19
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003322:	7bfa      	ldrb	r2, [r7, #15]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	440b      	add	r3, r1
 8003330:	3320      	adds	r3, #32
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003336:	7bfa      	ldrb	r2, [r7, #15]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	440b      	add	r3, r1
 8003344:	3324      	adds	r3, #36	@ 0x24
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800334a:	7bfb      	ldrb	r3, [r7, #15]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	4613      	mov	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	00db      	lsls	r3, r3, #3
 8003358:	440b      	add	r3, r1
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	3301      	adds	r3, #1
 8003362:	73fb      	strb	r3, [r7, #15]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	791b      	ldrb	r3, [r3, #4]
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	429a      	cmp	r2, r3
 800336c:	d3bb      	bcc.n	80032e6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800336e:	2300      	movs	r3, #0
 8003370:	73fb      	strb	r3, [r7, #15]
 8003372:	e044      	b.n	80033fe <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003374:	7bfa      	ldrb	r2, [r7, #15]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	440b      	add	r3, r1
 8003382:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8003386:	2200      	movs	r2, #0
 8003388:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800338a:	7bfa      	ldrb	r2, [r7, #15]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	4413      	add	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	440b      	add	r3, r1
 8003398:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800339c:	7bfa      	ldrb	r2, [r7, #15]
 800339e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033a0:	7bfa      	ldrb	r2, [r7, #15]
 80033a2:	6879      	ldr	r1, [r7, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	440b      	add	r3, r1
 80033ae:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	440b      	add	r3, r1
 80033c4:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033cc:	7bfa      	ldrb	r2, [r7, #15]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	440b      	add	r3, r1
 80033da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	6879      	ldr	r1, [r7, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	440b      	add	r3, r1
 80033f0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f8:	7bfb      	ldrb	r3, [r7, #15]
 80033fa:	3301      	adds	r3, #1
 80033fc:	73fb      	strb	r3, [r7, #15]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	791b      	ldrb	r3, [r3, #4]
 8003402:	7bfa      	ldrb	r2, [r7, #15]
 8003404:	429a      	cmp	r2, r3
 8003406:	d3b5      	bcc.n	8003374 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	3304      	adds	r3, #4
 8003410:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003412:	f002 fa06 	bl	8005822 <USB_DevInit>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2202      	movs	r2, #2
 8003420:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e00c      	b.n	8003442 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f004 fc85 	bl	8007d4a <USB_DevDisconnect>

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_PCD_Start+0x16>
 800345c:	2302      	movs	r3, #2
 800345e:	e016      	b.n	800348e <HAL_PCD_Start+0x44>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f002 f99c 	bl	80057aa <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003472:	2101      	movs	r1, #1
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f006 fdae 	bl	8009fd6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f004 fc59 	bl	8007d36 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b088      	sub	sp, #32
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f004 fc5b 	bl	8007d5e <USB_ReadInterrupts>
 80034a8:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fb1a 	bl	8003aee <PCD_EP_ISR_Handler>

    return;
 80034ba:	e119      	b.n	80036f0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d013      	beq.n	80034ee <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034d8:	b292      	uxth	r2, r2
 80034da:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f006 fb81 	bl	8009be6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80034e4:	2100      	movs	r1, #0
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f905 	bl	80036f6 <HAL_PCD_SetAddress>

    return;
 80034ec:	e100      	b.n	80036f0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00c      	beq.n	8003512 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003500:	b29a      	uxth	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800350a:	b292      	uxth	r2, r2
 800350c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003510:	e0ee      	b.n	80036f0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00c      	beq.n	8003536 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003524:	b29a      	uxth	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800352e:	b292      	uxth	r2, r2
 8003530:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003534:	e0dc      	b.n	80036f0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d027      	beq.n	8003590 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003548:	b29a      	uxth	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0204 	bic.w	r2, r2, #4
 8003552:	b292      	uxth	r2, r2
 8003554:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003560:	b29a      	uxth	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 0208 	bic.w	r2, r2, #8
 800356a:	b292      	uxth	r2, r2
 800356c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f006 fb71 	bl	8009c58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800357e:	b29a      	uxth	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003588:	b292      	uxth	r2, r2
 800358a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800358e:	e0af      	b.n	80036f0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8083 	beq.w	80036a2 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 800359c:	2300      	movs	r3, #0
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e010      	b.n	80035c4 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	7ffb      	ldrb	r3, [r7, #31]
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	441a      	add	r2, r3
 80035ae:	7ffb      	ldrb	r3, [r7, #31]
 80035b0:	8812      	ldrh	r2, [r2, #0]
 80035b2:	b292      	uxth	r2, r2
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	3320      	adds	r3, #32
 80035b8:	443b      	add	r3, r7
 80035ba:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80035be:	7ffb      	ldrb	r3, [r7, #31]
 80035c0:	3301      	adds	r3, #1
 80035c2:	77fb      	strb	r3, [r7, #31]
 80035c4:	7ffb      	ldrb	r3, [r7, #31]
 80035c6:	2b07      	cmp	r3, #7
 80035c8:	d9eb      	bls.n	80035a2 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0201 	orr.w	r2, r2, #1
 80035dc:	b292      	uxth	r2, r2
 80035de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	b292      	uxth	r2, r2
 80035f6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80035fa:	bf00      	nop
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003604:	b29b      	uxth	r3, r3
 8003606:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f6      	beq.n	80035fc <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003616:	b29a      	uxth	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003620:	b292      	uxth	r2, r2
 8003622:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003626:	2300      	movs	r3, #0
 8003628:	77fb      	strb	r3, [r7, #31]
 800362a:	e00f      	b.n	800364c <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800362c:	7ffb      	ldrb	r3, [r7, #31]
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	6812      	ldr	r2, [r2, #0]
 8003632:	4611      	mov	r1, r2
 8003634:	7ffa      	ldrb	r2, [r7, #31]
 8003636:	0092      	lsls	r2, r2, #2
 8003638:	440a      	add	r2, r1
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	3320      	adds	r3, #32
 800363e:	443b      	add	r3, r7
 8003640:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003644:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003646:	7ffb      	ldrb	r3, [r7, #31]
 8003648:	3301      	adds	r3, #1
 800364a:	77fb      	strb	r3, [r7, #31]
 800364c:	7ffb      	ldrb	r3, [r7, #31]
 800364e:	2b07      	cmp	r3, #7
 8003650:	d9ec      	bls.n	800362c <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800365a:	b29a      	uxth	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0208 	orr.w	r2, r2, #8
 8003664:	b292      	uxth	r2, r2
 8003666:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003672:	b29a      	uxth	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800367c:	b292      	uxth	r2, r2
 800367e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800368a:	b29a      	uxth	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0204 	orr.w	r2, r2, #4
 8003694:	b292      	uxth	r2, r2
 8003696:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f006 fac2 	bl	8009c24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80036a0:	e026      	b.n	80036f0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00f      	beq.n	80036cc <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036be:	b292      	uxth	r2, r2
 80036c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f006 fa80 	bl	8009bca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80036ca:	e011      	b.n	80036f0 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00c      	beq.n	80036f0 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036de:	b29a      	uxth	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036e8:	b292      	uxth	r2, r2
 80036ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80036ee:	bf00      	nop
  }
}
 80036f0:	3720      	adds	r7, #32
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	460b      	mov	r3, r1
 8003700:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_PCD_SetAddress+0x1a>
 800370c:	2302      	movs	r3, #2
 800370e:	e012      	b.n	8003736 <HAL_PCD_SetAddress+0x40>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	78fa      	ldrb	r2, [r7, #3]
 800371c:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	78fa      	ldrb	r2, [r7, #3]
 8003724:	4611      	mov	r1, r2
 8003726:	4618      	mov	r0, r3
 8003728:	f004 faf2 	bl	8007d10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	4608      	mov	r0, r1
 8003748:	4611      	mov	r1, r2
 800374a:	461a      	mov	r2, r3
 800374c:	4603      	mov	r3, r0
 800374e:	70fb      	strb	r3, [r7, #3]
 8003750:	460b      	mov	r3, r1
 8003752:	803b      	strh	r3, [r7, #0]
 8003754:	4613      	mov	r3, r2
 8003756:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800375c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003760:	2b00      	cmp	r3, #0
 8003762:	da0e      	bge.n	8003782 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	f003 0207 	and.w	r2, r3, #7
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	00db      	lsls	r3, r3, #3
 8003772:	3310      	adds	r3, #16
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	705a      	strb	r2, [r3, #1]
 8003780:	e00e      	b.n	80037a0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	f003 0207 	and.w	r2, r3, #7
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	4413      	add	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037a0:	78fb      	ldrb	r3, [r7, #3]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80037ac:	883a      	ldrh	r2, [r7, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	78ba      	ldrb	r2, [r7, #2]
 80037b6:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037b8:	78bb      	ldrb	r3, [r7, #2]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d102      	bne.n	80037c4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_PCD_EP_Open+0x94>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e00e      	b.n	80037f0 <HAL_PCD_EP_Open+0xb2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68f9      	ldr	r1, [r7, #12]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f002 f83b 	bl	800585c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80037ee:	7afb      	ldrb	r3, [r7, #11]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003808:	2b00      	cmp	r3, #0
 800380a:	da0e      	bge.n	800382a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	f003 0207 	and.w	r2, r3, #7
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	3310      	adds	r3, #16
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	4413      	add	r3, r2
 8003820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2201      	movs	r2, #1
 8003826:	705a      	strb	r2, [r3, #1]
 8003828:	e00e      	b.n	8003848 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	f003 0207 	and.w	r2, r3, #7
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	4413      	add	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_PCD_EP_Close+0x6a>
 800385e:	2302      	movs	r3, #2
 8003860:	e00e      	b.n	8003880 <HAL_PCD_EP_Close+0x88>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68f9      	ldr	r1, [r7, #12]
 8003870:	4618      	mov	r0, r3
 8003872:	f002 fbb3 	bl	8005fdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	60f8      	str	r0, [r7, #12]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	603b      	str	r3, [r7, #0]
 8003894:	460b      	mov	r3, r1
 8003896:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003898:	7afb      	ldrb	r3, [r7, #11]
 800389a:	f003 0207 	and.w	r2, r3, #7
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4413      	add	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2200      	movs	r2, #0
 80038c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2200      	movs	r2, #0
 80038c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038c8:	7afb      	ldrb	r3, [r7, #11]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6979      	ldr	r1, [r7, #20]
 80038da:	4618      	mov	r0, r3
 80038dc:	f002 fd6a 	bl	80063b4 <USB_EPStartXfer>

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	f003 0207 	and.w	r2, r3, #7
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	4613      	mov	r3, r2
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	4413      	add	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	440b      	add	r3, r1
 8003908:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800390c:	681b      	ldr	r3, [r3, #0]
}
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	bc80      	pop	{r7}
 8003916:	4770      	bx	lr

08003918 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	607a      	str	r2, [r7, #4]
 8003922:	603b      	str	r3, [r7, #0]
 8003924:	460b      	mov	r3, r1
 8003926:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003928:	7afb      	ldrb	r3, [r7, #11]
 800392a:	f003 0207 	and.w	r2, r3, #7
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	3310      	adds	r3, #16
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4413      	add	r3, r2
 800393c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2201      	movs	r2, #1
 800394e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	683a      	ldr	r2, [r7, #0]
 8003956:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	2200      	movs	r2, #0
 800395c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	2201      	movs	r2, #1
 8003962:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003964:	7afb      	ldrb	r3, [r7, #11]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	b2da      	uxtb	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6979      	ldr	r1, [r7, #20]
 8003976:	4618      	mov	r0, r3
 8003978:	f002 fd1c 	bl	80063b4 <USB_EPStartXfer>

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3718      	adds	r7, #24
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b084      	sub	sp, #16
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
 800398e:	460b      	mov	r3, r1
 8003990:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003992:	78fb      	ldrb	r3, [r7, #3]
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	7912      	ldrb	r2, [r2, #4]
 800399c:	4293      	cmp	r3, r2
 800399e:	d901      	bls.n	80039a4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e04c      	b.n	8003a3e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	da0e      	bge.n	80039ca <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	f003 0207 	and.w	r2, r3, #7
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	3310      	adds	r3, #16
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	4413      	add	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	705a      	strb	r2, [r3, #1]
 80039c8:	e00c      	b.n	80039e4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	4413      	add	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2201      	movs	r2, #1
 80039e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_PCD_EP_SetStall+0x7e>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e01c      	b.n	8003a3e <HAL_PCD_EP_SetStall+0xb8>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68f9      	ldr	r1, [r7, #12]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f004 f87f 	bl	8007b16 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a18:	78fb      	ldrb	r3, [r7, #3]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d108      	bne.n	8003a34 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	4610      	mov	r0, r2
 8003a30:	f004 f9a4 	bl	8007d7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3710      	adds	r7, #16
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	7912      	ldrb	r2, [r2, #4]
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d901      	bls.n	8003a64 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e040      	b.n	8003ae6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	da0e      	bge.n	8003a8a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a6c:	78fb      	ldrb	r3, [r7, #3]
 8003a6e:	f003 0207 	and.w	r2, r3, #7
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	00db      	lsls	r3, r3, #3
 8003a7a:	3310      	adds	r3, #16
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	4413      	add	r3, r2
 8003a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	705a      	strb	r2, [r3, #1]
 8003a88:	e00e      	b.n	8003aa8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	f003 0207 	and.w	r2, r3, #7
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	00db      	lsls	r3, r3, #3
 8003a98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d101      	bne.n	8003ac8 <HAL_PCD_EP_ClrStall+0x82>
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	e00e      	b.n	8003ae6 <HAL_PCD_EP_ClrStall+0xa0>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68f9      	ldr	r1, [r7, #12]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f004 f86d 	bl	8007bb6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b096      	sub	sp, #88	@ 0x58
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003af6:	e3bb      	b.n	8004270 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b00:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003b12:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f040 8175 	bne.w	8003e06 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b1c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d14e      	bne.n	8003bc6 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b38:	81fb      	strh	r3, [r7, #14]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	89fb      	ldrh	r3, [r7, #14]
 8003b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3310      	adds	r3, #16
 8003b50:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	4413      	add	r3, r2
 8003b66:	3302      	adds	r3, #2
 8003b68:	005b      	lsls	r3, r3, #1
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b80:	695a      	ldr	r2, [r3, #20]
 8003b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b84:	69db      	ldr	r3, [r3, #28]
 8003b86:	441a      	add	r2, r3
 8003b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b8a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f006 f801 	bl	8009b96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	7b5b      	ldrb	r3, [r3, #13]
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 8368 	beq.w	8004270 <PCD_EP_ISR_Handler+0x782>
 8003ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f040 8363 	bne.w	8004270 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	7b5b      	ldrb	r3, [r3, #13]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	735a      	strb	r2, [r3, #13]
 8003bc4:	e354      	b.n	8004270 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bcc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003bd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003bdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d034      	beq.n	8003c4e <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	461a      	mov	r2, r3
 8003bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	3306      	adds	r3, #6
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	6812      	ldr	r2, [r2, #0]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c0e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6818      	ldr	r0, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c1c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c20:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	f004 f8fa 	bl	8007e1c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	881b      	ldrh	r3, [r3, #0]
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003c34:	4013      	ands	r3, r2
 8003c36:	823b      	strh	r3, [r7, #16]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	8a3a      	ldrh	r2, [r7, #16]
 8003c3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c42:	b292      	uxth	r2, r2
 8003c44:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f005 ff78 	bl	8009b3c <HAL_PCD_SetupStageCallback>
 8003c4c:	e310      	b.n	8004270 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c4e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f280 830c 	bge.w	8004270 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003c64:	4013      	ands	r3, r2
 8003c66:	83fb      	strh	r3, [r7, #30]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	8bfa      	ldrh	r2, [r7, #30]
 8003c6e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c72:	b292      	uxth	r2, r2
 8003c74:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	3306      	adds	r3, #6
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d019      	beq.n	8003cde <PCD_EP_ISR_Handler+0x1f0>
 8003caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d015      	beq.n	8003cde <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb8:	6959      	ldr	r1, [r3, #20]
 8003cba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cbc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f004 f8aa 	bl	8007e1c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cca:	695a      	ldr	r2, [r3, #20]
 8003ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	441a      	add	r2, r3
 8003cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f005 ff41 	bl	8009b60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003ce8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003cec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f040 82bd 	bne.w	8004270 <PCD_EP_ISR_Handler+0x782>
 8003cf6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003cfa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003cfe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d02:	f000 82b5 	beq.w	8004270 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	61bb      	str	r3, [r7, #24]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	461a      	mov	r2, r3
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	4413      	add	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	801a      	strh	r2, [r3, #0]
 8003d36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d3c:	d91d      	bls.n	8003d7a <PCD_EP_ISR_Handler+0x28c>
 8003d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	f003 031f 	and.w	r3, r3, #31
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <PCD_EP_ISR_Handler+0x26a>
 8003d52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d54:	3b01      	subs	r3, #1
 8003d56:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	881b      	ldrh	r3, [r3, #0]
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	029b      	lsls	r3, r3, #10
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	4313      	orrs	r3, r2
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	801a      	strh	r2, [r3, #0]
 8003d78:	e026      	b.n	8003dc8 <PCD_EP_ISR_Handler+0x2da>
 8003d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <PCD_EP_ISR_Handler+0x2aa>
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	801a      	strh	r2, [r3, #0]
 8003d96:	e017      	b.n	8003dc8 <PCD_EP_ISR_Handler+0x2da>
 8003d98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d002      	beq.n	8003db2 <PCD_EP_ISR_Handler+0x2c4>
 8003dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dae:	3301      	adds	r3, #1
 8003db0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	881b      	ldrh	r3, [r3, #0]
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	029b      	lsls	r3, r3, #10
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	881b      	ldrh	r3, [r3, #0]
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dd8:	827b      	strh	r3, [r7, #18]
 8003dda:	8a7b      	ldrh	r3, [r7, #18]
 8003ddc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003de0:	827b      	strh	r3, [r7, #18]
 8003de2:	8a7b      	ldrh	r3, [r7, #18]
 8003de4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003de8:	827b      	strh	r3, [r7, #18]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	8a7b      	ldrh	r3, [r7, #18]
 8003df0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003df4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003dfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	8013      	strh	r3, [r2, #0]
 8003e04:	e234      	b.n	8004270 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e1a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f280 80fc 	bge.w	800401c <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	881b      	ldrh	r3, [r3, #0]
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003e52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e56:	b292      	uxth	r2, r2
 8003e58:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003e5a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8003e5e:	4613      	mov	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4413      	add	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e72:	7b1b      	ldrb	r3, [r3, #12]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d125      	bne.n	8003ec4 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3306      	adds	r3, #6
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ea0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003ea4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 8092 	beq.w	8003fd2 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb4:	6959      	ldr	r1, [r3, #20]
 8003eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb8:	88da      	ldrh	r2, [r3, #6]
 8003eba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ebe:	f003 ffad 	bl	8007e1c <USB_ReadPMA>
 8003ec2:	e086      	b.n	8003fd2 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003ec4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ec6:	78db      	ldrb	r3, [r3, #3]
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d10a      	bne.n	8003ee2 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003ecc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f9d9 	bl	800428c <HAL_PCD_EP_DB_Receive>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003ee0:	e077      	b.n	8003fd2 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ef8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003efc:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	441a      	add	r2, r3
 8003f0e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003f12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f1e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	881b      	ldrh	r3, [r3, #0]
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d024      	beq.n	8003f8a <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	3302      	adds	r3, #2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	6812      	ldr	r2, [r2, #0]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f68:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003f6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d02e      	beq.n	8003fd2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6818      	ldr	r0, [r3, #0]
 8003f78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f7a:	6959      	ldr	r1, [r3, #20]
 8003f7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f7e:	891a      	ldrh	r2, [r3, #8]
 8003f80:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f84:	f003 ff4a 	bl	8007e1c <USB_ReadPMA>
 8003f88:	e023      	b.n	8003fd2 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	4413      	add	r3, r2
 8003f9e:	3306      	adds	r3, #6
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fb2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003fb6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d009      	beq.n	8003fd2 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc4:	6959      	ldr	r1, [r3, #20]
 8003fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc8:	895a      	ldrh	r2, [r3, #10]
 8003fca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fce:	f003 ff25 	bl	8007e1c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003fd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd4:	69da      	ldr	r2, [r3, #28]
 8003fd6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fda:	441a      	add	r2, r3
 8003fdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fde:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fe8:	441a      	add	r2, r3
 8003fea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fec:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d005      	beq.n	8004002 <PCD_EP_ISR_Handler+0x514>
 8003ff6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d206      	bcs.n	8004010 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	4619      	mov	r1, r3
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f005 fda9 	bl	8009b60 <HAL_PCD_DataOutStageCallback>
 800400e:	e005      	b.n	800401c <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004016:	4618      	mov	r0, r3
 8004018:	f002 f9cc 	bl	80063b4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800401c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004020:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8123 	beq.w	8004270 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800402a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	3310      	adds	r3, #16
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4413      	add	r3, r2
 800403c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	4413      	add	r3, r2
 800404c:	881b      	ldrh	r3, [r3, #0]
 800404e:	b29b      	uxth	r3, r3
 8004050:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004058:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	441a      	add	r2, r3
 800406a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800406e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004076:	b29b      	uxth	r3, r3
 8004078:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800407a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407c:	78db      	ldrb	r3, [r3, #3]
 800407e:	2b01      	cmp	r3, #1
 8004080:	f040 80a2 	bne.w	80041c8 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8004084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004086:	2200      	movs	r2, #0
 8004088:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800408a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800408c:	7b1b      	ldrb	r3, [r3, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8093 	beq.w	80041ba <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004094:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409c:	2b00      	cmp	r3, #0
 800409e:	d046      	beq.n	800412e <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a2:	785b      	ldrb	r3, [r3, #1]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d126      	bne.n	80040f6 <PCD_EP_ISR_Handler+0x608>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	461a      	mov	r2, r3
 80040ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040bc:	4413      	add	r3, r2
 80040be:	627b      	str	r3, [r7, #36]	@ 0x24
 80040c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	011a      	lsls	r2, r3, #4
 80040c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c8:	4413      	add	r3, r2
 80040ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80040ce:	623b      	str	r3, [r7, #32]
 80040d0:	6a3b      	ldr	r3, [r7, #32]
 80040d2:	881b      	ldrh	r3, [r3, #0]
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040da:	b29a      	uxth	r2, r3
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	801a      	strh	r2, [r3, #0]
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	881b      	ldrh	r3, [r3, #0]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	801a      	strh	r2, [r3, #0]
 80040f4:	e061      	b.n	80041ba <PCD_EP_ISR_Handler+0x6cc>
 80040f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040f8:	785b      	ldrb	r3, [r3, #1]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d15d      	bne.n	80041ba <PCD_EP_ISR_Handler+0x6cc>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800410c:	b29b      	uxth	r3, r3
 800410e:	461a      	mov	r2, r3
 8004110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004112:	4413      	add	r3, r2
 8004114:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004116:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	011a      	lsls	r2, r3, #4
 800411c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411e:	4413      	add	r3, r2
 8004120:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004124:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004128:	2200      	movs	r2, #0
 800412a:	801a      	strh	r2, [r3, #0]
 800412c:	e045      	b.n	80041ba <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004136:	785b      	ldrb	r3, [r3, #1]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d126      	bne.n	800418a <PCD_EP_ISR_Handler+0x69c>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	637b      	str	r3, [r7, #52]	@ 0x34
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800414a:	b29b      	uxth	r3, r3
 800414c:	461a      	mov	r2, r3
 800414e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004150:	4413      	add	r3, r2
 8004152:	637b      	str	r3, [r7, #52]	@ 0x34
 8004154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	011a      	lsls	r2, r3, #4
 800415a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415c:	4413      	add	r3, r2
 800415e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004162:	633b      	str	r3, [r7, #48]	@ 0x30
 8004164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	b29b      	uxth	r3, r3
 800416a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800416e:	b29a      	uxth	r2, r3
 8004170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004172:	801a      	strh	r2, [r3, #0]
 8004174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004176:	881b      	ldrh	r3, [r3, #0]
 8004178:	b29b      	uxth	r3, r3
 800417a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800417e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004182:	b29a      	uxth	r2, r3
 8004184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004186:	801a      	strh	r2, [r3, #0]
 8004188:	e017      	b.n	80041ba <PCD_EP_ISR_Handler+0x6cc>
 800418a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800418c:	785b      	ldrb	r3, [r3, #1]
 800418e:	2b01      	cmp	r3, #1
 8004190:	d113      	bne.n	80041ba <PCD_EP_ISR_Handler+0x6cc>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800419a:	b29b      	uxth	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a0:	4413      	add	r3, r2
 80041a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	011a      	lsls	r2, r3, #4
 80041aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ac:	4413      	add	r3, r2
 80041ae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b6:	2200      	movs	r2, #0
 80041b8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	4619      	mov	r1, r3
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f005 fce8 	bl	8009b96 <HAL_PCD_DataInStageCallback>
 80041c6:	e053      	b.n	8004270 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80041c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80041cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d146      	bne.n	8004262 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041dc:	b29b      	uxth	r3, r3
 80041de:	461a      	mov	r2, r3
 80041e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4413      	add	r3, r2
 80041e8:	3302      	adds	r3, #2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041fc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004202:	699a      	ldr	r2, [r3, #24]
 8004204:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004208:	429a      	cmp	r2, r3
 800420a:	d907      	bls.n	800421c <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800420c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800420e:	699a      	ldr	r2, [r3, #24]
 8004210:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004214:	1ad2      	subs	r2, r2, r3
 8004216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004218:	619a      	str	r2, [r3, #24]
 800421a:	e002      	b.n	8004222 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800421c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800421e:	2200      	movs	r2, #0
 8004220:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800422a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	4619      	mov	r1, r3
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f005 fcb0 	bl	8009b96 <HAL_PCD_DataInStageCallback>
 8004236:	e01b      	b.n	8004270 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423a:	695a      	ldr	r2, [r3, #20]
 800423c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004240:	441a      	add	r2, r3
 8004242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004244:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004246:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004248:	69da      	ldr	r2, [r3, #28]
 800424a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800424e:	441a      	add	r2, r3
 8004250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004252:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800425a:	4618      	mov	r0, r3
 800425c:	f002 f8aa 	bl	80063b4 <USB_EPStartXfer>
 8004260:	e006      	b.n	8004270 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004262:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004266:	461a      	mov	r2, r3
 8004268:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f91b 	bl	80044a6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004278:	b29b      	uxth	r3, r3
 800427a:	b21b      	sxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	f6ff ac3b 	blt.w	8003af8 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3758      	adds	r7, #88	@ 0x58
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	4613      	mov	r3, r2
 8004298:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d07e      	beq.n	80043a2 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	4413      	add	r3, r2
 80042b8:	3302      	adds	r3, #2
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	699a      	ldr	r2, [r3, #24]
 80042d2:	8b7b      	ldrh	r3, [r7, #26]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d306      	bcc.n	80042e6 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	8b7b      	ldrh	r3, [r7, #26]
 80042de:	1ad2      	subs	r2, r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	619a      	str	r2, [r3, #24]
 80042e4:	e002      	b.n	80042ec <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2200      	movs	r2, #0
 80042ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d123      	bne.n	800433c <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	461a      	mov	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800430a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800430e:	833b      	strh	r3, [r7, #24]
 8004310:	8b3b      	ldrh	r3, [r7, #24]
 8004312:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004316:	833b      	strh	r3, [r7, #24]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	441a      	add	r2, r3
 8004326:	8b3b      	ldrh	r3, [r7, #24]
 8004328:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800432c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004330:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004334:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004338:	b29b      	uxth	r3, r3
 800433a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800433c:	88fb      	ldrh	r3, [r7, #6]
 800433e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01f      	beq.n	8004386 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	881b      	ldrh	r3, [r3, #0]
 8004356:	b29b      	uxth	r3, r3
 8004358:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800435c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004360:	82fb      	strh	r3, [r7, #22]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	441a      	add	r2, r3
 8004370:	8afb      	ldrh	r3, [r7, #22]
 8004372:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004376:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800437a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800437e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004382:	b29b      	uxth	r3, r3
 8004384:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004386:	8b7b      	ldrh	r3, [r7, #26]
 8004388:	2b00      	cmp	r3, #0
 800438a:	f000 8087 	beq.w	800449c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	6959      	ldr	r1, [r3, #20]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	891a      	ldrh	r2, [r3, #8]
 800439a:	8b7b      	ldrh	r3, [r7, #26]
 800439c:	f003 fd3e 	bl	8007e1c <USB_ReadPMA>
 80043a0:	e07c      	b.n	800449c <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4413      	add	r3, r2
 80043b6:	3306      	adds	r3, #6
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	6812      	ldr	r2, [r2, #0]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	699a      	ldr	r2, [r3, #24]
 80043d0:	8b7b      	ldrh	r3, [r7, #26]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d306      	bcc.n	80043e4 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	8b7b      	ldrh	r3, [r7, #26]
 80043dc:	1ad2      	subs	r2, r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	619a      	str	r2, [r3, #24]
 80043e2:	e002      	b.n	80043ea <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2200      	movs	r2, #0
 80043e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d123      	bne.n	800443a <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	881b      	ldrh	r3, [r3, #0]
 8004402:	b29b      	uxth	r3, r3
 8004404:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004408:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800440c:	83fb      	strh	r3, [r7, #30]
 800440e:	8bfb      	ldrh	r3, [r7, #30]
 8004410:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004414:	83fb      	strh	r3, [r7, #30]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	441a      	add	r2, r3
 8004424:	8bfb      	ldrh	r3, [r7, #30]
 8004426:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800442a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800442e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004436:	b29b      	uxth	r3, r3
 8004438:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800443a:	88fb      	ldrh	r3, [r7, #6]
 800443c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d11f      	bne.n	8004484 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800445a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800445e:	83bb      	strh	r3, [r7, #28]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	441a      	add	r2, r3
 800446e:	8bbb      	ldrh	r3, [r7, #28]
 8004470:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004474:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004478:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800447c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004480:	b29b      	uxth	r3, r3
 8004482:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004484:	8b7b      	ldrh	r3, [r7, #26]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d008      	beq.n	800449c <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	6959      	ldr	r1, [r3, #20]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	895a      	ldrh	r2, [r3, #10]
 8004496:	8b7b      	ldrh	r3, [r7, #26]
 8004498:	f003 fcc0 	bl	8007e1c <USB_ReadPMA>
    }
  }

  return count;
 800449c:	8b7b      	ldrh	r3, [r7, #26]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80044a6:	b580      	push	{r7, lr}
 80044a8:	b0a4      	sub	sp, #144	@ 0x90
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	60f8      	str	r0, [r7, #12]
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	4613      	mov	r3, r2
 80044b2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044b4:	88fb      	ldrh	r3, [r7, #6]
 80044b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 81dd 	beq.w	800487a <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	461a      	mov	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	00db      	lsls	r3, r3, #3
 80044d2:	4413      	add	r3, r2
 80044d4:	3302      	adds	r3, #2
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	6812      	ldr	r2, [r2, #0]
 80044dc:	4413      	add	r3, r2
 80044de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044e8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	699a      	ldr	r2, [r3, #24]
 80044f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d907      	bls.n	8004508 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004500:	1ad2      	subs	r2, r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	619a      	str	r2, [r3, #24]
 8004506:	e002      	b.n	800450e <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2200      	movs	r2, #0
 800450c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	699b      	ldr	r3, [r3, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f040 80b9 	bne.w	800468a <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	785b      	ldrb	r3, [r3, #1]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d126      	bne.n	800456e <HAL_PCD_EP_DB_Transmit+0xc8>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800452e:	b29b      	uxth	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004534:	4413      	add	r3, r2
 8004536:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	011a      	lsls	r2, r3, #4
 800453e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004540:	4413      	add	r3, r2
 8004542:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004552:	b29a      	uxth	r2, r3
 8004554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004556:	801a      	strh	r2, [r3, #0]
 8004558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	b29b      	uxth	r3, r3
 800455e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004562:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004566:	b29a      	uxth	r2, r3
 8004568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456a:	801a      	strh	r2, [r3, #0]
 800456c:	e01a      	b.n	80045a4 <HAL_PCD_EP_DB_Transmit+0xfe>
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	785b      	ldrb	r3, [r3, #1]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d116      	bne.n	80045a4 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	637b      	str	r3, [r7, #52]	@ 0x34
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004584:	b29b      	uxth	r3, r3
 8004586:	461a      	mov	r2, r3
 8004588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800458a:	4413      	add	r3, r2
 800458c:	637b      	str	r3, [r7, #52]	@ 0x34
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	011a      	lsls	r2, r3, #4
 8004594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004596:	4413      	add	r3, r2
 8004598:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800459c:	633b      	str	r3, [r7, #48]	@ 0x30
 800459e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a0:	2200      	movs	r2, #0
 80045a2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	785b      	ldrb	r3, [r3, #1]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d126      	bne.n	8004600 <HAL_PCD_EP_DB_Transmit+0x15a>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	61fb      	str	r3, [r7, #28]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	4413      	add	r3, r2
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	011a      	lsls	r2, r3, #4
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	4413      	add	r3, r2
 80045d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80045d8:	61bb      	str	r3, [r7, #24]
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	881b      	ldrh	r3, [r3, #0]
 80045de:	b29b      	uxth	r3, r3
 80045e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	801a      	strh	r2, [r3, #0]
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	801a      	strh	r2, [r3, #0]
 80045fe:	e017      	b.n	8004630 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	785b      	ldrb	r3, [r3, #1]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d113      	bne.n	8004630 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004610:	b29b      	uxth	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004616:	4413      	add	r3, r2
 8004618:	627b      	str	r3, [r7, #36]	@ 0x24
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	011a      	lsls	r2, r3, #4
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	4413      	add	r3, r2
 8004624:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004628:	623b      	str	r3, [r7, #32]
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	2200      	movs	r2, #0
 800462e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	4619      	mov	r1, r3
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f005 faad 	bl	8009b96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 82fc 	beq.w	8004c40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	461a      	mov	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	881b      	ldrh	r3, [r3, #0]
 8004658:	b29b      	uxth	r3, r3
 800465a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800465e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004662:	82fb      	strh	r3, [r7, #22]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	441a      	add	r2, r3
 8004672:	8afb      	ldrh	r3, [r7, #22]
 8004674:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004678:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800467c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004680:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004684:	b29b      	uxth	r3, r3
 8004686:	8013      	strh	r3, [r2, #0]
 8004688:	e2da      	b.n	8004c40 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d021      	beq.n	80046d8 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	461a      	mov	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ae:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	461a      	mov	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	441a      	add	r2, r3
 80046c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80046c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046de:	2b01      	cmp	r3, #1
 80046e0:	f040 82ae 	bne.w	8004c40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	695a      	ldr	r2, [r3, #20]
 80046e8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046ec:	441a      	add	r2, r3
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80046fa:	441a      	add	r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	6a1a      	ldr	r2, [r3, #32]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	429a      	cmp	r2, r3
 800470a:	d30b      	bcc.n	8004724 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6a1a      	ldr	r2, [r3, #32]
 8004718:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800471c:	1ad2      	subs	r2, r2, r3
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	621a      	str	r2, [r3, #32]
 8004722:	e017      	b.n	8004754 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d108      	bne.n	800473e <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 800472c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004730:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800473c:	e00a      	b.n	8004754 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2200      	movs	r2, #0
 8004752:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d165      	bne.n	8004828 <HAL_PCD_EP_DB_Transmit+0x382>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800476a:	b29b      	uxth	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004770:	4413      	add	r3, r2
 8004772:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	011a      	lsls	r2, r3, #4
 800477a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800477c:	4413      	add	r3, r2
 800477e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004782:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	b29b      	uxth	r3, r3
 800478a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800478e:	b29a      	uxth	r2, r3
 8004790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004792:	801a      	strh	r2, [r3, #0]
 8004794:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004798:	2b3e      	cmp	r3, #62	@ 0x3e
 800479a:	d91d      	bls.n	80047d8 <HAL_PCD_EP_DB_Transmit+0x332>
 800479c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047a8:	f003 031f 	and.w	r3, r3, #31
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <HAL_PCD_EP_DB_Transmit+0x310>
 80047b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047b2:	3b01      	subs	r3, #1
 80047b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b8:	881b      	ldrh	r3, [r3, #0]
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047be:	b29b      	uxth	r3, r3
 80047c0:	029b      	lsls	r3, r3, #10
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	4313      	orrs	r3, r2
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047d0:	b29a      	uxth	r2, r3
 80047d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d4:	801a      	strh	r2, [r3, #0]
 80047d6:	e044      	b.n	8004862 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80047d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10a      	bne.n	80047f6 <HAL_PCD_EP_DB_Transmit+0x350>
 80047e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f2:	801a      	strh	r2, [r3, #0]
 80047f4:	e035      	b.n	8004862 <HAL_PCD_EP_DB_Transmit+0x3bc>
 80047f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d002      	beq.n	8004810 <HAL_PCD_EP_DB_Transmit+0x36a>
 800480a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800480c:	3301      	adds	r3, #1
 800480e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004812:	881b      	ldrh	r3, [r3, #0]
 8004814:	b29a      	uxth	r2, r3
 8004816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004818:	b29b      	uxth	r3, r3
 800481a:	029b      	lsls	r3, r3, #10
 800481c:	b29b      	uxth	r3, r3
 800481e:	4313      	orrs	r3, r2
 8004820:	b29a      	uxth	r2, r3
 8004822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004824:	801a      	strh	r2, [r3, #0]
 8004826:	e01c      	b.n	8004862 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	785b      	ldrb	r3, [r3, #1]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d118      	bne.n	8004862 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	647b      	str	r3, [r7, #68]	@ 0x44
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800483e:	b29b      	uxth	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004844:	4413      	add	r3, r2
 8004846:	647b      	str	r3, [r7, #68]	@ 0x44
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	011a      	lsls	r2, r3, #4
 800484e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004850:	4413      	add	r3, r2
 8004852:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004856:	643b      	str	r3, [r7, #64]	@ 0x40
 8004858:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800485c:	b29a      	uxth	r2, r3
 800485e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004860:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6959      	ldr	r1, [r3, #20]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	891a      	ldrh	r2, [r3, #8]
 800486e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004872:	b29b      	uxth	r3, r3
 8004874:	f003 fa8d 	bl	8007d92 <USB_WritePMA>
 8004878:	e1e2      	b.n	8004c40 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	00db      	lsls	r3, r3, #3
 800488c:	4413      	add	r3, r2
 800488e:	3306      	adds	r3, #6
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048a2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	699a      	ldr	r2, [r3, #24]
 80048aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d307      	bcc.n	80048c2 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80048ba:	1ad2      	subs	r2, r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	619a      	str	r2, [r3, #24]
 80048c0:	e002      	b.n	80048c8 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2200      	movs	r2, #0
 80048c6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f040 80c0 	bne.w	8004a52 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	785b      	ldrb	r3, [r3, #1]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d126      	bne.n	8004928 <HAL_PCD_EP_DB_Transmit+0x482>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	461a      	mov	r2, r3
 80048ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048ee:	4413      	add	r3, r2
 80048f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	011a      	lsls	r2, r3, #4
 80048f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048fa:	4413      	add	r3, r2
 80048fc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004900:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004902:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004904:	881b      	ldrh	r3, [r3, #0]
 8004906:	b29b      	uxth	r3, r3
 8004908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800490c:	b29a      	uxth	r2, r3
 800490e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004910:	801a      	strh	r2, [r3, #0]
 8004912:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	b29b      	uxth	r3, r3
 8004918:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800491c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004920:	b29a      	uxth	r2, r3
 8004922:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004924:	801a      	strh	r2, [r3, #0]
 8004926:	e01a      	b.n	800495e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	785b      	ldrb	r3, [r3, #1]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d116      	bne.n	800495e <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	667b      	str	r3, [r7, #100]	@ 0x64
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800493e:	b29b      	uxth	r3, r3
 8004940:	461a      	mov	r2, r3
 8004942:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004944:	4413      	add	r3, r2
 8004946:	667b      	str	r3, [r7, #100]	@ 0x64
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	011a      	lsls	r2, r3, #4
 800494e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004950:	4413      	add	r3, r2
 8004952:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004956:	663b      	str	r3, [r7, #96]	@ 0x60
 8004958:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800495a:	2200      	movs	r2, #0
 800495c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	677b      	str	r3, [r7, #116]	@ 0x74
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	785b      	ldrb	r3, [r3, #1]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d12b      	bne.n	80049c4 <HAL_PCD_EP_DB_Transmit+0x51e>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800497a:	b29b      	uxth	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004980:	4413      	add	r3, r2
 8004982:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	011a      	lsls	r2, r3, #4
 800498a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800498c:	4413      	add	r3, r2
 800498e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004992:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004996:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b29b      	uxth	r3, r3
 800499e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049a8:	801a      	strh	r2, [r3, #0]
 80049aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049ae:	881b      	ldrh	r3, [r3, #0]
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049c0:	801a      	strh	r2, [r3, #0]
 80049c2:	e017      	b.n	80049f4 <HAL_PCD_EP_DB_Transmit+0x54e>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	785b      	ldrb	r3, [r3, #1]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d113      	bne.n	80049f4 <HAL_PCD_EP_DB_Transmit+0x54e>
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	461a      	mov	r2, r3
 80049d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049da:	4413      	add	r3, r2
 80049dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	011a      	lsls	r2, r3, #4
 80049e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049e6:	4413      	add	r3, r2
 80049e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80049ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80049ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049f0:	2200      	movs	r2, #0
 80049f2:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	4619      	mov	r1, r3
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f005 f8cb 	bl	8009b96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a00:	88fb      	ldrh	r3, [r7, #6]
 8004a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f040 811a 	bne.w	8004c40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	881b      	ldrh	r3, [r3, #0]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a26:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	441a      	add	r2, r3
 8004a38:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004a3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	8013      	strh	r3, [r2, #0]
 8004a50:	e0f6      	b.n	8004c40 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d121      	bne.n	8004aa0 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	461a      	mov	r2, r3
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	881b      	ldrh	r3, [r3, #0]
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a76:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	441a      	add	r2, r3
 8004a88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004a8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	f040 80ca 	bne.w	8004c40 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	695a      	ldr	r2, [r3, #20]
 8004ab0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ab4:	441a      	add	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	69da      	ldr	r2, [r3, #28]
 8004abe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004ac2:	441a      	add	r2, r3
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	6a1a      	ldr	r2, [r3, #32]
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d30b      	bcc.n	8004aec <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	6a1a      	ldr	r2, [r3, #32]
 8004ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ae4:	1ad2      	subs	r2, r2, r3
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	621a      	str	r2, [r3, #32]
 8004aea:	e017      	b.n	8004b1c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d108      	bne.n	8004b06 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004af4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004af8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004b04:	e00a      	b.n	8004b1c <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	2200      	movs	r2, #0
 8004b12:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	785b      	ldrb	r3, [r3, #1]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d165      	bne.n	8004bf6 <HAL_PCD_EP_DB_Transmit+0x750>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b3e:	4413      	add	r3, r2
 8004b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	011a      	lsls	r2, r3, #4
 8004b48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004b50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b60:	801a      	strh	r2, [r3, #0]
 8004b62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b66:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b68:	d91d      	bls.n	8004ba6 <HAL_PCD_EP_DB_Transmit+0x700>
 8004b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b76:	f003 031f 	and.w	r3, r3, #31
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d102      	bne.n	8004b84 <HAL_PCD_EP_DB_Transmit+0x6de>
 8004b7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b80:	3b01      	subs	r3, #1
 8004b82:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b86:	881b      	ldrh	r3, [r3, #0]
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	029b      	lsls	r3, r3, #10
 8004b90:	b29b      	uxth	r3, r3
 8004b92:	4313      	orrs	r3, r2
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ba2:	801a      	strh	r2, [r3, #0]
 8004ba4:	e041      	b.n	8004c2a <HAL_PCD_EP_DB_Transmit+0x784>
 8004ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10a      	bne.n	8004bc4 <HAL_PCD_EP_DB_Transmit+0x71e>
 8004bae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bc0:	801a      	strh	r2, [r3, #0]
 8004bc2:	e032      	b.n	8004c2a <HAL_PCD_EP_DB_Transmit+0x784>
 8004bc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bc8:	085b      	lsrs	r3, r3, #1
 8004bca:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_PCD_EP_DB_Transmit+0x738>
 8004bd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bda:	3301      	adds	r3, #1
 8004bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bde:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	029b      	lsls	r3, r3, #10
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	4313      	orrs	r3, r2
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bf2:	801a      	strh	r2, [r3, #0]
 8004bf4:	e019      	b.n	8004c2a <HAL_PCD_EP_DB_Transmit+0x784>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	785b      	ldrb	r3, [r3, #1]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d115      	bne.n	8004c2a <HAL_PCD_EP_DB_Transmit+0x784>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c0c:	4413      	add	r3, r2
 8004c0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	011a      	lsls	r2, r3, #4
 8004c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c18:	4413      	add	r3, r2
 8004c1a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004c1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c28:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6959      	ldr	r1, [r3, #20]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	895a      	ldrh	r2, [r3, #10]
 8004c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	f003 f8a9 	bl	8007d92 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c5a:	82bb      	strh	r3, [r7, #20]
 8004c5c:	8abb      	ldrh	r3, [r7, #20]
 8004c5e:	f083 0310 	eor.w	r3, r3, #16
 8004c62:	82bb      	strh	r3, [r7, #20]
 8004c64:	8abb      	ldrh	r3, [r7, #20]
 8004c66:	f083 0320 	eor.w	r3, r3, #32
 8004c6a:	82bb      	strh	r3, [r7, #20]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	441a      	add	r2, r3
 8004c7a:	8abb      	ldrh	r3, [r7, #20]
 8004c7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3790      	adds	r7, #144	@ 0x90
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b087      	sub	sp, #28
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	60f8      	str	r0, [r7, #12]
 8004ca2:	607b      	str	r3, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	817b      	strh	r3, [r7, #10]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004cac:	897b      	ldrh	r3, [r7, #10]
 8004cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00b      	beq.n	8004cd0 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cb8:	897b      	ldrh	r3, [r7, #10]
 8004cba:	f003 0207 	and.w	r2, r3, #7
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	3310      	adds	r3, #16
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	4413      	add	r3, r2
 8004ccc:	617b      	str	r3, [r7, #20]
 8004cce:	e009      	b.n	8004ce4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004cd0:	897a      	ldrh	r2, [r7, #10]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004ce4:	893b      	ldrh	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d107      	bne.n	8004cfa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2200      	movs	r2, #0
 8004cee:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	80da      	strh	r2, [r3, #6]
 8004cf8:	e00b      	b.n	8004d12 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	0c1b      	lsrs	r3, r3, #16
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	371c      	adds	r7, #28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr
	...

08004d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e272      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0301 	and.w	r3, r3, #1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 8087 	beq.w	8004e4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d40:	4b92      	ldr	r3, [pc, #584]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	f003 030c 	and.w	r3, r3, #12
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d00c      	beq.n	8004d66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f003 030c 	and.w	r3, r3, #12
 8004d54:	2b08      	cmp	r3, #8
 8004d56:	d112      	bne.n	8004d7e <HAL_RCC_OscConfig+0x5e>
 8004d58:	4b8c      	ldr	r3, [pc, #560]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d64:	d10b      	bne.n	8004d7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d66:	4b89      	ldr	r3, [pc, #548]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d06c      	beq.n	8004e4c <HAL_RCC_OscConfig+0x12c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d168      	bne.n	8004e4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e24c      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d86:	d106      	bne.n	8004d96 <HAL_RCC_OscConfig+0x76>
 8004d88:	4b80      	ldr	r3, [pc, #512]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a7f      	ldr	r2, [pc, #508]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004d8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d92:	6013      	str	r3, [r2, #0]
 8004d94:	e02e      	b.n	8004df4 <HAL_RCC_OscConfig+0xd4>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10c      	bne.n	8004db8 <HAL_RCC_OscConfig+0x98>
 8004d9e:	4b7b      	ldr	r3, [pc, #492]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a7a      	ldr	r2, [pc, #488]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004da4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	4b78      	ldr	r3, [pc, #480]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a77      	ldr	r2, [pc, #476]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004db0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	e01d      	b.n	8004df4 <HAL_RCC_OscConfig+0xd4>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004dc0:	d10c      	bne.n	8004ddc <HAL_RCC_OscConfig+0xbc>
 8004dc2:	4b72      	ldr	r3, [pc, #456]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a71      	ldr	r2, [pc, #452]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004dc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	4b6f      	ldr	r3, [pc, #444]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a6e      	ldr	r2, [pc, #440]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd8:	6013      	str	r3, [r2, #0]
 8004dda:	e00b      	b.n	8004df4 <HAL_RCC_OscConfig+0xd4>
 8004ddc:	4b6b      	ldr	r3, [pc, #428]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a6a      	ldr	r2, [pc, #424]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004de2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	4b68      	ldr	r3, [pc, #416]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a67      	ldr	r2, [pc, #412]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004dee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004df2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d013      	beq.n	8004e24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfc:	f7fc fef2 	bl	8001be4 <HAL_GetTick>
 8004e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e02:	e008      	b.n	8004e16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e04:	f7fc feee 	bl	8001be4 <HAL_GetTick>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	1ad3      	subs	r3, r2, r3
 8004e0e:	2b64      	cmp	r3, #100	@ 0x64
 8004e10:	d901      	bls.n	8004e16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e200      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e16:	4b5d      	ldr	r3, [pc, #372]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0f0      	beq.n	8004e04 <HAL_RCC_OscConfig+0xe4>
 8004e22:	e014      	b.n	8004e4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e24:	f7fc fede 	bl	8001be4 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e2c:	f7fc feda 	bl	8001be4 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b64      	cmp	r3, #100	@ 0x64
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e1ec      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e3e:	4b53      	ldr	r3, [pc, #332]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f0      	bne.n	8004e2c <HAL_RCC_OscConfig+0x10c>
 8004e4a:	e000      	b.n	8004e4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d063      	beq.n	8004f22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e5a:	4b4c      	ldr	r3, [pc, #304]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00b      	beq.n	8004e7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e66:	4b49      	ldr	r3, [pc, #292]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d11c      	bne.n	8004eac <HAL_RCC_OscConfig+0x18c>
 8004e72:	4b46      	ldr	r3, [pc, #280]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d116      	bne.n	8004eac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e7e:	4b43      	ldr	r3, [pc, #268]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <HAL_RCC_OscConfig+0x176>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d001      	beq.n	8004e96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e1c0      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e96:	4b3d      	ldr	r3, [pc, #244]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	4939      	ldr	r1, [pc, #228]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eaa:	e03a      	b.n	8004f22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d020      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eb4:	4b36      	ldr	r3, [pc, #216]	@ (8004f90 <HAL_RCC_OscConfig+0x270>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eba:	f7fc fe93 	bl	8001be4 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec0:	e008      	b.n	8004ed4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ec2:	f7fc fe8f 	bl	8001be4 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e1a1      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0f0      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	4927      	ldr	r1, [pc, #156]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	600b      	str	r3, [r1, #0]
 8004ef4:	e015      	b.n	8004f22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ef6:	4b26      	ldr	r3, [pc, #152]	@ (8004f90 <HAL_RCC_OscConfig+0x270>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efc:	f7fc fe72 	bl	8001be4 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f04:	f7fc fe6e 	bl	8001be4 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e180      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f16:	4b1d      	ldr	r3, [pc, #116]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1f0      	bne.n	8004f04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d03a      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d019      	beq.n	8004f6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f36:	4b17      	ldr	r3, [pc, #92]	@ (8004f94 <HAL_RCC_OscConfig+0x274>)
 8004f38:	2201      	movs	r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f3c:	f7fc fe52 	bl	8001be4 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f44:	f7fc fe4e 	bl	8001be4 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e160      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f56:	4b0d      	ldr	r3, [pc, #52]	@ (8004f8c <HAL_RCC_OscConfig+0x26c>)
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f62:	2001      	movs	r0, #1
 8004f64:	f000 fabc 	bl	80054e0 <RCC_Delay>
 8004f68:	e01c      	b.n	8004fa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f94 <HAL_RCC_OscConfig+0x274>)
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f70:	f7fc fe38 	bl	8001be4 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f76:	e00f      	b.n	8004f98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f78:	f7fc fe34 	bl	8001be4 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d908      	bls.n	8004f98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e146      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
 8004f8a:	bf00      	nop
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	42420000 	.word	0x42420000
 8004f94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f98:	4b92      	ldr	r3, [pc, #584]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8004f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9c:	f003 0302 	and.w	r3, r3, #2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1e9      	bne.n	8004f78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 80a6 	beq.w	80050fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fb6:	4b8b      	ldr	r3, [pc, #556]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8004fb8:	69db      	ldr	r3, [r3, #28]
 8004fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d10d      	bne.n	8004fde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc2:	4b88      	ldr	r3, [pc, #544]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	4a87      	ldr	r2, [pc, #540]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8004fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fcc:	61d3      	str	r3, [r2, #28]
 8004fce:	4b85      	ldr	r3, [pc, #532]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fd6:	60bb      	str	r3, [r7, #8]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fde:	4b82      	ldr	r3, [pc, #520]	@ (80051e8 <HAL_RCC_OscConfig+0x4c8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d118      	bne.n	800501c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fea:	4b7f      	ldr	r3, [pc, #508]	@ (80051e8 <HAL_RCC_OscConfig+0x4c8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a7e      	ldr	r2, [pc, #504]	@ (80051e8 <HAL_RCC_OscConfig+0x4c8>)
 8004ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ff6:	f7fc fdf5 	bl	8001be4 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ffe:	f7fc fdf1 	bl	8001be4 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b64      	cmp	r3, #100	@ 0x64
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e103      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005010:	4b75      	ldr	r3, [pc, #468]	@ (80051e8 <HAL_RCC_OscConfig+0x4c8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d106      	bne.n	8005032 <HAL_RCC_OscConfig+0x312>
 8005024:	4b6f      	ldr	r3, [pc, #444]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8005026:	6a1b      	ldr	r3, [r3, #32]
 8005028:	4a6e      	ldr	r2, [pc, #440]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 800502a:	f043 0301 	orr.w	r3, r3, #1
 800502e:	6213      	str	r3, [r2, #32]
 8005030:	e02d      	b.n	800508e <HAL_RCC_OscConfig+0x36e>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10c      	bne.n	8005054 <HAL_RCC_OscConfig+0x334>
 800503a:	4b6a      	ldr	r3, [pc, #424]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	4a69      	ldr	r2, [pc, #420]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8005040:	f023 0301 	bic.w	r3, r3, #1
 8005044:	6213      	str	r3, [r2, #32]
 8005046:	4b67      	ldr	r3, [pc, #412]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	4a66      	ldr	r2, [pc, #408]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 800504c:	f023 0304 	bic.w	r3, r3, #4
 8005050:	6213      	str	r3, [r2, #32]
 8005052:	e01c      	b.n	800508e <HAL_RCC_OscConfig+0x36e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b05      	cmp	r3, #5
 800505a:	d10c      	bne.n	8005076 <HAL_RCC_OscConfig+0x356>
 800505c:	4b61      	ldr	r3, [pc, #388]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	4a60      	ldr	r2, [pc, #384]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8005062:	f043 0304 	orr.w	r3, r3, #4
 8005066:	6213      	str	r3, [r2, #32]
 8005068:	4b5e      	ldr	r3, [pc, #376]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	4a5d      	ldr	r2, [pc, #372]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 800506e:	f043 0301 	orr.w	r3, r3, #1
 8005072:	6213      	str	r3, [r2, #32]
 8005074:	e00b      	b.n	800508e <HAL_RCC_OscConfig+0x36e>
 8005076:	4b5b      	ldr	r3, [pc, #364]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	4a5a      	ldr	r2, [pc, #360]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 800507c:	f023 0301 	bic.w	r3, r3, #1
 8005080:	6213      	str	r3, [r2, #32]
 8005082:	4b58      	ldr	r3, [pc, #352]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	4a57      	ldr	r2, [pc, #348]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8005088:	f023 0304 	bic.w	r3, r3, #4
 800508c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d015      	beq.n	80050c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005096:	f7fc fda5 	bl	8001be4 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800509c:	e00a      	b.n	80050b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800509e:	f7fc fda1 	bl	8001be4 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e0b1      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050b4:	4b4b      	ldr	r3, [pc, #300]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 80050b6:	6a1b      	ldr	r3, [r3, #32]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d0ee      	beq.n	800509e <HAL_RCC_OscConfig+0x37e>
 80050c0:	e014      	b.n	80050ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050c2:	f7fc fd8f 	bl	8001be4 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050c8:	e00a      	b.n	80050e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ca:	f7fc fd8b 	bl	8001be4 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050d8:	4293      	cmp	r3, r2
 80050da:	d901      	bls.n	80050e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e09b      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e0:	4b40      	ldr	r3, [pc, #256]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1ee      	bne.n	80050ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050ec:	7dfb      	ldrb	r3, [r7, #23]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d105      	bne.n	80050fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f2:	4b3c      	ldr	r3, [pc, #240]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	4a3b      	ldr	r2, [pc, #236]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 80050f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 8087 	beq.w	8005216 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005108:	4b36      	ldr	r3, [pc, #216]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	f003 030c 	and.w	r3, r3, #12
 8005110:	2b08      	cmp	r3, #8
 8005112:	d061      	beq.n	80051d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	2b02      	cmp	r3, #2
 800511a:	d146      	bne.n	80051aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800511c:	4b33      	ldr	r3, [pc, #204]	@ (80051ec <HAL_RCC_OscConfig+0x4cc>)
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005122:	f7fc fd5f 	bl	8001be4 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800512a:	f7fc fd5b 	bl	8001be4 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e06d      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800513c:	4b29      	ldr	r3, [pc, #164]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1f0      	bne.n	800512a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a1b      	ldr	r3, [r3, #32]
 800514c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005150:	d108      	bne.n	8005164 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005152:	4b24      	ldr	r3, [pc, #144]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	4921      	ldr	r1, [pc, #132]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8005160:	4313      	orrs	r3, r2
 8005162:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005164:	4b1f      	ldr	r3, [pc, #124]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a19      	ldr	r1, [r3, #32]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005174:	430b      	orrs	r3, r1
 8005176:	491b      	ldr	r1, [pc, #108]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 8005178:	4313      	orrs	r3, r2
 800517a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800517c:	4b1b      	ldr	r3, [pc, #108]	@ (80051ec <HAL_RCC_OscConfig+0x4cc>)
 800517e:	2201      	movs	r2, #1
 8005180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005182:	f7fc fd2f 	bl	8001be4 <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518a:	f7fc fd2b 	bl	8001be4 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e03d      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800519c:	4b11      	ldr	r3, [pc, #68]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0f0      	beq.n	800518a <HAL_RCC_OscConfig+0x46a>
 80051a8:	e035      	b.n	8005216 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051aa:	4b10      	ldr	r3, [pc, #64]	@ (80051ec <HAL_RCC_OscConfig+0x4cc>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b0:	f7fc fd18 	bl	8001be4 <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051b6:	e008      	b.n	80051ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b8:	f7fc fd14 	bl	8001be4 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e026      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051ca:	4b06      	ldr	r3, [pc, #24]	@ (80051e4 <HAL_RCC_OscConfig+0x4c4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f0      	bne.n	80051b8 <HAL_RCC_OscConfig+0x498>
 80051d6:	e01e      	b.n	8005216 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	69db      	ldr	r3, [r3, #28]
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d107      	bne.n	80051f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e019      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40007000 	.word	0x40007000
 80051ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005220 <HAL_RCC_OscConfig+0x500>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	429a      	cmp	r2, r3
 8005202:	d106      	bne.n	8005212 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520e:	429a      	cmp	r2, r3
 8005210:	d001      	beq.n	8005216 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3718      	adds	r7, #24
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40021000 	.word	0x40021000

08005224 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d101      	bne.n	8005238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e0d0      	b.n	80053da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005238:	4b6a      	ldr	r3, [pc, #424]	@ (80053e4 <HAL_RCC_ClockConfig+0x1c0>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0307 	and.w	r3, r3, #7
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d910      	bls.n	8005268 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005246:	4b67      	ldr	r3, [pc, #412]	@ (80053e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f023 0207 	bic.w	r2, r3, #7
 800524e:	4965      	ldr	r1, [pc, #404]	@ (80053e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	4313      	orrs	r3, r2
 8005254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005256:	4b63      	ldr	r3, [pc, #396]	@ (80053e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d001      	beq.n	8005268 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e0b8      	b.n	80053da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d020      	beq.n	80052b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d005      	beq.n	800528c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005280:	4b59      	ldr	r3, [pc, #356]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4a58      	ldr	r2, [pc, #352]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005286:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800528a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005298:	4b53      	ldr	r3, [pc, #332]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	4a52      	ldr	r2, [pc, #328]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 800529e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80052a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a4:	4b50      	ldr	r3, [pc, #320]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	494d      	ldr	r1, [pc, #308]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d040      	beq.n	8005344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b01      	cmp	r3, #1
 80052c8:	d107      	bne.n	80052da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ca:	4b47      	ldr	r3, [pc, #284]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d115      	bne.n	8005302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e07f      	b.n	80053da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d107      	bne.n	80052f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e2:	4b41      	ldr	r3, [pc, #260]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d109      	bne.n	8005302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e073      	b.n	80053da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052f2:	4b3d      	ldr	r3, [pc, #244]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e06b      	b.n	80053da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005302:	4b39      	ldr	r3, [pc, #228]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f023 0203 	bic.w	r2, r3, #3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	4936      	ldr	r1, [pc, #216]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005310:	4313      	orrs	r3, r2
 8005312:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005314:	f7fc fc66 	bl	8001be4 <HAL_GetTick>
 8005318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800531a:	e00a      	b.n	8005332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800531c:	f7fc fc62 	bl	8001be4 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800532a:	4293      	cmp	r3, r2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e053      	b.n	80053da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005332:	4b2d      	ldr	r3, [pc, #180]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f003 020c 	and.w	r2, r3, #12
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	429a      	cmp	r2, r3
 8005342:	d1eb      	bne.n	800531c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005344:	4b27      	ldr	r3, [pc, #156]	@ (80053e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d210      	bcs.n	8005374 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005352:	4b24      	ldr	r3, [pc, #144]	@ (80053e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f023 0207 	bic.w	r2, r3, #7
 800535a:	4922      	ldr	r1, [pc, #136]	@ (80053e4 <HAL_RCC_ClockConfig+0x1c0>)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	4313      	orrs	r3, r2
 8005360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005362:	4b20      	ldr	r3, [pc, #128]	@ (80053e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d001      	beq.n	8005374 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e032      	b.n	80053da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d008      	beq.n	8005392 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005380:	4b19      	ldr	r3, [pc, #100]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4916      	ldr	r1, [pc, #88]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 800538e:	4313      	orrs	r3, r2
 8005390:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d009      	beq.n	80053b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800539e:	4b12      	ldr	r3, [pc, #72]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	490e      	ldr	r1, [pc, #56]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053b2:	f000 f821 	bl	80053f8 <HAL_RCC_GetSysClockFreq>
 80053b6:	4602      	mov	r2, r0
 80053b8:	4b0b      	ldr	r3, [pc, #44]	@ (80053e8 <HAL_RCC_ClockConfig+0x1c4>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	091b      	lsrs	r3, r3, #4
 80053be:	f003 030f 	and.w	r3, r3, #15
 80053c2:	490a      	ldr	r1, [pc, #40]	@ (80053ec <HAL_RCC_ClockConfig+0x1c8>)
 80053c4:	5ccb      	ldrb	r3, [r1, r3]
 80053c6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ca:	4a09      	ldr	r2, [pc, #36]	@ (80053f0 <HAL_RCC_ClockConfig+0x1cc>)
 80053cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053ce:	4b09      	ldr	r3, [pc, #36]	@ (80053f4 <HAL_RCC_ClockConfig+0x1d0>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fc fbc4 	bl	8001b60 <HAL_InitTick>

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	40022000 	.word	0x40022000
 80053e8:	40021000 	.word	0x40021000
 80053ec:	0800ce00 	.word	0x0800ce00
 80053f0:	20000000 	.word	0x20000000
 80053f4:	20000004 	.word	0x20000004

080053f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	2300      	movs	r3, #0
 8005404:	60bb      	str	r3, [r7, #8]
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	2300      	movs	r3, #0
 800540c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005412:	4b1e      	ldr	r3, [pc, #120]	@ (800548c <HAL_RCC_GetSysClockFreq+0x94>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f003 030c 	and.w	r3, r3, #12
 800541e:	2b04      	cmp	r3, #4
 8005420:	d002      	beq.n	8005428 <HAL_RCC_GetSysClockFreq+0x30>
 8005422:	2b08      	cmp	r3, #8
 8005424:	d003      	beq.n	800542e <HAL_RCC_GetSysClockFreq+0x36>
 8005426:	e027      	b.n	8005478 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005428:	4b19      	ldr	r3, [pc, #100]	@ (8005490 <HAL_RCC_GetSysClockFreq+0x98>)
 800542a:	613b      	str	r3, [r7, #16]
      break;
 800542c:	e027      	b.n	800547e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	0c9b      	lsrs	r3, r3, #18
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	4a17      	ldr	r2, [pc, #92]	@ (8005494 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005438:	5cd3      	ldrb	r3, [r2, r3]
 800543a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d010      	beq.n	8005468 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005446:	4b11      	ldr	r3, [pc, #68]	@ (800548c <HAL_RCC_GetSysClockFreq+0x94>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	0c5b      	lsrs	r3, r3, #17
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	4a11      	ldr	r2, [pc, #68]	@ (8005498 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005452:	5cd3      	ldrb	r3, [r2, r3]
 8005454:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a0d      	ldr	r2, [pc, #52]	@ (8005490 <HAL_RCC_GetSysClockFreq+0x98>)
 800545a:	fb03 f202 	mul.w	r2, r3, r2
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	fbb2 f3f3 	udiv	r3, r2, r3
 8005464:	617b      	str	r3, [r7, #20]
 8005466:	e004      	b.n	8005472 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a0c      	ldr	r2, [pc, #48]	@ (800549c <HAL_RCC_GetSysClockFreq+0xa4>)
 800546c:	fb02 f303 	mul.w	r3, r2, r3
 8005470:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	613b      	str	r3, [r7, #16]
      break;
 8005476:	e002      	b.n	800547e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005478:	4b09      	ldr	r3, [pc, #36]	@ (80054a0 <HAL_RCC_GetSysClockFreq+0xa8>)
 800547a:	613b      	str	r3, [r7, #16]
      break;
 800547c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800547e:	693b      	ldr	r3, [r7, #16]
}
 8005480:	4618      	mov	r0, r3
 8005482:	371c      	adds	r7, #28
 8005484:	46bd      	mov	sp, r7
 8005486:	bc80      	pop	{r7}
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	40021000 	.word	0x40021000
 8005490:	00f42400 	.word	0x00f42400
 8005494:	0800ce18 	.word	0x0800ce18
 8005498:	0800ce28 	.word	0x0800ce28
 800549c:	003d0900 	.word	0x003d0900
 80054a0:	007a1200 	.word	0x007a1200

080054a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054a8:	4b02      	ldr	r3, [pc, #8]	@ (80054b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80054aa:	681b      	ldr	r3, [r3, #0]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr
 80054b4:	20000000 	.word	0x20000000

080054b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054bc:	f7ff fff2 	bl	80054a4 <HAL_RCC_GetHCLKFreq>
 80054c0:	4602      	mov	r2, r0
 80054c2:	4b05      	ldr	r3, [pc, #20]	@ (80054d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	0a1b      	lsrs	r3, r3, #8
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	4903      	ldr	r1, [pc, #12]	@ (80054dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ce:	5ccb      	ldrb	r3, [r1, r3]
 80054d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40021000 	.word	0x40021000
 80054dc:	0800ce10 	.word	0x0800ce10

080054e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80054e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005514 <RCC_Delay+0x34>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005518 <RCC_Delay+0x38>)
 80054ee:	fba2 2303 	umull	r2, r3, r2, r3
 80054f2:	0a5b      	lsrs	r3, r3, #9
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	fb02 f303 	mul.w	r3, r2, r3
 80054fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80054fc:	bf00      	nop
  }
  while (Delay --);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	1e5a      	subs	r2, r3, #1
 8005502:	60fa      	str	r2, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d1f9      	bne.n	80054fc <RCC_Delay+0x1c>
}
 8005508:	bf00      	nop
 800550a:	bf00      	nop
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	bc80      	pop	{r7}
 8005512:	4770      	bx	lr
 8005514:	20000000 	.word	0x20000000
 8005518:	10624dd3 	.word	0x10624dd3

0800551c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005524:	2300      	movs	r3, #0
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d07d      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005538:	2300      	movs	r3, #0
 800553a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800553c:	4b4f      	ldr	r3, [pc, #316]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d10d      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005548:	4b4c      	ldr	r3, [pc, #304]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800554a:	69db      	ldr	r3, [r3, #28]
 800554c:	4a4b      	ldr	r2, [pc, #300]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800554e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005552:	61d3      	str	r3, [r2, #28]
 8005554:	4b49      	ldr	r3, [pc, #292]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555c:	60bb      	str	r3, [r7, #8]
 800555e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005560:	2301      	movs	r3, #1
 8005562:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005564:	4b46      	ldr	r3, [pc, #280]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d118      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005570:	4b43      	ldr	r3, [pc, #268]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a42      	ldr	r2, [pc, #264]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800557a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800557c:	f7fc fb32 	bl	8001be4 <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005582:	e008      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005584:	f7fc fb2e 	bl	8001be4 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b64      	cmp	r3, #100	@ 0x64
 8005590:	d901      	bls.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e06d      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005596:	4b3a      	ldr	r3, [pc, #232]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d0f0      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055a2:	4b36      	ldr	r3, [pc, #216]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055aa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d02e      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ba:	68fa      	ldr	r2, [r7, #12]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d027      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055c0:	4b2e      	ldr	r3, [pc, #184]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055ca:	4b2e      	ldr	r3, [pc, #184]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055cc:	2201      	movs	r2, #1
 80055ce:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055d0:	4b2c      	ldr	r3, [pc, #176]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80055d6:	4a29      	ldr	r2, [pc, #164]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d014      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e6:	f7fc fafd 	bl	8001be4 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ec:	e00a      	b.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ee:	f7fc faf9 	bl	8001be4 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d901      	bls.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005600:	2303      	movs	r3, #3
 8005602:	e036      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005604:	4b1d      	ldr	r3, [pc, #116]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d0ee      	beq.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005610:	4b1a      	ldr	r3, [pc, #104]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005612:	6a1b      	ldr	r3, [r3, #32]
 8005614:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	4917      	ldr	r1, [pc, #92]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800561e:	4313      	orrs	r3, r2
 8005620:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005622:	7dfb      	ldrb	r3, [r7, #23]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d105      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005628:	4b14      	ldr	r3, [pc, #80]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	4a13      	ldr	r2, [pc, #76]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800562e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005632:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005640:	4b0e      	ldr	r3, [pc, #56]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	490b      	ldr	r1, [pc, #44]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800564e:	4313      	orrs	r3, r2
 8005650:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f003 0310 	and.w	r3, r3, #16
 800565a:	2b00      	cmp	r3, #0
 800565c:	d008      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800565e:	4b07      	ldr	r3, [pc, #28]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	4904      	ldr	r1, [pc, #16]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800566c:	4313      	orrs	r3, r2
 800566e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3718      	adds	r7, #24
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	40021000 	.word	0x40021000
 8005680:	40007000 	.word	0x40007000
 8005684:	42420440 	.word	0x42420440

08005688 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e076      	b.n	8005788 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d108      	bne.n	80056b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056aa:	d009      	beq.n	80056c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	61da      	str	r2, [r3, #28]
 80056b2:	e005      	b.n	80056c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d106      	bne.n	80056e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f7fc f880 	bl	80017e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005708:	431a      	orrs	r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	695b      	ldr	r3, [r3, #20]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005730:	431a      	orrs	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005744:	ea42 0103 	orr.w	r1, r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	0c1a      	lsrs	r2, r3, #16
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f002 0204 	and.w	r2, r2, #4
 8005766:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69da      	ldr	r2, [r3, #28]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005776:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3708      	adds	r7, #8
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	4638      	mov	r0, r7
 800579a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bc80      	pop	{r7}
 80057a8:	4770      	bx	lr

080057aa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057ba:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80057be:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bc80      	pop	{r7}
 80057d4:	4770      	bx	lr

080057d6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b085      	sub	sp, #20
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057de:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80057e2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	43db      	mvns	r3, r3
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	4013      	ands	r3, r2
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr

0800580a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	460b      	mov	r3, r1
 8005814:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	bc80      	pop	{r7}
 8005820:	4770      	bx	lr

08005822 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005822:	b480      	push	{r7}
 8005824:	b085      	sub	sp, #20
 8005826:	af00      	add	r7, sp, #0
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	4638      	mov	r0, r7
 800582c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2200      	movs	r2, #0
 8005844:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr

0800585c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800585c:	b480      	push	{r7}
 800585e:	b09d      	sub	sp, #116	@ 0x74
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005866:	2300      	movs	r3, #0
 8005868:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	881b      	ldrh	r3, [r3, #0]
 8005878:	b29b      	uxth	r3, r3
 800587a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800587e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005882:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	78db      	ldrb	r3, [r3, #3]
 800588a:	2b03      	cmp	r3, #3
 800588c:	d81f      	bhi.n	80058ce <USB_ActivateEndpoint+0x72>
 800588e:	a201      	add	r2, pc, #4	@ (adr r2, 8005894 <USB_ActivateEndpoint+0x38>)
 8005890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005894:	080058a5 	.word	0x080058a5
 8005898:	080058c1 	.word	0x080058c1
 800589c:	080058d7 	.word	0x080058d7
 80058a0:	080058b3 	.word	0x080058b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80058a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80058a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80058b0:	e012      	b.n	80058d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80058b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80058b6:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80058ba:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80058be:	e00b      	b.n	80058d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80058c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80058c4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80058cc:	e004      	b.n	80058d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80058d4:	e000      	b.n	80058d8 <USB_ActivateEndpoint+0x7c>
      break;
 80058d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	441a      	add	r2, r3
 80058e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80058e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80058ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80058f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4413      	add	r3, r2
 8005904:	881b      	ldrh	r3, [r3, #0]
 8005906:	b29b      	uxth	r3, r3
 8005908:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800590c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005910:	b29b      	uxth	r3, r3
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	7812      	ldrb	r2, [r2, #0]
 8005916:	4313      	orrs	r3, r2
 8005918:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800591c:	687a      	ldr	r2, [r7, #4]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	441a      	add	r2, r3
 8005926:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800592a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800592e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005932:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800593a:	b29b      	uxth	r3, r3
 800593c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	7b1b      	ldrb	r3, [r3, #12]
 8005942:	2b00      	cmp	r3, #0
 8005944:	f040 8178 	bne.w	8005c38 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 8084 	beq.w	8005a5a <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	61bb      	str	r3, [r7, #24]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800595c:	b29b      	uxth	r3, r3
 800595e:	461a      	mov	r2, r3
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	4413      	add	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	011a      	lsls	r2, r3, #4
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	88db      	ldrh	r3, [r3, #6]
 800597a:	085b      	lsrs	r3, r3, #1
 800597c:	b29b      	uxth	r3, r3
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	881b      	ldrh	r3, [r3, #0]
 8005992:	827b      	strh	r3, [r7, #18]
 8005994:	8a7b      	ldrh	r3, [r7, #18]
 8005996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01b      	beq.n	80059d6 <USB_ActivateEndpoint+0x17a>
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059b4:	823b      	strh	r3, [r7, #16]
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	441a      	add	r2, r3
 80059c0:	8a3b      	ldrh	r3, [r7, #16]
 80059c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	78db      	ldrb	r3, [r3, #3]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d020      	beq.n	8005a20 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059f4:	81bb      	strh	r3, [r7, #12]
 80059f6:	89bb      	ldrh	r3, [r7, #12]
 80059f8:	f083 0320 	eor.w	r3, r3, #32
 80059fc:	81bb      	strh	r3, [r7, #12]
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	441a      	add	r2, r3
 8005a08:	89bb      	ldrh	r3, [r7, #12]
 8005a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	8013      	strh	r3, [r2, #0]
 8005a1e:	e2d5      	b.n	8005fcc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a36:	81fb      	strh	r3, [r7, #14]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	441a      	add	r2, r3
 8005a42:	89fb      	ldrh	r3, [r7, #14]
 8005a44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	8013      	strh	r3, [r2, #0]
 8005a58:	e2b8      	b.n	8005fcc <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	461a      	mov	r2, r3
 8005a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6a:	4413      	add	r3, r2
 8005a6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	011a      	lsls	r2, r3, #4
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	88db      	ldrh	r3, [r3, #6]
 8005a82:	085b      	lsrs	r3, r3, #1
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	005b      	lsls	r3, r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a8c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9e:	4413      	add	r3, r2
 8005aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	011a      	lsls	r2, r3, #4
 8005aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aaa:	4413      	add	r3, r2
 8005aac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005abc:	b29a      	uxth	r2, r3
 8005abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac0:	801a      	strh	r2, [r3, #0]
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ac8:	d91d      	bls.n	8005b06 <USB_ActivateEndpoint+0x2aa>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d102      	bne.n	8005ae4 <USB_ActivateEndpoint+0x288>
 8005ade:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae6:	881b      	ldrh	r3, [r3, #0]
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	029b      	lsls	r3, r3, #10
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	4313      	orrs	r3, r2
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b02:	801a      	strh	r2, [r3, #0]
 8005b04:	e026      	b.n	8005b54 <USB_ActivateEndpoint+0x2f8>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <USB_ActivateEndpoint+0x2c8>
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1c:	b29a      	uxth	r2, r3
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	801a      	strh	r2, [r3, #0]
 8005b22:	e017      	b.n	8005b54 <USB_ActivateEndpoint+0x2f8>
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	085b      	lsrs	r3, r3, #1
 8005b2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f003 0301 	and.w	r3, r3, #1
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <USB_ActivateEndpoint+0x2e2>
 8005b38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	029b      	lsls	r3, r3, #10
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b52:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005b62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d01b      	beq.n	8005ba4 <USB_ActivateEndpoint+0x348>
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b82:	843b      	strh	r3, [r7, #32]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	441a      	add	r2, r3
 8005b8e:	8c3b      	ldrh	r3, [r7, #32]
 8005b90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d124      	bne.n	8005bf6 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bc2:	83bb      	strh	r3, [r7, #28]
 8005bc4:	8bbb      	ldrh	r3, [r7, #28]
 8005bc6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005bca:	83bb      	strh	r3, [r7, #28]
 8005bcc:	8bbb      	ldrh	r3, [r7, #28]
 8005bce:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005bd2:	83bb      	strh	r3, [r7, #28]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	441a      	add	r2, r3
 8005bde:	8bbb      	ldrh	r3, [r7, #28]
 8005be0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005be4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005be8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	8013      	strh	r3, [r2, #0]
 8005bf4:	e1ea      	b.n	8005fcc <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0c:	83fb      	strh	r3, [r7, #30]
 8005c0e:	8bfb      	ldrh	r3, [r7, #30]
 8005c10:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005c14:	83fb      	strh	r3, [r7, #30]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	441a      	add	r2, r3
 8005c20:	8bfb      	ldrh	r3, [r7, #30]
 8005c22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	8013      	strh	r3, [r2, #0]
 8005c36:	e1c9      	b.n	8005fcc <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	78db      	ldrb	r3, [r3, #3]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d11e      	bne.n	8005c7e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	881b      	ldrh	r3, [r3, #0]
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c56:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	441a      	add	r2, r3
 8005c64:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005c68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c70:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005c74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	8013      	strh	r3, [r2, #0]
 8005c7c:	e01d      	b.n	8005cba <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	4413      	add	r3, r2
 8005c88:	881b      	ldrh	r3, [r3, #0]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005c90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c94:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	441a      	add	r2, r3
 8005ca2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005ca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005caa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cca:	4413      	add	r3, r2
 8005ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	011a      	lsls	r2, r3, #4
 8005cd4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	891b      	ldrh	r3, [r3, #8]
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	005b      	lsls	r3, r3, #1
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005cec:	801a      	strh	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cfe:	4413      	add	r3, r2
 8005d00:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	011a      	lsls	r2, r3, #4
 8005d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005d10:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	895b      	ldrh	r3, [r3, #10]
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d20:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	785b      	ldrb	r3, [r3, #1]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f040 8093 	bne.w	8005e52 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005d3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d01b      	beq.n	8005d80 <USB_ActivateEndpoint+0x524>
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d5e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	441a      	add	r2, r3
 8005d6a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005d6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d74:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4413      	add	r3, r2
 8005d8a:	881b      	ldrh	r3, [r3, #0]
 8005d8c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005d8e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d01b      	beq.n	8005dd0 <USB_ActivateEndpoint+0x574>
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	4413      	add	r3, r2
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dae:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	441a      	add	r2, r3
 8005dba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005dbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dc8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	4413      	add	r3, r2
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005de2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005de8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005dea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005dee:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005df0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005df2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005df6:	873b      	strh	r3, [r7, #56]	@ 0x38
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	441a      	add	r2, r3
 8005e02:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8005e04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e2e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	441a      	add	r2, r3
 8005e3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005e3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	8013      	strh	r3, [r2, #0]
 8005e50:	e0bc      	b.n	8005fcc <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	881b      	ldrh	r3, [r3, #0]
 8005e5e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005e62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d01d      	beq.n	8005eaa <USB_ActivateEndpoint+0x64e>
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e84:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	781b      	ldrb	r3, [r3, #0]
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	441a      	add	r2, r3
 8005e92:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005e96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8005eba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01d      	beq.n	8005f02 <USB_ActivateEndpoint+0x6a6>
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005edc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	441a      	add	r2, r3
 8005eea:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8005eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005efa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	78db      	ldrb	r3, [r3, #3]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d024      	beq.n	8005f54 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	881b      	ldrh	r3, [r3, #0]
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f20:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005f24:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005f28:	f083 0320 	eor.w	r3, r3, #32
 8005f2c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	441a      	add	r2, r3
 8005f3a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8005f3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	8013      	strh	r3, [r2, #0]
 8005f52:	e01d      	b.n	8005f90 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	881b      	ldrh	r3, [r3, #0]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f6a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	441a      	add	r2, r3
 8005f78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8005f7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	441a      	add	r2, r3
 8005fb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005fb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005fc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8005fcc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3774      	adds	r7, #116	@ 0x74
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bc80      	pop	{r7}
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop

08005fdc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b08d      	sub	sp, #52	@ 0x34
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	7b1b      	ldrb	r3, [r3, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f040 808e 	bne.w	800610c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	785b      	ldrb	r3, [r3, #1]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d044      	beq.n	8006082 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	781b      	ldrb	r3, [r3, #0]
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	881b      	ldrh	r3, [r3, #0]
 8006004:	81bb      	strh	r3, [r7, #12]
 8006006:	89bb      	ldrh	r3, [r7, #12]
 8006008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800600c:	2b00      	cmp	r3, #0
 800600e:	d01b      	beq.n	8006048 <USB_DeactivateEndpoint+0x6c>
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	4413      	add	r3, r2
 800601a:	881b      	ldrh	r3, [r3, #0]
 800601c:	b29b      	uxth	r3, r3
 800601e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006026:	817b      	strh	r3, [r7, #10]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	441a      	add	r2, r3
 8006032:	897b      	ldrh	r3, [r7, #10]
 8006034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800603c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006040:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006044:	b29b      	uxth	r3, r3
 8006046:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	881b      	ldrh	r3, [r3, #0]
 8006054:	b29b      	uxth	r3, r3
 8006056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800605a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800605e:	813b      	strh	r3, [r7, #8]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	441a      	add	r2, r3
 800606a:	893b      	ldrh	r3, [r7, #8]
 800606c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006070:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800607c:	b29b      	uxth	r3, r3
 800607e:	8013      	strh	r3, [r2, #0]
 8006080:	e192      	b.n	80063a8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	827b      	strh	r3, [r7, #18]
 8006090:	8a7b      	ldrh	r3, [r7, #18]
 8006092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01b      	beq.n	80060d2 <USB_DeactivateEndpoint+0xf6>
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060b0:	823b      	strh	r3, [r7, #16]
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	441a      	add	r2, r3
 80060bc:	8a3b      	ldrh	r3, [r7, #16]
 80060be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	781b      	ldrb	r3, [r3, #0]
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4413      	add	r3, r2
 80060dc:	881b      	ldrh	r3, [r3, #0]
 80060de:	b29b      	uxth	r3, r3
 80060e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e8:	81fb      	strh	r3, [r7, #14]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	441a      	add	r2, r3
 80060f4:	89fb      	ldrh	r3, [r7, #14]
 80060f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006106:	b29b      	uxth	r3, r3
 8006108:	8013      	strh	r3, [r2, #0]
 800610a:	e14d      	b.n	80063a8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	785b      	ldrb	r3, [r3, #1]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f040 80a5 	bne.w	8006260 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	843b      	strh	r3, [r7, #32]
 8006124:	8c3b      	ldrh	r3, [r7, #32]
 8006126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d01b      	beq.n	8006166 <USB_DeactivateEndpoint+0x18a>
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4413      	add	r3, r2
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	b29b      	uxth	r3, r3
 800613c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006140:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006144:	83fb      	strh	r3, [r7, #30]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	441a      	add	r2, r3
 8006150:	8bfb      	ldrh	r3, [r7, #30]
 8006152:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006156:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800615a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800615e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006162:	b29b      	uxth	r3, r3
 8006164:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	83bb      	strh	r3, [r7, #28]
 8006174:	8bbb      	ldrh	r3, [r7, #28]
 8006176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	d01b      	beq.n	80061b6 <USB_DeactivateEndpoint+0x1da>
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006190:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006194:	837b      	strh	r3, [r7, #26]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	441a      	add	r2, r3
 80061a0:	8b7b      	ldrh	r3, [r7, #26]
 80061a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	4413      	add	r3, r2
 80061c0:	881b      	ldrh	r3, [r3, #0]
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061cc:	833b      	strh	r3, [r7, #24]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	441a      	add	r2, r3
 80061d8:	8b3b      	ldrh	r3, [r7, #24]
 80061da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006204:	82fb      	strh	r3, [r7, #22]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	441a      	add	r2, r3
 8006210:	8afb      	ldrh	r3, [r7, #22]
 8006212:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006216:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800621a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800621e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006222:	b29b      	uxth	r3, r3
 8006224:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	881b      	ldrh	r3, [r3, #0]
 8006232:	b29b      	uxth	r3, r3
 8006234:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006238:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800623c:	82bb      	strh	r3, [r7, #20]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	441a      	add	r2, r3
 8006248:	8abb      	ldrh	r3, [r7, #20]
 800624a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800624e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006252:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800625a:	b29b      	uxth	r3, r3
 800625c:	8013      	strh	r3, [r2, #0]
 800625e:	e0a3      	b.n	80063a8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800626e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d01b      	beq.n	80062b0 <USB_DeactivateEndpoint+0x2d4>
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	b29b      	uxth	r3, r3
 8006286:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800628a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800628e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	441a      	add	r2, r3
 800629a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800629c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80062be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80062c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d01b      	beq.n	8006300 <USB_DeactivateEndpoint+0x324>
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	881b      	ldrh	r3, [r3, #0]
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062de:	853b      	strh	r3, [r7, #40]	@ 0x28
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	441a      	add	r2, r3
 80062ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80062ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29b      	uxth	r3, r3
 800630e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006312:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006316:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	009b      	lsls	r3, r3, #2
 8006320:	441a      	add	r2, r3
 8006322:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800632c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006334:	b29b      	uxth	r3, r3
 8006336:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	4413      	add	r3, r2
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	b29b      	uxth	r3, r3
 8006346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800634a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800634e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	441a      	add	r2, r3
 800635a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800635c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800636c:	b29b      	uxth	r3, r3
 800636e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006386:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	441a      	add	r2, r3
 8006392:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006394:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006398:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800639c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3734      	adds	r7, #52	@ 0x34
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bc80      	pop	{r7}
 80063b2:	4770      	bx	lr

080063b4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b0c2      	sub	sp, #264	@ 0x108
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80063c2:	6018      	str	r0, [r3, #0]
 80063c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063cc:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80063ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	785b      	ldrb	r3, [r3, #1]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	f040 86b7 	bne.w	800714e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80063e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699a      	ldr	r2, [r3, #24]
 80063ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80063f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d908      	bls.n	800640e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80063fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800640c:	e007      	b.n	800641e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800640e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800641e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	7b1b      	ldrb	r3, [r3, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d13a      	bne.n	80064a4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800642e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6959      	ldr	r1, [r3, #20]
 800643a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800643e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	88da      	ldrh	r2, [r3, #6]
 8006446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800644a:	b29b      	uxth	r3, r3
 800644c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006450:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006454:	6800      	ldr	r0, [r0, #0]
 8006456:	f001 fc9c 	bl	8007d92 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800645a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800645e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800646a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006474:	b29b      	uxth	r3, r3
 8006476:	461a      	mov	r2, r3
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	4413      	add	r3, r2
 800647c:	613b      	str	r3, [r7, #16]
 800647e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	011a      	lsls	r2, r3, #4
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	4413      	add	r3, r2
 8006490:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649a:	b29a      	uxth	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	801a      	strh	r2, [r3, #0]
 80064a0:	f000 be1f 	b.w	80070e2 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80064a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	78db      	ldrb	r3, [r3, #3]
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	f040 8462 	bne.w	8006d7a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80064b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	6a1a      	ldr	r2, [r3, #32]
 80064c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	f240 83df 	bls.w	8006c92 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80064d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80064e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	881b      	ldrh	r3, [r3, #0]
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064fa:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80064fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006502:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800650c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	441a      	add	r2, r3
 8006518:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800651c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006520:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006524:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006528:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800652c:	b29b      	uxth	r3, r3
 800652e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6a1a      	ldr	r2, [r3, #32]
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006540:	1ad2      	subs	r2, r2, r3
 8006542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006546:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800654e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006552:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800655c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	881b      	ldrh	r3, [r3, #0]
 800656a:	b29b      	uxth	r3, r3
 800656c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	f000 81c7 	beq.w	8006904 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800657a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	633b      	str	r3, [r7, #48]	@ 0x30
 8006582:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006586:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	785b      	ldrb	r3, [r3, #1]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d177      	bne.n	8006682 <USB_EPStartXfer+0x2ce>
 8006592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006596:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800659e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	461a      	mov	r2, r3
 80065b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b2:	4413      	add	r3, r2
 80065b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	011a      	lsls	r2, r3, #4
 80065c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c6:	4413      	add	r3, r2
 80065c8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80065cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065d8:	b29a      	uxth	r2, r3
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	801a      	strh	r2, [r3, #0]
 80065de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065e2:	2b3e      	cmp	r3, #62	@ 0x3e
 80065e4:	d921      	bls.n	800662a <USB_EPStartXfer+0x276>
 80065e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ea:	095b      	lsrs	r3, r3, #5
 80065ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f4:	f003 031f 	and.w	r3, r3, #31
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <USB_EPStartXfer+0x252>
 80065fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006600:	3b01      	subs	r3, #1
 8006602:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29a      	uxth	r2, r3
 800660c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006610:	b29b      	uxth	r3, r3
 8006612:	029b      	lsls	r3, r3, #10
 8006614:	b29b      	uxth	r3, r3
 8006616:	4313      	orrs	r3, r2
 8006618:	b29b      	uxth	r3, r3
 800661a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800661e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006622:	b29a      	uxth	r2, r3
 8006624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006626:	801a      	strh	r2, [r3, #0]
 8006628:	e050      	b.n	80066cc <USB_EPStartXfer+0x318>
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10a      	bne.n	8006648 <USB_EPStartXfer+0x294>
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800663c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006640:	b29a      	uxth	r2, r3
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	801a      	strh	r2, [r3, #0]
 8006646:	e041      	b.n	80066cc <USB_EPStartXfer+0x318>
 8006648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800664c:	085b      	lsrs	r3, r3, #1
 800664e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006652:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006656:	f003 0301 	and.w	r3, r3, #1
 800665a:	2b00      	cmp	r3, #0
 800665c:	d004      	beq.n	8006668 <USB_EPStartXfer+0x2b4>
 800665e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006662:	3301      	adds	r3, #1
 8006664:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666a:	881b      	ldrh	r3, [r3, #0]
 800666c:	b29a      	uxth	r2, r3
 800666e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006672:	b29b      	uxth	r3, r3
 8006674:	029b      	lsls	r3, r3, #10
 8006676:	b29b      	uxth	r3, r3
 8006678:	4313      	orrs	r3, r2
 800667a:	b29a      	uxth	r2, r3
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	801a      	strh	r2, [r3, #0]
 8006680:	e024      	b.n	80066cc <USB_EPStartXfer+0x318>
 8006682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d11c      	bne.n	80066cc <USB_EPStartXfer+0x318>
 8006692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006696:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a6:	4413      	add	r3, r2
 80066a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	011a      	lsls	r2, r3, #4
 80066b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ba:	4413      	add	r3, r2
 80066bc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80066c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80066cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	895b      	ldrh	r3, [r3, #10]
 80066d8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80066dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6959      	ldr	r1, [r3, #20]
 80066e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80066f2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066f6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066fa:	6800      	ldr	r0, [r0, #0]
 80066fc:	f001 fb49 	bl	8007d92 <USB_WritePMA>
            ep->xfer_buff += len;
 8006700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695a      	ldr	r2, [r3, #20]
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006710:	441a      	add	r2, r3
 8006712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800671e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	6a1a      	ldr	r2, [r3, #32]
 800672a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800672e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	691b      	ldr	r3, [r3, #16]
 8006736:	429a      	cmp	r2, r3
 8006738:	d90f      	bls.n	800675a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800673a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6a1a      	ldr	r2, [r3, #32]
 8006746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800674a:	1ad2      	subs	r2, r2, r3
 800674c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	621a      	str	r2, [r3, #32]
 8006758:	e00e      	b.n	8006778 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800675a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6a1b      	ldr	r3, [r3, #32]
 8006766:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800676a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800676e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2200      	movs	r2, #0
 8006776:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	785b      	ldrb	r3, [r3, #1]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d177      	bne.n	8006878 <USB_EPStartXfer+0x4c4>
 8006788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	61bb      	str	r3, [r7, #24]
 8006794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006798:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	461a      	mov	r2, r3
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	4413      	add	r3, r2
 80067aa:	61bb      	str	r3, [r7, #24]
 80067ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	011a      	lsls	r2, r3, #4
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	4413      	add	r3, r2
 80067be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80067c2:	617b      	str	r3, [r7, #20]
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	881b      	ldrh	r3, [r3, #0]
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	801a      	strh	r2, [r3, #0]
 80067d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80067da:	d921      	bls.n	8006820 <USB_EPStartXfer+0x46c>
 80067dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e0:	095b      	lsrs	r3, r3, #5
 80067e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80067e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ea:	f003 031f 	and.w	r3, r3, #31
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d104      	bne.n	80067fc <USB_EPStartXfer+0x448>
 80067f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067f6:	3b01      	subs	r3, #1
 80067f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29a      	uxth	r2, r3
 8006802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006806:	b29b      	uxth	r3, r3
 8006808:	029b      	lsls	r3, r3, #10
 800680a:	b29b      	uxth	r3, r3
 800680c:	4313      	orrs	r3, r2
 800680e:	b29b      	uxth	r3, r3
 8006810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006818:	b29a      	uxth	r2, r3
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	801a      	strh	r2, [r3, #0]
 800681e:	e056      	b.n	80068ce <USB_EPStartXfer+0x51a>
 8006820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10a      	bne.n	800683e <USB_EPStartXfer+0x48a>
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	b29b      	uxth	r3, r3
 800682e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006836:	b29a      	uxth	r2, r3
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	801a      	strh	r2, [r3, #0]
 800683c:	e047      	b.n	80068ce <USB_EPStartXfer+0x51a>
 800683e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006842:	085b      	lsrs	r3, r3, #1
 8006844:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d004      	beq.n	800685e <USB_EPStartXfer+0x4aa>
 8006854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006858:	3301      	adds	r3, #1
 800685a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	b29a      	uxth	r2, r3
 8006864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006868:	b29b      	uxth	r3, r3
 800686a:	029b      	lsls	r3, r3, #10
 800686c:	b29b      	uxth	r3, r3
 800686e:	4313      	orrs	r3, r2
 8006870:	b29a      	uxth	r2, r3
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	801a      	strh	r2, [r3, #0]
 8006876:	e02a      	b.n	80068ce <USB_EPStartXfer+0x51a>
 8006878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800687c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	785b      	ldrb	r3, [r3, #1]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d122      	bne.n	80068ce <USB_EPStartXfer+0x51a>
 8006888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800688c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	623b      	str	r3, [r7, #32]
 8006894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006898:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	4413      	add	r3, r2
 80068aa:	623b      	str	r3, [r7, #32]
 80068ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	011a      	lsls	r2, r3, #4
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	4413      	add	r3, r2
 80068be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80068c2:	61fb      	str	r3, [r7, #28]
 80068c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80068ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	891b      	ldrh	r3, [r3, #8]
 80068da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80068de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	6959      	ldr	r1, [r3, #20]
 80068ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80068f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80068f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80068fc:	6800      	ldr	r0, [r0, #0]
 80068fe:	f001 fa48 	bl	8007d92 <USB_WritePMA>
 8006902:	e3ee      	b.n	80070e2 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	785b      	ldrb	r3, [r3, #1]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d177      	bne.n	8006a04 <USB_EPStartXfer+0x650>
 8006914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006918:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006924:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800692e:	b29b      	uxth	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006934:	4413      	add	r3, r2
 8006936:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800693c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	011a      	lsls	r2, r3, #4
 8006946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006948:	4413      	add	r3, r2
 800694a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800694e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800695a:	b29a      	uxth	r2, r3
 800695c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800695e:	801a      	strh	r2, [r3, #0]
 8006960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006964:	2b3e      	cmp	r3, #62	@ 0x3e
 8006966:	d921      	bls.n	80069ac <USB_EPStartXfer+0x5f8>
 8006968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696c:	095b      	lsrs	r3, r3, #5
 800696e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	2b00      	cmp	r3, #0
 800697c:	d104      	bne.n	8006988 <USB_EPStartXfer+0x5d4>
 800697e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006982:	3b01      	subs	r3, #1
 8006984:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800698a:	881b      	ldrh	r3, [r3, #0]
 800698c:	b29a      	uxth	r2, r3
 800698e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006992:	b29b      	uxth	r3, r3
 8006994:	029b      	lsls	r3, r3, #10
 8006996:	b29b      	uxth	r3, r3
 8006998:	4313      	orrs	r3, r2
 800699a:	b29b      	uxth	r3, r3
 800699c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069a4:	b29a      	uxth	r2, r3
 80069a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069a8:	801a      	strh	r2, [r3, #0]
 80069aa:	e056      	b.n	8006a5a <USB_EPStartXfer+0x6a6>
 80069ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <USB_EPStartXfer+0x616>
 80069b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069b6:	881b      	ldrh	r3, [r3, #0]
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c2:	b29a      	uxth	r2, r3
 80069c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	e047      	b.n	8006a5a <USB_EPStartXfer+0x6a6>
 80069ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ce:	085b      	lsrs	r3, r3, #1
 80069d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80069d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d004      	beq.n	80069ea <USB_EPStartXfer+0x636>
 80069e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069e4:	3301      	adds	r3, #1
 80069e6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80069ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	029b      	lsls	r3, r3, #10
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	4313      	orrs	r3, r2
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	e02a      	b.n	8006a5a <USB_EPStartXfer+0x6a6>
 8006a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	785b      	ldrb	r3, [r3, #1]
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d122      	bne.n	8006a5a <USB_EPStartXfer+0x6a6>
 8006a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	461a      	mov	r2, r3
 8006a32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a34:	4413      	add	r3, r2
 8006a36:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	011a      	lsls	r2, r3, #4
 8006a46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a48:	4413      	add	r3, r2
 8006a4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	891b      	ldrh	r3, [r3, #8]
 8006a66:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6959      	ldr	r1, [r3, #20]
 8006a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006a80:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006a84:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006a88:	6800      	ldr	r0, [r0, #0]
 8006a8a:	f001 f982 	bl	8007d92 <USB_WritePMA>
            ep->xfer_buff += len;
 8006a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	695a      	ldr	r2, [r3, #20]
 8006a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9e:	441a      	add	r2, r3
 8006aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006aac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6a1a      	ldr	r2, [r3, #32]
 8006ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d90f      	bls.n	8006ae8 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006ac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006acc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6a1a      	ldr	r2, [r3, #32]
 8006ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ad8:	1ad2      	subs	r2, r2, r3
 8006ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	621a      	str	r2, [r3, #32]
 8006ae6:	e00e      	b.n	8006b06 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6a1b      	ldr	r3, [r3, #32]
 8006af4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	785b      	ldrb	r3, [r3, #1]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d177      	bne.n	8006c12 <USB_EPStartXfer+0x85e>
 8006b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	461a      	mov	r2, r3
 8006b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b42:	4413      	add	r3, r2
 8006b44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	011a      	lsls	r2, r3, #4
 8006b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b56:	4413      	add	r3, r2
 8006b58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b6c:	801a      	strh	r2, [r3, #0]
 8006b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b72:	2b3e      	cmp	r3, #62	@ 0x3e
 8006b74:	d921      	bls.n	8006bba <USB_EPStartXfer+0x806>
 8006b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b7a:	095b      	lsrs	r3, r3, #5
 8006b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b84:	f003 031f 	and.w	r3, r3, #31
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d104      	bne.n	8006b96 <USB_EPStartXfer+0x7e2>
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b90:	3b01      	subs	r3, #1
 8006b92:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	029b      	lsls	r3, r3, #10
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb6:	801a      	strh	r2, [r3, #0]
 8006bb8:	e050      	b.n	8006c5c <USB_EPStartXfer+0x8a8>
 8006bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <USB_EPStartXfer+0x824>
 8006bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd4:	801a      	strh	r2, [r3, #0]
 8006bd6:	e041      	b.n	8006c5c <USB_EPStartXfer+0x8a8>
 8006bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bdc:	085b      	lsrs	r3, r3, #1
 8006bde:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d004      	beq.n	8006bf8 <USB_EPStartXfer+0x844>
 8006bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfa:	881b      	ldrh	r3, [r3, #0]
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	029b      	lsls	r3, r3, #10
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c0e:	801a      	strh	r2, [r3, #0]
 8006c10:	e024      	b.n	8006c5c <USB_EPStartXfer+0x8a8>
 8006c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	785b      	ldrb	r3, [r3, #1]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d11c      	bne.n	8006c5c <USB_EPStartXfer+0x8a8>
 8006c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	461a      	mov	r2, r3
 8006c34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c36:	4413      	add	r3, r2
 8006c38:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	011a      	lsls	r2, r3, #4
 8006c48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	895b      	ldrh	r3, [r3, #10]
 8006c68:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6959      	ldr	r1, [r3, #20]
 8006c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006c82:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006c86:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006c8a:	6800      	ldr	r0, [r0, #0]
 8006c8c:	f001 f881 	bl	8007d92 <USB_WritePMA>
 8006c90:	e227      	b.n	80070e2 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	4413      	add	r3, r2
 8006cbc:	881b      	ldrh	r3, [r3, #0]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cc8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	441a      	add	r2, r3
 8006ce6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006cea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d1e:	4413      	add	r3, r2
 8006d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	011a      	lsls	r2, r3, #4
 8006d30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d32:	4413      	add	r3, r2
 8006d34:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d38:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d3e:	b29a      	uxth	r2, r3
 8006d40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	891b      	ldrh	r3, [r3, #8]
 8006d50:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	6959      	ldr	r1, [r3, #20]
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d6a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d6e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d72:	6800      	ldr	r0, [r0, #0]
 8006d74:	f001 f80d 	bl	8007d92 <USB_WritePMA>
 8006d78:	e1b3      	b.n	80070e2 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6a1a      	ldr	r2, [r3, #32]
 8006d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d8a:	1ad2      	subs	r2, r2, r3
 8006d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	881b      	ldrh	r3, [r3, #0]
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	f000 80c6 	beq.w	8006f4c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006dc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	785b      	ldrb	r3, [r3, #1]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d177      	bne.n	8006ecc <USB_EPStartXfer+0xb18>
 8006ddc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006de0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	461a      	mov	r2, r3
 8006dfa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006dfc:	4413      	add	r3, r2
 8006dfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	011a      	lsls	r2, r3, #4
 8006e0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e10:	4413      	add	r3, r2
 8006e12:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e16:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e1a:	881b      	ldrh	r3, [r3, #0]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e22:	b29a      	uxth	r2, r3
 8006e24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e26:	801a      	strh	r2, [r3, #0]
 8006e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e2e:	d921      	bls.n	8006e74 <USB_EPStartXfer+0xac0>
 8006e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e34:	095b      	lsrs	r3, r3, #5
 8006e36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3e:	f003 031f 	and.w	r3, r3, #31
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d104      	bne.n	8006e50 <USB_EPStartXfer+0xa9c>
 8006e46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	029b      	lsls	r3, r3, #10
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	4313      	orrs	r3, r2
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e6c:	b29a      	uxth	r2, r3
 8006e6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e70:	801a      	strh	r2, [r3, #0]
 8006e72:	e050      	b.n	8006f16 <USB_EPStartXfer+0xb62>
 8006e74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <USB_EPStartXfer+0xade>
 8006e7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e7e:	881b      	ldrh	r3, [r3, #0]
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e8a:	b29a      	uxth	r2, r3
 8006e8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e8e:	801a      	strh	r2, [r3, #0]
 8006e90:	e041      	b.n	8006f16 <USB_EPStartXfer+0xb62>
 8006e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e96:	085b      	lsrs	r3, r3, #1
 8006e98:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006e9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d004      	beq.n	8006eb2 <USB_EPStartXfer+0xafe>
 8006ea8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006eac:	3301      	adds	r3, #1
 8006eae:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006eb2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006eb4:	881b      	ldrh	r3, [r3, #0]
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	029b      	lsls	r3, r3, #10
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ec8:	801a      	strh	r2, [r3, #0]
 8006eca:	e024      	b.n	8006f16 <USB_EPStartXfer+0xb62>
 8006ecc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	785b      	ldrb	r3, [r3, #1]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d11c      	bne.n	8006f16 <USB_EPStartXfer+0xb62>
 8006edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	461a      	mov	r2, r3
 8006eee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006ef0:	4413      	add	r3, r2
 8006ef2:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	011a      	lsls	r2, r3, #4
 8006f02:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f04:	4413      	add	r3, r2
 8006f06:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f14:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	895b      	ldrh	r3, [r3, #10]
 8006f22:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6959      	ldr	r1, [r3, #20]
 8006f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f3c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f40:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f44:	6800      	ldr	r0, [r0, #0]
 8006f46:	f000 ff24 	bl	8007d92 <USB_WritePMA>
 8006f4a:	e0ca      	b.n	80070e2 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	785b      	ldrb	r3, [r3, #1]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d177      	bne.n	800704c <USB_EPStartXfer+0xc98>
 8006f5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	461a      	mov	r2, r3
 8006f7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f7c:	4413      	add	r3, r2
 8006f7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	011a      	lsls	r2, r3, #4
 8006f8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f90:	4413      	add	r3, r2
 8006f92:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f96:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fa2:	b29a      	uxth	r2, r3
 8006fa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fa6:	801a      	strh	r2, [r3, #0]
 8006fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fac:	2b3e      	cmp	r3, #62	@ 0x3e
 8006fae:	d921      	bls.n	8006ff4 <USB_EPStartXfer+0xc40>
 8006fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb4:	095b      	lsrs	r3, r3, #5
 8006fb6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fbe:	f003 031f 	and.w	r3, r3, #31
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <USB_EPStartXfer+0xc1c>
 8006fc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006fd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006fd2:	881b      	ldrh	r3, [r3, #0]
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	029b      	lsls	r3, r3, #10
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ff0:	801a      	strh	r2, [r3, #0]
 8006ff2:	e05c      	b.n	80070ae <USB_EPStartXfer+0xcfa>
 8006ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10a      	bne.n	8007012 <USB_EPStartXfer+0xc5e>
 8006ffc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ffe:	881b      	ldrh	r3, [r3, #0]
 8007000:	b29b      	uxth	r3, r3
 8007002:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007006:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800700a:	b29a      	uxth	r2, r3
 800700c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800700e:	801a      	strh	r2, [r3, #0]
 8007010:	e04d      	b.n	80070ae <USB_EPStartXfer+0xcfa>
 8007012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007016:	085b      	lsrs	r3, r3, #1
 8007018:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800701c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007020:	f003 0301 	and.w	r3, r3, #1
 8007024:	2b00      	cmp	r3, #0
 8007026:	d004      	beq.n	8007032 <USB_EPStartXfer+0xc7e>
 8007028:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800702c:	3301      	adds	r3, #1
 800702e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007032:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007034:	881b      	ldrh	r3, [r3, #0]
 8007036:	b29a      	uxth	r2, r3
 8007038:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800703c:	b29b      	uxth	r3, r3
 800703e:	029b      	lsls	r3, r3, #10
 8007040:	b29b      	uxth	r3, r3
 8007042:	4313      	orrs	r3, r2
 8007044:	b29a      	uxth	r2, r3
 8007046:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007048:	801a      	strh	r2, [r3, #0]
 800704a:	e030      	b.n	80070ae <USB_EPStartXfer+0xcfa>
 800704c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007050:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	785b      	ldrb	r3, [r3, #1]
 8007058:	2b01      	cmp	r3, #1
 800705a:	d128      	bne.n	80070ae <USB_EPStartXfer+0xcfa>
 800705c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007060:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800706a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007078:	b29b      	uxth	r3, r3
 800707a:	461a      	mov	r2, r3
 800707c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007080:	4413      	add	r3, r2
 8007082:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	011a      	lsls	r2, r3, #4
 8007094:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007098:	4413      	add	r3, r2
 800709a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800709e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80070ac:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80070ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	891b      	ldrh	r3, [r3, #8]
 80070ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80070be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6959      	ldr	r1, [r3, #20]
 80070ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80070d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80070d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80070dc:	6800      	ldr	r0, [r0, #0]
 80070de:	f000 fe58 	bl	8007d92 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80070e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	009b      	lsls	r3, r3, #2
 80070fa:	4413      	add	r3, r2
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	b29b      	uxth	r3, r3
 8007100:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007104:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007108:	817b      	strh	r3, [r7, #10]
 800710a:	897b      	ldrh	r3, [r7, #10]
 800710c:	f083 0310 	eor.w	r3, r3, #16
 8007110:	817b      	strh	r3, [r7, #10]
 8007112:	897b      	ldrh	r3, [r7, #10]
 8007114:	f083 0320 	eor.w	r3, r3, #32
 8007118:	817b      	strh	r3, [r7, #10]
 800711a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800711e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	441a      	add	r2, r3
 8007134:	897b      	ldrh	r3, [r7, #10]
 8007136:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800713a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800713e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007146:	b29b      	uxth	r3, r3
 8007148:	8013      	strh	r3, [r2, #0]
 800714a:	f000 bcde 	b.w	8007b0a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800714e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	7b1b      	ldrb	r3, [r3, #12]
 800715a:	2b00      	cmp	r3, #0
 800715c:	f040 80bb 	bne.w	80072d6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007164:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	699a      	ldr	r2, [r3, #24]
 800716c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	429a      	cmp	r2, r3
 800717a:	d917      	bls.n	80071ac <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800717c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800718c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	699a      	ldr	r2, [r3, #24]
 8007198:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800719c:	1ad2      	subs	r2, r2, r3
 800719e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	619a      	str	r2, [r3, #24]
 80071aa:	e00e      	b.n	80071ca <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80071ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80071bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2200      	movs	r2, #0
 80071c8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80071ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80071ee:	4413      	add	r3, r2
 80071f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	011a      	lsls	r2, r3, #4
 8007202:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007206:	4413      	add	r3, r2
 8007208:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800720c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007210:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	b29b      	uxth	r3, r3
 8007218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800721c:	b29a      	uxth	r2, r3
 800721e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007222:	801a      	strh	r2, [r3, #0]
 8007224:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007228:	2b3e      	cmp	r3, #62	@ 0x3e
 800722a:	d924      	bls.n	8007276 <USB_EPStartXfer+0xec2>
 800722c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007230:	095b      	lsrs	r3, r3, #5
 8007232:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723a:	f003 031f 	and.w	r3, r3, #31
 800723e:	2b00      	cmp	r3, #0
 8007240:	d104      	bne.n	800724c <USB_EPStartXfer+0xe98>
 8007242:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007246:	3b01      	subs	r3, #1
 8007248:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800724c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007250:	881b      	ldrh	r3, [r3, #0]
 8007252:	b29a      	uxth	r2, r3
 8007254:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007258:	b29b      	uxth	r3, r3
 800725a:	029b      	lsls	r3, r3, #10
 800725c:	b29b      	uxth	r3, r3
 800725e:	4313      	orrs	r3, r2
 8007260:	b29b      	uxth	r3, r3
 8007262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800726a:	b29a      	uxth	r2, r3
 800726c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007270:	801a      	strh	r2, [r3, #0]
 8007272:	f000 bc10 	b.w	8007a96 <USB_EPStartXfer+0x16e2>
 8007276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727a:	2b00      	cmp	r3, #0
 800727c:	d10c      	bne.n	8007298 <USB_EPStartXfer+0xee4>
 800727e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007282:	881b      	ldrh	r3, [r3, #0]
 8007284:	b29b      	uxth	r3, r3
 8007286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800728a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800728e:	b29a      	uxth	r2, r3
 8007290:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007294:	801a      	strh	r2, [r3, #0]
 8007296:	e3fe      	b.n	8007a96 <USB_EPStartXfer+0x16e2>
 8007298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800729c:	085b      	lsrs	r3, r3, #1
 800729e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d004      	beq.n	80072b8 <USB_EPStartXfer+0xf04>
 80072ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80072b2:	3301      	adds	r3, #1
 80072b4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80072b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	b29a      	uxth	r2, r3
 80072c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	029b      	lsls	r3, r3, #10
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	4313      	orrs	r3, r2
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072d2:	801a      	strh	r2, [r3, #0]
 80072d4:	e3df      	b.n	8007a96 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80072d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	78db      	ldrb	r3, [r3, #3]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	f040 8218 	bne.w	8007718 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80072e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	785b      	ldrb	r3, [r3, #1]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f040 809d 	bne.w	8007434 <USB_EPStartXfer+0x1080>
 80072fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007316:	b29b      	uxth	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800731e:	4413      	add	r3, r2
 8007320:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	011a      	lsls	r2, r3, #4
 8007332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007336:	4413      	add	r3, r2
 8007338:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800733c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007340:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	b29b      	uxth	r3, r3
 8007348:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800734c:	b29a      	uxth	r2, r3
 800734e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007352:	801a      	strh	r2, [r3, #0]
 8007354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	2b3e      	cmp	r3, #62	@ 0x3e
 8007362:	d92b      	bls.n	80073bc <USB_EPStartXfer+0x1008>
 8007364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	095b      	lsrs	r3, r3, #5
 8007372:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800737a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	f003 031f 	and.w	r3, r3, #31
 8007386:	2b00      	cmp	r3, #0
 8007388:	d104      	bne.n	8007394 <USB_EPStartXfer+0xfe0>
 800738a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800738e:	3b01      	subs	r3, #1
 8007390:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007394:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	b29a      	uxth	r2, r3
 800739c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	029b      	lsls	r3, r3, #10
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	4313      	orrs	r3, r2
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073b8:	801a      	strh	r2, [r3, #0]
 80073ba:	e070      	b.n	800749e <USB_EPStartXfer+0x10ea>
 80073bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d10c      	bne.n	80073e6 <USB_EPStartXfer+0x1032>
 80073cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073d0:	881b      	ldrh	r3, [r3, #0]
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073dc:	b29a      	uxth	r2, r3
 80073de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073e2:	801a      	strh	r2, [r3, #0]
 80073e4:	e05b      	b.n	800749e <USB_EPStartXfer+0x10ea>
 80073e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	085b      	lsrs	r3, r3, #1
 80073f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80073f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	691b      	ldr	r3, [r3, #16]
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b00      	cmp	r3, #0
 800740a:	d004      	beq.n	8007416 <USB_EPStartXfer+0x1062>
 800740c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007410:	3301      	adds	r3, #1
 8007412:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007416:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	b29a      	uxth	r2, r3
 800741e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007422:	b29b      	uxth	r3, r3
 8007424:	029b      	lsls	r3, r3, #10
 8007426:	b29b      	uxth	r3, r3
 8007428:	4313      	orrs	r3, r2
 800742a:	b29a      	uxth	r2, r3
 800742c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007430:	801a      	strh	r2, [r3, #0]
 8007432:	e034      	b.n	800749e <USB_EPStartXfer+0x10ea>
 8007434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	785b      	ldrb	r3, [r3, #1]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d12c      	bne.n	800749e <USB_EPStartXfer+0x10ea>
 8007444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007448:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007456:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007460:	b29b      	uxth	r3, r3
 8007462:	461a      	mov	r2, r3
 8007464:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007468:	4413      	add	r3, r2
 800746a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800746e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	011a      	lsls	r2, r3, #4
 800747c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007480:	4413      	add	r3, r2
 8007482:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007486:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800748a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	b29a      	uxth	r2, r3
 8007498:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800749c:	801a      	strh	r2, [r3, #0]
 800749e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80074ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	785b      	ldrb	r3, [r3, #1]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	f040 809d 	bne.w	80075f8 <USB_EPStartXfer+0x1244>
 80074be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074da:	b29b      	uxth	r3, r3
 80074dc:	461a      	mov	r2, r3
 80074de:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074e2:	4413      	add	r3, r2
 80074e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80074e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	011a      	lsls	r2, r3, #4
 80074f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074fa:	4413      	add	r3, r2
 80074fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007500:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007504:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007508:	881b      	ldrh	r3, [r3, #0]
 800750a:	b29b      	uxth	r3, r3
 800750c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007510:	b29a      	uxth	r2, r3
 8007512:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007516:	801a      	strh	r2, [r3, #0]
 8007518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	2b3e      	cmp	r3, #62	@ 0x3e
 8007526:	d92b      	bls.n	8007580 <USB_EPStartXfer+0x11cc>
 8007528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	095b      	lsrs	r3, r3, #5
 8007536:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800753a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	f003 031f 	and.w	r3, r3, #31
 800754a:	2b00      	cmp	r3, #0
 800754c:	d104      	bne.n	8007558 <USB_EPStartXfer+0x11a4>
 800754e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007552:	3b01      	subs	r3, #1
 8007554:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007558:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	b29a      	uxth	r2, r3
 8007560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007564:	b29b      	uxth	r3, r3
 8007566:	029b      	lsls	r3, r3, #10
 8007568:	b29b      	uxth	r3, r3
 800756a:	4313      	orrs	r3, r2
 800756c:	b29b      	uxth	r3, r3
 800756e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007576:	b29a      	uxth	r2, r3
 8007578:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800757c:	801a      	strh	r2, [r3, #0]
 800757e:	e069      	b.n	8007654 <USB_EPStartXfer+0x12a0>
 8007580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10c      	bne.n	80075aa <USB_EPStartXfer+0x11f6>
 8007590:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	b29b      	uxth	r3, r3
 8007598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800759c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075a6:	801a      	strh	r2, [r3, #0]
 80075a8:	e054      	b.n	8007654 <USB_EPStartXfer+0x12a0>
 80075aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	085b      	lsrs	r3, r3, #1
 80075b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80075bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d004      	beq.n	80075da <USB_EPStartXfer+0x1226>
 80075d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075d4:	3301      	adds	r3, #1
 80075d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80075da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	029b      	lsls	r3, r3, #10
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	4313      	orrs	r3, r2
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075f4:	801a      	strh	r2, [r3, #0]
 80075f6:	e02d      	b.n	8007654 <USB_EPStartXfer+0x12a0>
 80075f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	785b      	ldrb	r3, [r3, #1]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d125      	bne.n	8007654 <USB_EPStartXfer+0x12a0>
 8007608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800760c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007616:	b29b      	uxth	r3, r3
 8007618:	461a      	mov	r2, r3
 800761a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800761e:	4413      	add	r3, r2
 8007620:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	011a      	lsls	r2, r3, #4
 8007632:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007636:	4413      	add	r3, r2
 8007638:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800763c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	b29a      	uxth	r2, r3
 800764e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007652:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 8218 	beq.w	8007a96 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4413      	add	r3, r2
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8007686:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800768a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800768e:	2b00      	cmp	r3, #0
 8007690:	d005      	beq.n	800769e <USB_EPStartXfer+0x12ea>
 8007692:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10d      	bne.n	80076ba <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800769e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80076a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f040 81f5 	bne.w	8007a96 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80076ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80076b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f040 81ee 	bne.w	8007a96 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80076ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	4413      	add	r3, r2
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076e0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80076e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	009b      	lsls	r3, r3, #2
 80076fc:	441a      	add	r2, r3
 80076fe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007702:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007706:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800770a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800770e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007712:	b29b      	uxth	r3, r3
 8007714:	8013      	strh	r3, [r2, #0]
 8007716:	e1be      	b.n	8007a96 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	78db      	ldrb	r3, [r3, #3]
 8007724:	2b01      	cmp	r3, #1
 8007726:	f040 81b4 	bne.w	8007a92 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800772a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800772e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	699a      	ldr	r2, [r3, #24]
 8007736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	429a      	cmp	r2, r3
 8007744:	d917      	bls.n	8007776 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8007746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800775a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	699a      	ldr	r2, [r3, #24]
 8007762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007766:	1ad2      	subs	r2, r2, r3
 8007768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	619a      	str	r2, [r3, #24]
 8007774:	e00e      	b.n	8007794 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8007776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800777a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	699b      	ldr	r3, [r3, #24]
 8007782:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2200      	movs	r2, #0
 8007792:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	785b      	ldrb	r3, [r3, #1]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f040 8085 	bne.w	80078b0 <USB_EPStartXfer+0x14fc>
 80077a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80077b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	461a      	mov	r2, r3
 80077c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077ca:	4413      	add	r3, r2
 80077cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80077d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	011a      	lsls	r2, r3, #4
 80077de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80077e2:	4413      	add	r3, r2
 80077e4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80077fe:	801a      	strh	r2, [r3, #0]
 8007800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007804:	2b3e      	cmp	r3, #62	@ 0x3e
 8007806:	d923      	bls.n	8007850 <USB_EPStartXfer+0x149c>
 8007808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780c:	095b      	lsrs	r3, r3, #5
 800780e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007816:	f003 031f 	and.w	r3, r3, #31
 800781a:	2b00      	cmp	r3, #0
 800781c:	d104      	bne.n	8007828 <USB_EPStartXfer+0x1474>
 800781e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007822:	3b01      	subs	r3, #1
 8007824:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007828:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	b29a      	uxth	r2, r3
 8007830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007834:	b29b      	uxth	r3, r3
 8007836:	029b      	lsls	r3, r3, #10
 8007838:	b29b      	uxth	r3, r3
 800783a:	4313      	orrs	r3, r2
 800783c:	b29b      	uxth	r3, r3
 800783e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007846:	b29a      	uxth	r2, r3
 8007848:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800784c:	801a      	strh	r2, [r3, #0]
 800784e:	e060      	b.n	8007912 <USB_EPStartXfer+0x155e>
 8007850:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007854:	2b00      	cmp	r3, #0
 8007856:	d10c      	bne.n	8007872 <USB_EPStartXfer+0x14be>
 8007858:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	b29b      	uxth	r3, r3
 8007860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007868:	b29a      	uxth	r2, r3
 800786a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800786e:	801a      	strh	r2, [r3, #0]
 8007870:	e04f      	b.n	8007912 <USB_EPStartXfer+0x155e>
 8007872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007876:	085b      	lsrs	r3, r3, #1
 8007878:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800787c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	d004      	beq.n	8007892 <USB_EPStartXfer+0x14de>
 8007888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800788c:	3301      	adds	r3, #1
 800788e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007892:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	b29a      	uxth	r2, r3
 800789a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800789e:	b29b      	uxth	r3, r3
 80078a0:	029b      	lsls	r3, r3, #10
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	4313      	orrs	r3, r2
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80078ac:	801a      	strh	r2, [r3, #0]
 80078ae:	e030      	b.n	8007912 <USB_EPStartXfer+0x155e>
 80078b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	785b      	ldrb	r3, [r3, #1]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d128      	bne.n	8007912 <USB_EPStartXfer+0x155e>
 80078c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80078ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078dc:	b29b      	uxth	r3, r3
 80078de:	461a      	mov	r2, r3
 80078e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078e4:	4413      	add	r3, r2
 80078e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80078ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	011a      	lsls	r2, r3, #4
 80078f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078fc:	4413      	add	r3, r2
 80078fe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007902:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007906:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790a:	b29a      	uxth	r2, r3
 800790c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007910:	801a      	strh	r2, [r3, #0]
 8007912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007916:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	785b      	ldrb	r3, [r3, #1]
 800792c:	2b00      	cmp	r3, #0
 800792e:	f040 8085 	bne.w	8007a3c <USB_EPStartXfer+0x1688>
 8007932:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007936:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007944:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800794e:	b29b      	uxth	r3, r3
 8007950:	461a      	mov	r2, r3
 8007952:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007956:	4413      	add	r3, r2
 8007958:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800795c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	011a      	lsls	r2, r3, #4
 800796a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800796e:	4413      	add	r3, r2
 8007970:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007974:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007978:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800797c:	881b      	ldrh	r3, [r3, #0]
 800797e:	b29b      	uxth	r3, r3
 8007980:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007984:	b29a      	uxth	r2, r3
 8007986:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800798a:	801a      	strh	r2, [r3, #0]
 800798c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007990:	2b3e      	cmp	r3, #62	@ 0x3e
 8007992:	d923      	bls.n	80079dc <USB_EPStartXfer+0x1628>
 8007994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007998:	095b      	lsrs	r3, r3, #5
 800799a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800799e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a2:	f003 031f 	and.w	r3, r3, #31
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d104      	bne.n	80079b4 <USB_EPStartXfer+0x1600>
 80079aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079ae:	3b01      	subs	r3, #1
 80079b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80079b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b29a      	uxth	r2, r3
 80079bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	029b      	lsls	r3, r3, #10
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	4313      	orrs	r3, r2
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079d8:	801a      	strh	r2, [r3, #0]
 80079da:	e05c      	b.n	8007a96 <USB_EPStartXfer+0x16e2>
 80079dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10c      	bne.n	80079fe <USB_EPStartXfer+0x164a>
 80079e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079fa:	801a      	strh	r2, [r3, #0]
 80079fc:	e04b      	b.n	8007a96 <USB_EPStartXfer+0x16e2>
 80079fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0c:	f003 0301 	and.w	r3, r3, #1
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d004      	beq.n	8007a1e <USB_EPStartXfer+0x166a>
 8007a14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a18:	3301      	adds	r3, #1
 8007a1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007a1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	029b      	lsls	r3, r3, #10
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	4313      	orrs	r3, r2
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a38:	801a      	strh	r2, [r3, #0]
 8007a3a:	e02c      	b.n	8007a96 <USB_EPStartXfer+0x16e2>
 8007a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	785b      	ldrb	r3, [r3, #1]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d124      	bne.n	8007a96 <USB_EPStartXfer+0x16e2>
 8007a4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a62:	4413      	add	r3, r2
 8007a64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007a68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	781b      	ldrb	r3, [r3, #0]
 8007a74:	011a      	lsls	r2, r3, #4
 8007a76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007a80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007a8e:	801a      	strh	r2, [r3, #0]
 8007a90:	e001      	b.n	8007a96 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e03a      	b.n	8007b0c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007a96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ab8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007abc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007ac0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ac4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007ac8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007acc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007ad0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ad4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007ad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007adc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	441a      	add	r2, r3
 8007af2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007af6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007afa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007afe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b085      	sub	sp, #20
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	785b      	ldrb	r3, [r3, #1]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d020      	beq.n	8007b6a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b28:	687a      	ldr	r2, [r7, #4]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	4413      	add	r3, r2
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b3e:	81bb      	strh	r3, [r7, #12]
 8007b40:	89bb      	ldrh	r3, [r7, #12]
 8007b42:	f083 0310 	eor.w	r3, r3, #16
 8007b46:	81bb      	strh	r3, [r7, #12]
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	441a      	add	r2, r3
 8007b52:	89bb      	ldrh	r3, [r7, #12]
 8007b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	8013      	strh	r3, [r2, #0]
 8007b68:	e01f      	b.n	8007baa <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	781b      	ldrb	r3, [r3, #0]
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	881b      	ldrh	r3, [r3, #0]
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b80:	81fb      	strh	r3, [r7, #14]
 8007b82:	89fb      	ldrh	r3, [r7, #14]
 8007b84:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007b88:	81fb      	strh	r3, [r7, #14]
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	441a      	add	r2, r3
 8007b94:	89fb      	ldrh	r3, [r7, #14]
 8007b96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ba6:	b29b      	uxth	r3, r3
 8007ba8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3714      	adds	r7, #20
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bc80      	pop	{r7}
 8007bb4:	4770      	bx	lr

08007bb6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b087      	sub	sp, #28
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
 8007bbe:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	7b1b      	ldrb	r3, [r3, #12]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f040 809d 	bne.w	8007d04 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	785b      	ldrb	r3, [r3, #1]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d04c      	beq.n	8007c6c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	881b      	ldrh	r3, [r3, #0]
 8007bde:	823b      	strh	r3, [r7, #16]
 8007be0:	8a3b      	ldrh	r3, [r7, #16]
 8007be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d01b      	beq.n	8007c22 <USB_EPClearStall+0x6c>
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	4413      	add	r3, r2
 8007bf4:	881b      	ldrh	r3, [r3, #0]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c00:	81fb      	strh	r3, [r7, #14]
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	441a      	add	r2, r3
 8007c0c:	89fb      	ldrh	r3, [r7, #14]
 8007c0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c1a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	78db      	ldrb	r3, [r3, #3]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d06c      	beq.n	8007d04 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c2a:	687a      	ldr	r2, [r7, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	4413      	add	r3, r2
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c40:	81bb      	strh	r3, [r7, #12]
 8007c42:	89bb      	ldrh	r3, [r7, #12]
 8007c44:	f083 0320 	eor.w	r3, r3, #32
 8007c48:	81bb      	strh	r3, [r7, #12]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	441a      	add	r2, r3
 8007c54:	89bb      	ldrh	r3, [r7, #12]
 8007c56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	8013      	strh	r3, [r2, #0]
 8007c6a:	e04b      	b.n	8007d04 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	82fb      	strh	r3, [r7, #22]
 8007c7a:	8afb      	ldrh	r3, [r7, #22]
 8007c7c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d01b      	beq.n	8007cbc <USB_EPClearStall+0x106>
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4413      	add	r3, r2
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c9a:	82bb      	strh	r3, [r7, #20]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	441a      	add	r2, r3
 8007ca6:	8abb      	ldrh	r3, [r7, #20]
 8007ca8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cb0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	881b      	ldrh	r3, [r3, #0]
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cd2:	827b      	strh	r3, [r7, #18]
 8007cd4:	8a7b      	ldrh	r3, [r7, #18]
 8007cd6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007cda:	827b      	strh	r3, [r7, #18]
 8007cdc:	8a7b      	ldrh	r3, [r7, #18]
 8007cde:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007ce2:	827b      	strh	r3, [r7, #18]
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	441a      	add	r2, r3
 8007cee:	8a7b      	ldrh	r3, [r7, #18]
 8007cf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	371c      	adds	r7, #28
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bc80      	pop	{r7}
 8007d0e:	4770      	bx	lr

08007d10 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d1c:	78fb      	ldrb	r3, [r7, #3]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d103      	bne.n	8007d2a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2280      	movs	r2, #128	@ 0x80
 8007d26:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bc80      	pop	{r7}
 8007d34:	4770      	bx	lr

08007d36 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bc80      	pop	{r7}
 8007d48:	4770      	bx	lr

08007d4a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bc80      	pop	{r7}
 8007d5c:	4770      	bx	lr

08007d5e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b085      	sub	sp, #20
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007d70:	68fb      	ldr	r3, [r7, #12]
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bc80      	pop	{r7}
 8007d7a:	4770      	bx	lr

08007d7c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bc80      	pop	{r7}
 8007d90:	4770      	bx	lr

08007d92 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b08b      	sub	sp, #44	@ 0x2c
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	60f8      	str	r0, [r7, #12]
 8007d9a:	60b9      	str	r1, [r7, #8]
 8007d9c:	4611      	mov	r1, r2
 8007d9e:	461a      	mov	r2, r3
 8007da0:	460b      	mov	r3, r1
 8007da2:	80fb      	strh	r3, [r7, #6]
 8007da4:	4613      	mov	r3, r2
 8007da6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007da8:	88bb      	ldrh	r3, [r7, #4]
 8007daa:	3301      	adds	r3, #1
 8007dac:	085b      	lsrs	r3, r3, #1
 8007dae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007db8:	88fb      	ldrh	r3, [r7, #6]
 8007dba:	005a      	lsls	r2, r3, #1
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	4413      	add	r3, r2
 8007dc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dc4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dca:	e01e      	b.n	8007e0a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	021b      	lsls	r3, r3, #8
 8007dda:	b21a      	sxth	r2, r3
 8007ddc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	b21b      	sxth	r3, r3
 8007de4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	8a7a      	ldrh	r2, [r7, #18]
 8007dea:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	3302      	adds	r3, #2
 8007df0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	3302      	adds	r3, #2
 8007df6:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	3301      	adds	r3, #1
 8007dfc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	3301      	adds	r3, #1
 8007e02:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8007e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e06:	3b01      	subs	r3, #1
 8007e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d1dd      	bne.n	8007dcc <USB_WritePMA+0x3a>
  }
}
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
 8007e14:	372c      	adds	r7, #44	@ 0x2c
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bc80      	pop	{r7}
 8007e1a:	4770      	bx	lr

08007e1c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b08b      	sub	sp, #44	@ 0x2c
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	4611      	mov	r1, r2
 8007e28:	461a      	mov	r2, r3
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	80fb      	strh	r3, [r7, #6]
 8007e2e:	4613      	mov	r3, r2
 8007e30:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e32:	88bb      	ldrh	r3, [r7, #4]
 8007e34:	085b      	lsrs	r3, r3, #1
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e42:	88fb      	ldrh	r3, [r7, #6]
 8007e44:	005a      	lsls	r2, r3, #1
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e4e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e54:	e01b      	b.n	8007e8e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007e5e:	6a3b      	ldr	r3, [r7, #32]
 8007e60:	3302      	adds	r3, #2
 8007e62:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	0a1b      	lsrs	r3, r3, #8
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	3302      	adds	r3, #2
 8007e86:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8007e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8a:	3b01      	subs	r3, #1
 8007e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d1e0      	bne.n	8007e56 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8007e94:	88bb      	ldrh	r3, [r7, #4]
 8007e96:	f003 0301 	and.w	r3, r3, #1
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d007      	beq.n	8007eb0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8007ea0:	6a3b      	ldr	r3, [r7, #32]
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	701a      	strb	r2, [r3, #0]
  }
}
 8007eb0:	bf00      	nop
 8007eb2:	372c      	adds	r7, #44	@ 0x2c
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bc80      	pop	{r7}
 8007eb8:	4770      	bx	lr
	...

08007ebc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007ec0:	4904      	ldr	r1, [pc, #16]	@ (8007ed4 <MX_FATFS_Init+0x18>)
 8007ec2:	4805      	ldr	r0, [pc, #20]	@ (8007ed8 <MX_FATFS_Init+0x1c>)
 8007ec4:	f001 fc12 	bl	80096ec <FATFS_LinkDriver>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	461a      	mov	r2, r3
 8007ecc:	4b03      	ldr	r3, [pc, #12]	@ (8007edc <MX_FATFS_Init+0x20>)
 8007ece:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007ed0:	bf00      	nop
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	200004f0 	.word	0x200004f0
 8007ed8:	2000000c 	.word	0x2000000c
 8007edc:	200004ec 	.word	0x200004ec

08007ee0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b083      	sub	sp, #12
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8007eea:	4b05      	ldr	r3, [pc, #20]	@ (8007f00 <USER_initialize+0x20>)
 8007eec:	2201      	movs	r2, #1
 8007eee:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007ef0:	4b03      	ldr	r3, [pc, #12]	@ (8007f00 <USER_initialize+0x20>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bc80      	pop	{r7}
 8007efe:	4770      	bx	lr
 8007f00:	20000009 	.word	0x20000009

08007f04 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007f0e:	4b05      	ldr	r3, [pc, #20]	@ (8007f24 <USER_status+0x20>)
 8007f10:	2201      	movs	r2, #1
 8007f12:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007f14:	4b03      	ldr	r3, [pc, #12]	@ (8007f24 <USER_status+0x20>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	370c      	adds	r7, #12
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bc80      	pop	{r7}
 8007f22:	4770      	bx	lr
 8007f24:	20000009 	.word	0x20000009

08007f28 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60b9      	str	r1, [r7, #8]
 8007f30:	607a      	str	r2, [r7, #4]
 8007f32:	603b      	str	r3, [r7, #0]
 8007f34:	4603      	mov	r3, r0
 8007f36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8007f38:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bc80      	pop	{r7}
 8007f42:	4770      	bx	lr

08007f44 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60b9      	str	r1, [r7, #8]
 8007f4c:	607a      	str	r2, [r7, #4]
 8007f4e:	603b      	str	r3, [r7, #0]
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8007f54:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bc80      	pop	{r7}
 8007f5e:	4770      	bx	lr

08007f60 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	4603      	mov	r3, r0
 8007f68:	603a      	str	r2, [r7, #0]
 8007f6a:	71fb      	strb	r3, [r7, #7]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8007f70:	2301      	movs	r3, #1
 8007f72:	73fb      	strb	r3, [r7, #15]
    return res;
 8007f74:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bc80      	pop	{r7}
 8007f7e:	4770      	bx	lr

08007f80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	7c1b      	ldrb	r3, [r3, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d115      	bne.n	8007fc4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007f9c:	2202      	movs	r2, #2
 8007f9e:	2181      	movs	r1, #129	@ 0x81
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f001 fedc 	bl	8009d5e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	2101      	movs	r1, #1
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f001 fed2 	bl	8009d5e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 8007fc2:	e012      	b.n	8007fea <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007fc4:	2340      	movs	r3, #64	@ 0x40
 8007fc6:	2202      	movs	r2, #2
 8007fc8:	2181      	movs	r1, #129	@ 0x81
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 fec7 	bl	8009d5e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007fd6:	2340      	movs	r3, #64	@ 0x40
 8007fd8:	2202      	movs	r2, #2
 8007fda:	2101      	movs	r1, #1
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 febe 	bl	8009d5e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fea:	2308      	movs	r3, #8
 8007fec:	2203      	movs	r2, #3
 8007fee:	2182      	movs	r1, #130	@ 0x82
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f001 feb4 	bl	8009d5e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ffc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8008000:	f001 ffd4 	bl	8009fac <USBD_static_malloc>
 8008004:	4602      	mov	r2, r0
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008012:	2b00      	cmp	r3, #0
 8008014:	d102      	bne.n	800801c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8008016:	2301      	movs	r3, #1
 8008018:	73fb      	strb	r3, [r7, #15]
 800801a:	e026      	b.n	800806a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008022:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	2200      	movs	r2, #0
 8008032:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	2200      	movs	r2, #0
 800803a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	7c1b      	ldrb	r3, [r3, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d109      	bne.n	800805a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800804c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008050:	2101      	movs	r1, #1
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	f001 ff73 	bl	8009f3e <USBD_LL_PrepareReceive>
 8008058:	e007      	b.n	800806a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008060:	2340      	movs	r3, #64	@ 0x40
 8008062:	2101      	movs	r1, #1
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 ff6a 	bl	8009f3e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800806a:	7bfb      	ldrb	r3, [r7, #15]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008084:	2181      	movs	r1, #129	@ 0x81
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 fe8f 	bl	8009daa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008092:	2101      	movs	r1, #1
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f001 fe88 	bl	8009daa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80080a2:	2182      	movs	r1, #130	@ 0x82
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f001 fe80 	bl	8009daa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00e      	beq.n	80080d8 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 ff7a 	bl	8009fc4 <USBD_static_free>
    pdev->pClassData = NULL;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b086      	sub	sp, #24
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080f2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80080f8:	2300      	movs	r3, #0
 80080fa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008108:	2b00      	cmp	r3, #0
 800810a:	d039      	beq.n	8008180 <USBD_CDC_Setup+0x9e>
 800810c:	2b20      	cmp	r3, #32
 800810e:	d17f      	bne.n	8008210 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	88db      	ldrh	r3, [r3, #6]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d029      	beq.n	800816c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	b25b      	sxtb	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	da11      	bge.n	8008146 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800812e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	88d2      	ldrh	r2, [r2, #6]
 8008134:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8008136:	6939      	ldr	r1, [r7, #16]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	88db      	ldrh	r3, [r3, #6]
 800813c:	461a      	mov	r2, r3
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f001 fa06 	bl	8009550 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8008144:	e06b      	b.n	800821e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	785a      	ldrb	r2, [r3, #1]
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	88db      	ldrh	r3, [r3, #6]
 8008154:	b2da      	uxtb	r2, r3
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800815c:	6939      	ldr	r1, [r7, #16]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	88db      	ldrh	r3, [r3, #6]
 8008162:	461a      	mov	r2, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f001 fa21 	bl	80095ac <USBD_CtlPrepareRx>
      break;
 800816a:	e058      	b.n	800821e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	683a      	ldr	r2, [r7, #0]
 8008176:	7850      	ldrb	r0, [r2, #1]
 8008178:	2200      	movs	r2, #0
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	4798      	blx	r3
      break;
 800817e:	e04e      	b.n	800821e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	785b      	ldrb	r3, [r3, #1]
 8008184:	2b0b      	cmp	r3, #11
 8008186:	d02e      	beq.n	80081e6 <USBD_CDC_Setup+0x104>
 8008188:	2b0b      	cmp	r3, #11
 800818a:	dc38      	bgt.n	80081fe <USBD_CDC_Setup+0x11c>
 800818c:	2b00      	cmp	r3, #0
 800818e:	d002      	beq.n	8008196 <USBD_CDC_Setup+0xb4>
 8008190:	2b0a      	cmp	r3, #10
 8008192:	d014      	beq.n	80081be <USBD_CDC_Setup+0xdc>
 8008194:	e033      	b.n	80081fe <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800819c:	2b03      	cmp	r3, #3
 800819e:	d107      	bne.n	80081b0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80081a0:	f107 030c 	add.w	r3, r7, #12
 80081a4:	2202      	movs	r2, #2
 80081a6:	4619      	mov	r1, r3
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 f9d1 	bl	8009550 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081ae:	e02e      	b.n	800820e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f001 f962 	bl	800947c <USBD_CtlError>
            ret = USBD_FAIL;
 80081b8:	2302      	movs	r3, #2
 80081ba:	75fb      	strb	r3, [r7, #23]
          break;
 80081bc:	e027      	b.n	800820e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081c4:	2b03      	cmp	r3, #3
 80081c6:	d107      	bne.n	80081d8 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80081c8:	f107 030f 	add.w	r3, r7, #15
 80081cc:	2201      	movs	r2, #1
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f001 f9bd 	bl	8009550 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80081d6:	e01a      	b.n	800820e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 f94e 	bl	800947c <USBD_CtlError>
            ret = USBD_FAIL;
 80081e0:	2302      	movs	r3, #2
 80081e2:	75fb      	strb	r3, [r7, #23]
          break;
 80081e4:	e013      	b.n	800820e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081ec:	2b03      	cmp	r3, #3
 80081ee:	d00d      	beq.n	800820c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80081f0:	6839      	ldr	r1, [r7, #0]
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f001 f942 	bl	800947c <USBD_CtlError>
            ret = USBD_FAIL;
 80081f8:	2302      	movs	r3, #2
 80081fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80081fc:	e006      	b.n	800820c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80081fe:	6839      	ldr	r1, [r7, #0]
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f001 f93b 	bl	800947c <USBD_CtlError>
          ret = USBD_FAIL;
 8008206:	2302      	movs	r3, #2
 8008208:	75fb      	strb	r3, [r7, #23]
          break;
 800820a:	e000      	b.n	800820e <USBD_CDC_Setup+0x12c>
          break;
 800820c:	bf00      	nop
      }
      break;
 800820e:	e006      	b.n	800821e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f001 f932 	bl	800947c <USBD_CtlError>
      ret = USBD_FAIL;
 8008218:	2302      	movs	r3, #2
 800821a:	75fb      	strb	r3, [r7, #23]
      break;
 800821c:	bf00      	nop
  }

  return ret;
 800821e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
 8008230:	460b      	mov	r3, r1
 8008232:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800823a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8008242:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800824a:	2b00      	cmp	r3, #0
 800824c:	d03a      	beq.n	80082c4 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	6879      	ldr	r1, [r7, #4]
 8008252:	4613      	mov	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	440b      	add	r3, r1
 800825c:	331c      	adds	r3, #28
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d029      	beq.n	80082b8 <USBD_CDC_DataIn+0x90>
 8008264:	78fa      	ldrb	r2, [r7, #3]
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	4613      	mov	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	440b      	add	r3, r1
 8008272:	331c      	adds	r3, #28
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	78f9      	ldrb	r1, [r7, #3]
 8008278:	68b8      	ldr	r0, [r7, #8]
 800827a:	460b      	mov	r3, r1
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	440b      	add	r3, r1
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	4403      	add	r3, r0
 8008284:	3320      	adds	r3, #32
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	fbb2 f1f3 	udiv	r1, r2, r3
 800828c:	fb01 f303 	mul.w	r3, r1, r3
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	d110      	bne.n	80082b8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8008296:	78fa      	ldrb	r2, [r7, #3]
 8008298:	6879      	ldr	r1, [r7, #4]
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	440b      	add	r3, r1
 80082a4:	331c      	adds	r3, #28
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80082aa:	78f9      	ldrb	r1, [r7, #3]
 80082ac:	2300      	movs	r3, #0
 80082ae:	2200      	movs	r2, #0
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 fe21 	bl	8009ef8 <USBD_LL_Transmit>
 80082b6:	e003      	b.n	80082c0 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	e000      	b.n	80082c6 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80082c4:	2302      	movs	r3, #2
  }
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3710      	adds	r7, #16
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
 80082d6:	460b      	mov	r3, r1
 80082d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082e0:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80082e2:	78fb      	ldrb	r3, [r7, #3]
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f001 fe4c 	bl	8009f84 <USBD_LL_GetRxDataSize>
 80082ec:	4602      	mov	r2, r0
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00d      	beq.n	800831a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008312:	4611      	mov	r1, r2
 8008314:	4798      	blx	r3

    return USBD_OK;
 8008316:	2300      	movs	r3, #0
 8008318:	e000      	b.n	800831c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800831a:	2302      	movs	r3, #2
  }
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b084      	sub	sp, #16
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008332:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800833a:	2b00      	cmp	r3, #0
 800833c:	d014      	beq.n	8008368 <USBD_CDC_EP0_RxReady+0x44>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008344:	2bff      	cmp	r3, #255	@ 0xff
 8008346:	d00f      	beq.n	8008368 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8008356:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800835e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	22ff      	movs	r2, #255	@ 0xff
 8008364:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
	...

08008374 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2243      	movs	r2, #67	@ 0x43
 8008380:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8008382:	4b03      	ldr	r3, [pc, #12]	@ (8008390 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008384:	4618      	mov	r0, r3
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	bc80      	pop	{r7}
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop
 8008390:	200000a8 	.word	0x200000a8

08008394 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2243      	movs	r2, #67	@ 0x43
 80083a0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80083a2:	4b03      	ldr	r3, [pc, #12]	@ (80083b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bc80      	pop	{r7}
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	20000064 	.word	0x20000064

080083b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2243      	movs	r2, #67	@ 0x43
 80083c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80083c2:	4b03      	ldr	r3, [pc, #12]	@ (80083d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bc80      	pop	{r7}
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	200000ec 	.word	0x200000ec

080083d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b083      	sub	sp, #12
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	220a      	movs	r2, #10
 80083e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80083e2:	4b03      	ldr	r3, [pc, #12]	@ (80083f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	370c      	adds	r7, #12
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bc80      	pop	{r7}
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	20000020 	.word	0x20000020

080083f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80083fe:	2302      	movs	r3, #2
 8008400:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d005      	beq.n	8008414 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	683a      	ldr	r2, [r7, #0]
 800840c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008410:	2300      	movs	r3, #0
 8008412:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	bc80      	pop	{r7}
 800841e:	4770      	bx	lr

08008420 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008420:	b480      	push	{r7}
 8008422:	b087      	sub	sp, #28
 8008424:	af00      	add	r7, sp, #0
 8008426:	60f8      	str	r0, [r7, #12]
 8008428:	60b9      	str	r1, [r7, #8]
 800842a:	4613      	mov	r3, r2
 800842c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008434:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800843e:	88fa      	ldrh	r2, [r7, #6]
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	371c      	adds	r7, #28
 800844c:	46bd      	mov	sp, r7
 800844e:	bc80      	pop	{r7}
 8008450:	4770      	bx	lr

08008452 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8008452:	b480      	push	{r7}
 8008454:	b085      	sub	sp, #20
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008462:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 800846c:	2300      	movs	r3, #0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	bc80      	pop	{r7}
 8008476:	4770      	bx	lr

08008478 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008486:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800848e:	2b00      	cmp	r3, #0
 8008490:	d01c      	beq.n	80084cc <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008498:	2b00      	cmp	r3, #0
 800849a:	d115      	bne.n	80084c8 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2201      	movs	r2, #1
 80084a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	2181      	movs	r1, #129	@ 0x81
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f001 fd1a 	bl	8009ef8 <USBD_LL_Transmit>

      return USBD_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	e002      	b.n	80084ce <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e000      	b.n	80084ce <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80084cc:	2302      	movs	r3, #2
  }
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084e4:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d017      	beq.n	8008520 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	7c1b      	ldrb	r3, [r3, #16]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d109      	bne.n	800850c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80084fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008502:	2101      	movs	r1, #1
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f001 fd1a 	bl	8009f3e <USBD_LL_PrepareReceive>
 800850a:	e007      	b.n	800851c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008512:	2340      	movs	r3, #64	@ 0x40
 8008514:	2101      	movs	r1, #1
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 fd11 	bl	8009f3e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800851c:	2300      	movs	r3, #0
 800851e:	e000      	b.n	8008522 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8008520:	2302      	movs	r3, #2
  }
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	60b9      	str	r1, [r7, #8]
 8008534:	4613      	mov	r3, r2
 8008536:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800853e:	2302      	movs	r3, #2
 8008540:	e01a      	b.n	8008578 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	79fa      	ldrb	r2, [r7, #7]
 800856e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008570:	68f8      	ldr	r0, [r7, #12]
 8008572:	f001 fb7f 	bl	8009c74 <USBD_LL_Init>

  return USBD_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d006      	beq.n	80085a2 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	73fb      	strb	r3, [r7, #15]
 80085a0:	e001      	b.n	80085a6 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80085a2:	2302      	movs	r3, #2
 80085a4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bc80      	pop	{r7}
 80085b0:	4770      	bx	lr

080085b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b082      	sub	sp, #8
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f001 fbb4 	bl	8009d28 <USBD_LL_Start>

  return USBD_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	bc80      	pop	{r7}
 80085dc:	4770      	bx	lr

080085de <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	460b      	mov	r3, r1
 80085e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80085ea:	2302      	movs	r3, #2
 80085ec:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00c      	beq.n	8008612 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	78fa      	ldrb	r2, [r7, #3]
 8008602:	4611      	mov	r1, r2
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	4798      	blx	r3
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008612:	7bfb      	ldrb	r3, [r7, #15]
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	460b      	mov	r3, r1
 8008626:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	78fa      	ldrb	r2, [r7, #3]
 8008632:	4611      	mov	r1, r2
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	4798      	blx	r3

  return USBD_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3708      	adds	r7, #8
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}

08008642 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008642:	b580      	push	{r7, lr}
 8008644:	b082      	sub	sp, #8
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
 800864a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	4618      	mov	r0, r3
 8008656:	f000 fed8 	bl	800940a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008668:	461a      	mov	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008676:	f003 031f 	and.w	r3, r3, #31
 800867a:	2b02      	cmp	r3, #2
 800867c:	d016      	beq.n	80086ac <USBD_LL_SetupStage+0x6a>
 800867e:	2b02      	cmp	r3, #2
 8008680:	d81c      	bhi.n	80086bc <USBD_LL_SetupStage+0x7a>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d002      	beq.n	800868c <USBD_LL_SetupStage+0x4a>
 8008686:	2b01      	cmp	r3, #1
 8008688:	d008      	beq.n	800869c <USBD_LL_SetupStage+0x5a>
 800868a:	e017      	b.n	80086bc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f9cb 	bl	8008a30 <USBD_StdDevReq>
      break;
 800869a:	e01a      	b.n	80086d2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80086a2:	4619      	mov	r1, r3
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fa2d 	bl	8008b04 <USBD_StdItfReq>
      break;
 80086aa:	e012      	b.n	80086d2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fa6d 	bl	8008b94 <USBD_StdEPReq>
      break;
 80086ba:	e00a      	b.n	80086d2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80086c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	4619      	mov	r1, r3
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f001 fb8c 	bl	8009de8 <USBD_LL_StallEP>
      break;
 80086d0:	bf00      	nop
  }

  return USBD_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3708      	adds	r7, #8
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	460b      	mov	r3, r1
 80086e6:	607a      	str	r2, [r7, #4]
 80086e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80086ea:	7afb      	ldrb	r3, [r7, #11]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d14b      	bne.n	8008788 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80086f6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d134      	bne.n	800876c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	68da      	ldr	r2, [r3, #12]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	429a      	cmp	r2, r3
 800870c:	d919      	bls.n	8008742 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	68da      	ldr	r2, [r3, #12]
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	1ad2      	subs	r2, r2, r3
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	68da      	ldr	r2, [r3, #12]
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008724:	429a      	cmp	r2, r3
 8008726:	d203      	bcs.n	8008730 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800872c:	b29b      	uxth	r3, r3
 800872e:	e002      	b.n	8008736 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008730:	697b      	ldr	r3, [r7, #20]
 8008732:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008734:	b29b      	uxth	r3, r3
 8008736:	461a      	mov	r2, r3
 8008738:	6879      	ldr	r1, [r7, #4]
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 ff54 	bl	80095e8 <USBD_CtlContinueRx>
 8008740:	e038      	b.n	80087b4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00a      	beq.n	8008764 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008754:	2b03      	cmp	r3, #3
 8008756:	d105      	bne.n	8008764 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 ff51 	bl	800960c <USBD_CtlSendStatus>
 800876a:	e023      	b.n	80087b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008772:	2b05      	cmp	r3, #5
 8008774:	d11e      	bne.n	80087b4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2200      	movs	r2, #0
 800877a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800877e:	2100      	movs	r1, #0
 8008780:	68f8      	ldr	r0, [r7, #12]
 8008782:	f001 fb31 	bl	8009de8 <USBD_LL_StallEP>
 8008786:	e015      	b.n	80087b4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800878e:	699b      	ldr	r3, [r3, #24]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00d      	beq.n	80087b0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800879a:	2b03      	cmp	r3, #3
 800879c:	d108      	bne.n	80087b0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	7afa      	ldrb	r2, [r7, #11]
 80087a8:	4611      	mov	r1, r2
 80087aa:	68f8      	ldr	r0, [r7, #12]
 80087ac:	4798      	blx	r3
 80087ae:	e001      	b.n	80087b4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087b0:	2302      	movs	r3, #2
 80087b2:	e000      	b.n	80087b6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b086      	sub	sp, #24
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	60f8      	str	r0, [r7, #12]
 80087c6:	460b      	mov	r3, r1
 80087c8:	607a      	str	r2, [r7, #4]
 80087ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087cc:	7afb      	ldrb	r3, [r7, #11]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d17f      	bne.n	80088d2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3314      	adds	r3, #20
 80087d6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80087de:	2b02      	cmp	r3, #2
 80087e0:	d15c      	bne.n	800889c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	68da      	ldr	r2, [r3, #12]
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d915      	bls.n	800881a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	68da      	ldr	r2, [r3, #12]
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	691b      	ldr	r3, [r3, #16]
 80087f6:	1ad2      	subs	r2, r2, r3
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	b29b      	uxth	r3, r3
 8008802:	461a      	mov	r2, r3
 8008804:	6879      	ldr	r1, [r7, #4]
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 febe 	bl	8009588 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800880c:	2300      	movs	r3, #0
 800880e:	2200      	movs	r2, #0
 8008810:	2100      	movs	r1, #0
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f001 fb93 	bl	8009f3e <USBD_LL_PrepareReceive>
 8008818:	e04e      	b.n	80088b8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	6912      	ldr	r2, [r2, #16]
 8008822:	fbb3 f1f2 	udiv	r1, r3, r2
 8008826:	fb01 f202 	mul.w	r2, r1, r2
 800882a:	1a9b      	subs	r3, r3, r2
 800882c:	2b00      	cmp	r3, #0
 800882e:	d11c      	bne.n	800886a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	689a      	ldr	r2, [r3, #8]
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008838:	429a      	cmp	r2, r3
 800883a:	d316      	bcc.n	800886a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	689a      	ldr	r2, [r3, #8]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008846:	429a      	cmp	r2, r3
 8008848:	d20f      	bcs.n	800886a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800884a:	2200      	movs	r2, #0
 800884c:	2100      	movs	r1, #0
 800884e:	68f8      	ldr	r0, [r7, #12]
 8008850:	f000 fe9a 	bl	8009588 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800885c:	2300      	movs	r3, #0
 800885e:	2200      	movs	r2, #0
 8008860:	2100      	movs	r1, #0
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f001 fb6b 	bl	8009f3e <USBD_LL_PrepareReceive>
 8008868:	e026      	b.n	80088b8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00a      	beq.n	800888c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800887c:	2b03      	cmp	r3, #3
 800887e:	d105      	bne.n	800888c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800888c:	2180      	movs	r1, #128	@ 0x80
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f001 faaa 	bl	8009de8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f000 fecc 	bl	8009632 <USBD_CtlReceiveStatus>
 800889a:	e00d      	b.n	80088b8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80088a2:	2b04      	cmp	r3, #4
 80088a4:	d004      	beq.n	80088b0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d103      	bne.n	80088b8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80088b0:	2180      	movs	r1, #128	@ 0x80
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f001 fa98 	bl	8009de8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d11d      	bne.n	80088fe <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f7ff fe81 	bl	80085ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80088d0:	e015      	b.n	80088fe <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00d      	beq.n	80088fa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d108      	bne.n	80088fa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ee:	695b      	ldr	r3, [r3, #20]
 80088f0:	7afa      	ldrb	r2, [r7, #11]
 80088f2:	4611      	mov	r1, r2
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	4798      	blx	r3
 80088f8:	e001      	b.n	80088fe <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80088fa:	2302      	movs	r3, #2
 80088fc:	e000      	b.n	8008900 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b082      	sub	sp, #8
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008910:	2340      	movs	r3, #64	@ 0x40
 8008912:	2200      	movs	r2, #0
 8008914:	2100      	movs	r1, #0
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f001 fa21 	bl	8009d5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2240      	movs	r2, #64	@ 0x40
 8008928:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800892c:	2340      	movs	r3, #64	@ 0x40
 800892e:	2200      	movs	r2, #0
 8008930:	2180      	movs	r1, #128	@ 0x80
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f001 fa13 	bl	8009d5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2240      	movs	r2, #64	@ 0x40
 8008942:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008968:	2b00      	cmp	r3, #0
 800896a:	d009      	beq.n	8008980 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6852      	ldr	r2, [r2, #4]
 8008978:	b2d2      	uxtb	r2, r2
 800897a:	4611      	mov	r1, r2
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	4798      	blx	r3
  }

  return USBD_OK;
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800898a:	b480      	push	{r7}
 800898c:	b083      	sub	sp, #12
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	460b      	mov	r3, r1
 8008994:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	78fa      	ldrb	r2, [r7, #3]
 800899a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bc80      	pop	{r7}
 80089a6:	4770      	bx	lr

080089a8 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2204      	movs	r2, #4
 80089c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bc80      	pop	{r7}
 80089ce:	4770      	bx	lr

080089d0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089de:	2b04      	cmp	r3, #4
 80089e0:	d105      	bne.n	80089ee <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bc80      	pop	{r7}
 80089f8:	4770      	bx	lr

080089fa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b082      	sub	sp, #8
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a08:	2b03      	cmp	r3, #3
 8008a0a:	d10b      	bne.n	8008a24 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d005      	beq.n	8008a24 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a24:	2300      	movs	r3, #0
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3708      	adds	r7, #8
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
	...

08008a30 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a46:	2b40      	cmp	r3, #64	@ 0x40
 8008a48:	d005      	beq.n	8008a56 <USBD_StdDevReq+0x26>
 8008a4a:	2b40      	cmp	r3, #64	@ 0x40
 8008a4c:	d84f      	bhi.n	8008aee <USBD_StdDevReq+0xbe>
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d009      	beq.n	8008a66 <USBD_StdDevReq+0x36>
 8008a52:	2b20      	cmp	r3, #32
 8008a54:	d14b      	bne.n	8008aee <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	6839      	ldr	r1, [r7, #0]
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	4798      	blx	r3
      break;
 8008a64:	e048      	b.n	8008af8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	785b      	ldrb	r3, [r3, #1]
 8008a6a:	2b09      	cmp	r3, #9
 8008a6c:	d839      	bhi.n	8008ae2 <USBD_StdDevReq+0xb2>
 8008a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008a74 <USBD_StdDevReq+0x44>)
 8008a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a74:	08008ac5 	.word	0x08008ac5
 8008a78:	08008ad9 	.word	0x08008ad9
 8008a7c:	08008ae3 	.word	0x08008ae3
 8008a80:	08008acf 	.word	0x08008acf
 8008a84:	08008ae3 	.word	0x08008ae3
 8008a88:	08008aa7 	.word	0x08008aa7
 8008a8c:	08008a9d 	.word	0x08008a9d
 8008a90:	08008ae3 	.word	0x08008ae3
 8008a94:	08008abb 	.word	0x08008abb
 8008a98:	08008ab1 	.word	0x08008ab1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f9dc 	bl	8008e5c <USBD_GetDescriptor>
          break;
 8008aa4:	e022      	b.n	8008aec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008aa6:	6839      	ldr	r1, [r7, #0]
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fb3f 	bl	800912c <USBD_SetAddress>
          break;
 8008aae:	e01d      	b.n	8008aec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008ab0:	6839      	ldr	r1, [r7, #0]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fb7e 	bl	80091b4 <USBD_SetConfig>
          break;
 8008ab8:	e018      	b.n	8008aec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008aba:	6839      	ldr	r1, [r7, #0]
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fc07 	bl	80092d0 <USBD_GetConfig>
          break;
 8008ac2:	e013      	b.n	8008aec <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fc37 	bl	800933a <USBD_GetStatus>
          break;
 8008acc:	e00e      	b.n	8008aec <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fc65 	bl	80093a0 <USBD_SetFeature>
          break;
 8008ad6:	e009      	b.n	8008aec <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ad8:	6839      	ldr	r1, [r7, #0]
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fc74 	bl	80093c8 <USBD_ClrFeature>
          break;
 8008ae0:	e004      	b.n	8008aec <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008ae2:	6839      	ldr	r1, [r7, #0]
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fcc9 	bl	800947c <USBD_CtlError>
          break;
 8008aea:	bf00      	nop
      }
      break;
 8008aec:	e004      	b.n	8008af8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008aee:	6839      	ldr	r1, [r7, #0]
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 fcc3 	bl	800947c <USBD_CtlError>
      break;
 8008af6:	bf00      	nop
  }

  return ret;
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop

08008b04 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b1a:	2b40      	cmp	r3, #64	@ 0x40
 8008b1c:	d005      	beq.n	8008b2a <USBD_StdItfReq+0x26>
 8008b1e:	2b40      	cmp	r3, #64	@ 0x40
 8008b20:	d82e      	bhi.n	8008b80 <USBD_StdItfReq+0x7c>
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <USBD_StdItfReq+0x26>
 8008b26:	2b20      	cmp	r3, #32
 8008b28:	d12a      	bne.n	8008b80 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b30:	3b01      	subs	r3, #1
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d81d      	bhi.n	8008b72 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	889b      	ldrh	r3, [r3, #4]
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d813      	bhi.n	8008b68 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	6839      	ldr	r1, [r7, #0]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	4798      	blx	r3
 8008b4e:	4603      	mov	r3, r0
 8008b50:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	88db      	ldrh	r3, [r3, #6]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d110      	bne.n	8008b7c <USBD_StdItfReq+0x78>
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10d      	bne.n	8008b7c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fd53 	bl	800960c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b66:	e009      	b.n	8008b7c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 fc86 	bl	800947c <USBD_CtlError>
          break;
 8008b70:	e004      	b.n	8008b7c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fc81 	bl	800947c <USBD_CtlError>
          break;
 8008b7a:	e000      	b.n	8008b7e <USBD_StdItfReq+0x7a>
          break;
 8008b7c:	bf00      	nop
      }
      break;
 8008b7e:	e004      	b.n	8008b8a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fc7a 	bl	800947c <USBD_CtlError>
      break;
 8008b88:	bf00      	nop
  }

  return USBD_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	889b      	ldrh	r3, [r3, #4]
 8008ba6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bb0:	2b40      	cmp	r3, #64	@ 0x40
 8008bb2:	d007      	beq.n	8008bc4 <USBD_StdEPReq+0x30>
 8008bb4:	2b40      	cmp	r3, #64	@ 0x40
 8008bb6:	f200 8146 	bhi.w	8008e46 <USBD_StdEPReq+0x2b2>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <USBD_StdEPReq+0x40>
 8008bbe:	2b20      	cmp	r3, #32
 8008bc0:	f040 8141 	bne.w	8008e46 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	4798      	blx	r3
      break;
 8008bd2:	e13d      	b.n	8008e50 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bdc:	2b20      	cmp	r3, #32
 8008bde:	d10a      	bne.n	8008bf6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	4798      	blx	r3
 8008bee:	4603      	mov	r3, r0
 8008bf0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	e12d      	b.n	8008e52 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	785b      	ldrb	r3, [r3, #1]
 8008bfa:	2b03      	cmp	r3, #3
 8008bfc:	d007      	beq.n	8008c0e <USBD_StdEPReq+0x7a>
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	f300 811b 	bgt.w	8008e3a <USBD_StdEPReq+0x2a6>
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d072      	beq.n	8008cee <USBD_StdEPReq+0x15a>
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d03a      	beq.n	8008c82 <USBD_StdEPReq+0xee>
 8008c0c:	e115      	b.n	8008e3a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d002      	beq.n	8008c1e <USBD_StdEPReq+0x8a>
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d015      	beq.n	8008c48 <USBD_StdEPReq+0xb4>
 8008c1c:	e02b      	b.n	8008c76 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c1e:	7bbb      	ldrb	r3, [r7, #14]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d00c      	beq.n	8008c3e <USBD_StdEPReq+0xaa>
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	2b80      	cmp	r3, #128	@ 0x80
 8008c28:	d009      	beq.n	8008c3e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f001 f8da 	bl	8009de8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c34:	2180      	movs	r1, #128	@ 0x80
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f001 f8d6 	bl	8009de8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c3c:	e020      	b.n	8008c80 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008c3e:	6839      	ldr	r1, [r7, #0]
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fc1b 	bl	800947c <USBD_CtlError>
              break;
 8008c46:	e01b      	b.n	8008c80 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	885b      	ldrh	r3, [r3, #2]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10e      	bne.n	8008c6e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00b      	beq.n	8008c6e <USBD_StdEPReq+0xda>
 8008c56:	7bbb      	ldrb	r3, [r7, #14]
 8008c58:	2b80      	cmp	r3, #128	@ 0x80
 8008c5a:	d008      	beq.n	8008c6e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	88db      	ldrh	r3, [r3, #6]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d104      	bne.n	8008c6e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f001 f8bd 	bl	8009de8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fccc 	bl	800960c <USBD_CtlSendStatus>

              break;
 8008c74:	e004      	b.n	8008c80 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fbff 	bl	800947c <USBD_CtlError>
              break;
 8008c7e:	bf00      	nop
          }
          break;
 8008c80:	e0e0      	b.n	8008e44 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d002      	beq.n	8008c92 <USBD_StdEPReq+0xfe>
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	d015      	beq.n	8008cbc <USBD_StdEPReq+0x128>
 8008c90:	e026      	b.n	8008ce0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c92:	7bbb      	ldrb	r3, [r7, #14]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d00c      	beq.n	8008cb2 <USBD_StdEPReq+0x11e>
 8008c98:	7bbb      	ldrb	r3, [r7, #14]
 8008c9a:	2b80      	cmp	r3, #128	@ 0x80
 8008c9c:	d009      	beq.n	8008cb2 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c9e:	7bbb      	ldrb	r3, [r7, #14]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f001 f8a0 	bl	8009de8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008ca8:	2180      	movs	r1, #128	@ 0x80
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f001 f89c 	bl	8009de8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cb0:	e01c      	b.n	8008cec <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fbe1 	bl	800947c <USBD_CtlError>
              break;
 8008cba:	e017      	b.n	8008cec <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	885b      	ldrh	r3, [r3, #2]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d112      	bne.n	8008cea <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d004      	beq.n	8008cd8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cce:	7bbb      	ldrb	r3, [r7, #14]
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f001 f8a7 	bl	8009e26 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fc97 	bl	800960c <USBD_CtlSendStatus>
              }
              break;
 8008cde:	e004      	b.n	8008cea <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008ce0:	6839      	ldr	r1, [r7, #0]
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 fbca 	bl	800947c <USBD_CtlError>
              break;
 8008ce8:	e000      	b.n	8008cec <USBD_StdEPReq+0x158>
              break;
 8008cea:	bf00      	nop
          }
          break;
 8008cec:	e0aa      	b.n	8008e44 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cf4:	2b02      	cmp	r3, #2
 8008cf6:	d002      	beq.n	8008cfe <USBD_StdEPReq+0x16a>
 8008cf8:	2b03      	cmp	r3, #3
 8008cfa:	d032      	beq.n	8008d62 <USBD_StdEPReq+0x1ce>
 8008cfc:	e097      	b.n	8008e2e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cfe:	7bbb      	ldrb	r3, [r7, #14]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d007      	beq.n	8008d14 <USBD_StdEPReq+0x180>
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	2b80      	cmp	r3, #128	@ 0x80
 8008d08:	d004      	beq.n	8008d14 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008d0a:	6839      	ldr	r1, [r7, #0]
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f000 fbb5 	bl	800947c <USBD_CtlError>
                break;
 8008d12:	e091      	b.n	8008e38 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	da0b      	bge.n	8008d34 <USBD_StdEPReq+0x1a0>
 8008d1c:	7bbb      	ldrb	r3, [r7, #14]
 8008d1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d22:	4613      	mov	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	009b      	lsls	r3, r3, #2
 8008d2a:	3310      	adds	r3, #16
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	4413      	add	r3, r2
 8008d30:	3304      	adds	r3, #4
 8008d32:	e00b      	b.n	8008d4c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d34:	7bbb      	ldrb	r3, [r7, #14]
 8008d36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	4413      	add	r3, r2
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	2200      	movs	r2, #0
 8008d52:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	2202      	movs	r2, #2
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fbf8 	bl	8009550 <USBD_CtlSendData>
              break;
 8008d60:	e06a      	b.n	8008e38 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	da11      	bge.n	8008d8e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d6a:	7bbb      	ldrb	r3, [r7, #14]
 8008d6c:	f003 020f 	and.w	r2, r3, #15
 8008d70:	6879      	ldr	r1, [r7, #4]
 8008d72:	4613      	mov	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	440b      	add	r3, r1
 8008d7c:	3318      	adds	r3, #24
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d117      	bne.n	8008db4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fb78 	bl	800947c <USBD_CtlError>
                  break;
 8008d8c:	e054      	b.n	8008e38 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008d8e:	7bbb      	ldrb	r3, [r7, #14]
 8008d90:	f003 020f 	and.w	r2, r3, #15
 8008d94:	6879      	ldr	r1, [r7, #4]
 8008d96:	4613      	mov	r3, r2
 8008d98:	009b      	lsls	r3, r3, #2
 8008d9a:	4413      	add	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	440b      	add	r3, r1
 8008da0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d104      	bne.n	8008db4 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fb65 	bl	800947c <USBD_CtlError>
                  break;
 8008db2:	e041      	b.n	8008e38 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008db4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	da0b      	bge.n	8008dd4 <USBD_StdEPReq+0x240>
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	3310      	adds	r3, #16
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	4413      	add	r3, r2
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	e00b      	b.n	8008dec <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dd4:	7bbb      	ldrb	r3, [r7, #14]
 8008dd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	4413      	add	r3, r2
 8008dea:	3304      	adds	r3, #4
 8008dec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <USBD_StdEPReq+0x266>
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	2b80      	cmp	r3, #128	@ 0x80
 8008df8:	d103      	bne.n	8008e02 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	601a      	str	r2, [r3, #0]
 8008e00:	e00e      	b.n	8008e20 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008e02:	7bbb      	ldrb	r3, [r7, #14]
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f001 f82c 	bl	8009e64 <USBD_LL_IsStallEP>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d003      	beq.n	8008e1a <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2201      	movs	r2, #1
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	e002      	b.n	8008e20 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	2202      	movs	r2, #2
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fb92 	bl	8009550 <USBD_CtlSendData>
              break;
 8008e2c:	e004      	b.n	8008e38 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008e2e:	6839      	ldr	r1, [r7, #0]
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fb23 	bl	800947c <USBD_CtlError>
              break;
 8008e36:	bf00      	nop
          }
          break;
 8008e38:	e004      	b.n	8008e44 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fb1d 	bl	800947c <USBD_CtlError>
          break;
 8008e42:	bf00      	nop
      }
      break;
 8008e44:	e004      	b.n	8008e50 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008e46:	6839      	ldr	r1, [r7, #0]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fb17 	bl	800947c <USBD_CtlError>
      break;
 8008e4e:	bf00      	nop
  }

  return ret;
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3710      	adds	r7, #16
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
	...

08008e5c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e66:	2300      	movs	r3, #0
 8008e68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	885b      	ldrh	r3, [r3, #2]
 8008e76:	0a1b      	lsrs	r3, r3, #8
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	2b06      	cmp	r3, #6
 8008e7e:	f200 8128 	bhi.w	80090d2 <USBD_GetDescriptor+0x276>
 8008e82:	a201      	add	r2, pc, #4	@ (adr r2, 8008e88 <USBD_GetDescriptor+0x2c>)
 8008e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e88:	08008ea5 	.word	0x08008ea5
 8008e8c:	08008ebd 	.word	0x08008ebd
 8008e90:	08008efd 	.word	0x08008efd
 8008e94:	080090d3 	.word	0x080090d3
 8008e98:	080090d3 	.word	0x080090d3
 8008e9c:	08009073 	.word	0x08009073
 8008ea0:	0800909f 	.word	0x0800909f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	7c12      	ldrb	r2, [r2, #16]
 8008eb0:	f107 0108 	add.w	r1, r7, #8
 8008eb4:	4610      	mov	r0, r2
 8008eb6:	4798      	blx	r3
 8008eb8:	60f8      	str	r0, [r7, #12]
      break;
 8008eba:	e112      	b.n	80090e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	7c1b      	ldrb	r3, [r3, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10d      	bne.n	8008ee0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ecc:	f107 0208 	add.w	r2, r7, #8
 8008ed0:	4610      	mov	r0, r2
 8008ed2:	4798      	blx	r3
 8008ed4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	2202      	movs	r2, #2
 8008edc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008ede:	e100      	b.n	80090e2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee8:	f107 0208 	add.w	r2, r7, #8
 8008eec:	4610      	mov	r0, r2
 8008eee:	4798      	blx	r3
 8008ef0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	701a      	strb	r2, [r3, #0]
      break;
 8008efa:	e0f2      	b.n	80090e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	885b      	ldrh	r3, [r3, #2]
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b05      	cmp	r3, #5
 8008f04:	f200 80ac 	bhi.w	8009060 <USBD_GetDescriptor+0x204>
 8008f08:	a201      	add	r2, pc, #4	@ (adr r2, 8008f10 <USBD_GetDescriptor+0xb4>)
 8008f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f0e:	bf00      	nop
 8008f10:	08008f29 	.word	0x08008f29
 8008f14:	08008f5d 	.word	0x08008f5d
 8008f18:	08008f91 	.word	0x08008f91
 8008f1c:	08008fc5 	.word	0x08008fc5
 8008f20:	08008ff9 	.word	0x08008ff9
 8008f24:	0800902d 	.word	0x0800902d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00b      	beq.n	8008f4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	7c12      	ldrb	r2, [r2, #16]
 8008f40:	f107 0108 	add.w	r1, r7, #8
 8008f44:	4610      	mov	r0, r2
 8008f46:	4798      	blx	r3
 8008f48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f4a:	e091      	b.n	8009070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fa94 	bl	800947c <USBD_CtlError>
            err++;
 8008f54:	7afb      	ldrb	r3, [r7, #11]
 8008f56:	3301      	adds	r3, #1
 8008f58:	72fb      	strb	r3, [r7, #11]
          break;
 8008f5a:	e089      	b.n	8009070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00b      	beq.n	8008f80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	7c12      	ldrb	r2, [r2, #16]
 8008f74:	f107 0108 	add.w	r1, r7, #8
 8008f78:	4610      	mov	r0, r2
 8008f7a:	4798      	blx	r3
 8008f7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f7e:	e077      	b.n	8009070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f80:	6839      	ldr	r1, [r7, #0]
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fa7a 	bl	800947c <USBD_CtlError>
            err++;
 8008f88:	7afb      	ldrb	r3, [r7, #11]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f8e:	e06f      	b.n	8009070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00b      	beq.n	8008fb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	7c12      	ldrb	r2, [r2, #16]
 8008fa8:	f107 0108 	add.w	r1, r7, #8
 8008fac:	4610      	mov	r0, r2
 8008fae:	4798      	blx	r3
 8008fb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fb2:	e05d      	b.n	8009070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fb4:	6839      	ldr	r1, [r7, #0]
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fa60 	bl	800947c <USBD_CtlError>
            err++;
 8008fbc:	7afb      	ldrb	r3, [r7, #11]
 8008fbe:	3301      	adds	r3, #1
 8008fc0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fc2:	e055      	b.n	8009070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00b      	beq.n	8008fe8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	7c12      	ldrb	r2, [r2, #16]
 8008fdc:	f107 0108 	add.w	r1, r7, #8
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4798      	blx	r3
 8008fe4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fe6:	e043      	b.n	8009070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fe8:	6839      	ldr	r1, [r7, #0]
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 fa46 	bl	800947c <USBD_CtlError>
            err++;
 8008ff0:	7afb      	ldrb	r3, [r7, #11]
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ff6:	e03b      	b.n	8009070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ffe:	695b      	ldr	r3, [r3, #20]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00b      	beq.n	800901c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	7c12      	ldrb	r2, [r2, #16]
 8009010:	f107 0108 	add.w	r1, r7, #8
 8009014:	4610      	mov	r0, r2
 8009016:	4798      	blx	r3
 8009018:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800901a:	e029      	b.n	8009070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fa2c 	bl	800947c <USBD_CtlError>
            err++;
 8009024:	7afb      	ldrb	r3, [r7, #11]
 8009026:	3301      	adds	r3, #1
 8009028:	72fb      	strb	r3, [r7, #11]
          break;
 800902a:	e021      	b.n	8009070 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	7c12      	ldrb	r2, [r2, #16]
 8009044:	f107 0108 	add.w	r1, r7, #8
 8009048:	4610      	mov	r0, r2
 800904a:	4798      	blx	r3
 800904c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800904e:	e00f      	b.n	8009070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fa12 	bl	800947c <USBD_CtlError>
            err++;
 8009058:	7afb      	ldrb	r3, [r7, #11]
 800905a:	3301      	adds	r3, #1
 800905c:	72fb      	strb	r3, [r7, #11]
          break;
 800905e:	e007      	b.n	8009070 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa0a 	bl	800947c <USBD_CtlError>
          err++;
 8009068:	7afb      	ldrb	r3, [r7, #11]
 800906a:	3301      	adds	r3, #1
 800906c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800906e:	e038      	b.n	80090e2 <USBD_GetDescriptor+0x286>
 8009070:	e037      	b.n	80090e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	7c1b      	ldrb	r3, [r3, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d109      	bne.n	800908e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009082:	f107 0208 	add.w	r2, r7, #8
 8009086:	4610      	mov	r0, r2
 8009088:	4798      	blx	r3
 800908a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800908c:	e029      	b.n	80090e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800908e:	6839      	ldr	r1, [r7, #0]
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 f9f3 	bl	800947c <USBD_CtlError>
        err++;
 8009096:	7afb      	ldrb	r3, [r7, #11]
 8009098:	3301      	adds	r3, #1
 800909a:	72fb      	strb	r3, [r7, #11]
      break;
 800909c:	e021      	b.n	80090e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	7c1b      	ldrb	r3, [r3, #16]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d10d      	bne.n	80090c2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ae:	f107 0208 	add.w	r2, r7, #8
 80090b2:	4610      	mov	r0, r2
 80090b4:	4798      	blx	r3
 80090b6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	3301      	adds	r3, #1
 80090bc:	2207      	movs	r2, #7
 80090be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090c0:	e00f      	b.n	80090e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090c2:	6839      	ldr	r1, [r7, #0]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 f9d9 	bl	800947c <USBD_CtlError>
        err++;
 80090ca:	7afb      	ldrb	r3, [r7, #11]
 80090cc:	3301      	adds	r3, #1
 80090ce:	72fb      	strb	r3, [r7, #11]
      break;
 80090d0:	e007      	b.n	80090e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f9d1 	bl	800947c <USBD_CtlError>
      err++;
 80090da:	7afb      	ldrb	r3, [r7, #11]
 80090dc:	3301      	adds	r3, #1
 80090de:	72fb      	strb	r3, [r7, #11]
      break;
 80090e0:	bf00      	nop
  }

  if (err != 0U)
 80090e2:	7afb      	ldrb	r3, [r7, #11]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d11c      	bne.n	8009122 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80090e8:	893b      	ldrh	r3, [r7, #8]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d011      	beq.n	8009112 <USBD_GetDescriptor+0x2b6>
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	88db      	ldrh	r3, [r3, #6]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00d      	beq.n	8009112 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	88da      	ldrh	r2, [r3, #6]
 80090fa:	893b      	ldrh	r3, [r7, #8]
 80090fc:	4293      	cmp	r3, r2
 80090fe:	bf28      	it	cs
 8009100:	4613      	movcs	r3, r2
 8009102:	b29b      	uxth	r3, r3
 8009104:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009106:	893b      	ldrh	r3, [r7, #8]
 8009108:	461a      	mov	r2, r3
 800910a:	68f9      	ldr	r1, [r7, #12]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fa1f 	bl	8009550 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	88db      	ldrh	r3, [r3, #6]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d104      	bne.n	8009124 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fa76 	bl	800960c <USBD_CtlSendStatus>
 8009120:	e000      	b.n	8009124 <USBD_GetDescriptor+0x2c8>
    return;
 8009122:	bf00      	nop
    }
  }
}
 8009124:	3710      	adds	r7, #16
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}
 800912a:	bf00      	nop

0800912c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b084      	sub	sp, #16
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	889b      	ldrh	r3, [r3, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d130      	bne.n	80091a0 <USBD_SetAddress+0x74>
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	88db      	ldrh	r3, [r3, #6]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d12c      	bne.n	80091a0 <USBD_SetAddress+0x74>
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	885b      	ldrh	r3, [r3, #2]
 800914a:	2b7f      	cmp	r3, #127	@ 0x7f
 800914c:	d828      	bhi.n	80091a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	885b      	ldrh	r3, [r3, #2]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009158:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009160:	2b03      	cmp	r3, #3
 8009162:	d104      	bne.n	800916e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009164:	6839      	ldr	r1, [r7, #0]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f988 	bl	800947c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800916c:	e01d      	b.n	80091aa <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	7bfa      	ldrb	r2, [r7, #15]
 8009172:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fe9d 	bl	8009eba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f000 fa43 	bl	800960c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009186:	7bfb      	ldrb	r3, [r7, #15]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d004      	beq.n	8009196 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2202      	movs	r2, #2
 8009190:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009194:	e009      	b.n	80091aa <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2201      	movs	r2, #1
 800919a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800919e:	e004      	b.n	80091aa <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091a0:	6839      	ldr	r1, [r7, #0]
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f96a 	bl	800947c <USBD_CtlError>
  }
}
 80091a8:	bf00      	nop
 80091aa:	bf00      	nop
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
	...

080091b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	885b      	ldrh	r3, [r3, #2]
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	4b41      	ldr	r3, [pc, #260]	@ (80092cc <USBD_SetConfig+0x118>)
 80091c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091c8:	4b40      	ldr	r3, [pc, #256]	@ (80092cc <USBD_SetConfig+0x118>)
 80091ca:	781b      	ldrb	r3, [r3, #0]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d904      	bls.n	80091da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80091d0:	6839      	ldr	r1, [r7, #0]
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f952 	bl	800947c <USBD_CtlError>
 80091d8:	e075      	b.n	80092c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d002      	beq.n	80091ea <USBD_SetConfig+0x36>
 80091e4:	2b03      	cmp	r3, #3
 80091e6:	d023      	beq.n	8009230 <USBD_SetConfig+0x7c>
 80091e8:	e062      	b.n	80092b0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80091ea:	4b38      	ldr	r3, [pc, #224]	@ (80092cc <USBD_SetConfig+0x118>)
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d01a      	beq.n	8009228 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80091f2:	4b36      	ldr	r3, [pc, #216]	@ (80092cc <USBD_SetConfig+0x118>)
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	461a      	mov	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2203      	movs	r2, #3
 8009200:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009204:	4b31      	ldr	r3, [pc, #196]	@ (80092cc <USBD_SetConfig+0x118>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7ff f9e7 	bl	80085de <USBD_SetClassConfig>
 8009210:	4603      	mov	r3, r0
 8009212:	2b02      	cmp	r3, #2
 8009214:	d104      	bne.n	8009220 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f92f 	bl	800947c <USBD_CtlError>
            return;
 800921e:	e052      	b.n	80092c6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 f9f3 	bl	800960c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009226:	e04e      	b.n	80092c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f9ef 	bl	800960c <USBD_CtlSendStatus>
        break;
 800922e:	e04a      	b.n	80092c6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009230:	4b26      	ldr	r3, [pc, #152]	@ (80092cc <USBD_SetConfig+0x118>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d112      	bne.n	800925e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2202      	movs	r2, #2
 800923c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009240:	4b22      	ldr	r3, [pc, #136]	@ (80092cc <USBD_SetConfig+0x118>)
 8009242:	781b      	ldrb	r3, [r3, #0]
 8009244:	461a      	mov	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800924a:	4b20      	ldr	r3, [pc, #128]	@ (80092cc <USBD_SetConfig+0x118>)
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	4619      	mov	r1, r3
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f7ff f9e3 	bl	800861c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f9d8 	bl	800960c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800925c:	e033      	b.n	80092c6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800925e:	4b1b      	ldr	r3, [pc, #108]	@ (80092cc <USBD_SetConfig+0x118>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	461a      	mov	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	429a      	cmp	r2, r3
 800926a:	d01d      	beq.n	80092a8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	b2db      	uxtb	r3, r3
 8009272:	4619      	mov	r1, r3
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7ff f9d1 	bl	800861c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800927a:	4b14      	ldr	r3, [pc, #80]	@ (80092cc <USBD_SetConfig+0x118>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009284:	4b11      	ldr	r3, [pc, #68]	@ (80092cc <USBD_SetConfig+0x118>)
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7ff f9a7 	bl	80085de <USBD_SetClassConfig>
 8009290:	4603      	mov	r3, r0
 8009292:	2b02      	cmp	r3, #2
 8009294:	d104      	bne.n	80092a0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009296:	6839      	ldr	r1, [r7, #0]
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f8ef 	bl	800947c <USBD_CtlError>
            return;
 800929e:	e012      	b.n	80092c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f9b3 	bl	800960c <USBD_CtlSendStatus>
        break;
 80092a6:	e00e      	b.n	80092c6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f000 f9af 	bl	800960c <USBD_CtlSendStatus>
        break;
 80092ae:	e00a      	b.n	80092c6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80092b0:	6839      	ldr	r1, [r7, #0]
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 f8e2 	bl	800947c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80092b8:	4b04      	ldr	r3, [pc, #16]	@ (80092cc <USBD_SetConfig+0x118>)
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff f9ac 	bl	800861c <USBD_ClrClassConfig>
        break;
 80092c4:	bf00      	nop
    }
  }
}
 80092c6:	3708      	adds	r7, #8
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	200004f4 	.word	0x200004f4

080092d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	88db      	ldrh	r3, [r3, #6]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d004      	beq.n	80092ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80092e2:	6839      	ldr	r1, [r7, #0]
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f8c9 	bl	800947c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80092ea:	e022      	b.n	8009332 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	dc02      	bgt.n	80092fc <USBD_GetConfig+0x2c>
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	dc03      	bgt.n	8009302 <USBD_GetConfig+0x32>
 80092fa:	e015      	b.n	8009328 <USBD_GetConfig+0x58>
 80092fc:	2b03      	cmp	r3, #3
 80092fe:	d00b      	beq.n	8009318 <USBD_GetConfig+0x48>
 8009300:	e012      	b.n	8009328 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	3308      	adds	r3, #8
 800930c:	2201      	movs	r2, #1
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f91d 	bl	8009550 <USBD_CtlSendData>
        break;
 8009316:	e00c      	b.n	8009332 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	3304      	adds	r3, #4
 800931c:	2201      	movs	r2, #1
 800931e:	4619      	mov	r1, r3
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f915 	bl	8009550 <USBD_CtlSendData>
        break;
 8009326:	e004      	b.n	8009332 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009328:	6839      	ldr	r1, [r7, #0]
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f8a6 	bl	800947c <USBD_CtlError>
        break;
 8009330:	bf00      	nop
}
 8009332:	bf00      	nop
 8009334:	3708      	adds	r7, #8
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b082      	sub	sp, #8
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800934a:	3b01      	subs	r3, #1
 800934c:	2b02      	cmp	r3, #2
 800934e:	d81e      	bhi.n	800938e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	88db      	ldrh	r3, [r3, #6]
 8009354:	2b02      	cmp	r3, #2
 8009356:	d004      	beq.n	8009362 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009358:	6839      	ldr	r1, [r7, #0]
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f88e 	bl	800947c <USBD_CtlError>
        break;
 8009360:	e01a      	b.n	8009398 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2201      	movs	r2, #1
 8009366:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800936e:	2b00      	cmp	r3, #0
 8009370:	d005      	beq.n	800937e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	f043 0202 	orr.w	r2, r3, #2
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	330c      	adds	r3, #12
 8009382:	2202      	movs	r2, #2
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f8e2 	bl	8009550 <USBD_CtlSendData>
      break;
 800938c:	e004      	b.n	8009398 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f873 	bl	800947c <USBD_CtlError>
      break;
 8009396:	bf00      	nop
  }
}
 8009398:	bf00      	nop
 800939a:	3708      	adds	r7, #8
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	885b      	ldrh	r3, [r3, #2]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d106      	bne.n	80093c0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f926 	bl	800960c <USBD_CtlSendStatus>
  }
}
 80093c0:	bf00      	nop
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b082      	sub	sp, #8
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093d8:	3b01      	subs	r3, #1
 80093da:	2b02      	cmp	r3, #2
 80093dc:	d80b      	bhi.n	80093f6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	885b      	ldrh	r3, [r3, #2]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d10c      	bne.n	8009400 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f90c 	bl	800960c <USBD_CtlSendStatus>
      }
      break;
 80093f4:	e004      	b.n	8009400 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f83f 	bl	800947c <USBD_CtlError>
      break;
 80093fe:	e000      	b.n	8009402 <USBD_ClrFeature+0x3a>
      break;
 8009400:	bf00      	nop
  }
}
 8009402:	bf00      	nop
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800940a:	b480      	push	{r7}
 800940c:	b083      	sub	sp, #12
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	781a      	ldrb	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	785a      	ldrb	r2, [r3, #1]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	3302      	adds	r3, #2
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	461a      	mov	r2, r3
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	3303      	adds	r3, #3
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	021b      	lsls	r3, r3, #8
 8009434:	b29b      	uxth	r3, r3
 8009436:	4413      	add	r3, r2
 8009438:	b29a      	uxth	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	3304      	adds	r3, #4
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	461a      	mov	r2, r3
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	3305      	adds	r3, #5
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	021b      	lsls	r3, r3, #8
 800944e:	b29b      	uxth	r3, r3
 8009450:	4413      	add	r3, r2
 8009452:	b29a      	uxth	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	3306      	adds	r3, #6
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	3307      	adds	r3, #7
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	021b      	lsls	r3, r3, #8
 8009468:	b29b      	uxth	r3, r3
 800946a:	4413      	add	r3, r2
 800946c:	b29a      	uxth	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	80da      	strh	r2, [r3, #6]

}
 8009472:	bf00      	nop
 8009474:	370c      	adds	r7, #12
 8009476:	46bd      	mov	sp, r7
 8009478:	bc80      	pop	{r7}
 800947a:	4770      	bx	lr

0800947c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b082      	sub	sp, #8
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009486:	2180      	movs	r1, #128	@ 0x80
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fcad 	bl	8009de8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800948e:	2100      	movs	r1, #0
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 fca9 	bl	8009de8 <USBD_LL_StallEP>
}
 8009496:	bf00      	nop
 8009498:	3708      	adds	r7, #8
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}

0800949e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800949e:	b580      	push	{r7, lr}
 80094a0:	b086      	sub	sp, #24
 80094a2:	af00      	add	r7, sp, #0
 80094a4:	60f8      	str	r0, [r7, #12]
 80094a6:	60b9      	str	r1, [r7, #8]
 80094a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094aa:	2300      	movs	r3, #0
 80094ac:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d032      	beq.n	800951a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f000 f834 	bl	8009522 <USBD_GetLen>
 80094ba:	4603      	mov	r3, r0
 80094bc:	3301      	adds	r3, #1
 80094be:	b29b      	uxth	r3, r3
 80094c0:	005b      	lsls	r3, r3, #1
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80094c8:	7dfb      	ldrb	r3, [r7, #23]
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	75fa      	strb	r2, [r7, #23]
 80094ce:	461a      	mov	r2, r3
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	4413      	add	r3, r2
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	7812      	ldrb	r2, [r2, #0]
 80094d8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80094da:	7dfb      	ldrb	r3, [r7, #23]
 80094dc:	1c5a      	adds	r2, r3, #1
 80094de:	75fa      	strb	r2, [r7, #23]
 80094e0:	461a      	mov	r2, r3
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	4413      	add	r3, r2
 80094e6:	2203      	movs	r2, #3
 80094e8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80094ea:	e012      	b.n	8009512 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	60fa      	str	r2, [r7, #12]
 80094f2:	7dfa      	ldrb	r2, [r7, #23]
 80094f4:	1c51      	adds	r1, r2, #1
 80094f6:	75f9      	strb	r1, [r7, #23]
 80094f8:	4611      	mov	r1, r2
 80094fa:	68ba      	ldr	r2, [r7, #8]
 80094fc:	440a      	add	r2, r1
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009502:	7dfb      	ldrb	r3, [r7, #23]
 8009504:	1c5a      	adds	r2, r3, #1
 8009506:	75fa      	strb	r2, [r7, #23]
 8009508:	461a      	mov	r2, r3
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	4413      	add	r3, r2
 800950e:	2200      	movs	r2, #0
 8009510:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	781b      	ldrb	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e8      	bne.n	80094ec <USBD_GetString+0x4e>
    }
  }
}
 800951a:	bf00      	nop
 800951c:	3718      	adds	r7, #24
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009522:	b480      	push	{r7}
 8009524:	b085      	sub	sp, #20
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800952e:	e005      	b.n	800953c <USBD_GetLen+0x1a>
  {
    len++;
 8009530:	7bfb      	ldrb	r3, [r7, #15]
 8009532:	3301      	adds	r3, #1
 8009534:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	3301      	adds	r3, #1
 800953a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1f5      	bne.n	8009530 <USBD_GetLen+0xe>
  }

  return len;
 8009544:	7bfb      	ldrb	r3, [r7, #15]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3714      	adds	r7, #20
 800954a:	46bd      	mov	sp, r7
 800954c:	bc80      	pop	{r7}
 800954e:	4770      	bx	lr

08009550 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	4613      	mov	r3, r2
 800955c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2202      	movs	r2, #2
 8009562:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009566:	88fa      	ldrh	r2, [r7, #6]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800956c:	88fa      	ldrh	r2, [r7, #6]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009572:	88fb      	ldrh	r3, [r7, #6]
 8009574:	68ba      	ldr	r2, [r7, #8]
 8009576:	2100      	movs	r1, #0
 8009578:	68f8      	ldr	r0, [r7, #12]
 800957a:	f000 fcbd 	bl	8009ef8 <USBD_LL_Transmit>

  return USBD_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	3710      	adds	r7, #16
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	60f8      	str	r0, [r7, #12]
 8009590:	60b9      	str	r1, [r7, #8]
 8009592:	4613      	mov	r3, r2
 8009594:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009596:	88fb      	ldrh	r3, [r7, #6]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	2100      	movs	r1, #0
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 fcab 	bl	8009ef8 <USBD_LL_Transmit>

  return USBD_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	4613      	mov	r3, r2
 80095b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2203      	movs	r2, #3
 80095be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80095c2:	88fa      	ldrh	r2, [r7, #6]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80095ca:	88fa      	ldrh	r2, [r7, #6]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095d2:	88fb      	ldrh	r3, [r7, #6]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	2100      	movs	r1, #0
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 fcb0 	bl	8009f3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80095de:	2300      	movs	r3, #0
}
 80095e0:	4618      	mov	r0, r3
 80095e2:	3710      	adds	r7, #16
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	4613      	mov	r3, r2
 80095f4:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80095f6:	88fb      	ldrh	r3, [r7, #6]
 80095f8:	68ba      	ldr	r2, [r7, #8]
 80095fa:	2100      	movs	r1, #0
 80095fc:	68f8      	ldr	r0, [r7, #12]
 80095fe:	f000 fc9e 	bl	8009f3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b082      	sub	sp, #8
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	2204      	movs	r2, #4
 8009618:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800961c:	2300      	movs	r3, #0
 800961e:	2200      	movs	r2, #0
 8009620:	2100      	movs	r1, #0
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fc68 	bl	8009ef8 <USBD_LL_Transmit>

  return USBD_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2205      	movs	r2, #5
 800963e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009642:	2300      	movs	r3, #0
 8009644:	2200      	movs	r2, #0
 8009646:	2100      	movs	r1, #0
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fc78 	bl	8009f3e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800964e:	2300      	movs	r3, #0
}
 8009650:	4618      	mov	r0, r3
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009658:	b480      	push	{r7}
 800965a:	b087      	sub	sp, #28
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	4613      	mov	r3, r2
 8009664:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009666:	2301      	movs	r3, #1
 8009668:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800966a:	2300      	movs	r3, #0
 800966c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800966e:	4b1e      	ldr	r3, [pc, #120]	@ (80096e8 <FATFS_LinkDriverEx+0x90>)
 8009670:	7a5b      	ldrb	r3, [r3, #9]
 8009672:	b2db      	uxtb	r3, r3
 8009674:	2b01      	cmp	r3, #1
 8009676:	d831      	bhi.n	80096dc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009678:	4b1b      	ldr	r3, [pc, #108]	@ (80096e8 <FATFS_LinkDriverEx+0x90>)
 800967a:	7a5b      	ldrb	r3, [r3, #9]
 800967c:	b2db      	uxtb	r3, r3
 800967e:	461a      	mov	r2, r3
 8009680:	4b19      	ldr	r3, [pc, #100]	@ (80096e8 <FATFS_LinkDriverEx+0x90>)
 8009682:	2100      	movs	r1, #0
 8009684:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8009686:	4b18      	ldr	r3, [pc, #96]	@ (80096e8 <FATFS_LinkDriverEx+0x90>)
 8009688:	7a5b      	ldrb	r3, [r3, #9]
 800968a:	b2db      	uxtb	r3, r3
 800968c:	4a16      	ldr	r2, [pc, #88]	@ (80096e8 <FATFS_LinkDriverEx+0x90>)
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8009696:	4b14      	ldr	r3, [pc, #80]	@ (80096e8 <FATFS_LinkDriverEx+0x90>)
 8009698:	7a5b      	ldrb	r3, [r3, #9]
 800969a:	b2db      	uxtb	r3, r3
 800969c:	461a      	mov	r2, r3
 800969e:	4b12      	ldr	r3, [pc, #72]	@ (80096e8 <FATFS_LinkDriverEx+0x90>)
 80096a0:	4413      	add	r3, r2
 80096a2:	79fa      	ldrb	r2, [r7, #7]
 80096a4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80096a6:	4b10      	ldr	r3, [pc, #64]	@ (80096e8 <FATFS_LinkDriverEx+0x90>)
 80096a8:	7a5b      	ldrb	r3, [r3, #9]
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	1c5a      	adds	r2, r3, #1
 80096ae:	b2d1      	uxtb	r1, r2
 80096b0:	4a0d      	ldr	r2, [pc, #52]	@ (80096e8 <FATFS_LinkDriverEx+0x90>)
 80096b2:	7251      	strb	r1, [r2, #9]
 80096b4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80096b6:	7dbb      	ldrb	r3, [r7, #22]
 80096b8:	3330      	adds	r3, #48	@ 0x30
 80096ba:	b2da      	uxtb	r2, r3
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	3301      	adds	r3, #1
 80096c4:	223a      	movs	r2, #58	@ 0x3a
 80096c6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	3302      	adds	r3, #2
 80096cc:	222f      	movs	r2, #47	@ 0x2f
 80096ce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	3303      	adds	r3, #3
 80096d4:	2200      	movs	r2, #0
 80096d6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80096d8:	2300      	movs	r3, #0
 80096da:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80096dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	371c      	adds	r7, #28
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bc80      	pop	{r7}
 80096e6:	4770      	bx	lr
 80096e8:	200004f8 	.word	0x200004f8

080096ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b082      	sub	sp, #8
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80096f6:	2200      	movs	r2, #0
 80096f8:	6839      	ldr	r1, [r7, #0]
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7ff ffac 	bl	8009658 <FATFS_LinkDriverEx>
 8009700:	4603      	mov	r3, r0
}
 8009702:	4618      	mov	r0, r3
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
	...

0800970c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009710:	2200      	movs	r2, #0
 8009712:	4912      	ldr	r1, [pc, #72]	@ (800975c <MX_USB_DEVICE_Init+0x50>)
 8009714:	4812      	ldr	r0, [pc, #72]	@ (8009760 <MX_USB_DEVICE_Init+0x54>)
 8009716:	f7fe ff08 	bl	800852a <USBD_Init>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d001      	beq.n	8009724 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009720:	f7f7 ffba 	bl	8001698 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009724:	490f      	ldr	r1, [pc, #60]	@ (8009764 <MX_USB_DEVICE_Init+0x58>)
 8009726:	480e      	ldr	r0, [pc, #56]	@ (8009760 <MX_USB_DEVICE_Init+0x54>)
 8009728:	f7fe ff2a 	bl	8008580 <USBD_RegisterClass>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009732:	f7f7 ffb1 	bl	8001698 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009736:	490c      	ldr	r1, [pc, #48]	@ (8009768 <MX_USB_DEVICE_Init+0x5c>)
 8009738:	4809      	ldr	r0, [pc, #36]	@ (8009760 <MX_USB_DEVICE_Init+0x54>)
 800973a:	f7fe fe5b 	bl	80083f4 <USBD_CDC_RegisterInterface>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009744:	f7f7 ffa8 	bl	8001698 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009748:	4805      	ldr	r0, [pc, #20]	@ (8009760 <MX_USB_DEVICE_Init+0x54>)
 800974a:	f7fe ff32 	bl	80085b2 <USBD_Start>
 800974e:	4603      	mov	r3, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009754:	f7f7 ffa0 	bl	8001698 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009758:	bf00      	nop
 800975a:	bd80      	pop	{r7, pc}
 800975c:	20000140 	.word	0x20000140
 8009760:	20000504 	.word	0x20000504
 8009764:	2000002c 	.word	0x2000002c
 8009768:	20000130 	.word	0x20000130

0800976c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009770:	2200      	movs	r2, #0
 8009772:	4905      	ldr	r1, [pc, #20]	@ (8009788 <CDC_Init_FS+0x1c>)
 8009774:	4805      	ldr	r0, [pc, #20]	@ (800978c <CDC_Init_FS+0x20>)
 8009776:	f7fe fe53 	bl	8008420 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800977a:	4905      	ldr	r1, [pc, #20]	@ (8009790 <CDC_Init_FS+0x24>)
 800977c:	4803      	ldr	r0, [pc, #12]	@ (800978c <CDC_Init_FS+0x20>)
 800977e:	f7fe fe68 	bl	8008452 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009782:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009784:	4618      	mov	r0, r3
 8009786:	bd80      	pop	{r7, pc}
 8009788:	20000bc8 	.word	0x20000bc8
 800978c:	20000504 	.word	0x20000504
 8009790:	200007c8 	.word	0x200007c8

08009794 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009794:	b480      	push	{r7}
 8009796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009798:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800979a:	4618      	mov	r0, r3
 800979c:	46bd      	mov	sp, r7
 800979e:	bc80      	pop	{r7}
 80097a0:	4770      	bx	lr
	...

080097a4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	6039      	str	r1, [r7, #0]
 80097ae:	71fb      	strb	r3, [r7, #7]
 80097b0:	4613      	mov	r3, r2
 80097b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80097b4:	79fb      	ldrb	r3, [r7, #7]
 80097b6:	2b23      	cmp	r3, #35	@ 0x23
 80097b8:	d84a      	bhi.n	8009850 <CDC_Control_FS+0xac>
 80097ba:	a201      	add	r2, pc, #4	@ (adr r2, 80097c0 <CDC_Control_FS+0x1c>)
 80097bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c0:	08009851 	.word	0x08009851
 80097c4:	08009851 	.word	0x08009851
 80097c8:	08009851 	.word	0x08009851
 80097cc:	08009851 	.word	0x08009851
 80097d0:	08009851 	.word	0x08009851
 80097d4:	08009851 	.word	0x08009851
 80097d8:	08009851 	.word	0x08009851
 80097dc:	08009851 	.word	0x08009851
 80097e0:	08009851 	.word	0x08009851
 80097e4:	08009851 	.word	0x08009851
 80097e8:	08009851 	.word	0x08009851
 80097ec:	08009851 	.word	0x08009851
 80097f0:	08009851 	.word	0x08009851
 80097f4:	08009851 	.word	0x08009851
 80097f8:	08009851 	.word	0x08009851
 80097fc:	08009851 	.word	0x08009851
 8009800:	08009851 	.word	0x08009851
 8009804:	08009851 	.word	0x08009851
 8009808:	08009851 	.word	0x08009851
 800980c:	08009851 	.word	0x08009851
 8009810:	08009851 	.word	0x08009851
 8009814:	08009851 	.word	0x08009851
 8009818:	08009851 	.word	0x08009851
 800981c:	08009851 	.word	0x08009851
 8009820:	08009851 	.word	0x08009851
 8009824:	08009851 	.word	0x08009851
 8009828:	08009851 	.word	0x08009851
 800982c:	08009851 	.word	0x08009851
 8009830:	08009851 	.word	0x08009851
 8009834:	08009851 	.word	0x08009851
 8009838:	08009851 	.word	0x08009851
 800983c:	08009851 	.word	0x08009851
 8009840:	08009851 	.word	0x08009851
 8009844:	08009851 	.word	0x08009851
 8009848:	08009851 	.word	0x08009851
 800984c:	08009851 	.word	0x08009851
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009850:	bf00      	nop
  }

  return (USBD_OK);
 8009852:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009854:	4618      	mov	r0, r3
 8009856:	370c      	adds	r7, #12
 8009858:	46bd      	mov	sp, r7
 800985a:	bc80      	pop	{r7}
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop

08009860 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800986a:	6879      	ldr	r1, [r7, #4]
 800986c:	4805      	ldr	r0, [pc, #20]	@ (8009884 <CDC_Receive_FS+0x24>)
 800986e:	f7fe fdf0 	bl	8008452 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009872:	4804      	ldr	r0, [pc, #16]	@ (8009884 <CDC_Receive_FS+0x24>)
 8009874:	f7fe fe2f 	bl	80084d6 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009878:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800987a:	4618      	mov	r0, r3
 800987c:	3708      	adds	r7, #8
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	20000504 	.word	0x20000504

08009888 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009898:	4b0d      	ldr	r3, [pc, #52]	@ (80098d0 <CDC_Transmit_FS+0x48>)
 800989a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800989e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d001      	beq.n	80098ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80098aa:	2301      	movs	r3, #1
 80098ac:	e00b      	b.n	80098c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80098ae:	887b      	ldrh	r3, [r7, #2]
 80098b0:	461a      	mov	r2, r3
 80098b2:	6879      	ldr	r1, [r7, #4]
 80098b4:	4806      	ldr	r0, [pc, #24]	@ (80098d0 <CDC_Transmit_FS+0x48>)
 80098b6:	f7fe fdb3 	bl	8008420 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80098ba:	4805      	ldr	r0, [pc, #20]	@ (80098d0 <CDC_Transmit_FS+0x48>)
 80098bc:	f7fe fddc 	bl	8008478 <USBD_CDC_TransmitPacket>
 80098c0:	4603      	mov	r3, r0
 80098c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	20000504 	.word	0x20000504

080098d4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	4603      	mov	r3, r0
 80098dc:	6039      	str	r1, [r7, #0]
 80098de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	2212      	movs	r2, #18
 80098e4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80098e6:	4b03      	ldr	r3, [pc, #12]	@ (80098f4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bc80      	pop	{r7}
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	2000015c 	.word	0x2000015c

080098f8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	4603      	mov	r3, r0
 8009900:	6039      	str	r1, [r7, #0]
 8009902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2204      	movs	r2, #4
 8009908:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800990a:	4b03      	ldr	r3, [pc, #12]	@ (8009918 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800990c:	4618      	mov	r0, r3
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	bc80      	pop	{r7}
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	20000170 	.word	0x20000170

0800991c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b082      	sub	sp, #8
 8009920:	af00      	add	r7, sp, #0
 8009922:	4603      	mov	r3, r0
 8009924:	6039      	str	r1, [r7, #0]
 8009926:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009928:	79fb      	ldrb	r3, [r7, #7]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d105      	bne.n	800993a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	4907      	ldr	r1, [pc, #28]	@ (8009950 <USBD_FS_ProductStrDescriptor+0x34>)
 8009932:	4808      	ldr	r0, [pc, #32]	@ (8009954 <USBD_FS_ProductStrDescriptor+0x38>)
 8009934:	f7ff fdb3 	bl	800949e <USBD_GetString>
 8009938:	e004      	b.n	8009944 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800993a:	683a      	ldr	r2, [r7, #0]
 800993c:	4904      	ldr	r1, [pc, #16]	@ (8009950 <USBD_FS_ProductStrDescriptor+0x34>)
 800993e:	4805      	ldr	r0, [pc, #20]	@ (8009954 <USBD_FS_ProductStrDescriptor+0x38>)
 8009940:	f7ff fdad 	bl	800949e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009944:	4b02      	ldr	r3, [pc, #8]	@ (8009950 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009946:	4618      	mov	r0, r3
 8009948:	3708      	adds	r7, #8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	20000fc8 	.word	0x20000fc8
 8009954:	0800cdb8 	.word	0x0800cdb8

08009958 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	4603      	mov	r3, r0
 8009960:	6039      	str	r1, [r7, #0]
 8009962:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009964:	683a      	ldr	r2, [r7, #0]
 8009966:	4904      	ldr	r1, [pc, #16]	@ (8009978 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009968:	4804      	ldr	r0, [pc, #16]	@ (800997c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800996a:	f7ff fd98 	bl	800949e <USBD_GetString>
  return USBD_StrDesc;
 800996e:	4b02      	ldr	r3, [pc, #8]	@ (8009978 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009970:	4618      	mov	r0, r3
 8009972:	3708      	adds	r7, #8
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	20000fc8 	.word	0x20000fc8
 800997c:	0800cdd0 	.word	0x0800cdd0

08009980 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	6039      	str	r1, [r7, #0]
 800998a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	221a      	movs	r2, #26
 8009990:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009992:	f000 f843 	bl	8009a1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009996:	4b02      	ldr	r3, [pc, #8]	@ (80099a0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009998:	4618      	mov	r0, r3
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	20000174 	.word	0x20000174

080099a4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	6039      	str	r1, [r7, #0]
 80099ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d105      	bne.n	80099c2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099b6:	683a      	ldr	r2, [r7, #0]
 80099b8:	4907      	ldr	r1, [pc, #28]	@ (80099d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099ba:	4808      	ldr	r0, [pc, #32]	@ (80099dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80099bc:	f7ff fd6f 	bl	800949e <USBD_GetString>
 80099c0:	e004      	b.n	80099cc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	4904      	ldr	r1, [pc, #16]	@ (80099d8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80099c6:	4805      	ldr	r0, [pc, #20]	@ (80099dc <USBD_FS_ConfigStrDescriptor+0x38>)
 80099c8:	f7ff fd69 	bl	800949e <USBD_GetString>
  }
  return USBD_StrDesc;
 80099cc:	4b02      	ldr	r3, [pc, #8]	@ (80099d8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3708      	adds	r7, #8
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	20000fc8 	.word	0x20000fc8
 80099dc:	0800cde4 	.word	0x0800cde4

080099e0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	4603      	mov	r3, r0
 80099e8:	6039      	str	r1, [r7, #0]
 80099ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d105      	bne.n	80099fe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099f2:	683a      	ldr	r2, [r7, #0]
 80099f4:	4907      	ldr	r1, [pc, #28]	@ (8009a14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80099f6:	4808      	ldr	r0, [pc, #32]	@ (8009a18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80099f8:	f7ff fd51 	bl	800949e <USBD_GetString>
 80099fc:	e004      	b.n	8009a08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	4904      	ldr	r1, [pc, #16]	@ (8009a14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009a02:	4805      	ldr	r0, [pc, #20]	@ (8009a18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009a04:	f7ff fd4b 	bl	800949e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a08:	4b02      	ldr	r3, [pc, #8]	@ (8009a14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3708      	adds	r7, #8
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20000fc8 	.word	0x20000fc8
 8009a18:	0800cdf0 	.word	0x0800cdf0

08009a1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b084      	sub	sp, #16
 8009a20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a22:	4b0f      	ldr	r3, [pc, #60]	@ (8009a60 <Get_SerialNum+0x44>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a28:	4b0e      	ldr	r3, [pc, #56]	@ (8009a64 <Get_SerialNum+0x48>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a68 <Get_SerialNum+0x4c>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4413      	add	r3, r2
 8009a3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d009      	beq.n	8009a56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009a42:	2208      	movs	r2, #8
 8009a44:	4909      	ldr	r1, [pc, #36]	@ (8009a6c <Get_SerialNum+0x50>)
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f000 f814 	bl	8009a74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009a4c:	2204      	movs	r2, #4
 8009a4e:	4908      	ldr	r1, [pc, #32]	@ (8009a70 <Get_SerialNum+0x54>)
 8009a50:	68b8      	ldr	r0, [r7, #8]
 8009a52:	f000 f80f 	bl	8009a74 <IntToUnicode>
  }
}
 8009a56:	bf00      	nop
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	1ffff7e8 	.word	0x1ffff7e8
 8009a64:	1ffff7ec 	.word	0x1ffff7ec
 8009a68:	1ffff7f0 	.word	0x1ffff7f0
 8009a6c:	20000176 	.word	0x20000176
 8009a70:	20000186 	.word	0x20000186

08009a74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b087      	sub	sp, #28
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	4613      	mov	r3, r2
 8009a80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a86:	2300      	movs	r3, #0
 8009a88:	75fb      	strb	r3, [r7, #23]
 8009a8a:	e027      	b.n	8009adc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	0f1b      	lsrs	r3, r3, #28
 8009a90:	2b09      	cmp	r3, #9
 8009a92:	d80b      	bhi.n	8009aac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	0f1b      	lsrs	r3, r3, #28
 8009a98:	b2da      	uxtb	r2, r3
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	005b      	lsls	r3, r3, #1
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	440b      	add	r3, r1
 8009aa4:	3230      	adds	r2, #48	@ 0x30
 8009aa6:	b2d2      	uxtb	r2, r2
 8009aa8:	701a      	strb	r2, [r3, #0]
 8009aaa:	e00a      	b.n	8009ac2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	0f1b      	lsrs	r3, r3, #28
 8009ab0:	b2da      	uxtb	r2, r3
 8009ab2:	7dfb      	ldrb	r3, [r7, #23]
 8009ab4:	005b      	lsls	r3, r3, #1
 8009ab6:	4619      	mov	r1, r3
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	440b      	add	r3, r1
 8009abc:	3237      	adds	r2, #55	@ 0x37
 8009abe:	b2d2      	uxtb	r2, r2
 8009ac0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	011b      	lsls	r3, r3, #4
 8009ac6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ac8:	7dfb      	ldrb	r3, [r7, #23]
 8009aca:	005b      	lsls	r3, r3, #1
 8009acc:	3301      	adds	r3, #1
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009ad6:	7dfb      	ldrb	r3, [r7, #23]
 8009ad8:	3301      	adds	r3, #1
 8009ada:	75fb      	strb	r3, [r7, #23]
 8009adc:	7dfa      	ldrb	r2, [r7, #23]
 8009ade:	79fb      	ldrb	r3, [r7, #7]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d3d3      	bcc.n	8009a8c <IntToUnicode+0x18>
  }
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	371c      	adds	r7, #28
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bc80      	pop	{r7}
 8009aee:	4770      	bx	lr

08009af0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a0d      	ldr	r2, [pc, #52]	@ (8009b34 <HAL_PCD_MspInit+0x44>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d113      	bne.n	8009b2a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009b02:	4b0d      	ldr	r3, [pc, #52]	@ (8009b38 <HAL_PCD_MspInit+0x48>)
 8009b04:	69db      	ldr	r3, [r3, #28]
 8009b06:	4a0c      	ldr	r2, [pc, #48]	@ (8009b38 <HAL_PCD_MspInit+0x48>)
 8009b08:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b0c:	61d3      	str	r3, [r2, #28]
 8009b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8009b38 <HAL_PCD_MspInit+0x48>)
 8009b10:	69db      	ldr	r3, [r3, #28]
 8009b12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	2014      	movs	r0, #20
 8009b20:	f7f8 f965 	bl	8001dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009b24:	2014      	movs	r0, #20
 8009b26:	f7f8 f97e 	bl	8001e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009b2a:	bf00      	nop
 8009b2c:	3710      	adds	r7, #16
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	40005c00 	.word	0x40005c00
 8009b38:	40021000 	.word	0x40021000

08009b3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009b50:	4619      	mov	r1, r3
 8009b52:	4610      	mov	r0, r2
 8009b54:	f7fe fd75 	bl	8008642 <USBD_LL_SetupStage>
}
 8009b58:	bf00      	nop
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009b72:	78fa      	ldrb	r2, [r7, #3]
 8009b74:	6879      	ldr	r1, [r7, #4]
 8009b76:	4613      	mov	r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	00db      	lsls	r3, r3, #3
 8009b7e:	440b      	add	r3, r1
 8009b80:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	78fb      	ldrb	r3, [r7, #3]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	f7fe fda7 	bl	80086dc <USBD_LL_DataOutStage>
}
 8009b8e:	bf00      	nop
 8009b90:	3708      	adds	r7, #8
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b082      	sub	sp, #8
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	6078      	str	r0, [r7, #4]
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 8009ba8:	78fa      	ldrb	r2, [r7, #3]
 8009baa:	6879      	ldr	r1, [r7, #4]
 8009bac:	4613      	mov	r3, r2
 8009bae:	009b      	lsls	r3, r3, #2
 8009bb0:	4413      	add	r3, r2
 8009bb2:	00db      	lsls	r3, r3, #3
 8009bb4:	440b      	add	r3, r1
 8009bb6:	3324      	adds	r3, #36	@ 0x24
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	78fb      	ldrb	r3, [r7, #3]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	f7fe fdfe 	bl	80087be <USBD_LL_DataInStage>
}
 8009bc2:	bf00      	nop
 8009bc4:	3708      	adds	r7, #8
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b082      	sub	sp, #8
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f7fe ff0e 	bl	80089fa <USBD_LL_SOF>
}
 8009bde:	bf00      	nop
 8009be0:	3708      	adds	r7, #8
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}

08009be6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009be6:	b580      	push	{r7, lr}
 8009be8:	b084      	sub	sp, #16
 8009bea:	af00      	add	r7, sp, #0
 8009bec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	799b      	ldrb	r3, [r3, #6]
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d001      	beq.n	8009bfe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009bfa:	f7f7 fd4d 	bl	8001698 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c04:	7bfa      	ldrb	r2, [r7, #15]
 8009c06:	4611      	mov	r1, r2
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe febe 	bl	800898a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fe fe77 	bl	8008908 <USBD_LL_Reset>
}
 8009c1a:	bf00      	nop
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
	...

08009c24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe feb8 	bl	80089a8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	7a9b      	ldrb	r3, [r3, #10]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d005      	beq.n	8009c4c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c40:	4b04      	ldr	r3, [pc, #16]	@ (8009c54 <HAL_PCD_SuspendCallback+0x30>)
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	4a03      	ldr	r2, [pc, #12]	@ (8009c54 <HAL_PCD_SuspendCallback+0x30>)
 8009c46:	f043 0306 	orr.w	r3, r3, #6
 8009c4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009c4c:	bf00      	nop
 8009c4e:	3708      	adds	r7, #8
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	e000ed00 	.word	0xe000ed00

08009c58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7fe feb2 	bl	80089d0 <USBD_LL_Resume>
}
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009c7c:	4a28      	ldr	r2, [pc, #160]	@ (8009d20 <USBD_LL_Init+0xac>)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	4a26      	ldr	r2, [pc, #152]	@ (8009d20 <USBD_LL_Init+0xac>)
 8009c88:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009c8c:	4b24      	ldr	r3, [pc, #144]	@ (8009d20 <USBD_LL_Init+0xac>)
 8009c8e:	4a25      	ldr	r2, [pc, #148]	@ (8009d24 <USBD_LL_Init+0xb0>)
 8009c90:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009c92:	4b23      	ldr	r3, [pc, #140]	@ (8009d20 <USBD_LL_Init+0xac>)
 8009c94:	2208      	movs	r2, #8
 8009c96:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009c98:	4b21      	ldr	r3, [pc, #132]	@ (8009d20 <USBD_LL_Init+0xac>)
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009c9e:	4b20      	ldr	r3, [pc, #128]	@ (8009d20 <USBD_LL_Init+0xac>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8009d20 <USBD_LL_Init+0xac>)
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009caa:	4b1d      	ldr	r3, [pc, #116]	@ (8009d20 <USBD_LL_Init+0xac>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009cb0:	481b      	ldr	r0, [pc, #108]	@ (8009d20 <USBD_LL_Init+0xac>)
 8009cb2:	f7f9 fad4 	bl	800325e <HAL_PCD_Init>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009cbc:	f7f7 fcec 	bl	8001698 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009cc6:	2318      	movs	r3, #24
 8009cc8:	2200      	movs	r2, #0
 8009cca:	2100      	movs	r1, #0
 8009ccc:	f7fa ffe5 	bl	8004c9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009cd6:	2358      	movs	r3, #88	@ 0x58
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2180      	movs	r1, #128	@ 0x80
 8009cdc:	f7fa ffdd 	bl	8004c9a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009ce6:	23c0      	movs	r3, #192	@ 0xc0
 8009ce8:	2200      	movs	r2, #0
 8009cea:	2181      	movs	r1, #129	@ 0x81
 8009cec:	f7fa ffd5 	bl	8004c9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009cf6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	f7fa ffcc 	bl	8004c9a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	2182      	movs	r1, #130	@ 0x82
 8009d10:	f7fa ffc3 	bl	8004c9a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	200011c8 	.word	0x200011c8
 8009d24:	40005c00 	.word	0x40005c00

08009d28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d34:	2300      	movs	r3, #0
 8009d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f7f9 fb83 	bl	800344a <HAL_PCD_Start>
 8009d44:	4603      	mov	r3, r0
 8009d46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f000 f94e 	bl	8009fec <USBD_Get_USB_Status>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	4608      	mov	r0, r1
 8009d68:	4611      	mov	r1, r2
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	70fb      	strb	r3, [r7, #3]
 8009d70:	460b      	mov	r3, r1
 8009d72:	70bb      	strb	r3, [r7, #2]
 8009d74:	4613      	mov	r3, r2
 8009d76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009d86:	78bb      	ldrb	r3, [r7, #2]
 8009d88:	883a      	ldrh	r2, [r7, #0]
 8009d8a:	78f9      	ldrb	r1, [r7, #3]
 8009d8c:	f7f9 fcd7 	bl	800373e <HAL_PCD_EP_Open>
 8009d90:	4603      	mov	r3, r0
 8009d92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
 8009d96:	4618      	mov	r0, r3
 8009d98:	f000 f928 	bl	8009fec <USBD_Get_USB_Status>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009da0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
 8009db2:	460b      	mov	r3, r1
 8009db4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009db6:	2300      	movs	r3, #0
 8009db8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009dc4:	78fa      	ldrb	r2, [r7, #3]
 8009dc6:	4611      	mov	r1, r2
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f7f9 fd15 	bl	80037f8 <HAL_PCD_EP_Close>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f000 f909 	bl	8009fec <USBD_Get_USB_Status>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dde:	7bbb      	ldrb	r3, [r7, #14]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	460b      	mov	r3, r1
 8009df2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e02:	78fa      	ldrb	r2, [r7, #3]
 8009e04:	4611      	mov	r1, r2
 8009e06:	4618      	mov	r0, r3
 8009e08:	f7f9 fdbd 	bl	8003986 <HAL_PCD_EP_SetStall>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 f8ea 	bl	8009fec <USBD_Get_USB_Status>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b084      	sub	sp, #16
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e40:	78fa      	ldrb	r2, [r7, #3]
 8009e42:	4611      	mov	r1, r2
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7f9 fdfe 	bl	8003a46 <HAL_PCD_EP_ClrStall>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e4e:	7bfb      	ldrb	r3, [r7, #15]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 f8cb 	bl	8009fec <USBD_Get_USB_Status>
 8009e56:	4603      	mov	r3, r0
 8009e58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009e76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009e78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	da0b      	bge.n	8009e98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009e80:	78fb      	ldrb	r3, [r7, #3]
 8009e82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e86:	68f9      	ldr	r1, [r7, #12]
 8009e88:	4613      	mov	r3, r2
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	00db      	lsls	r3, r3, #3
 8009e90:	440b      	add	r3, r1
 8009e92:	3312      	adds	r3, #18
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	e00b      	b.n	8009eb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009e98:	78fb      	ldrb	r3, [r7, #3]
 8009e9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009e9e:	68f9      	ldr	r1, [r7, #12]
 8009ea0:	4613      	mov	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	4413      	add	r3, r2
 8009ea6:	00db      	lsls	r3, r3, #3
 8009ea8:	440b      	add	r3, r1
 8009eaa:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009eae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bc80      	pop	{r7}
 8009eb8:	4770      	bx	lr

08009eba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b084      	sub	sp, #16
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ed4:	78fa      	ldrb	r2, [r7, #3]
 8009ed6:	4611      	mov	r1, r2
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7f9 fc0c 	bl	80036f6 <HAL_PCD_SetAddress>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ee2:	7bfb      	ldrb	r3, [r7, #15]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 f881 	bl	8009fec <USBD_Get_USB_Status>
 8009eea:	4603      	mov	r3, r0
 8009eec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eee:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}

08009ef8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	607a      	str	r2, [r7, #4]
 8009f02:	461a      	mov	r2, r3
 8009f04:	460b      	mov	r3, r1
 8009f06:	72fb      	strb	r3, [r7, #11]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f10:	2300      	movs	r3, #0
 8009f12:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f1a:	893b      	ldrh	r3, [r7, #8]
 8009f1c:	7af9      	ldrb	r1, [r7, #11]
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	f7f9 fcfa 	bl	8003918 <HAL_PCD_EP_Transmit>
 8009f24:	4603      	mov	r3, r0
 8009f26:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f28:	7dfb      	ldrb	r3, [r7, #23]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f000 f85e 	bl	8009fec <USBD_Get_USB_Status>
 8009f30:	4603      	mov	r3, r0
 8009f32:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f34:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3718      	adds	r7, #24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b086      	sub	sp, #24
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	60f8      	str	r0, [r7, #12]
 8009f46:	607a      	str	r2, [r7, #4]
 8009f48:	461a      	mov	r2, r3
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	72fb      	strb	r3, [r7, #11]
 8009f4e:	4613      	mov	r3, r2
 8009f50:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f52:	2300      	movs	r3, #0
 8009f54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009f60:	893b      	ldrh	r3, [r7, #8]
 8009f62:	7af9      	ldrb	r1, [r7, #11]
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	f7f9 fc8f 	bl	8003888 <HAL_PCD_EP_Receive>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 f83b 	bl	8009fec <USBD_Get_USB_Status>
 8009f76:	4603      	mov	r3, r0
 8009f78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009f7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3718      	adds	r7, #24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f96:	78fa      	ldrb	r2, [r7, #3]
 8009f98:	4611      	mov	r1, r2
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7f9 fca5 	bl	80038ea <HAL_PCD_EP_GetRxCount>
 8009fa0:	4603      	mov	r3, r0
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
	...

08009fac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009fb4:	4b02      	ldr	r3, [pc, #8]	@ (8009fc0 <USBD_static_malloc+0x14>)
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bc80      	pop	{r7}
 8009fbe:	4770      	bx	lr
 8009fc0:	200014a0 	.word	0x200014a0

08009fc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b083      	sub	sp, #12
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]

}
 8009fcc:	bf00      	nop
 8009fce:	370c      	adds	r7, #12
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bc80      	pop	{r7}
 8009fd4:	4770      	bx	lr

08009fd6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b083      	sub	sp, #12
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	460b      	mov	r3, r1
 8009fe0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009fe2:	bf00      	nop
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bc80      	pop	{r7}
 8009fea:	4770      	bx	lr

08009fec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ffa:	79fb      	ldrb	r3, [r7, #7]
 8009ffc:	2b03      	cmp	r3, #3
 8009ffe:	d817      	bhi.n	800a030 <USBD_Get_USB_Status+0x44>
 800a000:	a201      	add	r2, pc, #4	@ (adr r2, 800a008 <USBD_Get_USB_Status+0x1c>)
 800a002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a006:	bf00      	nop
 800a008:	0800a019 	.word	0x0800a019
 800a00c:	0800a01f 	.word	0x0800a01f
 800a010:	0800a025 	.word	0x0800a025
 800a014:	0800a02b 	.word	0x0800a02b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	73fb      	strb	r3, [r7, #15]
    break;
 800a01c:	e00b      	b.n	800a036 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a01e:	2302      	movs	r3, #2
 800a020:	73fb      	strb	r3, [r7, #15]
    break;
 800a022:	e008      	b.n	800a036 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a024:	2301      	movs	r3, #1
 800a026:	73fb      	strb	r3, [r7, #15]
    break;
 800a028:	e005      	b.n	800a036 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a02a:	2302      	movs	r3, #2
 800a02c:	73fb      	strb	r3, [r7, #15]
    break;
 800a02e:	e002      	b.n	800a036 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a030:	2302      	movs	r3, #2
 800a032:	73fb      	strb	r3, [r7, #15]
    break;
 800a034:	bf00      	nop
  }
  return usb_status;
 800a036:	7bfb      	ldrb	r3, [r7, #15]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bc80      	pop	{r7}
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop

0800a044 <__cvt>:
 800a044:	2b00      	cmp	r3, #0
 800a046:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a04a:	461d      	mov	r5, r3
 800a04c:	bfbb      	ittet	lt
 800a04e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a052:	461d      	movlt	r5, r3
 800a054:	2300      	movge	r3, #0
 800a056:	232d      	movlt	r3, #45	@ 0x2d
 800a058:	b088      	sub	sp, #32
 800a05a:	4614      	mov	r4, r2
 800a05c:	bfb8      	it	lt
 800a05e:	4614      	movlt	r4, r2
 800a060:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a062:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a064:	7013      	strb	r3, [r2, #0]
 800a066:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a068:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a06c:	f023 0820 	bic.w	r8, r3, #32
 800a070:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a074:	d005      	beq.n	800a082 <__cvt+0x3e>
 800a076:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a07a:	d100      	bne.n	800a07e <__cvt+0x3a>
 800a07c:	3601      	adds	r6, #1
 800a07e:	2302      	movs	r3, #2
 800a080:	e000      	b.n	800a084 <__cvt+0x40>
 800a082:	2303      	movs	r3, #3
 800a084:	aa07      	add	r2, sp, #28
 800a086:	9204      	str	r2, [sp, #16]
 800a088:	aa06      	add	r2, sp, #24
 800a08a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a08e:	e9cd 3600 	strd	r3, r6, [sp]
 800a092:	4622      	mov	r2, r4
 800a094:	462b      	mov	r3, r5
 800a096:	f000 fe6f 	bl	800ad78 <_dtoa_r>
 800a09a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a09e:	4607      	mov	r7, r0
 800a0a0:	d119      	bne.n	800a0d6 <__cvt+0x92>
 800a0a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0a4:	07db      	lsls	r3, r3, #31
 800a0a6:	d50e      	bpl.n	800a0c6 <__cvt+0x82>
 800a0a8:	eb00 0906 	add.w	r9, r0, r6
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	4620      	mov	r0, r4
 800a0b2:	4629      	mov	r1, r5
 800a0b4:	f7f6 fd2c 	bl	8000b10 <__aeabi_dcmpeq>
 800a0b8:	b108      	cbz	r0, 800a0be <__cvt+0x7a>
 800a0ba:	f8cd 901c 	str.w	r9, [sp, #28]
 800a0be:	2230      	movs	r2, #48	@ 0x30
 800a0c0:	9b07      	ldr	r3, [sp, #28]
 800a0c2:	454b      	cmp	r3, r9
 800a0c4:	d31e      	bcc.n	800a104 <__cvt+0xc0>
 800a0c6:	4638      	mov	r0, r7
 800a0c8:	9b07      	ldr	r3, [sp, #28]
 800a0ca:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a0cc:	1bdb      	subs	r3, r3, r7
 800a0ce:	6013      	str	r3, [r2, #0]
 800a0d0:	b008      	add	sp, #32
 800a0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a0da:	eb00 0906 	add.w	r9, r0, r6
 800a0de:	d1e5      	bne.n	800a0ac <__cvt+0x68>
 800a0e0:	7803      	ldrb	r3, [r0, #0]
 800a0e2:	2b30      	cmp	r3, #48	@ 0x30
 800a0e4:	d10a      	bne.n	800a0fc <__cvt+0xb8>
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	4620      	mov	r0, r4
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	f7f6 fd0f 	bl	8000b10 <__aeabi_dcmpeq>
 800a0f2:	b918      	cbnz	r0, 800a0fc <__cvt+0xb8>
 800a0f4:	f1c6 0601 	rsb	r6, r6, #1
 800a0f8:	f8ca 6000 	str.w	r6, [sl]
 800a0fc:	f8da 3000 	ldr.w	r3, [sl]
 800a100:	4499      	add	r9, r3
 800a102:	e7d3      	b.n	800a0ac <__cvt+0x68>
 800a104:	1c59      	adds	r1, r3, #1
 800a106:	9107      	str	r1, [sp, #28]
 800a108:	701a      	strb	r2, [r3, #0]
 800a10a:	e7d9      	b.n	800a0c0 <__cvt+0x7c>

0800a10c <__exponent>:
 800a10c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a10e:	2900      	cmp	r1, #0
 800a110:	bfb6      	itet	lt
 800a112:	232d      	movlt	r3, #45	@ 0x2d
 800a114:	232b      	movge	r3, #43	@ 0x2b
 800a116:	4249      	neglt	r1, r1
 800a118:	2909      	cmp	r1, #9
 800a11a:	7002      	strb	r2, [r0, #0]
 800a11c:	7043      	strb	r3, [r0, #1]
 800a11e:	dd29      	ble.n	800a174 <__exponent+0x68>
 800a120:	f10d 0307 	add.w	r3, sp, #7
 800a124:	461d      	mov	r5, r3
 800a126:	270a      	movs	r7, #10
 800a128:	fbb1 f6f7 	udiv	r6, r1, r7
 800a12c:	461a      	mov	r2, r3
 800a12e:	fb07 1416 	mls	r4, r7, r6, r1
 800a132:	3430      	adds	r4, #48	@ 0x30
 800a134:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a138:	460c      	mov	r4, r1
 800a13a:	2c63      	cmp	r4, #99	@ 0x63
 800a13c:	4631      	mov	r1, r6
 800a13e:	f103 33ff 	add.w	r3, r3, #4294967295
 800a142:	dcf1      	bgt.n	800a128 <__exponent+0x1c>
 800a144:	3130      	adds	r1, #48	@ 0x30
 800a146:	1e94      	subs	r4, r2, #2
 800a148:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a14c:	4623      	mov	r3, r4
 800a14e:	1c41      	adds	r1, r0, #1
 800a150:	42ab      	cmp	r3, r5
 800a152:	d30a      	bcc.n	800a16a <__exponent+0x5e>
 800a154:	f10d 0309 	add.w	r3, sp, #9
 800a158:	1a9b      	subs	r3, r3, r2
 800a15a:	42ac      	cmp	r4, r5
 800a15c:	bf88      	it	hi
 800a15e:	2300      	movhi	r3, #0
 800a160:	3302      	adds	r3, #2
 800a162:	4403      	add	r3, r0
 800a164:	1a18      	subs	r0, r3, r0
 800a166:	b003      	add	sp, #12
 800a168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a16a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a16e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a172:	e7ed      	b.n	800a150 <__exponent+0x44>
 800a174:	2330      	movs	r3, #48	@ 0x30
 800a176:	3130      	adds	r1, #48	@ 0x30
 800a178:	7083      	strb	r3, [r0, #2]
 800a17a:	70c1      	strb	r1, [r0, #3]
 800a17c:	1d03      	adds	r3, r0, #4
 800a17e:	e7f1      	b.n	800a164 <__exponent+0x58>

0800a180 <_printf_float>:
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	b091      	sub	sp, #68	@ 0x44
 800a186:	460c      	mov	r4, r1
 800a188:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800a18c:	4616      	mov	r6, r2
 800a18e:	461f      	mov	r7, r3
 800a190:	4605      	mov	r5, r0
 800a192:	f000 fce1 	bl	800ab58 <_localeconv_r>
 800a196:	6803      	ldr	r3, [r0, #0]
 800a198:	4618      	mov	r0, r3
 800a19a:	9308      	str	r3, [sp, #32]
 800a19c:	f7f5 ffd8 	bl	8000150 <strlen>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	930e      	str	r3, [sp, #56]	@ 0x38
 800a1a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a1a8:	9009      	str	r0, [sp, #36]	@ 0x24
 800a1aa:	3307      	adds	r3, #7
 800a1ac:	f023 0307 	bic.w	r3, r3, #7
 800a1b0:	f103 0208 	add.w	r2, r3, #8
 800a1b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a1b8:	f8d4 b000 	ldr.w	fp, [r4]
 800a1bc:	f8c8 2000 	str.w	r2, [r8]
 800a1c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a1c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a1c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1ca:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a1d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a1d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a1da:	4b9c      	ldr	r3, [pc, #624]	@ (800a44c <_printf_float+0x2cc>)
 800a1dc:	f7f6 fcca 	bl	8000b74 <__aeabi_dcmpun>
 800a1e0:	bb70      	cbnz	r0, 800a240 <_printf_float+0xc0>
 800a1e2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ea:	4b98      	ldr	r3, [pc, #608]	@ (800a44c <_printf_float+0x2cc>)
 800a1ec:	f7f6 fca4 	bl	8000b38 <__aeabi_dcmple>
 800a1f0:	bb30      	cbnz	r0, 800a240 <_printf_float+0xc0>
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	4640      	mov	r0, r8
 800a1f8:	4649      	mov	r1, r9
 800a1fa:	f7f6 fc93 	bl	8000b24 <__aeabi_dcmplt>
 800a1fe:	b110      	cbz	r0, 800a206 <_printf_float+0x86>
 800a200:	232d      	movs	r3, #45	@ 0x2d
 800a202:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a206:	4a92      	ldr	r2, [pc, #584]	@ (800a450 <_printf_float+0x2d0>)
 800a208:	4b92      	ldr	r3, [pc, #584]	@ (800a454 <_printf_float+0x2d4>)
 800a20a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a20e:	bf94      	ite	ls
 800a210:	4690      	movls	r8, r2
 800a212:	4698      	movhi	r8, r3
 800a214:	2303      	movs	r3, #3
 800a216:	f04f 0900 	mov.w	r9, #0
 800a21a:	6123      	str	r3, [r4, #16]
 800a21c:	f02b 0304 	bic.w	r3, fp, #4
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	4633      	mov	r3, r6
 800a224:	4621      	mov	r1, r4
 800a226:	4628      	mov	r0, r5
 800a228:	9700      	str	r7, [sp, #0]
 800a22a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800a22c:	f000 f9d4 	bl	800a5d8 <_printf_common>
 800a230:	3001      	adds	r0, #1
 800a232:	f040 8090 	bne.w	800a356 <_printf_float+0x1d6>
 800a236:	f04f 30ff 	mov.w	r0, #4294967295
 800a23a:	b011      	add	sp, #68	@ 0x44
 800a23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a240:	4642      	mov	r2, r8
 800a242:	464b      	mov	r3, r9
 800a244:	4640      	mov	r0, r8
 800a246:	4649      	mov	r1, r9
 800a248:	f7f6 fc94 	bl	8000b74 <__aeabi_dcmpun>
 800a24c:	b148      	cbz	r0, 800a262 <_printf_float+0xe2>
 800a24e:	464b      	mov	r3, r9
 800a250:	2b00      	cmp	r3, #0
 800a252:	bfb8      	it	lt
 800a254:	232d      	movlt	r3, #45	@ 0x2d
 800a256:	4a80      	ldr	r2, [pc, #512]	@ (800a458 <_printf_float+0x2d8>)
 800a258:	bfb8      	it	lt
 800a25a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a25e:	4b7f      	ldr	r3, [pc, #508]	@ (800a45c <_printf_float+0x2dc>)
 800a260:	e7d3      	b.n	800a20a <_printf_float+0x8a>
 800a262:	6863      	ldr	r3, [r4, #4]
 800a264:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800a268:	1c5a      	adds	r2, r3, #1
 800a26a:	d13f      	bne.n	800a2ec <_printf_float+0x16c>
 800a26c:	2306      	movs	r3, #6
 800a26e:	6063      	str	r3, [r4, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800a276:	6023      	str	r3, [r4, #0]
 800a278:	9206      	str	r2, [sp, #24]
 800a27a:	aa0e      	add	r2, sp, #56	@ 0x38
 800a27c:	e9cd a204 	strd	sl, r2, [sp, #16]
 800a280:	aa0d      	add	r2, sp, #52	@ 0x34
 800a282:	9203      	str	r2, [sp, #12]
 800a284:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800a288:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a28c:	6863      	ldr	r3, [r4, #4]
 800a28e:	4642      	mov	r2, r8
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	4628      	mov	r0, r5
 800a294:	464b      	mov	r3, r9
 800a296:	910a      	str	r1, [sp, #40]	@ 0x28
 800a298:	f7ff fed4 	bl	800a044 <__cvt>
 800a29c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a29e:	4680      	mov	r8, r0
 800a2a0:	2947      	cmp	r1, #71	@ 0x47
 800a2a2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a2a4:	d128      	bne.n	800a2f8 <_printf_float+0x178>
 800a2a6:	1cc8      	adds	r0, r1, #3
 800a2a8:	db02      	blt.n	800a2b0 <_printf_float+0x130>
 800a2aa:	6863      	ldr	r3, [r4, #4]
 800a2ac:	4299      	cmp	r1, r3
 800a2ae:	dd40      	ble.n	800a332 <_printf_float+0x1b2>
 800a2b0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a2b4:	fa5f fa8a 	uxtb.w	sl, sl
 800a2b8:	4652      	mov	r2, sl
 800a2ba:	3901      	subs	r1, #1
 800a2bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a2c0:	910d      	str	r1, [sp, #52]	@ 0x34
 800a2c2:	f7ff ff23 	bl	800a10c <__exponent>
 800a2c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2c8:	4681      	mov	r9, r0
 800a2ca:	1813      	adds	r3, r2, r0
 800a2cc:	2a01      	cmp	r2, #1
 800a2ce:	6123      	str	r3, [r4, #16]
 800a2d0:	dc02      	bgt.n	800a2d8 <_printf_float+0x158>
 800a2d2:	6822      	ldr	r2, [r4, #0]
 800a2d4:	07d2      	lsls	r2, r2, #31
 800a2d6:	d501      	bpl.n	800a2dc <_printf_float+0x15c>
 800a2d8:	3301      	adds	r3, #1
 800a2da:	6123      	str	r3, [r4, #16]
 800a2dc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d09e      	beq.n	800a222 <_printf_float+0xa2>
 800a2e4:	232d      	movs	r3, #45	@ 0x2d
 800a2e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2ea:	e79a      	b.n	800a222 <_printf_float+0xa2>
 800a2ec:	2947      	cmp	r1, #71	@ 0x47
 800a2ee:	d1bf      	bne.n	800a270 <_printf_float+0xf0>
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d1bd      	bne.n	800a270 <_printf_float+0xf0>
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e7ba      	b.n	800a26e <_printf_float+0xee>
 800a2f8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a2fc:	d9dc      	bls.n	800a2b8 <_printf_float+0x138>
 800a2fe:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a302:	d118      	bne.n	800a336 <_printf_float+0x1b6>
 800a304:	2900      	cmp	r1, #0
 800a306:	6863      	ldr	r3, [r4, #4]
 800a308:	dd0b      	ble.n	800a322 <_printf_float+0x1a2>
 800a30a:	6121      	str	r1, [r4, #16]
 800a30c:	b913      	cbnz	r3, 800a314 <_printf_float+0x194>
 800a30e:	6822      	ldr	r2, [r4, #0]
 800a310:	07d0      	lsls	r0, r2, #31
 800a312:	d502      	bpl.n	800a31a <_printf_float+0x19a>
 800a314:	3301      	adds	r3, #1
 800a316:	440b      	add	r3, r1
 800a318:	6123      	str	r3, [r4, #16]
 800a31a:	f04f 0900 	mov.w	r9, #0
 800a31e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a320:	e7dc      	b.n	800a2dc <_printf_float+0x15c>
 800a322:	b913      	cbnz	r3, 800a32a <_printf_float+0x1aa>
 800a324:	6822      	ldr	r2, [r4, #0]
 800a326:	07d2      	lsls	r2, r2, #31
 800a328:	d501      	bpl.n	800a32e <_printf_float+0x1ae>
 800a32a:	3302      	adds	r3, #2
 800a32c:	e7f4      	b.n	800a318 <_printf_float+0x198>
 800a32e:	2301      	movs	r3, #1
 800a330:	e7f2      	b.n	800a318 <_printf_float+0x198>
 800a332:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a336:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a338:	4299      	cmp	r1, r3
 800a33a:	db05      	blt.n	800a348 <_printf_float+0x1c8>
 800a33c:	6823      	ldr	r3, [r4, #0]
 800a33e:	6121      	str	r1, [r4, #16]
 800a340:	07d8      	lsls	r0, r3, #31
 800a342:	d5ea      	bpl.n	800a31a <_printf_float+0x19a>
 800a344:	1c4b      	adds	r3, r1, #1
 800a346:	e7e7      	b.n	800a318 <_printf_float+0x198>
 800a348:	2900      	cmp	r1, #0
 800a34a:	bfcc      	ite	gt
 800a34c:	2201      	movgt	r2, #1
 800a34e:	f1c1 0202 	rsble	r2, r1, #2
 800a352:	4413      	add	r3, r2
 800a354:	e7e0      	b.n	800a318 <_printf_float+0x198>
 800a356:	6823      	ldr	r3, [r4, #0]
 800a358:	055a      	lsls	r2, r3, #21
 800a35a:	d407      	bmi.n	800a36c <_printf_float+0x1ec>
 800a35c:	6923      	ldr	r3, [r4, #16]
 800a35e:	4642      	mov	r2, r8
 800a360:	4631      	mov	r1, r6
 800a362:	4628      	mov	r0, r5
 800a364:	47b8      	blx	r7
 800a366:	3001      	adds	r0, #1
 800a368:	d12b      	bne.n	800a3c2 <_printf_float+0x242>
 800a36a:	e764      	b.n	800a236 <_printf_float+0xb6>
 800a36c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a370:	f240 80dc 	bls.w	800a52c <_printf_float+0x3ac>
 800a374:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a378:	2200      	movs	r2, #0
 800a37a:	2300      	movs	r3, #0
 800a37c:	f7f6 fbc8 	bl	8000b10 <__aeabi_dcmpeq>
 800a380:	2800      	cmp	r0, #0
 800a382:	d033      	beq.n	800a3ec <_printf_float+0x26c>
 800a384:	2301      	movs	r3, #1
 800a386:	4631      	mov	r1, r6
 800a388:	4628      	mov	r0, r5
 800a38a:	4a35      	ldr	r2, [pc, #212]	@ (800a460 <_printf_float+0x2e0>)
 800a38c:	47b8      	blx	r7
 800a38e:	3001      	adds	r0, #1
 800a390:	f43f af51 	beq.w	800a236 <_printf_float+0xb6>
 800a394:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800a398:	4543      	cmp	r3, r8
 800a39a:	db02      	blt.n	800a3a2 <_printf_float+0x222>
 800a39c:	6823      	ldr	r3, [r4, #0]
 800a39e:	07d8      	lsls	r0, r3, #31
 800a3a0:	d50f      	bpl.n	800a3c2 <_printf_float+0x242>
 800a3a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3a6:	4631      	mov	r1, r6
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	47b8      	blx	r7
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	f43f af42 	beq.w	800a236 <_printf_float+0xb6>
 800a3b2:	f04f 0900 	mov.w	r9, #0
 800a3b6:	f108 38ff 	add.w	r8, r8, #4294967295
 800a3ba:	f104 0a1a 	add.w	sl, r4, #26
 800a3be:	45c8      	cmp	r8, r9
 800a3c0:	dc09      	bgt.n	800a3d6 <_printf_float+0x256>
 800a3c2:	6823      	ldr	r3, [r4, #0]
 800a3c4:	079b      	lsls	r3, r3, #30
 800a3c6:	f100 8102 	bmi.w	800a5ce <_printf_float+0x44e>
 800a3ca:	68e0      	ldr	r0, [r4, #12]
 800a3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3ce:	4298      	cmp	r0, r3
 800a3d0:	bfb8      	it	lt
 800a3d2:	4618      	movlt	r0, r3
 800a3d4:	e731      	b.n	800a23a <_printf_float+0xba>
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	4652      	mov	r2, sl
 800a3da:	4631      	mov	r1, r6
 800a3dc:	4628      	mov	r0, r5
 800a3de:	47b8      	blx	r7
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	f43f af28 	beq.w	800a236 <_printf_float+0xb6>
 800a3e6:	f109 0901 	add.w	r9, r9, #1
 800a3ea:	e7e8      	b.n	800a3be <_printf_float+0x23e>
 800a3ec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	dc38      	bgt.n	800a464 <_printf_float+0x2e4>
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	4631      	mov	r1, r6
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	4a19      	ldr	r2, [pc, #100]	@ (800a460 <_printf_float+0x2e0>)
 800a3fa:	47b8      	blx	r7
 800a3fc:	3001      	adds	r0, #1
 800a3fe:	f43f af1a 	beq.w	800a236 <_printf_float+0xb6>
 800a402:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800a406:	ea59 0303 	orrs.w	r3, r9, r3
 800a40a:	d102      	bne.n	800a412 <_printf_float+0x292>
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	07d9      	lsls	r1, r3, #31
 800a410:	d5d7      	bpl.n	800a3c2 <_printf_float+0x242>
 800a412:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a416:	4631      	mov	r1, r6
 800a418:	4628      	mov	r0, r5
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	f43f af0a 	beq.w	800a236 <_printf_float+0xb6>
 800a422:	f04f 0a00 	mov.w	sl, #0
 800a426:	f104 0b1a 	add.w	fp, r4, #26
 800a42a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a42c:	425b      	negs	r3, r3
 800a42e:	4553      	cmp	r3, sl
 800a430:	dc01      	bgt.n	800a436 <_printf_float+0x2b6>
 800a432:	464b      	mov	r3, r9
 800a434:	e793      	b.n	800a35e <_printf_float+0x1de>
 800a436:	2301      	movs	r3, #1
 800a438:	465a      	mov	r2, fp
 800a43a:	4631      	mov	r1, r6
 800a43c:	4628      	mov	r0, r5
 800a43e:	47b8      	blx	r7
 800a440:	3001      	adds	r0, #1
 800a442:	f43f aef8 	beq.w	800a236 <_printf_float+0xb6>
 800a446:	f10a 0a01 	add.w	sl, sl, #1
 800a44a:	e7ee      	b.n	800a42a <_printf_float+0x2aa>
 800a44c:	7fefffff 	.word	0x7fefffff
 800a450:	0800ce2a 	.word	0x0800ce2a
 800a454:	0800ce2e 	.word	0x0800ce2e
 800a458:	0800ce32 	.word	0x0800ce32
 800a45c:	0800ce36 	.word	0x0800ce36
 800a460:	0800ce3a 	.word	0x0800ce3a
 800a464:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a466:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a46a:	4553      	cmp	r3, sl
 800a46c:	bfa8      	it	ge
 800a46e:	4653      	movge	r3, sl
 800a470:	2b00      	cmp	r3, #0
 800a472:	4699      	mov	r9, r3
 800a474:	dc36      	bgt.n	800a4e4 <_printf_float+0x364>
 800a476:	f04f 0b00 	mov.w	fp, #0
 800a47a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a47e:	f104 021a 	add.w	r2, r4, #26
 800a482:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a484:	930a      	str	r3, [sp, #40]	@ 0x28
 800a486:	eba3 0309 	sub.w	r3, r3, r9
 800a48a:	455b      	cmp	r3, fp
 800a48c:	dc31      	bgt.n	800a4f2 <_printf_float+0x372>
 800a48e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a490:	459a      	cmp	sl, r3
 800a492:	dc3a      	bgt.n	800a50a <_printf_float+0x38a>
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	07da      	lsls	r2, r3, #31
 800a498:	d437      	bmi.n	800a50a <_printf_float+0x38a>
 800a49a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a49c:	ebaa 0903 	sub.w	r9, sl, r3
 800a4a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4a2:	ebaa 0303 	sub.w	r3, sl, r3
 800a4a6:	4599      	cmp	r9, r3
 800a4a8:	bfa8      	it	ge
 800a4aa:	4699      	movge	r9, r3
 800a4ac:	f1b9 0f00 	cmp.w	r9, #0
 800a4b0:	dc33      	bgt.n	800a51a <_printf_float+0x39a>
 800a4b2:	f04f 0800 	mov.w	r8, #0
 800a4b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a4ba:	f104 0b1a 	add.w	fp, r4, #26
 800a4be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a4c0:	ebaa 0303 	sub.w	r3, sl, r3
 800a4c4:	eba3 0309 	sub.w	r3, r3, r9
 800a4c8:	4543      	cmp	r3, r8
 800a4ca:	f77f af7a 	ble.w	800a3c2 <_printf_float+0x242>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	465a      	mov	r2, fp
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	4628      	mov	r0, r5
 800a4d6:	47b8      	blx	r7
 800a4d8:	3001      	adds	r0, #1
 800a4da:	f43f aeac 	beq.w	800a236 <_printf_float+0xb6>
 800a4de:	f108 0801 	add.w	r8, r8, #1
 800a4e2:	e7ec      	b.n	800a4be <_printf_float+0x33e>
 800a4e4:	4642      	mov	r2, r8
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	47b8      	blx	r7
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d1c2      	bne.n	800a476 <_printf_float+0x2f6>
 800a4f0:	e6a1      	b.n	800a236 <_printf_float+0xb6>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	4631      	mov	r1, r6
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	920a      	str	r2, [sp, #40]	@ 0x28
 800a4fa:	47b8      	blx	r7
 800a4fc:	3001      	adds	r0, #1
 800a4fe:	f43f ae9a 	beq.w	800a236 <_printf_float+0xb6>
 800a502:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a504:	f10b 0b01 	add.w	fp, fp, #1
 800a508:	e7bb      	b.n	800a482 <_printf_float+0x302>
 800a50a:	4631      	mov	r1, r6
 800a50c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a510:	4628      	mov	r0, r5
 800a512:	47b8      	blx	r7
 800a514:	3001      	adds	r0, #1
 800a516:	d1c0      	bne.n	800a49a <_printf_float+0x31a>
 800a518:	e68d      	b.n	800a236 <_printf_float+0xb6>
 800a51a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a51c:	464b      	mov	r3, r9
 800a51e:	4631      	mov	r1, r6
 800a520:	4628      	mov	r0, r5
 800a522:	4442      	add	r2, r8
 800a524:	47b8      	blx	r7
 800a526:	3001      	adds	r0, #1
 800a528:	d1c3      	bne.n	800a4b2 <_printf_float+0x332>
 800a52a:	e684      	b.n	800a236 <_printf_float+0xb6>
 800a52c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800a530:	f1ba 0f01 	cmp.w	sl, #1
 800a534:	dc01      	bgt.n	800a53a <_printf_float+0x3ba>
 800a536:	07db      	lsls	r3, r3, #31
 800a538:	d536      	bpl.n	800a5a8 <_printf_float+0x428>
 800a53a:	2301      	movs	r3, #1
 800a53c:	4642      	mov	r2, r8
 800a53e:	4631      	mov	r1, r6
 800a540:	4628      	mov	r0, r5
 800a542:	47b8      	blx	r7
 800a544:	3001      	adds	r0, #1
 800a546:	f43f ae76 	beq.w	800a236 <_printf_float+0xb6>
 800a54a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a54e:	4631      	mov	r1, r6
 800a550:	4628      	mov	r0, r5
 800a552:	47b8      	blx	r7
 800a554:	3001      	adds	r0, #1
 800a556:	f43f ae6e 	beq.w	800a236 <_printf_float+0xb6>
 800a55a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a55e:	2200      	movs	r2, #0
 800a560:	2300      	movs	r3, #0
 800a562:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a566:	f7f6 fad3 	bl	8000b10 <__aeabi_dcmpeq>
 800a56a:	b9c0      	cbnz	r0, 800a59e <_printf_float+0x41e>
 800a56c:	4653      	mov	r3, sl
 800a56e:	f108 0201 	add.w	r2, r8, #1
 800a572:	4631      	mov	r1, r6
 800a574:	4628      	mov	r0, r5
 800a576:	47b8      	blx	r7
 800a578:	3001      	adds	r0, #1
 800a57a:	d10c      	bne.n	800a596 <_printf_float+0x416>
 800a57c:	e65b      	b.n	800a236 <_printf_float+0xb6>
 800a57e:	2301      	movs	r3, #1
 800a580:	465a      	mov	r2, fp
 800a582:	4631      	mov	r1, r6
 800a584:	4628      	mov	r0, r5
 800a586:	47b8      	blx	r7
 800a588:	3001      	adds	r0, #1
 800a58a:	f43f ae54 	beq.w	800a236 <_printf_float+0xb6>
 800a58e:	f108 0801 	add.w	r8, r8, #1
 800a592:	45d0      	cmp	r8, sl
 800a594:	dbf3      	blt.n	800a57e <_printf_float+0x3fe>
 800a596:	464b      	mov	r3, r9
 800a598:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a59c:	e6e0      	b.n	800a360 <_printf_float+0x1e0>
 800a59e:	f04f 0800 	mov.w	r8, #0
 800a5a2:	f104 0b1a 	add.w	fp, r4, #26
 800a5a6:	e7f4      	b.n	800a592 <_printf_float+0x412>
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	4642      	mov	r2, r8
 800a5ac:	e7e1      	b.n	800a572 <_printf_float+0x3f2>
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	464a      	mov	r2, r9
 800a5b2:	4631      	mov	r1, r6
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	47b8      	blx	r7
 800a5b8:	3001      	adds	r0, #1
 800a5ba:	f43f ae3c 	beq.w	800a236 <_printf_float+0xb6>
 800a5be:	f108 0801 	add.w	r8, r8, #1
 800a5c2:	68e3      	ldr	r3, [r4, #12]
 800a5c4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a5c6:	1a5b      	subs	r3, r3, r1
 800a5c8:	4543      	cmp	r3, r8
 800a5ca:	dcf0      	bgt.n	800a5ae <_printf_float+0x42e>
 800a5cc:	e6fd      	b.n	800a3ca <_printf_float+0x24a>
 800a5ce:	f04f 0800 	mov.w	r8, #0
 800a5d2:	f104 0919 	add.w	r9, r4, #25
 800a5d6:	e7f4      	b.n	800a5c2 <_printf_float+0x442>

0800a5d8 <_printf_common>:
 800a5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5dc:	4616      	mov	r6, r2
 800a5de:	4698      	mov	r8, r3
 800a5e0:	688a      	ldr	r2, [r1, #8]
 800a5e2:	690b      	ldr	r3, [r1, #16]
 800a5e4:	4607      	mov	r7, r0
 800a5e6:	4293      	cmp	r3, r2
 800a5e8:	bfb8      	it	lt
 800a5ea:	4613      	movlt	r3, r2
 800a5ec:	6033      	str	r3, [r6, #0]
 800a5ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a5f2:	460c      	mov	r4, r1
 800a5f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5f8:	b10a      	cbz	r2, 800a5fe <_printf_common+0x26>
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	6033      	str	r3, [r6, #0]
 800a5fe:	6823      	ldr	r3, [r4, #0]
 800a600:	0699      	lsls	r1, r3, #26
 800a602:	bf42      	ittt	mi
 800a604:	6833      	ldrmi	r3, [r6, #0]
 800a606:	3302      	addmi	r3, #2
 800a608:	6033      	strmi	r3, [r6, #0]
 800a60a:	6825      	ldr	r5, [r4, #0]
 800a60c:	f015 0506 	ands.w	r5, r5, #6
 800a610:	d106      	bne.n	800a620 <_printf_common+0x48>
 800a612:	f104 0a19 	add.w	sl, r4, #25
 800a616:	68e3      	ldr	r3, [r4, #12]
 800a618:	6832      	ldr	r2, [r6, #0]
 800a61a:	1a9b      	subs	r3, r3, r2
 800a61c:	42ab      	cmp	r3, r5
 800a61e:	dc2b      	bgt.n	800a678 <_printf_common+0xa0>
 800a620:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a624:	6822      	ldr	r2, [r4, #0]
 800a626:	3b00      	subs	r3, #0
 800a628:	bf18      	it	ne
 800a62a:	2301      	movne	r3, #1
 800a62c:	0692      	lsls	r2, r2, #26
 800a62e:	d430      	bmi.n	800a692 <_printf_common+0xba>
 800a630:	4641      	mov	r1, r8
 800a632:	4638      	mov	r0, r7
 800a634:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a638:	47c8      	blx	r9
 800a63a:	3001      	adds	r0, #1
 800a63c:	d023      	beq.n	800a686 <_printf_common+0xae>
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	6922      	ldr	r2, [r4, #16]
 800a642:	f003 0306 	and.w	r3, r3, #6
 800a646:	2b04      	cmp	r3, #4
 800a648:	bf14      	ite	ne
 800a64a:	2500      	movne	r5, #0
 800a64c:	6833      	ldreq	r3, [r6, #0]
 800a64e:	f04f 0600 	mov.w	r6, #0
 800a652:	bf08      	it	eq
 800a654:	68e5      	ldreq	r5, [r4, #12]
 800a656:	f104 041a 	add.w	r4, r4, #26
 800a65a:	bf08      	it	eq
 800a65c:	1aed      	subeq	r5, r5, r3
 800a65e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a662:	bf08      	it	eq
 800a664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a668:	4293      	cmp	r3, r2
 800a66a:	bfc4      	itt	gt
 800a66c:	1a9b      	subgt	r3, r3, r2
 800a66e:	18ed      	addgt	r5, r5, r3
 800a670:	42b5      	cmp	r5, r6
 800a672:	d11a      	bne.n	800a6aa <_printf_common+0xd2>
 800a674:	2000      	movs	r0, #0
 800a676:	e008      	b.n	800a68a <_printf_common+0xb2>
 800a678:	2301      	movs	r3, #1
 800a67a:	4652      	mov	r2, sl
 800a67c:	4641      	mov	r1, r8
 800a67e:	4638      	mov	r0, r7
 800a680:	47c8      	blx	r9
 800a682:	3001      	adds	r0, #1
 800a684:	d103      	bne.n	800a68e <_printf_common+0xb6>
 800a686:	f04f 30ff 	mov.w	r0, #4294967295
 800a68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a68e:	3501      	adds	r5, #1
 800a690:	e7c1      	b.n	800a616 <_printf_common+0x3e>
 800a692:	2030      	movs	r0, #48	@ 0x30
 800a694:	18e1      	adds	r1, r4, r3
 800a696:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a69a:	1c5a      	adds	r2, r3, #1
 800a69c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a6a0:	4422      	add	r2, r4
 800a6a2:	3302      	adds	r3, #2
 800a6a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a6a8:	e7c2      	b.n	800a630 <_printf_common+0x58>
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	4622      	mov	r2, r4
 800a6ae:	4641      	mov	r1, r8
 800a6b0:	4638      	mov	r0, r7
 800a6b2:	47c8      	blx	r9
 800a6b4:	3001      	adds	r0, #1
 800a6b6:	d0e6      	beq.n	800a686 <_printf_common+0xae>
 800a6b8:	3601      	adds	r6, #1
 800a6ba:	e7d9      	b.n	800a670 <_printf_common+0x98>

0800a6bc <_printf_i>:
 800a6bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	7e0f      	ldrb	r7, [r1, #24]
 800a6c2:	4691      	mov	r9, r2
 800a6c4:	2f78      	cmp	r7, #120	@ 0x78
 800a6c6:	4680      	mov	r8, r0
 800a6c8:	460c      	mov	r4, r1
 800a6ca:	469a      	mov	sl, r3
 800a6cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a6ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a6d2:	d807      	bhi.n	800a6e4 <_printf_i+0x28>
 800a6d4:	2f62      	cmp	r7, #98	@ 0x62
 800a6d6:	d80a      	bhi.n	800a6ee <_printf_i+0x32>
 800a6d8:	2f00      	cmp	r7, #0
 800a6da:	f000 80d3 	beq.w	800a884 <_printf_i+0x1c8>
 800a6de:	2f58      	cmp	r7, #88	@ 0x58
 800a6e0:	f000 80ba 	beq.w	800a858 <_printf_i+0x19c>
 800a6e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a6e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a6ec:	e03a      	b.n	800a764 <_printf_i+0xa8>
 800a6ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a6f2:	2b15      	cmp	r3, #21
 800a6f4:	d8f6      	bhi.n	800a6e4 <_printf_i+0x28>
 800a6f6:	a101      	add	r1, pc, #4	@ (adr r1, 800a6fc <_printf_i+0x40>)
 800a6f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6fc:	0800a755 	.word	0x0800a755
 800a700:	0800a769 	.word	0x0800a769
 800a704:	0800a6e5 	.word	0x0800a6e5
 800a708:	0800a6e5 	.word	0x0800a6e5
 800a70c:	0800a6e5 	.word	0x0800a6e5
 800a710:	0800a6e5 	.word	0x0800a6e5
 800a714:	0800a769 	.word	0x0800a769
 800a718:	0800a6e5 	.word	0x0800a6e5
 800a71c:	0800a6e5 	.word	0x0800a6e5
 800a720:	0800a6e5 	.word	0x0800a6e5
 800a724:	0800a6e5 	.word	0x0800a6e5
 800a728:	0800a86b 	.word	0x0800a86b
 800a72c:	0800a793 	.word	0x0800a793
 800a730:	0800a825 	.word	0x0800a825
 800a734:	0800a6e5 	.word	0x0800a6e5
 800a738:	0800a6e5 	.word	0x0800a6e5
 800a73c:	0800a88d 	.word	0x0800a88d
 800a740:	0800a6e5 	.word	0x0800a6e5
 800a744:	0800a793 	.word	0x0800a793
 800a748:	0800a6e5 	.word	0x0800a6e5
 800a74c:	0800a6e5 	.word	0x0800a6e5
 800a750:	0800a82d 	.word	0x0800a82d
 800a754:	6833      	ldr	r3, [r6, #0]
 800a756:	1d1a      	adds	r2, r3, #4
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6032      	str	r2, [r6, #0]
 800a75c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a760:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a764:	2301      	movs	r3, #1
 800a766:	e09e      	b.n	800a8a6 <_printf_i+0x1ea>
 800a768:	6833      	ldr	r3, [r6, #0]
 800a76a:	6820      	ldr	r0, [r4, #0]
 800a76c:	1d19      	adds	r1, r3, #4
 800a76e:	6031      	str	r1, [r6, #0]
 800a770:	0606      	lsls	r6, r0, #24
 800a772:	d501      	bpl.n	800a778 <_printf_i+0xbc>
 800a774:	681d      	ldr	r5, [r3, #0]
 800a776:	e003      	b.n	800a780 <_printf_i+0xc4>
 800a778:	0645      	lsls	r5, r0, #25
 800a77a:	d5fb      	bpl.n	800a774 <_printf_i+0xb8>
 800a77c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a780:	2d00      	cmp	r5, #0
 800a782:	da03      	bge.n	800a78c <_printf_i+0xd0>
 800a784:	232d      	movs	r3, #45	@ 0x2d
 800a786:	426d      	negs	r5, r5
 800a788:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a78c:	230a      	movs	r3, #10
 800a78e:	4859      	ldr	r0, [pc, #356]	@ (800a8f4 <_printf_i+0x238>)
 800a790:	e011      	b.n	800a7b6 <_printf_i+0xfa>
 800a792:	6821      	ldr	r1, [r4, #0]
 800a794:	6833      	ldr	r3, [r6, #0]
 800a796:	0608      	lsls	r0, r1, #24
 800a798:	f853 5b04 	ldr.w	r5, [r3], #4
 800a79c:	d402      	bmi.n	800a7a4 <_printf_i+0xe8>
 800a79e:	0649      	lsls	r1, r1, #25
 800a7a0:	bf48      	it	mi
 800a7a2:	b2ad      	uxthmi	r5, r5
 800a7a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a7a6:	6033      	str	r3, [r6, #0]
 800a7a8:	bf14      	ite	ne
 800a7aa:	230a      	movne	r3, #10
 800a7ac:	2308      	moveq	r3, #8
 800a7ae:	4851      	ldr	r0, [pc, #324]	@ (800a8f4 <_printf_i+0x238>)
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a7b6:	6866      	ldr	r6, [r4, #4]
 800a7b8:	2e00      	cmp	r6, #0
 800a7ba:	bfa8      	it	ge
 800a7bc:	6821      	ldrge	r1, [r4, #0]
 800a7be:	60a6      	str	r6, [r4, #8]
 800a7c0:	bfa4      	itt	ge
 800a7c2:	f021 0104 	bicge.w	r1, r1, #4
 800a7c6:	6021      	strge	r1, [r4, #0]
 800a7c8:	b90d      	cbnz	r5, 800a7ce <_printf_i+0x112>
 800a7ca:	2e00      	cmp	r6, #0
 800a7cc:	d04b      	beq.n	800a866 <_printf_i+0x1aa>
 800a7ce:	4616      	mov	r6, r2
 800a7d0:	fbb5 f1f3 	udiv	r1, r5, r3
 800a7d4:	fb03 5711 	mls	r7, r3, r1, r5
 800a7d8:	5dc7      	ldrb	r7, [r0, r7]
 800a7da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7de:	462f      	mov	r7, r5
 800a7e0:	42bb      	cmp	r3, r7
 800a7e2:	460d      	mov	r5, r1
 800a7e4:	d9f4      	bls.n	800a7d0 <_printf_i+0x114>
 800a7e6:	2b08      	cmp	r3, #8
 800a7e8:	d10b      	bne.n	800a802 <_printf_i+0x146>
 800a7ea:	6823      	ldr	r3, [r4, #0]
 800a7ec:	07df      	lsls	r7, r3, #31
 800a7ee:	d508      	bpl.n	800a802 <_printf_i+0x146>
 800a7f0:	6923      	ldr	r3, [r4, #16]
 800a7f2:	6861      	ldr	r1, [r4, #4]
 800a7f4:	4299      	cmp	r1, r3
 800a7f6:	bfde      	ittt	le
 800a7f8:	2330      	movle	r3, #48	@ 0x30
 800a7fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a802:	1b92      	subs	r2, r2, r6
 800a804:	6122      	str	r2, [r4, #16]
 800a806:	464b      	mov	r3, r9
 800a808:	4621      	mov	r1, r4
 800a80a:	4640      	mov	r0, r8
 800a80c:	f8cd a000 	str.w	sl, [sp]
 800a810:	aa03      	add	r2, sp, #12
 800a812:	f7ff fee1 	bl	800a5d8 <_printf_common>
 800a816:	3001      	adds	r0, #1
 800a818:	d14a      	bne.n	800a8b0 <_printf_i+0x1f4>
 800a81a:	f04f 30ff 	mov.w	r0, #4294967295
 800a81e:	b004      	add	sp, #16
 800a820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a824:	6823      	ldr	r3, [r4, #0]
 800a826:	f043 0320 	orr.w	r3, r3, #32
 800a82a:	6023      	str	r3, [r4, #0]
 800a82c:	2778      	movs	r7, #120	@ 0x78
 800a82e:	4832      	ldr	r0, [pc, #200]	@ (800a8f8 <_printf_i+0x23c>)
 800a830:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	6831      	ldr	r1, [r6, #0]
 800a838:	061f      	lsls	r7, r3, #24
 800a83a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a83e:	d402      	bmi.n	800a846 <_printf_i+0x18a>
 800a840:	065f      	lsls	r7, r3, #25
 800a842:	bf48      	it	mi
 800a844:	b2ad      	uxthmi	r5, r5
 800a846:	6031      	str	r1, [r6, #0]
 800a848:	07d9      	lsls	r1, r3, #31
 800a84a:	bf44      	itt	mi
 800a84c:	f043 0320 	orrmi.w	r3, r3, #32
 800a850:	6023      	strmi	r3, [r4, #0]
 800a852:	b11d      	cbz	r5, 800a85c <_printf_i+0x1a0>
 800a854:	2310      	movs	r3, #16
 800a856:	e7ab      	b.n	800a7b0 <_printf_i+0xf4>
 800a858:	4826      	ldr	r0, [pc, #152]	@ (800a8f4 <_printf_i+0x238>)
 800a85a:	e7e9      	b.n	800a830 <_printf_i+0x174>
 800a85c:	6823      	ldr	r3, [r4, #0]
 800a85e:	f023 0320 	bic.w	r3, r3, #32
 800a862:	6023      	str	r3, [r4, #0]
 800a864:	e7f6      	b.n	800a854 <_printf_i+0x198>
 800a866:	4616      	mov	r6, r2
 800a868:	e7bd      	b.n	800a7e6 <_printf_i+0x12a>
 800a86a:	6833      	ldr	r3, [r6, #0]
 800a86c:	6825      	ldr	r5, [r4, #0]
 800a86e:	1d18      	adds	r0, r3, #4
 800a870:	6961      	ldr	r1, [r4, #20]
 800a872:	6030      	str	r0, [r6, #0]
 800a874:	062e      	lsls	r6, r5, #24
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	d501      	bpl.n	800a87e <_printf_i+0x1c2>
 800a87a:	6019      	str	r1, [r3, #0]
 800a87c:	e002      	b.n	800a884 <_printf_i+0x1c8>
 800a87e:	0668      	lsls	r0, r5, #25
 800a880:	d5fb      	bpl.n	800a87a <_printf_i+0x1be>
 800a882:	8019      	strh	r1, [r3, #0]
 800a884:	2300      	movs	r3, #0
 800a886:	4616      	mov	r6, r2
 800a888:	6123      	str	r3, [r4, #16]
 800a88a:	e7bc      	b.n	800a806 <_printf_i+0x14a>
 800a88c:	6833      	ldr	r3, [r6, #0]
 800a88e:	2100      	movs	r1, #0
 800a890:	1d1a      	adds	r2, r3, #4
 800a892:	6032      	str	r2, [r6, #0]
 800a894:	681e      	ldr	r6, [r3, #0]
 800a896:	6862      	ldr	r2, [r4, #4]
 800a898:	4630      	mov	r0, r6
 800a89a:	f000 f9d4 	bl	800ac46 <memchr>
 800a89e:	b108      	cbz	r0, 800a8a4 <_printf_i+0x1e8>
 800a8a0:	1b80      	subs	r0, r0, r6
 800a8a2:	6060      	str	r0, [r4, #4]
 800a8a4:	6863      	ldr	r3, [r4, #4]
 800a8a6:	6123      	str	r3, [r4, #16]
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a8ae:	e7aa      	b.n	800a806 <_printf_i+0x14a>
 800a8b0:	4632      	mov	r2, r6
 800a8b2:	4649      	mov	r1, r9
 800a8b4:	4640      	mov	r0, r8
 800a8b6:	6923      	ldr	r3, [r4, #16]
 800a8b8:	47d0      	blx	sl
 800a8ba:	3001      	adds	r0, #1
 800a8bc:	d0ad      	beq.n	800a81a <_printf_i+0x15e>
 800a8be:	6823      	ldr	r3, [r4, #0]
 800a8c0:	079b      	lsls	r3, r3, #30
 800a8c2:	d413      	bmi.n	800a8ec <_printf_i+0x230>
 800a8c4:	68e0      	ldr	r0, [r4, #12]
 800a8c6:	9b03      	ldr	r3, [sp, #12]
 800a8c8:	4298      	cmp	r0, r3
 800a8ca:	bfb8      	it	lt
 800a8cc:	4618      	movlt	r0, r3
 800a8ce:	e7a6      	b.n	800a81e <_printf_i+0x162>
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	4632      	mov	r2, r6
 800a8d4:	4649      	mov	r1, r9
 800a8d6:	4640      	mov	r0, r8
 800a8d8:	47d0      	blx	sl
 800a8da:	3001      	adds	r0, #1
 800a8dc:	d09d      	beq.n	800a81a <_printf_i+0x15e>
 800a8de:	3501      	adds	r5, #1
 800a8e0:	68e3      	ldr	r3, [r4, #12]
 800a8e2:	9903      	ldr	r1, [sp, #12]
 800a8e4:	1a5b      	subs	r3, r3, r1
 800a8e6:	42ab      	cmp	r3, r5
 800a8e8:	dcf2      	bgt.n	800a8d0 <_printf_i+0x214>
 800a8ea:	e7eb      	b.n	800a8c4 <_printf_i+0x208>
 800a8ec:	2500      	movs	r5, #0
 800a8ee:	f104 0619 	add.w	r6, r4, #25
 800a8f2:	e7f5      	b.n	800a8e0 <_printf_i+0x224>
 800a8f4:	0800ce3c 	.word	0x0800ce3c
 800a8f8:	0800ce4d 	.word	0x0800ce4d

0800a8fc <std>:
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	b510      	push	{r4, lr}
 800a900:	4604      	mov	r4, r0
 800a902:	e9c0 3300 	strd	r3, r3, [r0]
 800a906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a90a:	6083      	str	r3, [r0, #8]
 800a90c:	8181      	strh	r1, [r0, #12]
 800a90e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a910:	81c2      	strh	r2, [r0, #14]
 800a912:	6183      	str	r3, [r0, #24]
 800a914:	4619      	mov	r1, r3
 800a916:	2208      	movs	r2, #8
 800a918:	305c      	adds	r0, #92	@ 0x5c
 800a91a:	f000 f914 	bl	800ab46 <memset>
 800a91e:	4b0d      	ldr	r3, [pc, #52]	@ (800a954 <std+0x58>)
 800a920:	6224      	str	r4, [r4, #32]
 800a922:	6263      	str	r3, [r4, #36]	@ 0x24
 800a924:	4b0c      	ldr	r3, [pc, #48]	@ (800a958 <std+0x5c>)
 800a926:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a928:	4b0c      	ldr	r3, [pc, #48]	@ (800a95c <std+0x60>)
 800a92a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a92c:	4b0c      	ldr	r3, [pc, #48]	@ (800a960 <std+0x64>)
 800a92e:	6323      	str	r3, [r4, #48]	@ 0x30
 800a930:	4b0c      	ldr	r3, [pc, #48]	@ (800a964 <std+0x68>)
 800a932:	429c      	cmp	r4, r3
 800a934:	d006      	beq.n	800a944 <std+0x48>
 800a936:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a93a:	4294      	cmp	r4, r2
 800a93c:	d002      	beq.n	800a944 <std+0x48>
 800a93e:	33d0      	adds	r3, #208	@ 0xd0
 800a940:	429c      	cmp	r4, r3
 800a942:	d105      	bne.n	800a950 <std+0x54>
 800a944:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a94c:	f000 b978 	b.w	800ac40 <__retarget_lock_init_recursive>
 800a950:	bd10      	pop	{r4, pc}
 800a952:	bf00      	nop
 800a954:	0800aac1 	.word	0x0800aac1
 800a958:	0800aae3 	.word	0x0800aae3
 800a95c:	0800ab1b 	.word	0x0800ab1b
 800a960:	0800ab3f 	.word	0x0800ab3f
 800a964:	200016c0 	.word	0x200016c0

0800a968 <stdio_exit_handler>:
 800a968:	4a02      	ldr	r2, [pc, #8]	@ (800a974 <stdio_exit_handler+0xc>)
 800a96a:	4903      	ldr	r1, [pc, #12]	@ (800a978 <stdio_exit_handler+0x10>)
 800a96c:	4803      	ldr	r0, [pc, #12]	@ (800a97c <stdio_exit_handler+0x14>)
 800a96e:	f000 b869 	b.w	800aa44 <_fwalk_sglue>
 800a972:	bf00      	nop
 800a974:	20000190 	.word	0x20000190
 800a978:	0800c5b5 	.word	0x0800c5b5
 800a97c:	200001a0 	.word	0x200001a0

0800a980 <cleanup_stdio>:
 800a980:	6841      	ldr	r1, [r0, #4]
 800a982:	4b0c      	ldr	r3, [pc, #48]	@ (800a9b4 <cleanup_stdio+0x34>)
 800a984:	b510      	push	{r4, lr}
 800a986:	4299      	cmp	r1, r3
 800a988:	4604      	mov	r4, r0
 800a98a:	d001      	beq.n	800a990 <cleanup_stdio+0x10>
 800a98c:	f001 fe12 	bl	800c5b4 <_fflush_r>
 800a990:	68a1      	ldr	r1, [r4, #8]
 800a992:	4b09      	ldr	r3, [pc, #36]	@ (800a9b8 <cleanup_stdio+0x38>)
 800a994:	4299      	cmp	r1, r3
 800a996:	d002      	beq.n	800a99e <cleanup_stdio+0x1e>
 800a998:	4620      	mov	r0, r4
 800a99a:	f001 fe0b 	bl	800c5b4 <_fflush_r>
 800a99e:	68e1      	ldr	r1, [r4, #12]
 800a9a0:	4b06      	ldr	r3, [pc, #24]	@ (800a9bc <cleanup_stdio+0x3c>)
 800a9a2:	4299      	cmp	r1, r3
 800a9a4:	d004      	beq.n	800a9b0 <cleanup_stdio+0x30>
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9ac:	f001 be02 	b.w	800c5b4 <_fflush_r>
 800a9b0:	bd10      	pop	{r4, pc}
 800a9b2:	bf00      	nop
 800a9b4:	200016c0 	.word	0x200016c0
 800a9b8:	20001728 	.word	0x20001728
 800a9bc:	20001790 	.word	0x20001790

0800a9c0 <global_stdio_init.part.0>:
 800a9c0:	b510      	push	{r4, lr}
 800a9c2:	4b0b      	ldr	r3, [pc, #44]	@ (800a9f0 <global_stdio_init.part.0+0x30>)
 800a9c4:	4c0b      	ldr	r4, [pc, #44]	@ (800a9f4 <global_stdio_init.part.0+0x34>)
 800a9c6:	4a0c      	ldr	r2, [pc, #48]	@ (800a9f8 <global_stdio_init.part.0+0x38>)
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	601a      	str	r2, [r3, #0]
 800a9cc:	2104      	movs	r1, #4
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f7ff ff94 	bl	800a8fc <std>
 800a9d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a9d8:	2201      	movs	r2, #1
 800a9da:	2109      	movs	r1, #9
 800a9dc:	f7ff ff8e 	bl	800a8fc <std>
 800a9e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a9e4:	2202      	movs	r2, #2
 800a9e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9ea:	2112      	movs	r1, #18
 800a9ec:	f7ff bf86 	b.w	800a8fc <std>
 800a9f0:	200017f8 	.word	0x200017f8
 800a9f4:	200016c0 	.word	0x200016c0
 800a9f8:	0800a969 	.word	0x0800a969

0800a9fc <__sfp_lock_acquire>:
 800a9fc:	4801      	ldr	r0, [pc, #4]	@ (800aa04 <__sfp_lock_acquire+0x8>)
 800a9fe:	f000 b920 	b.w	800ac42 <__retarget_lock_acquire_recursive>
 800aa02:	bf00      	nop
 800aa04:	20001801 	.word	0x20001801

0800aa08 <__sfp_lock_release>:
 800aa08:	4801      	ldr	r0, [pc, #4]	@ (800aa10 <__sfp_lock_release+0x8>)
 800aa0a:	f000 b91b 	b.w	800ac44 <__retarget_lock_release_recursive>
 800aa0e:	bf00      	nop
 800aa10:	20001801 	.word	0x20001801

0800aa14 <__sinit>:
 800aa14:	b510      	push	{r4, lr}
 800aa16:	4604      	mov	r4, r0
 800aa18:	f7ff fff0 	bl	800a9fc <__sfp_lock_acquire>
 800aa1c:	6a23      	ldr	r3, [r4, #32]
 800aa1e:	b11b      	cbz	r3, 800aa28 <__sinit+0x14>
 800aa20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa24:	f7ff bff0 	b.w	800aa08 <__sfp_lock_release>
 800aa28:	4b04      	ldr	r3, [pc, #16]	@ (800aa3c <__sinit+0x28>)
 800aa2a:	6223      	str	r3, [r4, #32]
 800aa2c:	4b04      	ldr	r3, [pc, #16]	@ (800aa40 <__sinit+0x2c>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d1f5      	bne.n	800aa20 <__sinit+0xc>
 800aa34:	f7ff ffc4 	bl	800a9c0 <global_stdio_init.part.0>
 800aa38:	e7f2      	b.n	800aa20 <__sinit+0xc>
 800aa3a:	bf00      	nop
 800aa3c:	0800a981 	.word	0x0800a981
 800aa40:	200017f8 	.word	0x200017f8

0800aa44 <_fwalk_sglue>:
 800aa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa48:	4607      	mov	r7, r0
 800aa4a:	4688      	mov	r8, r1
 800aa4c:	4614      	mov	r4, r2
 800aa4e:	2600      	movs	r6, #0
 800aa50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa54:	f1b9 0901 	subs.w	r9, r9, #1
 800aa58:	d505      	bpl.n	800aa66 <_fwalk_sglue+0x22>
 800aa5a:	6824      	ldr	r4, [r4, #0]
 800aa5c:	2c00      	cmp	r4, #0
 800aa5e:	d1f7      	bne.n	800aa50 <_fwalk_sglue+0xc>
 800aa60:	4630      	mov	r0, r6
 800aa62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa66:	89ab      	ldrh	r3, [r5, #12]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d907      	bls.n	800aa7c <_fwalk_sglue+0x38>
 800aa6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa70:	3301      	adds	r3, #1
 800aa72:	d003      	beq.n	800aa7c <_fwalk_sglue+0x38>
 800aa74:	4629      	mov	r1, r5
 800aa76:	4638      	mov	r0, r7
 800aa78:	47c0      	blx	r8
 800aa7a:	4306      	orrs	r6, r0
 800aa7c:	3568      	adds	r5, #104	@ 0x68
 800aa7e:	e7e9      	b.n	800aa54 <_fwalk_sglue+0x10>

0800aa80 <siprintf>:
 800aa80:	b40e      	push	{r1, r2, r3}
 800aa82:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800aa86:	b500      	push	{lr}
 800aa88:	b09c      	sub	sp, #112	@ 0x70
 800aa8a:	ab1d      	add	r3, sp, #116	@ 0x74
 800aa8c:	9002      	str	r0, [sp, #8]
 800aa8e:	9006      	str	r0, [sp, #24]
 800aa90:	9107      	str	r1, [sp, #28]
 800aa92:	9104      	str	r1, [sp, #16]
 800aa94:	4808      	ldr	r0, [pc, #32]	@ (800aab8 <siprintf+0x38>)
 800aa96:	4909      	ldr	r1, [pc, #36]	@ (800aabc <siprintf+0x3c>)
 800aa98:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa9c:	9105      	str	r1, [sp, #20]
 800aa9e:	6800      	ldr	r0, [r0, #0]
 800aaa0:	a902      	add	r1, sp, #8
 800aaa2:	9301      	str	r3, [sp, #4]
 800aaa4:	f001 fc0a 	bl	800c2bc <_svfiprintf_r>
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	9b02      	ldr	r3, [sp, #8]
 800aaac:	701a      	strb	r2, [r3, #0]
 800aaae:	b01c      	add	sp, #112	@ 0x70
 800aab0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aab4:	b003      	add	sp, #12
 800aab6:	4770      	bx	lr
 800aab8:	2000019c 	.word	0x2000019c
 800aabc:	ffff0208 	.word	0xffff0208

0800aac0 <__sread>:
 800aac0:	b510      	push	{r4, lr}
 800aac2:	460c      	mov	r4, r1
 800aac4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aac8:	f000 f86c 	bl	800aba4 <_read_r>
 800aacc:	2800      	cmp	r0, #0
 800aace:	bfab      	itete	ge
 800aad0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aad2:	89a3      	ldrhlt	r3, [r4, #12]
 800aad4:	181b      	addge	r3, r3, r0
 800aad6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aada:	bfac      	ite	ge
 800aadc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aade:	81a3      	strhlt	r3, [r4, #12]
 800aae0:	bd10      	pop	{r4, pc}

0800aae2 <__swrite>:
 800aae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae6:	461f      	mov	r7, r3
 800aae8:	898b      	ldrh	r3, [r1, #12]
 800aaea:	4605      	mov	r5, r0
 800aaec:	05db      	lsls	r3, r3, #23
 800aaee:	460c      	mov	r4, r1
 800aaf0:	4616      	mov	r6, r2
 800aaf2:	d505      	bpl.n	800ab00 <__swrite+0x1e>
 800aaf4:	2302      	movs	r3, #2
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aafc:	f000 f840 	bl	800ab80 <_lseek_r>
 800ab00:	89a3      	ldrh	r3, [r4, #12]
 800ab02:	4632      	mov	r2, r6
 800ab04:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab08:	81a3      	strh	r3, [r4, #12]
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	463b      	mov	r3, r7
 800ab0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab16:	f000 b857 	b.w	800abc8 <_write_r>

0800ab1a <__sseek>:
 800ab1a:	b510      	push	{r4, lr}
 800ab1c:	460c      	mov	r4, r1
 800ab1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab22:	f000 f82d 	bl	800ab80 <_lseek_r>
 800ab26:	1c43      	adds	r3, r0, #1
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	bf15      	itete	ne
 800ab2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ab2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ab32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab36:	81a3      	strheq	r3, [r4, #12]
 800ab38:	bf18      	it	ne
 800ab3a:	81a3      	strhne	r3, [r4, #12]
 800ab3c:	bd10      	pop	{r4, pc}

0800ab3e <__sclose>:
 800ab3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab42:	f000 b80d 	b.w	800ab60 <_close_r>

0800ab46 <memset>:
 800ab46:	4603      	mov	r3, r0
 800ab48:	4402      	add	r2, r0
 800ab4a:	4293      	cmp	r3, r2
 800ab4c:	d100      	bne.n	800ab50 <memset+0xa>
 800ab4e:	4770      	bx	lr
 800ab50:	f803 1b01 	strb.w	r1, [r3], #1
 800ab54:	e7f9      	b.n	800ab4a <memset+0x4>
	...

0800ab58 <_localeconv_r>:
 800ab58:	4800      	ldr	r0, [pc, #0]	@ (800ab5c <_localeconv_r+0x4>)
 800ab5a:	4770      	bx	lr
 800ab5c:	200002dc 	.word	0x200002dc

0800ab60 <_close_r>:
 800ab60:	b538      	push	{r3, r4, r5, lr}
 800ab62:	2300      	movs	r3, #0
 800ab64:	4d05      	ldr	r5, [pc, #20]	@ (800ab7c <_close_r+0x1c>)
 800ab66:	4604      	mov	r4, r0
 800ab68:	4608      	mov	r0, r1
 800ab6a:	602b      	str	r3, [r5, #0]
 800ab6c:	f7f6 ff4f 	bl	8001a0e <_close>
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	d102      	bne.n	800ab7a <_close_r+0x1a>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	b103      	cbz	r3, 800ab7a <_close_r+0x1a>
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	bd38      	pop	{r3, r4, r5, pc}
 800ab7c:	200017fc 	.word	0x200017fc

0800ab80 <_lseek_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4604      	mov	r4, r0
 800ab84:	4608      	mov	r0, r1
 800ab86:	4611      	mov	r1, r2
 800ab88:	2200      	movs	r2, #0
 800ab8a:	4d05      	ldr	r5, [pc, #20]	@ (800aba0 <_lseek_r+0x20>)
 800ab8c:	602a      	str	r2, [r5, #0]
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f7f6 ff61 	bl	8001a56 <_lseek>
 800ab94:	1c43      	adds	r3, r0, #1
 800ab96:	d102      	bne.n	800ab9e <_lseek_r+0x1e>
 800ab98:	682b      	ldr	r3, [r5, #0]
 800ab9a:	b103      	cbz	r3, 800ab9e <_lseek_r+0x1e>
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	bd38      	pop	{r3, r4, r5, pc}
 800aba0:	200017fc 	.word	0x200017fc

0800aba4 <_read_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4604      	mov	r4, r0
 800aba8:	4608      	mov	r0, r1
 800abaa:	4611      	mov	r1, r2
 800abac:	2200      	movs	r2, #0
 800abae:	4d05      	ldr	r5, [pc, #20]	@ (800abc4 <_read_r+0x20>)
 800abb0:	602a      	str	r2, [r5, #0]
 800abb2:	461a      	mov	r2, r3
 800abb4:	f7f6 fef2 	bl	800199c <_read>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	d102      	bne.n	800abc2 <_read_r+0x1e>
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	b103      	cbz	r3, 800abc2 <_read_r+0x1e>
 800abc0:	6023      	str	r3, [r4, #0]
 800abc2:	bd38      	pop	{r3, r4, r5, pc}
 800abc4:	200017fc 	.word	0x200017fc

0800abc8 <_write_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4604      	mov	r4, r0
 800abcc:	4608      	mov	r0, r1
 800abce:	4611      	mov	r1, r2
 800abd0:	2200      	movs	r2, #0
 800abd2:	4d05      	ldr	r5, [pc, #20]	@ (800abe8 <_write_r+0x20>)
 800abd4:	602a      	str	r2, [r5, #0]
 800abd6:	461a      	mov	r2, r3
 800abd8:	f7f6 fefd 	bl	80019d6 <_write>
 800abdc:	1c43      	adds	r3, r0, #1
 800abde:	d102      	bne.n	800abe6 <_write_r+0x1e>
 800abe0:	682b      	ldr	r3, [r5, #0]
 800abe2:	b103      	cbz	r3, 800abe6 <_write_r+0x1e>
 800abe4:	6023      	str	r3, [r4, #0]
 800abe6:	bd38      	pop	{r3, r4, r5, pc}
 800abe8:	200017fc 	.word	0x200017fc

0800abec <__errno>:
 800abec:	4b01      	ldr	r3, [pc, #4]	@ (800abf4 <__errno+0x8>)
 800abee:	6818      	ldr	r0, [r3, #0]
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	2000019c 	.word	0x2000019c

0800abf8 <__libc_init_array>:
 800abf8:	b570      	push	{r4, r5, r6, lr}
 800abfa:	2600      	movs	r6, #0
 800abfc:	4d0c      	ldr	r5, [pc, #48]	@ (800ac30 <__libc_init_array+0x38>)
 800abfe:	4c0d      	ldr	r4, [pc, #52]	@ (800ac34 <__libc_init_array+0x3c>)
 800ac00:	1b64      	subs	r4, r4, r5
 800ac02:	10a4      	asrs	r4, r4, #2
 800ac04:	42a6      	cmp	r6, r4
 800ac06:	d109      	bne.n	800ac1c <__libc_init_array+0x24>
 800ac08:	f002 f870 	bl	800ccec <_init>
 800ac0c:	2600      	movs	r6, #0
 800ac0e:	4d0a      	ldr	r5, [pc, #40]	@ (800ac38 <__libc_init_array+0x40>)
 800ac10:	4c0a      	ldr	r4, [pc, #40]	@ (800ac3c <__libc_init_array+0x44>)
 800ac12:	1b64      	subs	r4, r4, r5
 800ac14:	10a4      	asrs	r4, r4, #2
 800ac16:	42a6      	cmp	r6, r4
 800ac18:	d105      	bne.n	800ac26 <__libc_init_array+0x2e>
 800ac1a:	bd70      	pop	{r4, r5, r6, pc}
 800ac1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac20:	4798      	blx	r3
 800ac22:	3601      	adds	r6, #1
 800ac24:	e7ee      	b.n	800ac04 <__libc_init_array+0xc>
 800ac26:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac2a:	4798      	blx	r3
 800ac2c:	3601      	adds	r6, #1
 800ac2e:	e7f2      	b.n	800ac16 <__libc_init_array+0x1e>
 800ac30:	0800d1a0 	.word	0x0800d1a0
 800ac34:	0800d1a0 	.word	0x0800d1a0
 800ac38:	0800d1a0 	.word	0x0800d1a0
 800ac3c:	0800d1a4 	.word	0x0800d1a4

0800ac40 <__retarget_lock_init_recursive>:
 800ac40:	4770      	bx	lr

0800ac42 <__retarget_lock_acquire_recursive>:
 800ac42:	4770      	bx	lr

0800ac44 <__retarget_lock_release_recursive>:
 800ac44:	4770      	bx	lr

0800ac46 <memchr>:
 800ac46:	4603      	mov	r3, r0
 800ac48:	b510      	push	{r4, lr}
 800ac4a:	b2c9      	uxtb	r1, r1
 800ac4c:	4402      	add	r2, r0
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	4618      	mov	r0, r3
 800ac52:	d101      	bne.n	800ac58 <memchr+0x12>
 800ac54:	2000      	movs	r0, #0
 800ac56:	e003      	b.n	800ac60 <memchr+0x1a>
 800ac58:	7804      	ldrb	r4, [r0, #0]
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	428c      	cmp	r4, r1
 800ac5e:	d1f6      	bne.n	800ac4e <memchr+0x8>
 800ac60:	bd10      	pop	{r4, pc}

0800ac62 <quorem>:
 800ac62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac66:	6903      	ldr	r3, [r0, #16]
 800ac68:	690c      	ldr	r4, [r1, #16]
 800ac6a:	4607      	mov	r7, r0
 800ac6c:	42a3      	cmp	r3, r4
 800ac6e:	db7e      	blt.n	800ad6e <quorem+0x10c>
 800ac70:	3c01      	subs	r4, #1
 800ac72:	00a3      	lsls	r3, r4, #2
 800ac74:	f100 0514 	add.w	r5, r0, #20
 800ac78:	f101 0814 	add.w	r8, r1, #20
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac82:	9301      	str	r3, [sp, #4]
 800ac84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac8c:	3301      	adds	r3, #1
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac98:	d32e      	bcc.n	800acf8 <quorem+0x96>
 800ac9a:	f04f 0a00 	mov.w	sl, #0
 800ac9e:	46c4      	mov	ip, r8
 800aca0:	46ae      	mov	lr, r5
 800aca2:	46d3      	mov	fp, sl
 800aca4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aca8:	b298      	uxth	r0, r3
 800acaa:	fb06 a000 	mla	r0, r6, r0, sl
 800acae:	0c1b      	lsrs	r3, r3, #16
 800acb0:	0c02      	lsrs	r2, r0, #16
 800acb2:	fb06 2303 	mla	r3, r6, r3, r2
 800acb6:	f8de 2000 	ldr.w	r2, [lr]
 800acba:	b280      	uxth	r0, r0
 800acbc:	b292      	uxth	r2, r2
 800acbe:	1a12      	subs	r2, r2, r0
 800acc0:	445a      	add	r2, fp
 800acc2:	f8de 0000 	ldr.w	r0, [lr]
 800acc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acca:	b29b      	uxth	r3, r3
 800accc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800acd0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800acd4:	b292      	uxth	r2, r2
 800acd6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800acda:	45e1      	cmp	r9, ip
 800acdc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ace0:	f84e 2b04 	str.w	r2, [lr], #4
 800ace4:	d2de      	bcs.n	800aca4 <quorem+0x42>
 800ace6:	9b00      	ldr	r3, [sp, #0]
 800ace8:	58eb      	ldr	r3, [r5, r3]
 800acea:	b92b      	cbnz	r3, 800acf8 <quorem+0x96>
 800acec:	9b01      	ldr	r3, [sp, #4]
 800acee:	3b04      	subs	r3, #4
 800acf0:	429d      	cmp	r5, r3
 800acf2:	461a      	mov	r2, r3
 800acf4:	d32f      	bcc.n	800ad56 <quorem+0xf4>
 800acf6:	613c      	str	r4, [r7, #16]
 800acf8:	4638      	mov	r0, r7
 800acfa:	f001 f97b 	bl	800bff4 <__mcmp>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	db25      	blt.n	800ad4e <quorem+0xec>
 800ad02:	4629      	mov	r1, r5
 800ad04:	2000      	movs	r0, #0
 800ad06:	f858 2b04 	ldr.w	r2, [r8], #4
 800ad0a:	f8d1 c000 	ldr.w	ip, [r1]
 800ad0e:	fa1f fe82 	uxth.w	lr, r2
 800ad12:	fa1f f38c 	uxth.w	r3, ip
 800ad16:	eba3 030e 	sub.w	r3, r3, lr
 800ad1a:	4403      	add	r3, r0
 800ad1c:	0c12      	lsrs	r2, r2, #16
 800ad1e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ad22:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ad26:	b29b      	uxth	r3, r3
 800ad28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad2c:	45c1      	cmp	r9, r8
 800ad2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ad32:	f841 3b04 	str.w	r3, [r1], #4
 800ad36:	d2e6      	bcs.n	800ad06 <quorem+0xa4>
 800ad38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad40:	b922      	cbnz	r2, 800ad4c <quorem+0xea>
 800ad42:	3b04      	subs	r3, #4
 800ad44:	429d      	cmp	r5, r3
 800ad46:	461a      	mov	r2, r3
 800ad48:	d30b      	bcc.n	800ad62 <quorem+0x100>
 800ad4a:	613c      	str	r4, [r7, #16]
 800ad4c:	3601      	adds	r6, #1
 800ad4e:	4630      	mov	r0, r6
 800ad50:	b003      	add	sp, #12
 800ad52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad56:	6812      	ldr	r2, [r2, #0]
 800ad58:	3b04      	subs	r3, #4
 800ad5a:	2a00      	cmp	r2, #0
 800ad5c:	d1cb      	bne.n	800acf6 <quorem+0x94>
 800ad5e:	3c01      	subs	r4, #1
 800ad60:	e7c6      	b.n	800acf0 <quorem+0x8e>
 800ad62:	6812      	ldr	r2, [r2, #0]
 800ad64:	3b04      	subs	r3, #4
 800ad66:	2a00      	cmp	r2, #0
 800ad68:	d1ef      	bne.n	800ad4a <quorem+0xe8>
 800ad6a:	3c01      	subs	r4, #1
 800ad6c:	e7ea      	b.n	800ad44 <quorem+0xe2>
 800ad6e:	2000      	movs	r0, #0
 800ad70:	e7ee      	b.n	800ad50 <quorem+0xee>
 800ad72:	0000      	movs	r0, r0
 800ad74:	0000      	movs	r0, r0
	...

0800ad78 <_dtoa_r>:
 800ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7c:	4614      	mov	r4, r2
 800ad7e:	461d      	mov	r5, r3
 800ad80:	69c7      	ldr	r7, [r0, #28]
 800ad82:	b097      	sub	sp, #92	@ 0x5c
 800ad84:	4683      	mov	fp, r0
 800ad86:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800ad8a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800ad8c:	b97f      	cbnz	r7, 800adae <_dtoa_r+0x36>
 800ad8e:	2010      	movs	r0, #16
 800ad90:	f000 fe02 	bl	800b998 <malloc>
 800ad94:	4602      	mov	r2, r0
 800ad96:	f8cb 001c 	str.w	r0, [fp, #28]
 800ad9a:	b920      	cbnz	r0, 800ada6 <_dtoa_r+0x2e>
 800ad9c:	21ef      	movs	r1, #239	@ 0xef
 800ad9e:	4ba8      	ldr	r3, [pc, #672]	@ (800b040 <_dtoa_r+0x2c8>)
 800ada0:	48a8      	ldr	r0, [pc, #672]	@ (800b044 <_dtoa_r+0x2cc>)
 800ada2:	f001 fc67 	bl	800c674 <__assert_func>
 800ada6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800adaa:	6007      	str	r7, [r0, #0]
 800adac:	60c7      	str	r7, [r0, #12]
 800adae:	f8db 301c 	ldr.w	r3, [fp, #28]
 800adb2:	6819      	ldr	r1, [r3, #0]
 800adb4:	b159      	cbz	r1, 800adce <_dtoa_r+0x56>
 800adb6:	685a      	ldr	r2, [r3, #4]
 800adb8:	2301      	movs	r3, #1
 800adba:	4093      	lsls	r3, r2
 800adbc:	604a      	str	r2, [r1, #4]
 800adbe:	608b      	str	r3, [r1, #8]
 800adc0:	4658      	mov	r0, fp
 800adc2:	f000 fedf 	bl	800bb84 <_Bfree>
 800adc6:	2200      	movs	r2, #0
 800adc8:	f8db 301c 	ldr.w	r3, [fp, #28]
 800adcc:	601a      	str	r2, [r3, #0]
 800adce:	1e2b      	subs	r3, r5, #0
 800add0:	bfaf      	iteee	ge
 800add2:	2300      	movge	r3, #0
 800add4:	2201      	movlt	r2, #1
 800add6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800adda:	9303      	strlt	r3, [sp, #12]
 800addc:	bfa8      	it	ge
 800adde:	6033      	strge	r3, [r6, #0]
 800ade0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ade4:	4b98      	ldr	r3, [pc, #608]	@ (800b048 <_dtoa_r+0x2d0>)
 800ade6:	bfb8      	it	lt
 800ade8:	6032      	strlt	r2, [r6, #0]
 800adea:	ea33 0308 	bics.w	r3, r3, r8
 800adee:	d112      	bne.n	800ae16 <_dtoa_r+0x9e>
 800adf0:	f242 730f 	movw	r3, #9999	@ 0x270f
 800adf4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800adf6:	6013      	str	r3, [r2, #0]
 800adf8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800adfc:	4323      	orrs	r3, r4
 800adfe:	f000 8550 	beq.w	800b8a2 <_dtoa_r+0xb2a>
 800ae02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ae04:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b04c <_dtoa_r+0x2d4>
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f000 8552 	beq.w	800b8b2 <_dtoa_r+0xb3a>
 800ae0e:	f10a 0303 	add.w	r3, sl, #3
 800ae12:	f000 bd4c 	b.w	800b8ae <_dtoa_r+0xb36>
 800ae16:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae1a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ae1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae22:	2200      	movs	r2, #0
 800ae24:	2300      	movs	r3, #0
 800ae26:	f7f5 fe73 	bl	8000b10 <__aeabi_dcmpeq>
 800ae2a:	4607      	mov	r7, r0
 800ae2c:	b158      	cbz	r0, 800ae46 <_dtoa_r+0xce>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800ae32:	6013      	str	r3, [r2, #0]
 800ae34:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ae36:	b113      	cbz	r3, 800ae3e <_dtoa_r+0xc6>
 800ae38:	4b85      	ldr	r3, [pc, #532]	@ (800b050 <_dtoa_r+0x2d8>)
 800ae3a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800ae3c:	6013      	str	r3, [r2, #0]
 800ae3e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b054 <_dtoa_r+0x2dc>
 800ae42:	f000 bd36 	b.w	800b8b2 <_dtoa_r+0xb3a>
 800ae46:	ab14      	add	r3, sp, #80	@ 0x50
 800ae48:	9301      	str	r3, [sp, #4]
 800ae4a:	ab15      	add	r3, sp, #84	@ 0x54
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	4658      	mov	r0, fp
 800ae50:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ae54:	f001 f97e 	bl	800c154 <__d2b>
 800ae58:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800ae5c:	4681      	mov	r9, r0
 800ae5e:	2e00      	cmp	r6, #0
 800ae60:	d077      	beq.n	800af52 <_dtoa_r+0x1da>
 800ae62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ae66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ae68:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ae6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae70:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ae74:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ae78:	9712      	str	r7, [sp, #72]	@ 0x48
 800ae7a:	4619      	mov	r1, r3
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	4b76      	ldr	r3, [pc, #472]	@ (800b058 <_dtoa_r+0x2e0>)
 800ae80:	f7f5 fa26 	bl	80002d0 <__aeabi_dsub>
 800ae84:	a368      	add	r3, pc, #416	@ (adr r3, 800b028 <_dtoa_r+0x2b0>)
 800ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8a:	f7f5 fbd9 	bl	8000640 <__aeabi_dmul>
 800ae8e:	a368      	add	r3, pc, #416	@ (adr r3, 800b030 <_dtoa_r+0x2b8>)
 800ae90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae94:	f7f5 fa1e 	bl	80002d4 <__adddf3>
 800ae98:	4604      	mov	r4, r0
 800ae9a:	4630      	mov	r0, r6
 800ae9c:	460d      	mov	r5, r1
 800ae9e:	f7f5 fb65 	bl	800056c <__aeabi_i2d>
 800aea2:	a365      	add	r3, pc, #404	@ (adr r3, 800b038 <_dtoa_r+0x2c0>)
 800aea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea8:	f7f5 fbca 	bl	8000640 <__aeabi_dmul>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	4629      	mov	r1, r5
 800aeb4:	f7f5 fa0e 	bl	80002d4 <__adddf3>
 800aeb8:	4604      	mov	r4, r0
 800aeba:	460d      	mov	r5, r1
 800aebc:	f7f5 fe70 	bl	8000ba0 <__aeabi_d2iz>
 800aec0:	2200      	movs	r2, #0
 800aec2:	4607      	mov	r7, r0
 800aec4:	2300      	movs	r3, #0
 800aec6:	4620      	mov	r0, r4
 800aec8:	4629      	mov	r1, r5
 800aeca:	f7f5 fe2b 	bl	8000b24 <__aeabi_dcmplt>
 800aece:	b140      	cbz	r0, 800aee2 <_dtoa_r+0x16a>
 800aed0:	4638      	mov	r0, r7
 800aed2:	f7f5 fb4b 	bl	800056c <__aeabi_i2d>
 800aed6:	4622      	mov	r2, r4
 800aed8:	462b      	mov	r3, r5
 800aeda:	f7f5 fe19 	bl	8000b10 <__aeabi_dcmpeq>
 800aede:	b900      	cbnz	r0, 800aee2 <_dtoa_r+0x16a>
 800aee0:	3f01      	subs	r7, #1
 800aee2:	2f16      	cmp	r7, #22
 800aee4:	d853      	bhi.n	800af8e <_dtoa_r+0x216>
 800aee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aeea:	4b5c      	ldr	r3, [pc, #368]	@ (800b05c <_dtoa_r+0x2e4>)
 800aeec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aef4:	f7f5 fe16 	bl	8000b24 <__aeabi_dcmplt>
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d04a      	beq.n	800af92 <_dtoa_r+0x21a>
 800aefc:	2300      	movs	r3, #0
 800aefe:	3f01      	subs	r7, #1
 800af00:	930f      	str	r3, [sp, #60]	@ 0x3c
 800af02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800af04:	1b9b      	subs	r3, r3, r6
 800af06:	1e5a      	subs	r2, r3, #1
 800af08:	bf46      	itte	mi
 800af0a:	f1c3 0801 	rsbmi	r8, r3, #1
 800af0e:	2300      	movmi	r3, #0
 800af10:	f04f 0800 	movpl.w	r8, #0
 800af14:	9209      	str	r2, [sp, #36]	@ 0x24
 800af16:	bf48      	it	mi
 800af18:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800af1a:	2f00      	cmp	r7, #0
 800af1c:	db3b      	blt.n	800af96 <_dtoa_r+0x21e>
 800af1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af20:	970e      	str	r7, [sp, #56]	@ 0x38
 800af22:	443b      	add	r3, r7
 800af24:	9309      	str	r3, [sp, #36]	@ 0x24
 800af26:	2300      	movs	r3, #0
 800af28:	930a      	str	r3, [sp, #40]	@ 0x28
 800af2a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800af2c:	2b09      	cmp	r3, #9
 800af2e:	d866      	bhi.n	800affe <_dtoa_r+0x286>
 800af30:	2b05      	cmp	r3, #5
 800af32:	bfc4      	itt	gt
 800af34:	3b04      	subgt	r3, #4
 800af36:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800af38:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800af3a:	bfc8      	it	gt
 800af3c:	2400      	movgt	r4, #0
 800af3e:	f1a3 0302 	sub.w	r3, r3, #2
 800af42:	bfd8      	it	le
 800af44:	2401      	movle	r4, #1
 800af46:	2b03      	cmp	r3, #3
 800af48:	d864      	bhi.n	800b014 <_dtoa_r+0x29c>
 800af4a:	e8df f003 	tbb	[pc, r3]
 800af4e:	382b      	.short	0x382b
 800af50:	5636      	.short	0x5636
 800af52:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800af56:	441e      	add	r6, r3
 800af58:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800af5c:	2b20      	cmp	r3, #32
 800af5e:	bfc1      	itttt	gt
 800af60:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800af64:	fa08 f803 	lslgt.w	r8, r8, r3
 800af68:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800af6c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800af70:	bfd6      	itet	le
 800af72:	f1c3 0320 	rsble	r3, r3, #32
 800af76:	ea48 0003 	orrgt.w	r0, r8, r3
 800af7a:	fa04 f003 	lslle.w	r0, r4, r3
 800af7e:	f7f5 fae5 	bl	800054c <__aeabi_ui2d>
 800af82:	2201      	movs	r2, #1
 800af84:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800af88:	3e01      	subs	r6, #1
 800af8a:	9212      	str	r2, [sp, #72]	@ 0x48
 800af8c:	e775      	b.n	800ae7a <_dtoa_r+0x102>
 800af8e:	2301      	movs	r3, #1
 800af90:	e7b6      	b.n	800af00 <_dtoa_r+0x188>
 800af92:	900f      	str	r0, [sp, #60]	@ 0x3c
 800af94:	e7b5      	b.n	800af02 <_dtoa_r+0x18a>
 800af96:	427b      	negs	r3, r7
 800af98:	930a      	str	r3, [sp, #40]	@ 0x28
 800af9a:	2300      	movs	r3, #0
 800af9c:	eba8 0807 	sub.w	r8, r8, r7
 800afa0:	930e      	str	r3, [sp, #56]	@ 0x38
 800afa2:	e7c2      	b.n	800af2a <_dtoa_r+0x1b2>
 800afa4:	2300      	movs	r3, #0
 800afa6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afa8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800afaa:	2b00      	cmp	r3, #0
 800afac:	dc35      	bgt.n	800b01a <_dtoa_r+0x2a2>
 800afae:	2301      	movs	r3, #1
 800afb0:	461a      	mov	r2, r3
 800afb2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800afb6:	9221      	str	r2, [sp, #132]	@ 0x84
 800afb8:	e00b      	b.n	800afd2 <_dtoa_r+0x25a>
 800afba:	2301      	movs	r3, #1
 800afbc:	e7f3      	b.n	800afa6 <_dtoa_r+0x22e>
 800afbe:	2300      	movs	r3, #0
 800afc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800afc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800afc4:	18fb      	adds	r3, r7, r3
 800afc6:	9308      	str	r3, [sp, #32]
 800afc8:	3301      	adds	r3, #1
 800afca:	2b01      	cmp	r3, #1
 800afcc:	9307      	str	r3, [sp, #28]
 800afce:	bfb8      	it	lt
 800afd0:	2301      	movlt	r3, #1
 800afd2:	2100      	movs	r1, #0
 800afd4:	2204      	movs	r2, #4
 800afd6:	f8db 001c 	ldr.w	r0, [fp, #28]
 800afda:	f102 0514 	add.w	r5, r2, #20
 800afde:	429d      	cmp	r5, r3
 800afe0:	d91f      	bls.n	800b022 <_dtoa_r+0x2aa>
 800afe2:	6041      	str	r1, [r0, #4]
 800afe4:	4658      	mov	r0, fp
 800afe6:	f000 fd8d 	bl	800bb04 <_Balloc>
 800afea:	4682      	mov	sl, r0
 800afec:	2800      	cmp	r0, #0
 800afee:	d139      	bne.n	800b064 <_dtoa_r+0x2ec>
 800aff0:	4602      	mov	r2, r0
 800aff2:	f240 11af 	movw	r1, #431	@ 0x1af
 800aff6:	4b1a      	ldr	r3, [pc, #104]	@ (800b060 <_dtoa_r+0x2e8>)
 800aff8:	e6d2      	b.n	800ada0 <_dtoa_r+0x28>
 800affa:	2301      	movs	r3, #1
 800affc:	e7e0      	b.n	800afc0 <_dtoa_r+0x248>
 800affe:	2401      	movs	r4, #1
 800b000:	2300      	movs	r3, #0
 800b002:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b004:	9320      	str	r3, [sp, #128]	@ 0x80
 800b006:	f04f 33ff 	mov.w	r3, #4294967295
 800b00a:	2200      	movs	r2, #0
 800b00c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b010:	2312      	movs	r3, #18
 800b012:	e7d0      	b.n	800afb6 <_dtoa_r+0x23e>
 800b014:	2301      	movs	r3, #1
 800b016:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b018:	e7f5      	b.n	800b006 <_dtoa_r+0x28e>
 800b01a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b01c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b020:	e7d7      	b.n	800afd2 <_dtoa_r+0x25a>
 800b022:	3101      	adds	r1, #1
 800b024:	0052      	lsls	r2, r2, #1
 800b026:	e7d8      	b.n	800afda <_dtoa_r+0x262>
 800b028:	636f4361 	.word	0x636f4361
 800b02c:	3fd287a7 	.word	0x3fd287a7
 800b030:	8b60c8b3 	.word	0x8b60c8b3
 800b034:	3fc68a28 	.word	0x3fc68a28
 800b038:	509f79fb 	.word	0x509f79fb
 800b03c:	3fd34413 	.word	0x3fd34413
 800b040:	0800ce6b 	.word	0x0800ce6b
 800b044:	0800ce82 	.word	0x0800ce82
 800b048:	7ff00000 	.word	0x7ff00000
 800b04c:	0800ce67 	.word	0x0800ce67
 800b050:	0800ce3b 	.word	0x0800ce3b
 800b054:	0800ce3a 	.word	0x0800ce3a
 800b058:	3ff80000 	.word	0x3ff80000
 800b05c:	0800cf78 	.word	0x0800cf78
 800b060:	0800ceda 	.word	0x0800ceda
 800b064:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b068:	6018      	str	r0, [r3, #0]
 800b06a:	9b07      	ldr	r3, [sp, #28]
 800b06c:	2b0e      	cmp	r3, #14
 800b06e:	f200 80a4 	bhi.w	800b1ba <_dtoa_r+0x442>
 800b072:	2c00      	cmp	r4, #0
 800b074:	f000 80a1 	beq.w	800b1ba <_dtoa_r+0x442>
 800b078:	2f00      	cmp	r7, #0
 800b07a:	dd33      	ble.n	800b0e4 <_dtoa_r+0x36c>
 800b07c:	4b86      	ldr	r3, [pc, #536]	@ (800b298 <_dtoa_r+0x520>)
 800b07e:	f007 020f 	and.w	r2, r7, #15
 800b082:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b086:	05f8      	lsls	r0, r7, #23
 800b088:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b08c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b090:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b094:	d516      	bpl.n	800b0c4 <_dtoa_r+0x34c>
 800b096:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b09a:	4b80      	ldr	r3, [pc, #512]	@ (800b29c <_dtoa_r+0x524>)
 800b09c:	2603      	movs	r6, #3
 800b09e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b0a2:	f7f5 fbf7 	bl	8000894 <__aeabi_ddiv>
 800b0a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0aa:	f004 040f 	and.w	r4, r4, #15
 800b0ae:	4d7b      	ldr	r5, [pc, #492]	@ (800b29c <_dtoa_r+0x524>)
 800b0b0:	b954      	cbnz	r4, 800b0c8 <_dtoa_r+0x350>
 800b0b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0ba:	f7f5 fbeb 	bl	8000894 <__aeabi_ddiv>
 800b0be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0c2:	e028      	b.n	800b116 <_dtoa_r+0x39e>
 800b0c4:	2602      	movs	r6, #2
 800b0c6:	e7f2      	b.n	800b0ae <_dtoa_r+0x336>
 800b0c8:	07e1      	lsls	r1, r4, #31
 800b0ca:	d508      	bpl.n	800b0de <_dtoa_r+0x366>
 800b0cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b0d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b0d4:	f7f5 fab4 	bl	8000640 <__aeabi_dmul>
 800b0d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0dc:	3601      	adds	r6, #1
 800b0de:	1064      	asrs	r4, r4, #1
 800b0e0:	3508      	adds	r5, #8
 800b0e2:	e7e5      	b.n	800b0b0 <_dtoa_r+0x338>
 800b0e4:	f000 80d2 	beq.w	800b28c <_dtoa_r+0x514>
 800b0e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b0ec:	427c      	negs	r4, r7
 800b0ee:	4b6a      	ldr	r3, [pc, #424]	@ (800b298 <_dtoa_r+0x520>)
 800b0f0:	f004 020f 	and.w	r2, r4, #15
 800b0f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fc:	f7f5 faa0 	bl	8000640 <__aeabi_dmul>
 800b100:	2602      	movs	r6, #2
 800b102:	2300      	movs	r3, #0
 800b104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b108:	4d64      	ldr	r5, [pc, #400]	@ (800b29c <_dtoa_r+0x524>)
 800b10a:	1124      	asrs	r4, r4, #4
 800b10c:	2c00      	cmp	r4, #0
 800b10e:	f040 80b2 	bne.w	800b276 <_dtoa_r+0x4fe>
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1d3      	bne.n	800b0be <_dtoa_r+0x346>
 800b116:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b11a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f000 80b7 	beq.w	800b290 <_dtoa_r+0x518>
 800b122:	2200      	movs	r2, #0
 800b124:	4620      	mov	r0, r4
 800b126:	4629      	mov	r1, r5
 800b128:	4b5d      	ldr	r3, [pc, #372]	@ (800b2a0 <_dtoa_r+0x528>)
 800b12a:	f7f5 fcfb 	bl	8000b24 <__aeabi_dcmplt>
 800b12e:	2800      	cmp	r0, #0
 800b130:	f000 80ae 	beq.w	800b290 <_dtoa_r+0x518>
 800b134:	9b07      	ldr	r3, [sp, #28]
 800b136:	2b00      	cmp	r3, #0
 800b138:	f000 80aa 	beq.w	800b290 <_dtoa_r+0x518>
 800b13c:	9b08      	ldr	r3, [sp, #32]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	dd37      	ble.n	800b1b2 <_dtoa_r+0x43a>
 800b142:	1e7b      	subs	r3, r7, #1
 800b144:	4620      	mov	r0, r4
 800b146:	9304      	str	r3, [sp, #16]
 800b148:	2200      	movs	r2, #0
 800b14a:	4629      	mov	r1, r5
 800b14c:	4b55      	ldr	r3, [pc, #340]	@ (800b2a4 <_dtoa_r+0x52c>)
 800b14e:	f7f5 fa77 	bl	8000640 <__aeabi_dmul>
 800b152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b156:	9c08      	ldr	r4, [sp, #32]
 800b158:	3601      	adds	r6, #1
 800b15a:	4630      	mov	r0, r6
 800b15c:	f7f5 fa06 	bl	800056c <__aeabi_i2d>
 800b160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b164:	f7f5 fa6c 	bl	8000640 <__aeabi_dmul>
 800b168:	2200      	movs	r2, #0
 800b16a:	4b4f      	ldr	r3, [pc, #316]	@ (800b2a8 <_dtoa_r+0x530>)
 800b16c:	f7f5 f8b2 	bl	80002d4 <__adddf3>
 800b170:	4605      	mov	r5, r0
 800b172:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b176:	2c00      	cmp	r4, #0
 800b178:	f040 809a 	bne.w	800b2b0 <_dtoa_r+0x538>
 800b17c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b180:	2200      	movs	r2, #0
 800b182:	4b4a      	ldr	r3, [pc, #296]	@ (800b2ac <_dtoa_r+0x534>)
 800b184:	f7f5 f8a4 	bl	80002d0 <__aeabi_dsub>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b190:	462a      	mov	r2, r5
 800b192:	4633      	mov	r3, r6
 800b194:	f7f5 fce4 	bl	8000b60 <__aeabi_dcmpgt>
 800b198:	2800      	cmp	r0, #0
 800b19a:	f040 828e 	bne.w	800b6ba <_dtoa_r+0x942>
 800b19e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1a2:	462a      	mov	r2, r5
 800b1a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b1a8:	f7f5 fcbc 	bl	8000b24 <__aeabi_dcmplt>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	f040 8127 	bne.w	800b400 <_dtoa_r+0x688>
 800b1b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b1b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b1ba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f2c0 8163 	blt.w	800b488 <_dtoa_r+0x710>
 800b1c2:	2f0e      	cmp	r7, #14
 800b1c4:	f300 8160 	bgt.w	800b488 <_dtoa_r+0x710>
 800b1c8:	4b33      	ldr	r3, [pc, #204]	@ (800b298 <_dtoa_r+0x520>)
 800b1ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b1ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b1d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b1d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	da03      	bge.n	800b1e4 <_dtoa_r+0x46c>
 800b1dc:	9b07      	ldr	r3, [sp, #28]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f340 8100 	ble.w	800b3e4 <_dtoa_r+0x66c>
 800b1e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b1e8:	4656      	mov	r6, sl
 800b1ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	4629      	mov	r1, r5
 800b1f2:	f7f5 fb4f 	bl	8000894 <__aeabi_ddiv>
 800b1f6:	f7f5 fcd3 	bl	8000ba0 <__aeabi_d2iz>
 800b1fa:	4680      	mov	r8, r0
 800b1fc:	f7f5 f9b6 	bl	800056c <__aeabi_i2d>
 800b200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b204:	f7f5 fa1c 	bl	8000640 <__aeabi_dmul>
 800b208:	4602      	mov	r2, r0
 800b20a:	460b      	mov	r3, r1
 800b20c:	4620      	mov	r0, r4
 800b20e:	4629      	mov	r1, r5
 800b210:	f7f5 f85e 	bl	80002d0 <__aeabi_dsub>
 800b214:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b218:	9d07      	ldr	r5, [sp, #28]
 800b21a:	f806 4b01 	strb.w	r4, [r6], #1
 800b21e:	eba6 040a 	sub.w	r4, r6, sl
 800b222:	42a5      	cmp	r5, r4
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	f040 8116 	bne.w	800b458 <_dtoa_r+0x6e0>
 800b22c:	f7f5 f852 	bl	80002d4 <__adddf3>
 800b230:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b234:	4604      	mov	r4, r0
 800b236:	460d      	mov	r5, r1
 800b238:	f7f5 fc92 	bl	8000b60 <__aeabi_dcmpgt>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	f040 80f8 	bne.w	800b432 <_dtoa_r+0x6ba>
 800b242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b246:	4620      	mov	r0, r4
 800b248:	4629      	mov	r1, r5
 800b24a:	f7f5 fc61 	bl	8000b10 <__aeabi_dcmpeq>
 800b24e:	b118      	cbz	r0, 800b258 <_dtoa_r+0x4e0>
 800b250:	f018 0f01 	tst.w	r8, #1
 800b254:	f040 80ed 	bne.w	800b432 <_dtoa_r+0x6ba>
 800b258:	4649      	mov	r1, r9
 800b25a:	4658      	mov	r0, fp
 800b25c:	f000 fc92 	bl	800bb84 <_Bfree>
 800b260:	2300      	movs	r3, #0
 800b262:	7033      	strb	r3, [r6, #0]
 800b264:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800b266:	3701      	adds	r7, #1
 800b268:	601f      	str	r7, [r3, #0]
 800b26a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f000 8320 	beq.w	800b8b2 <_dtoa_r+0xb3a>
 800b272:	601e      	str	r6, [r3, #0]
 800b274:	e31d      	b.n	800b8b2 <_dtoa_r+0xb3a>
 800b276:	07e2      	lsls	r2, r4, #31
 800b278:	d505      	bpl.n	800b286 <_dtoa_r+0x50e>
 800b27a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b27e:	f7f5 f9df 	bl	8000640 <__aeabi_dmul>
 800b282:	2301      	movs	r3, #1
 800b284:	3601      	adds	r6, #1
 800b286:	1064      	asrs	r4, r4, #1
 800b288:	3508      	adds	r5, #8
 800b28a:	e73f      	b.n	800b10c <_dtoa_r+0x394>
 800b28c:	2602      	movs	r6, #2
 800b28e:	e742      	b.n	800b116 <_dtoa_r+0x39e>
 800b290:	9c07      	ldr	r4, [sp, #28]
 800b292:	9704      	str	r7, [sp, #16]
 800b294:	e761      	b.n	800b15a <_dtoa_r+0x3e2>
 800b296:	bf00      	nop
 800b298:	0800cf78 	.word	0x0800cf78
 800b29c:	0800cf50 	.word	0x0800cf50
 800b2a0:	3ff00000 	.word	0x3ff00000
 800b2a4:	40240000 	.word	0x40240000
 800b2a8:	401c0000 	.word	0x401c0000
 800b2ac:	40140000 	.word	0x40140000
 800b2b0:	4b70      	ldr	r3, [pc, #448]	@ (800b474 <_dtoa_r+0x6fc>)
 800b2b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b2b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b2b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b2bc:	4454      	add	r4, sl
 800b2be:	2900      	cmp	r1, #0
 800b2c0:	d045      	beq.n	800b34e <_dtoa_r+0x5d6>
 800b2c2:	2000      	movs	r0, #0
 800b2c4:	496c      	ldr	r1, [pc, #432]	@ (800b478 <_dtoa_r+0x700>)
 800b2c6:	f7f5 fae5 	bl	8000894 <__aeabi_ddiv>
 800b2ca:	4633      	mov	r3, r6
 800b2cc:	462a      	mov	r2, r5
 800b2ce:	f7f4 ffff 	bl	80002d0 <__aeabi_dsub>
 800b2d2:	4656      	mov	r6, sl
 800b2d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b2d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2dc:	f7f5 fc60 	bl	8000ba0 <__aeabi_d2iz>
 800b2e0:	4605      	mov	r5, r0
 800b2e2:	f7f5 f943 	bl	800056c <__aeabi_i2d>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	460b      	mov	r3, r1
 800b2ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2ee:	f7f4 ffef 	bl	80002d0 <__aeabi_dsub>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	3530      	adds	r5, #48	@ 0x30
 800b2f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b2fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b300:	f806 5b01 	strb.w	r5, [r6], #1
 800b304:	f7f5 fc0e 	bl	8000b24 <__aeabi_dcmplt>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d163      	bne.n	800b3d4 <_dtoa_r+0x65c>
 800b30c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b310:	2000      	movs	r0, #0
 800b312:	495a      	ldr	r1, [pc, #360]	@ (800b47c <_dtoa_r+0x704>)
 800b314:	f7f4 ffdc 	bl	80002d0 <__aeabi_dsub>
 800b318:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b31c:	f7f5 fc02 	bl	8000b24 <__aeabi_dcmplt>
 800b320:	2800      	cmp	r0, #0
 800b322:	f040 8087 	bne.w	800b434 <_dtoa_r+0x6bc>
 800b326:	42a6      	cmp	r6, r4
 800b328:	f43f af43 	beq.w	800b1b2 <_dtoa_r+0x43a>
 800b32c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b330:	2200      	movs	r2, #0
 800b332:	4b53      	ldr	r3, [pc, #332]	@ (800b480 <_dtoa_r+0x708>)
 800b334:	f7f5 f984 	bl	8000640 <__aeabi_dmul>
 800b338:	2200      	movs	r2, #0
 800b33a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b33e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b342:	4b4f      	ldr	r3, [pc, #316]	@ (800b480 <_dtoa_r+0x708>)
 800b344:	f7f5 f97c 	bl	8000640 <__aeabi_dmul>
 800b348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b34c:	e7c4      	b.n	800b2d8 <_dtoa_r+0x560>
 800b34e:	4631      	mov	r1, r6
 800b350:	4628      	mov	r0, r5
 800b352:	f7f5 f975 	bl	8000640 <__aeabi_dmul>
 800b356:	4656      	mov	r6, sl
 800b358:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b35c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b35e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b362:	f7f5 fc1d 	bl	8000ba0 <__aeabi_d2iz>
 800b366:	4605      	mov	r5, r0
 800b368:	f7f5 f900 	bl	800056c <__aeabi_i2d>
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b374:	f7f4 ffac 	bl	80002d0 <__aeabi_dsub>
 800b378:	4602      	mov	r2, r0
 800b37a:	460b      	mov	r3, r1
 800b37c:	3530      	adds	r5, #48	@ 0x30
 800b37e:	f806 5b01 	strb.w	r5, [r6], #1
 800b382:	42a6      	cmp	r6, r4
 800b384:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b388:	f04f 0200 	mov.w	r2, #0
 800b38c:	d124      	bne.n	800b3d8 <_dtoa_r+0x660>
 800b38e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b392:	4b39      	ldr	r3, [pc, #228]	@ (800b478 <_dtoa_r+0x700>)
 800b394:	f7f4 ff9e 	bl	80002d4 <__adddf3>
 800b398:	4602      	mov	r2, r0
 800b39a:	460b      	mov	r3, r1
 800b39c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3a0:	f7f5 fbde 	bl	8000b60 <__aeabi_dcmpgt>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d145      	bne.n	800b434 <_dtoa_r+0x6bc>
 800b3a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	4932      	ldr	r1, [pc, #200]	@ (800b478 <_dtoa_r+0x700>)
 800b3b0:	f7f4 ff8e 	bl	80002d0 <__aeabi_dsub>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3bc:	f7f5 fbb2 	bl	8000b24 <__aeabi_dcmplt>
 800b3c0:	2800      	cmp	r0, #0
 800b3c2:	f43f aef6 	beq.w	800b1b2 <_dtoa_r+0x43a>
 800b3c6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b3c8:	1e73      	subs	r3, r6, #1
 800b3ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b3cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b3d0:	2b30      	cmp	r3, #48	@ 0x30
 800b3d2:	d0f8      	beq.n	800b3c6 <_dtoa_r+0x64e>
 800b3d4:	9f04      	ldr	r7, [sp, #16]
 800b3d6:	e73f      	b.n	800b258 <_dtoa_r+0x4e0>
 800b3d8:	4b29      	ldr	r3, [pc, #164]	@ (800b480 <_dtoa_r+0x708>)
 800b3da:	f7f5 f931 	bl	8000640 <__aeabi_dmul>
 800b3de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3e2:	e7bc      	b.n	800b35e <_dtoa_r+0x5e6>
 800b3e4:	d10c      	bne.n	800b400 <_dtoa_r+0x688>
 800b3e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	4b25      	ldr	r3, [pc, #148]	@ (800b484 <_dtoa_r+0x70c>)
 800b3ee:	f7f5 f927 	bl	8000640 <__aeabi_dmul>
 800b3f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3f6:	f7f5 fba9 	bl	8000b4c <__aeabi_dcmpge>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	f000 815b 	beq.w	800b6b6 <_dtoa_r+0x93e>
 800b400:	2400      	movs	r4, #0
 800b402:	4625      	mov	r5, r4
 800b404:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b406:	4656      	mov	r6, sl
 800b408:	43db      	mvns	r3, r3
 800b40a:	9304      	str	r3, [sp, #16]
 800b40c:	2700      	movs	r7, #0
 800b40e:	4621      	mov	r1, r4
 800b410:	4658      	mov	r0, fp
 800b412:	f000 fbb7 	bl	800bb84 <_Bfree>
 800b416:	2d00      	cmp	r5, #0
 800b418:	d0dc      	beq.n	800b3d4 <_dtoa_r+0x65c>
 800b41a:	b12f      	cbz	r7, 800b428 <_dtoa_r+0x6b0>
 800b41c:	42af      	cmp	r7, r5
 800b41e:	d003      	beq.n	800b428 <_dtoa_r+0x6b0>
 800b420:	4639      	mov	r1, r7
 800b422:	4658      	mov	r0, fp
 800b424:	f000 fbae 	bl	800bb84 <_Bfree>
 800b428:	4629      	mov	r1, r5
 800b42a:	4658      	mov	r0, fp
 800b42c:	f000 fbaa 	bl	800bb84 <_Bfree>
 800b430:	e7d0      	b.n	800b3d4 <_dtoa_r+0x65c>
 800b432:	9704      	str	r7, [sp, #16]
 800b434:	4633      	mov	r3, r6
 800b436:	461e      	mov	r6, r3
 800b438:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b43c:	2a39      	cmp	r2, #57	@ 0x39
 800b43e:	d107      	bne.n	800b450 <_dtoa_r+0x6d8>
 800b440:	459a      	cmp	sl, r3
 800b442:	d1f8      	bne.n	800b436 <_dtoa_r+0x6be>
 800b444:	9a04      	ldr	r2, [sp, #16]
 800b446:	3201      	adds	r2, #1
 800b448:	9204      	str	r2, [sp, #16]
 800b44a:	2230      	movs	r2, #48	@ 0x30
 800b44c:	f88a 2000 	strb.w	r2, [sl]
 800b450:	781a      	ldrb	r2, [r3, #0]
 800b452:	3201      	adds	r2, #1
 800b454:	701a      	strb	r2, [r3, #0]
 800b456:	e7bd      	b.n	800b3d4 <_dtoa_r+0x65c>
 800b458:	2200      	movs	r2, #0
 800b45a:	4b09      	ldr	r3, [pc, #36]	@ (800b480 <_dtoa_r+0x708>)
 800b45c:	f7f5 f8f0 	bl	8000640 <__aeabi_dmul>
 800b460:	2200      	movs	r2, #0
 800b462:	2300      	movs	r3, #0
 800b464:	4604      	mov	r4, r0
 800b466:	460d      	mov	r5, r1
 800b468:	f7f5 fb52 	bl	8000b10 <__aeabi_dcmpeq>
 800b46c:	2800      	cmp	r0, #0
 800b46e:	f43f aebc 	beq.w	800b1ea <_dtoa_r+0x472>
 800b472:	e6f1      	b.n	800b258 <_dtoa_r+0x4e0>
 800b474:	0800cf78 	.word	0x0800cf78
 800b478:	3fe00000 	.word	0x3fe00000
 800b47c:	3ff00000 	.word	0x3ff00000
 800b480:	40240000 	.word	0x40240000
 800b484:	40140000 	.word	0x40140000
 800b488:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b48a:	2a00      	cmp	r2, #0
 800b48c:	f000 80db 	beq.w	800b646 <_dtoa_r+0x8ce>
 800b490:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b492:	2a01      	cmp	r2, #1
 800b494:	f300 80bf 	bgt.w	800b616 <_dtoa_r+0x89e>
 800b498:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b49a:	2a00      	cmp	r2, #0
 800b49c:	f000 80b7 	beq.w	800b60e <_dtoa_r+0x896>
 800b4a0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b4a4:	4646      	mov	r6, r8
 800b4a6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b4a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4aa:	2101      	movs	r1, #1
 800b4ac:	441a      	add	r2, r3
 800b4ae:	4658      	mov	r0, fp
 800b4b0:	4498      	add	r8, r3
 800b4b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4b4:	f000 fc1a 	bl	800bcec <__i2b>
 800b4b8:	4605      	mov	r5, r0
 800b4ba:	b15e      	cbz	r6, 800b4d4 <_dtoa_r+0x75c>
 800b4bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	dd08      	ble.n	800b4d4 <_dtoa_r+0x75c>
 800b4c2:	42b3      	cmp	r3, r6
 800b4c4:	bfa8      	it	ge
 800b4c6:	4633      	movge	r3, r6
 800b4c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4ca:	eba8 0803 	sub.w	r8, r8, r3
 800b4ce:	1af6      	subs	r6, r6, r3
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4d6:	b1f3      	cbz	r3, 800b516 <_dtoa_r+0x79e>
 800b4d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f000 80b7 	beq.w	800b64e <_dtoa_r+0x8d6>
 800b4e0:	b18c      	cbz	r4, 800b506 <_dtoa_r+0x78e>
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	4622      	mov	r2, r4
 800b4e6:	4658      	mov	r0, fp
 800b4e8:	f000 fcbe 	bl	800be68 <__pow5mult>
 800b4ec:	464a      	mov	r2, r9
 800b4ee:	4601      	mov	r1, r0
 800b4f0:	4605      	mov	r5, r0
 800b4f2:	4658      	mov	r0, fp
 800b4f4:	f000 fc10 	bl	800bd18 <__multiply>
 800b4f8:	4649      	mov	r1, r9
 800b4fa:	9004      	str	r0, [sp, #16]
 800b4fc:	4658      	mov	r0, fp
 800b4fe:	f000 fb41 	bl	800bb84 <_Bfree>
 800b502:	9b04      	ldr	r3, [sp, #16]
 800b504:	4699      	mov	r9, r3
 800b506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b508:	1b1a      	subs	r2, r3, r4
 800b50a:	d004      	beq.n	800b516 <_dtoa_r+0x79e>
 800b50c:	4649      	mov	r1, r9
 800b50e:	4658      	mov	r0, fp
 800b510:	f000 fcaa 	bl	800be68 <__pow5mult>
 800b514:	4681      	mov	r9, r0
 800b516:	2101      	movs	r1, #1
 800b518:	4658      	mov	r0, fp
 800b51a:	f000 fbe7 	bl	800bcec <__i2b>
 800b51e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b520:	4604      	mov	r4, r0
 800b522:	2b00      	cmp	r3, #0
 800b524:	f000 81c9 	beq.w	800b8ba <_dtoa_r+0xb42>
 800b528:	461a      	mov	r2, r3
 800b52a:	4601      	mov	r1, r0
 800b52c:	4658      	mov	r0, fp
 800b52e:	f000 fc9b 	bl	800be68 <__pow5mult>
 800b532:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b534:	4604      	mov	r4, r0
 800b536:	2b01      	cmp	r3, #1
 800b538:	f300 808f 	bgt.w	800b65a <_dtoa_r+0x8e2>
 800b53c:	9b02      	ldr	r3, [sp, #8]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f040 8087 	bne.w	800b652 <_dtoa_r+0x8da>
 800b544:	9b03      	ldr	r3, [sp, #12]
 800b546:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	f040 8083 	bne.w	800b656 <_dtoa_r+0x8de>
 800b550:	9b03      	ldr	r3, [sp, #12]
 800b552:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b556:	0d1b      	lsrs	r3, r3, #20
 800b558:	051b      	lsls	r3, r3, #20
 800b55a:	b12b      	cbz	r3, 800b568 <_dtoa_r+0x7f0>
 800b55c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b55e:	f108 0801 	add.w	r8, r8, #1
 800b562:	3301      	adds	r3, #1
 800b564:	9309      	str	r3, [sp, #36]	@ 0x24
 800b566:	2301      	movs	r3, #1
 800b568:	930a      	str	r3, [sp, #40]	@ 0x28
 800b56a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f000 81aa 	beq.w	800b8c6 <_dtoa_r+0xb4e>
 800b572:	6923      	ldr	r3, [r4, #16]
 800b574:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b578:	6918      	ldr	r0, [r3, #16]
 800b57a:	f000 fb6b 	bl	800bc54 <__hi0bits>
 800b57e:	f1c0 0020 	rsb	r0, r0, #32
 800b582:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b584:	4418      	add	r0, r3
 800b586:	f010 001f 	ands.w	r0, r0, #31
 800b58a:	d071      	beq.n	800b670 <_dtoa_r+0x8f8>
 800b58c:	f1c0 0320 	rsb	r3, r0, #32
 800b590:	2b04      	cmp	r3, #4
 800b592:	dd65      	ble.n	800b660 <_dtoa_r+0x8e8>
 800b594:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b596:	f1c0 001c 	rsb	r0, r0, #28
 800b59a:	4403      	add	r3, r0
 800b59c:	4480      	add	r8, r0
 800b59e:	4406      	add	r6, r0
 800b5a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5a2:	f1b8 0f00 	cmp.w	r8, #0
 800b5a6:	dd05      	ble.n	800b5b4 <_dtoa_r+0x83c>
 800b5a8:	4649      	mov	r1, r9
 800b5aa:	4642      	mov	r2, r8
 800b5ac:	4658      	mov	r0, fp
 800b5ae:	f000 fcb5 	bl	800bf1c <__lshift>
 800b5b2:	4681      	mov	r9, r0
 800b5b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	dd05      	ble.n	800b5c6 <_dtoa_r+0x84e>
 800b5ba:	4621      	mov	r1, r4
 800b5bc:	461a      	mov	r2, r3
 800b5be:	4658      	mov	r0, fp
 800b5c0:	f000 fcac 	bl	800bf1c <__lshift>
 800b5c4:	4604      	mov	r4, r0
 800b5c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d053      	beq.n	800b674 <_dtoa_r+0x8fc>
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	4648      	mov	r0, r9
 800b5d0:	f000 fd10 	bl	800bff4 <__mcmp>
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	da4d      	bge.n	800b674 <_dtoa_r+0x8fc>
 800b5d8:	1e7b      	subs	r3, r7, #1
 800b5da:	4649      	mov	r1, r9
 800b5dc:	9304      	str	r3, [sp, #16]
 800b5de:	220a      	movs	r2, #10
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	4658      	mov	r0, fp
 800b5e4:	f000 faf0 	bl	800bbc8 <__multadd>
 800b5e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5ea:	4681      	mov	r9, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 816c 	beq.w	800b8ca <_dtoa_r+0xb52>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	4629      	mov	r1, r5
 800b5f6:	220a      	movs	r2, #10
 800b5f8:	4658      	mov	r0, fp
 800b5fa:	f000 fae5 	bl	800bbc8 <__multadd>
 800b5fe:	9b08      	ldr	r3, [sp, #32]
 800b600:	4605      	mov	r5, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	dc61      	bgt.n	800b6ca <_dtoa_r+0x952>
 800b606:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b608:	2b02      	cmp	r3, #2
 800b60a:	dc3b      	bgt.n	800b684 <_dtoa_r+0x90c>
 800b60c:	e05d      	b.n	800b6ca <_dtoa_r+0x952>
 800b60e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b610:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b614:	e746      	b.n	800b4a4 <_dtoa_r+0x72c>
 800b616:	9b07      	ldr	r3, [sp, #28]
 800b618:	1e5c      	subs	r4, r3, #1
 800b61a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b61c:	42a3      	cmp	r3, r4
 800b61e:	bfbf      	itttt	lt
 800b620:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b622:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b624:	1ae3      	sublt	r3, r4, r3
 800b626:	18d2      	addlt	r2, r2, r3
 800b628:	bfa8      	it	ge
 800b62a:	1b1c      	subge	r4, r3, r4
 800b62c:	9b07      	ldr	r3, [sp, #28]
 800b62e:	bfbe      	ittt	lt
 800b630:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b632:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b634:	2400      	movlt	r4, #0
 800b636:	2b00      	cmp	r3, #0
 800b638:	bfb5      	itete	lt
 800b63a:	eba8 0603 	sublt.w	r6, r8, r3
 800b63e:	4646      	movge	r6, r8
 800b640:	2300      	movlt	r3, #0
 800b642:	9b07      	ldrge	r3, [sp, #28]
 800b644:	e730      	b.n	800b4a8 <_dtoa_r+0x730>
 800b646:	4646      	mov	r6, r8
 800b648:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b64a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b64c:	e735      	b.n	800b4ba <_dtoa_r+0x742>
 800b64e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b650:	e75c      	b.n	800b50c <_dtoa_r+0x794>
 800b652:	2300      	movs	r3, #0
 800b654:	e788      	b.n	800b568 <_dtoa_r+0x7f0>
 800b656:	9b02      	ldr	r3, [sp, #8]
 800b658:	e786      	b.n	800b568 <_dtoa_r+0x7f0>
 800b65a:	2300      	movs	r3, #0
 800b65c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b65e:	e788      	b.n	800b572 <_dtoa_r+0x7fa>
 800b660:	d09f      	beq.n	800b5a2 <_dtoa_r+0x82a>
 800b662:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b664:	331c      	adds	r3, #28
 800b666:	441a      	add	r2, r3
 800b668:	4498      	add	r8, r3
 800b66a:	441e      	add	r6, r3
 800b66c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b66e:	e798      	b.n	800b5a2 <_dtoa_r+0x82a>
 800b670:	4603      	mov	r3, r0
 800b672:	e7f6      	b.n	800b662 <_dtoa_r+0x8ea>
 800b674:	9b07      	ldr	r3, [sp, #28]
 800b676:	9704      	str	r7, [sp, #16]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	dc20      	bgt.n	800b6be <_dtoa_r+0x946>
 800b67c:	9308      	str	r3, [sp, #32]
 800b67e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b680:	2b02      	cmp	r3, #2
 800b682:	dd1e      	ble.n	800b6c2 <_dtoa_r+0x94a>
 800b684:	9b08      	ldr	r3, [sp, #32]
 800b686:	2b00      	cmp	r3, #0
 800b688:	f47f aebc 	bne.w	800b404 <_dtoa_r+0x68c>
 800b68c:	4621      	mov	r1, r4
 800b68e:	2205      	movs	r2, #5
 800b690:	4658      	mov	r0, fp
 800b692:	f000 fa99 	bl	800bbc8 <__multadd>
 800b696:	4601      	mov	r1, r0
 800b698:	4604      	mov	r4, r0
 800b69a:	4648      	mov	r0, r9
 800b69c:	f000 fcaa 	bl	800bff4 <__mcmp>
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	f77f aeaf 	ble.w	800b404 <_dtoa_r+0x68c>
 800b6a6:	2331      	movs	r3, #49	@ 0x31
 800b6a8:	4656      	mov	r6, sl
 800b6aa:	f806 3b01 	strb.w	r3, [r6], #1
 800b6ae:	9b04      	ldr	r3, [sp, #16]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	9304      	str	r3, [sp, #16]
 800b6b4:	e6aa      	b.n	800b40c <_dtoa_r+0x694>
 800b6b6:	9c07      	ldr	r4, [sp, #28]
 800b6b8:	9704      	str	r7, [sp, #16]
 800b6ba:	4625      	mov	r5, r4
 800b6bc:	e7f3      	b.n	800b6a6 <_dtoa_r+0x92e>
 800b6be:	9b07      	ldr	r3, [sp, #28]
 800b6c0:	9308      	str	r3, [sp, #32]
 800b6c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f000 8104 	beq.w	800b8d2 <_dtoa_r+0xb5a>
 800b6ca:	2e00      	cmp	r6, #0
 800b6cc:	dd05      	ble.n	800b6da <_dtoa_r+0x962>
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	4632      	mov	r2, r6
 800b6d2:	4658      	mov	r0, fp
 800b6d4:	f000 fc22 	bl	800bf1c <__lshift>
 800b6d8:	4605      	mov	r5, r0
 800b6da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d05a      	beq.n	800b796 <_dtoa_r+0xa1e>
 800b6e0:	4658      	mov	r0, fp
 800b6e2:	6869      	ldr	r1, [r5, #4]
 800b6e4:	f000 fa0e 	bl	800bb04 <_Balloc>
 800b6e8:	4606      	mov	r6, r0
 800b6ea:	b928      	cbnz	r0, 800b6f8 <_dtoa_r+0x980>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b6f2:	4b83      	ldr	r3, [pc, #524]	@ (800b900 <_dtoa_r+0xb88>)
 800b6f4:	f7ff bb54 	b.w	800ada0 <_dtoa_r+0x28>
 800b6f8:	692a      	ldr	r2, [r5, #16]
 800b6fa:	f105 010c 	add.w	r1, r5, #12
 800b6fe:	3202      	adds	r2, #2
 800b700:	0092      	lsls	r2, r2, #2
 800b702:	300c      	adds	r0, #12
 800b704:	f000 ffa8 	bl	800c658 <memcpy>
 800b708:	2201      	movs	r2, #1
 800b70a:	4631      	mov	r1, r6
 800b70c:	4658      	mov	r0, fp
 800b70e:	f000 fc05 	bl	800bf1c <__lshift>
 800b712:	462f      	mov	r7, r5
 800b714:	4605      	mov	r5, r0
 800b716:	f10a 0301 	add.w	r3, sl, #1
 800b71a:	9307      	str	r3, [sp, #28]
 800b71c:	9b08      	ldr	r3, [sp, #32]
 800b71e:	4453      	add	r3, sl
 800b720:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b722:	9b02      	ldr	r3, [sp, #8]
 800b724:	f003 0301 	and.w	r3, r3, #1
 800b728:	930a      	str	r3, [sp, #40]	@ 0x28
 800b72a:	9b07      	ldr	r3, [sp, #28]
 800b72c:	4621      	mov	r1, r4
 800b72e:	3b01      	subs	r3, #1
 800b730:	4648      	mov	r0, r9
 800b732:	9302      	str	r3, [sp, #8]
 800b734:	f7ff fa95 	bl	800ac62 <quorem>
 800b738:	4639      	mov	r1, r7
 800b73a:	9008      	str	r0, [sp, #32]
 800b73c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b740:	4648      	mov	r0, r9
 800b742:	f000 fc57 	bl	800bff4 <__mcmp>
 800b746:	462a      	mov	r2, r5
 800b748:	9009      	str	r0, [sp, #36]	@ 0x24
 800b74a:	4621      	mov	r1, r4
 800b74c:	4658      	mov	r0, fp
 800b74e:	f000 fc6d 	bl	800c02c <__mdiff>
 800b752:	68c2      	ldr	r2, [r0, #12]
 800b754:	4606      	mov	r6, r0
 800b756:	bb02      	cbnz	r2, 800b79a <_dtoa_r+0xa22>
 800b758:	4601      	mov	r1, r0
 800b75a:	4648      	mov	r0, r9
 800b75c:	f000 fc4a 	bl	800bff4 <__mcmp>
 800b760:	4602      	mov	r2, r0
 800b762:	4631      	mov	r1, r6
 800b764:	4658      	mov	r0, fp
 800b766:	920c      	str	r2, [sp, #48]	@ 0x30
 800b768:	f000 fa0c 	bl	800bb84 <_Bfree>
 800b76c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b76e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b770:	9e07      	ldr	r6, [sp, #28]
 800b772:	ea43 0102 	orr.w	r1, r3, r2
 800b776:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b778:	4319      	orrs	r1, r3
 800b77a:	d110      	bne.n	800b79e <_dtoa_r+0xa26>
 800b77c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b780:	d029      	beq.n	800b7d6 <_dtoa_r+0xa5e>
 800b782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b784:	2b00      	cmp	r3, #0
 800b786:	dd02      	ble.n	800b78e <_dtoa_r+0xa16>
 800b788:	9b08      	ldr	r3, [sp, #32]
 800b78a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b78e:	9b02      	ldr	r3, [sp, #8]
 800b790:	f883 8000 	strb.w	r8, [r3]
 800b794:	e63b      	b.n	800b40e <_dtoa_r+0x696>
 800b796:	4628      	mov	r0, r5
 800b798:	e7bb      	b.n	800b712 <_dtoa_r+0x99a>
 800b79a:	2201      	movs	r2, #1
 800b79c:	e7e1      	b.n	800b762 <_dtoa_r+0x9ea>
 800b79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	db04      	blt.n	800b7ae <_dtoa_r+0xa36>
 800b7a4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b7a6:	430b      	orrs	r3, r1
 800b7a8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b7aa:	430b      	orrs	r3, r1
 800b7ac:	d120      	bne.n	800b7f0 <_dtoa_r+0xa78>
 800b7ae:	2a00      	cmp	r2, #0
 800b7b0:	dded      	ble.n	800b78e <_dtoa_r+0xa16>
 800b7b2:	4649      	mov	r1, r9
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	4658      	mov	r0, fp
 800b7b8:	f000 fbb0 	bl	800bf1c <__lshift>
 800b7bc:	4621      	mov	r1, r4
 800b7be:	4681      	mov	r9, r0
 800b7c0:	f000 fc18 	bl	800bff4 <__mcmp>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	dc03      	bgt.n	800b7d0 <_dtoa_r+0xa58>
 800b7c8:	d1e1      	bne.n	800b78e <_dtoa_r+0xa16>
 800b7ca:	f018 0f01 	tst.w	r8, #1
 800b7ce:	d0de      	beq.n	800b78e <_dtoa_r+0xa16>
 800b7d0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b7d4:	d1d8      	bne.n	800b788 <_dtoa_r+0xa10>
 800b7d6:	2339      	movs	r3, #57	@ 0x39
 800b7d8:	9a02      	ldr	r2, [sp, #8]
 800b7da:	7013      	strb	r3, [r2, #0]
 800b7dc:	4633      	mov	r3, r6
 800b7de:	461e      	mov	r6, r3
 800b7e0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b7e4:	3b01      	subs	r3, #1
 800b7e6:	2a39      	cmp	r2, #57	@ 0x39
 800b7e8:	d052      	beq.n	800b890 <_dtoa_r+0xb18>
 800b7ea:	3201      	adds	r2, #1
 800b7ec:	701a      	strb	r2, [r3, #0]
 800b7ee:	e60e      	b.n	800b40e <_dtoa_r+0x696>
 800b7f0:	2a00      	cmp	r2, #0
 800b7f2:	dd07      	ble.n	800b804 <_dtoa_r+0xa8c>
 800b7f4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b7f8:	d0ed      	beq.n	800b7d6 <_dtoa_r+0xa5e>
 800b7fa:	9a02      	ldr	r2, [sp, #8]
 800b7fc:	f108 0301 	add.w	r3, r8, #1
 800b800:	7013      	strb	r3, [r2, #0]
 800b802:	e604      	b.n	800b40e <_dtoa_r+0x696>
 800b804:	9b07      	ldr	r3, [sp, #28]
 800b806:	9a07      	ldr	r2, [sp, #28]
 800b808:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b80c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b80e:	4293      	cmp	r3, r2
 800b810:	d028      	beq.n	800b864 <_dtoa_r+0xaec>
 800b812:	4649      	mov	r1, r9
 800b814:	2300      	movs	r3, #0
 800b816:	220a      	movs	r2, #10
 800b818:	4658      	mov	r0, fp
 800b81a:	f000 f9d5 	bl	800bbc8 <__multadd>
 800b81e:	42af      	cmp	r7, r5
 800b820:	4681      	mov	r9, r0
 800b822:	f04f 0300 	mov.w	r3, #0
 800b826:	f04f 020a 	mov.w	r2, #10
 800b82a:	4639      	mov	r1, r7
 800b82c:	4658      	mov	r0, fp
 800b82e:	d107      	bne.n	800b840 <_dtoa_r+0xac8>
 800b830:	f000 f9ca 	bl	800bbc8 <__multadd>
 800b834:	4607      	mov	r7, r0
 800b836:	4605      	mov	r5, r0
 800b838:	9b07      	ldr	r3, [sp, #28]
 800b83a:	3301      	adds	r3, #1
 800b83c:	9307      	str	r3, [sp, #28]
 800b83e:	e774      	b.n	800b72a <_dtoa_r+0x9b2>
 800b840:	f000 f9c2 	bl	800bbc8 <__multadd>
 800b844:	4629      	mov	r1, r5
 800b846:	4607      	mov	r7, r0
 800b848:	2300      	movs	r3, #0
 800b84a:	220a      	movs	r2, #10
 800b84c:	4658      	mov	r0, fp
 800b84e:	f000 f9bb 	bl	800bbc8 <__multadd>
 800b852:	4605      	mov	r5, r0
 800b854:	e7f0      	b.n	800b838 <_dtoa_r+0xac0>
 800b856:	9b08      	ldr	r3, [sp, #32]
 800b858:	2700      	movs	r7, #0
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	bfcc      	ite	gt
 800b85e:	461e      	movgt	r6, r3
 800b860:	2601      	movle	r6, #1
 800b862:	4456      	add	r6, sl
 800b864:	4649      	mov	r1, r9
 800b866:	2201      	movs	r2, #1
 800b868:	4658      	mov	r0, fp
 800b86a:	f000 fb57 	bl	800bf1c <__lshift>
 800b86e:	4621      	mov	r1, r4
 800b870:	4681      	mov	r9, r0
 800b872:	f000 fbbf 	bl	800bff4 <__mcmp>
 800b876:	2800      	cmp	r0, #0
 800b878:	dcb0      	bgt.n	800b7dc <_dtoa_r+0xa64>
 800b87a:	d102      	bne.n	800b882 <_dtoa_r+0xb0a>
 800b87c:	f018 0f01 	tst.w	r8, #1
 800b880:	d1ac      	bne.n	800b7dc <_dtoa_r+0xa64>
 800b882:	4633      	mov	r3, r6
 800b884:	461e      	mov	r6, r3
 800b886:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b88a:	2a30      	cmp	r2, #48	@ 0x30
 800b88c:	d0fa      	beq.n	800b884 <_dtoa_r+0xb0c>
 800b88e:	e5be      	b.n	800b40e <_dtoa_r+0x696>
 800b890:	459a      	cmp	sl, r3
 800b892:	d1a4      	bne.n	800b7de <_dtoa_r+0xa66>
 800b894:	9b04      	ldr	r3, [sp, #16]
 800b896:	3301      	adds	r3, #1
 800b898:	9304      	str	r3, [sp, #16]
 800b89a:	2331      	movs	r3, #49	@ 0x31
 800b89c:	f88a 3000 	strb.w	r3, [sl]
 800b8a0:	e5b5      	b.n	800b40e <_dtoa_r+0x696>
 800b8a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b8a4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b904 <_dtoa_r+0xb8c>
 800b8a8:	b11b      	cbz	r3, 800b8b2 <_dtoa_r+0xb3a>
 800b8aa:	f10a 0308 	add.w	r3, sl, #8
 800b8ae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b8b0:	6013      	str	r3, [r2, #0]
 800b8b2:	4650      	mov	r0, sl
 800b8b4:	b017      	add	sp, #92	@ 0x5c
 800b8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	f77f ae3d 	ble.w	800b53c <_dtoa_r+0x7c4>
 800b8c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b8c4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8c6:	2001      	movs	r0, #1
 800b8c8:	e65b      	b.n	800b582 <_dtoa_r+0x80a>
 800b8ca:	9b08      	ldr	r3, [sp, #32]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	f77f aed6 	ble.w	800b67e <_dtoa_r+0x906>
 800b8d2:	4656      	mov	r6, sl
 800b8d4:	4621      	mov	r1, r4
 800b8d6:	4648      	mov	r0, r9
 800b8d8:	f7ff f9c3 	bl	800ac62 <quorem>
 800b8dc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b8e0:	9b08      	ldr	r3, [sp, #32]
 800b8e2:	f806 8b01 	strb.w	r8, [r6], #1
 800b8e6:	eba6 020a 	sub.w	r2, r6, sl
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	ddb3      	ble.n	800b856 <_dtoa_r+0xade>
 800b8ee:	4649      	mov	r1, r9
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	220a      	movs	r2, #10
 800b8f4:	4658      	mov	r0, fp
 800b8f6:	f000 f967 	bl	800bbc8 <__multadd>
 800b8fa:	4681      	mov	r9, r0
 800b8fc:	e7ea      	b.n	800b8d4 <_dtoa_r+0xb5c>
 800b8fe:	bf00      	nop
 800b900:	0800ceda 	.word	0x0800ceda
 800b904:	0800ce5e 	.word	0x0800ce5e

0800b908 <_free_r>:
 800b908:	b538      	push	{r3, r4, r5, lr}
 800b90a:	4605      	mov	r5, r0
 800b90c:	2900      	cmp	r1, #0
 800b90e:	d040      	beq.n	800b992 <_free_r+0x8a>
 800b910:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b914:	1f0c      	subs	r4, r1, #4
 800b916:	2b00      	cmp	r3, #0
 800b918:	bfb8      	it	lt
 800b91a:	18e4      	addlt	r4, r4, r3
 800b91c:	f000 f8e6 	bl	800baec <__malloc_lock>
 800b920:	4a1c      	ldr	r2, [pc, #112]	@ (800b994 <_free_r+0x8c>)
 800b922:	6813      	ldr	r3, [r2, #0]
 800b924:	b933      	cbnz	r3, 800b934 <_free_r+0x2c>
 800b926:	6063      	str	r3, [r4, #4]
 800b928:	6014      	str	r4, [r2, #0]
 800b92a:	4628      	mov	r0, r5
 800b92c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b930:	f000 b8e2 	b.w	800baf8 <__malloc_unlock>
 800b934:	42a3      	cmp	r3, r4
 800b936:	d908      	bls.n	800b94a <_free_r+0x42>
 800b938:	6820      	ldr	r0, [r4, #0]
 800b93a:	1821      	adds	r1, r4, r0
 800b93c:	428b      	cmp	r3, r1
 800b93e:	bf01      	itttt	eq
 800b940:	6819      	ldreq	r1, [r3, #0]
 800b942:	685b      	ldreq	r3, [r3, #4]
 800b944:	1809      	addeq	r1, r1, r0
 800b946:	6021      	streq	r1, [r4, #0]
 800b948:	e7ed      	b.n	800b926 <_free_r+0x1e>
 800b94a:	461a      	mov	r2, r3
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	b10b      	cbz	r3, 800b954 <_free_r+0x4c>
 800b950:	42a3      	cmp	r3, r4
 800b952:	d9fa      	bls.n	800b94a <_free_r+0x42>
 800b954:	6811      	ldr	r1, [r2, #0]
 800b956:	1850      	adds	r0, r2, r1
 800b958:	42a0      	cmp	r0, r4
 800b95a:	d10b      	bne.n	800b974 <_free_r+0x6c>
 800b95c:	6820      	ldr	r0, [r4, #0]
 800b95e:	4401      	add	r1, r0
 800b960:	1850      	adds	r0, r2, r1
 800b962:	4283      	cmp	r3, r0
 800b964:	6011      	str	r1, [r2, #0]
 800b966:	d1e0      	bne.n	800b92a <_free_r+0x22>
 800b968:	6818      	ldr	r0, [r3, #0]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	4408      	add	r0, r1
 800b96e:	6010      	str	r0, [r2, #0]
 800b970:	6053      	str	r3, [r2, #4]
 800b972:	e7da      	b.n	800b92a <_free_r+0x22>
 800b974:	d902      	bls.n	800b97c <_free_r+0x74>
 800b976:	230c      	movs	r3, #12
 800b978:	602b      	str	r3, [r5, #0]
 800b97a:	e7d6      	b.n	800b92a <_free_r+0x22>
 800b97c:	6820      	ldr	r0, [r4, #0]
 800b97e:	1821      	adds	r1, r4, r0
 800b980:	428b      	cmp	r3, r1
 800b982:	bf01      	itttt	eq
 800b984:	6819      	ldreq	r1, [r3, #0]
 800b986:	685b      	ldreq	r3, [r3, #4]
 800b988:	1809      	addeq	r1, r1, r0
 800b98a:	6021      	streq	r1, [r4, #0]
 800b98c:	6063      	str	r3, [r4, #4]
 800b98e:	6054      	str	r4, [r2, #4]
 800b990:	e7cb      	b.n	800b92a <_free_r+0x22>
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	20001808 	.word	0x20001808

0800b998 <malloc>:
 800b998:	4b02      	ldr	r3, [pc, #8]	@ (800b9a4 <malloc+0xc>)
 800b99a:	4601      	mov	r1, r0
 800b99c:	6818      	ldr	r0, [r3, #0]
 800b99e:	f000 b825 	b.w	800b9ec <_malloc_r>
 800b9a2:	bf00      	nop
 800b9a4:	2000019c 	.word	0x2000019c

0800b9a8 <sbrk_aligned>:
 800b9a8:	b570      	push	{r4, r5, r6, lr}
 800b9aa:	4e0f      	ldr	r6, [pc, #60]	@ (800b9e8 <sbrk_aligned+0x40>)
 800b9ac:	460c      	mov	r4, r1
 800b9ae:	6831      	ldr	r1, [r6, #0]
 800b9b0:	4605      	mov	r5, r0
 800b9b2:	b911      	cbnz	r1, 800b9ba <sbrk_aligned+0x12>
 800b9b4:	f000 fe40 	bl	800c638 <_sbrk_r>
 800b9b8:	6030      	str	r0, [r6, #0]
 800b9ba:	4621      	mov	r1, r4
 800b9bc:	4628      	mov	r0, r5
 800b9be:	f000 fe3b 	bl	800c638 <_sbrk_r>
 800b9c2:	1c43      	adds	r3, r0, #1
 800b9c4:	d103      	bne.n	800b9ce <sbrk_aligned+0x26>
 800b9c6:	f04f 34ff 	mov.w	r4, #4294967295
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	bd70      	pop	{r4, r5, r6, pc}
 800b9ce:	1cc4      	adds	r4, r0, #3
 800b9d0:	f024 0403 	bic.w	r4, r4, #3
 800b9d4:	42a0      	cmp	r0, r4
 800b9d6:	d0f8      	beq.n	800b9ca <sbrk_aligned+0x22>
 800b9d8:	1a21      	subs	r1, r4, r0
 800b9da:	4628      	mov	r0, r5
 800b9dc:	f000 fe2c 	bl	800c638 <_sbrk_r>
 800b9e0:	3001      	adds	r0, #1
 800b9e2:	d1f2      	bne.n	800b9ca <sbrk_aligned+0x22>
 800b9e4:	e7ef      	b.n	800b9c6 <sbrk_aligned+0x1e>
 800b9e6:	bf00      	nop
 800b9e8:	20001804 	.word	0x20001804

0800b9ec <_malloc_r>:
 800b9ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9f0:	1ccd      	adds	r5, r1, #3
 800b9f2:	f025 0503 	bic.w	r5, r5, #3
 800b9f6:	3508      	adds	r5, #8
 800b9f8:	2d0c      	cmp	r5, #12
 800b9fa:	bf38      	it	cc
 800b9fc:	250c      	movcc	r5, #12
 800b9fe:	2d00      	cmp	r5, #0
 800ba00:	4606      	mov	r6, r0
 800ba02:	db01      	blt.n	800ba08 <_malloc_r+0x1c>
 800ba04:	42a9      	cmp	r1, r5
 800ba06:	d904      	bls.n	800ba12 <_malloc_r+0x26>
 800ba08:	230c      	movs	r3, #12
 800ba0a:	6033      	str	r3, [r6, #0]
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bae8 <_malloc_r+0xfc>
 800ba16:	f000 f869 	bl	800baec <__malloc_lock>
 800ba1a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba1e:	461c      	mov	r4, r3
 800ba20:	bb44      	cbnz	r4, 800ba74 <_malloc_r+0x88>
 800ba22:	4629      	mov	r1, r5
 800ba24:	4630      	mov	r0, r6
 800ba26:	f7ff ffbf 	bl	800b9a8 <sbrk_aligned>
 800ba2a:	1c43      	adds	r3, r0, #1
 800ba2c:	4604      	mov	r4, r0
 800ba2e:	d158      	bne.n	800bae2 <_malloc_r+0xf6>
 800ba30:	f8d8 4000 	ldr.w	r4, [r8]
 800ba34:	4627      	mov	r7, r4
 800ba36:	2f00      	cmp	r7, #0
 800ba38:	d143      	bne.n	800bac2 <_malloc_r+0xd6>
 800ba3a:	2c00      	cmp	r4, #0
 800ba3c:	d04b      	beq.n	800bad6 <_malloc_r+0xea>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	4639      	mov	r1, r7
 800ba42:	4630      	mov	r0, r6
 800ba44:	eb04 0903 	add.w	r9, r4, r3
 800ba48:	f000 fdf6 	bl	800c638 <_sbrk_r>
 800ba4c:	4581      	cmp	r9, r0
 800ba4e:	d142      	bne.n	800bad6 <_malloc_r+0xea>
 800ba50:	6821      	ldr	r1, [r4, #0]
 800ba52:	4630      	mov	r0, r6
 800ba54:	1a6d      	subs	r5, r5, r1
 800ba56:	4629      	mov	r1, r5
 800ba58:	f7ff ffa6 	bl	800b9a8 <sbrk_aligned>
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	d03a      	beq.n	800bad6 <_malloc_r+0xea>
 800ba60:	6823      	ldr	r3, [r4, #0]
 800ba62:	442b      	add	r3, r5
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	f8d8 3000 	ldr.w	r3, [r8]
 800ba6a:	685a      	ldr	r2, [r3, #4]
 800ba6c:	bb62      	cbnz	r2, 800bac8 <_malloc_r+0xdc>
 800ba6e:	f8c8 7000 	str.w	r7, [r8]
 800ba72:	e00f      	b.n	800ba94 <_malloc_r+0xa8>
 800ba74:	6822      	ldr	r2, [r4, #0]
 800ba76:	1b52      	subs	r2, r2, r5
 800ba78:	d420      	bmi.n	800babc <_malloc_r+0xd0>
 800ba7a:	2a0b      	cmp	r2, #11
 800ba7c:	d917      	bls.n	800baae <_malloc_r+0xc2>
 800ba7e:	1961      	adds	r1, r4, r5
 800ba80:	42a3      	cmp	r3, r4
 800ba82:	6025      	str	r5, [r4, #0]
 800ba84:	bf18      	it	ne
 800ba86:	6059      	strne	r1, [r3, #4]
 800ba88:	6863      	ldr	r3, [r4, #4]
 800ba8a:	bf08      	it	eq
 800ba8c:	f8c8 1000 	streq.w	r1, [r8]
 800ba90:	5162      	str	r2, [r4, r5]
 800ba92:	604b      	str	r3, [r1, #4]
 800ba94:	4630      	mov	r0, r6
 800ba96:	f000 f82f 	bl	800baf8 <__malloc_unlock>
 800ba9a:	f104 000b 	add.w	r0, r4, #11
 800ba9e:	1d23      	adds	r3, r4, #4
 800baa0:	f020 0007 	bic.w	r0, r0, #7
 800baa4:	1ac2      	subs	r2, r0, r3
 800baa6:	bf1c      	itt	ne
 800baa8:	1a1b      	subne	r3, r3, r0
 800baaa:	50a3      	strne	r3, [r4, r2]
 800baac:	e7af      	b.n	800ba0e <_malloc_r+0x22>
 800baae:	6862      	ldr	r2, [r4, #4]
 800bab0:	42a3      	cmp	r3, r4
 800bab2:	bf0c      	ite	eq
 800bab4:	f8c8 2000 	streq.w	r2, [r8]
 800bab8:	605a      	strne	r2, [r3, #4]
 800baba:	e7eb      	b.n	800ba94 <_malloc_r+0xa8>
 800babc:	4623      	mov	r3, r4
 800babe:	6864      	ldr	r4, [r4, #4]
 800bac0:	e7ae      	b.n	800ba20 <_malloc_r+0x34>
 800bac2:	463c      	mov	r4, r7
 800bac4:	687f      	ldr	r7, [r7, #4]
 800bac6:	e7b6      	b.n	800ba36 <_malloc_r+0x4a>
 800bac8:	461a      	mov	r2, r3
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	42a3      	cmp	r3, r4
 800bace:	d1fb      	bne.n	800bac8 <_malloc_r+0xdc>
 800bad0:	2300      	movs	r3, #0
 800bad2:	6053      	str	r3, [r2, #4]
 800bad4:	e7de      	b.n	800ba94 <_malloc_r+0xa8>
 800bad6:	230c      	movs	r3, #12
 800bad8:	4630      	mov	r0, r6
 800bada:	6033      	str	r3, [r6, #0]
 800badc:	f000 f80c 	bl	800baf8 <__malloc_unlock>
 800bae0:	e794      	b.n	800ba0c <_malloc_r+0x20>
 800bae2:	6005      	str	r5, [r0, #0]
 800bae4:	e7d6      	b.n	800ba94 <_malloc_r+0xa8>
 800bae6:	bf00      	nop
 800bae8:	20001808 	.word	0x20001808

0800baec <__malloc_lock>:
 800baec:	4801      	ldr	r0, [pc, #4]	@ (800baf4 <__malloc_lock+0x8>)
 800baee:	f7ff b8a8 	b.w	800ac42 <__retarget_lock_acquire_recursive>
 800baf2:	bf00      	nop
 800baf4:	20001800 	.word	0x20001800

0800baf8 <__malloc_unlock>:
 800baf8:	4801      	ldr	r0, [pc, #4]	@ (800bb00 <__malloc_unlock+0x8>)
 800bafa:	f7ff b8a3 	b.w	800ac44 <__retarget_lock_release_recursive>
 800bafe:	bf00      	nop
 800bb00:	20001800 	.word	0x20001800

0800bb04 <_Balloc>:
 800bb04:	b570      	push	{r4, r5, r6, lr}
 800bb06:	69c6      	ldr	r6, [r0, #28]
 800bb08:	4604      	mov	r4, r0
 800bb0a:	460d      	mov	r5, r1
 800bb0c:	b976      	cbnz	r6, 800bb2c <_Balloc+0x28>
 800bb0e:	2010      	movs	r0, #16
 800bb10:	f7ff ff42 	bl	800b998 <malloc>
 800bb14:	4602      	mov	r2, r0
 800bb16:	61e0      	str	r0, [r4, #28]
 800bb18:	b920      	cbnz	r0, 800bb24 <_Balloc+0x20>
 800bb1a:	216b      	movs	r1, #107	@ 0x6b
 800bb1c:	4b17      	ldr	r3, [pc, #92]	@ (800bb7c <_Balloc+0x78>)
 800bb1e:	4818      	ldr	r0, [pc, #96]	@ (800bb80 <_Balloc+0x7c>)
 800bb20:	f000 fda8 	bl	800c674 <__assert_func>
 800bb24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb28:	6006      	str	r6, [r0, #0]
 800bb2a:	60c6      	str	r6, [r0, #12]
 800bb2c:	69e6      	ldr	r6, [r4, #28]
 800bb2e:	68f3      	ldr	r3, [r6, #12]
 800bb30:	b183      	cbz	r3, 800bb54 <_Balloc+0x50>
 800bb32:	69e3      	ldr	r3, [r4, #28]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb3a:	b9b8      	cbnz	r0, 800bb6c <_Balloc+0x68>
 800bb3c:	2101      	movs	r1, #1
 800bb3e:	fa01 f605 	lsl.w	r6, r1, r5
 800bb42:	1d72      	adds	r2, r6, #5
 800bb44:	4620      	mov	r0, r4
 800bb46:	0092      	lsls	r2, r2, #2
 800bb48:	f000 fdb2 	bl	800c6b0 <_calloc_r>
 800bb4c:	b160      	cbz	r0, 800bb68 <_Balloc+0x64>
 800bb4e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb52:	e00e      	b.n	800bb72 <_Balloc+0x6e>
 800bb54:	2221      	movs	r2, #33	@ 0x21
 800bb56:	2104      	movs	r1, #4
 800bb58:	4620      	mov	r0, r4
 800bb5a:	f000 fda9 	bl	800c6b0 <_calloc_r>
 800bb5e:	69e3      	ldr	r3, [r4, #28]
 800bb60:	60f0      	str	r0, [r6, #12]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d1e4      	bne.n	800bb32 <_Balloc+0x2e>
 800bb68:	2000      	movs	r0, #0
 800bb6a:	bd70      	pop	{r4, r5, r6, pc}
 800bb6c:	6802      	ldr	r2, [r0, #0]
 800bb6e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb72:	2300      	movs	r3, #0
 800bb74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb78:	e7f7      	b.n	800bb6a <_Balloc+0x66>
 800bb7a:	bf00      	nop
 800bb7c:	0800ce6b 	.word	0x0800ce6b
 800bb80:	0800ceeb 	.word	0x0800ceeb

0800bb84 <_Bfree>:
 800bb84:	b570      	push	{r4, r5, r6, lr}
 800bb86:	69c6      	ldr	r6, [r0, #28]
 800bb88:	4605      	mov	r5, r0
 800bb8a:	460c      	mov	r4, r1
 800bb8c:	b976      	cbnz	r6, 800bbac <_Bfree+0x28>
 800bb8e:	2010      	movs	r0, #16
 800bb90:	f7ff ff02 	bl	800b998 <malloc>
 800bb94:	4602      	mov	r2, r0
 800bb96:	61e8      	str	r0, [r5, #28]
 800bb98:	b920      	cbnz	r0, 800bba4 <_Bfree+0x20>
 800bb9a:	218f      	movs	r1, #143	@ 0x8f
 800bb9c:	4b08      	ldr	r3, [pc, #32]	@ (800bbc0 <_Bfree+0x3c>)
 800bb9e:	4809      	ldr	r0, [pc, #36]	@ (800bbc4 <_Bfree+0x40>)
 800bba0:	f000 fd68 	bl	800c674 <__assert_func>
 800bba4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bba8:	6006      	str	r6, [r0, #0]
 800bbaa:	60c6      	str	r6, [r0, #12]
 800bbac:	b13c      	cbz	r4, 800bbbe <_Bfree+0x3a>
 800bbae:	69eb      	ldr	r3, [r5, #28]
 800bbb0:	6862      	ldr	r2, [r4, #4]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbb8:	6021      	str	r1, [r4, #0]
 800bbba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbbe:	bd70      	pop	{r4, r5, r6, pc}
 800bbc0:	0800ce6b 	.word	0x0800ce6b
 800bbc4:	0800ceeb 	.word	0x0800ceeb

0800bbc8 <__multadd>:
 800bbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbcc:	4607      	mov	r7, r0
 800bbce:	460c      	mov	r4, r1
 800bbd0:	461e      	mov	r6, r3
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	690d      	ldr	r5, [r1, #16]
 800bbd6:	f101 0c14 	add.w	ip, r1, #20
 800bbda:	f8dc 3000 	ldr.w	r3, [ip]
 800bbde:	3001      	adds	r0, #1
 800bbe0:	b299      	uxth	r1, r3
 800bbe2:	fb02 6101 	mla	r1, r2, r1, r6
 800bbe6:	0c1e      	lsrs	r6, r3, #16
 800bbe8:	0c0b      	lsrs	r3, r1, #16
 800bbea:	fb02 3306 	mla	r3, r2, r6, r3
 800bbee:	b289      	uxth	r1, r1
 800bbf0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bbf4:	4285      	cmp	r5, r0
 800bbf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bbfa:	f84c 1b04 	str.w	r1, [ip], #4
 800bbfe:	dcec      	bgt.n	800bbda <__multadd+0x12>
 800bc00:	b30e      	cbz	r6, 800bc46 <__multadd+0x7e>
 800bc02:	68a3      	ldr	r3, [r4, #8]
 800bc04:	42ab      	cmp	r3, r5
 800bc06:	dc19      	bgt.n	800bc3c <__multadd+0x74>
 800bc08:	6861      	ldr	r1, [r4, #4]
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	3101      	adds	r1, #1
 800bc0e:	f7ff ff79 	bl	800bb04 <_Balloc>
 800bc12:	4680      	mov	r8, r0
 800bc14:	b928      	cbnz	r0, 800bc22 <__multadd+0x5a>
 800bc16:	4602      	mov	r2, r0
 800bc18:	21ba      	movs	r1, #186	@ 0xba
 800bc1a:	4b0c      	ldr	r3, [pc, #48]	@ (800bc4c <__multadd+0x84>)
 800bc1c:	480c      	ldr	r0, [pc, #48]	@ (800bc50 <__multadd+0x88>)
 800bc1e:	f000 fd29 	bl	800c674 <__assert_func>
 800bc22:	6922      	ldr	r2, [r4, #16]
 800bc24:	f104 010c 	add.w	r1, r4, #12
 800bc28:	3202      	adds	r2, #2
 800bc2a:	0092      	lsls	r2, r2, #2
 800bc2c:	300c      	adds	r0, #12
 800bc2e:	f000 fd13 	bl	800c658 <memcpy>
 800bc32:	4621      	mov	r1, r4
 800bc34:	4638      	mov	r0, r7
 800bc36:	f7ff ffa5 	bl	800bb84 <_Bfree>
 800bc3a:	4644      	mov	r4, r8
 800bc3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc40:	3501      	adds	r5, #1
 800bc42:	615e      	str	r6, [r3, #20]
 800bc44:	6125      	str	r5, [r4, #16]
 800bc46:	4620      	mov	r0, r4
 800bc48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc4c:	0800ceda 	.word	0x0800ceda
 800bc50:	0800ceeb 	.word	0x0800ceeb

0800bc54 <__hi0bits>:
 800bc54:	4603      	mov	r3, r0
 800bc56:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bc5a:	bf3a      	itte	cc
 800bc5c:	0403      	lslcc	r3, r0, #16
 800bc5e:	2010      	movcc	r0, #16
 800bc60:	2000      	movcs	r0, #0
 800bc62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc66:	bf3c      	itt	cc
 800bc68:	021b      	lslcc	r3, r3, #8
 800bc6a:	3008      	addcc	r0, #8
 800bc6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc70:	bf3c      	itt	cc
 800bc72:	011b      	lslcc	r3, r3, #4
 800bc74:	3004      	addcc	r0, #4
 800bc76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc7a:	bf3c      	itt	cc
 800bc7c:	009b      	lslcc	r3, r3, #2
 800bc7e:	3002      	addcc	r0, #2
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	db05      	blt.n	800bc90 <__hi0bits+0x3c>
 800bc84:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bc88:	f100 0001 	add.w	r0, r0, #1
 800bc8c:	bf08      	it	eq
 800bc8e:	2020      	moveq	r0, #32
 800bc90:	4770      	bx	lr

0800bc92 <__lo0bits>:
 800bc92:	6803      	ldr	r3, [r0, #0]
 800bc94:	4602      	mov	r2, r0
 800bc96:	f013 0007 	ands.w	r0, r3, #7
 800bc9a:	d00b      	beq.n	800bcb4 <__lo0bits+0x22>
 800bc9c:	07d9      	lsls	r1, r3, #31
 800bc9e:	d421      	bmi.n	800bce4 <__lo0bits+0x52>
 800bca0:	0798      	lsls	r0, r3, #30
 800bca2:	bf49      	itett	mi
 800bca4:	085b      	lsrmi	r3, r3, #1
 800bca6:	089b      	lsrpl	r3, r3, #2
 800bca8:	2001      	movmi	r0, #1
 800bcaa:	6013      	strmi	r3, [r2, #0]
 800bcac:	bf5c      	itt	pl
 800bcae:	2002      	movpl	r0, #2
 800bcb0:	6013      	strpl	r3, [r2, #0]
 800bcb2:	4770      	bx	lr
 800bcb4:	b299      	uxth	r1, r3
 800bcb6:	b909      	cbnz	r1, 800bcbc <__lo0bits+0x2a>
 800bcb8:	2010      	movs	r0, #16
 800bcba:	0c1b      	lsrs	r3, r3, #16
 800bcbc:	b2d9      	uxtb	r1, r3
 800bcbe:	b909      	cbnz	r1, 800bcc4 <__lo0bits+0x32>
 800bcc0:	3008      	adds	r0, #8
 800bcc2:	0a1b      	lsrs	r3, r3, #8
 800bcc4:	0719      	lsls	r1, r3, #28
 800bcc6:	bf04      	itt	eq
 800bcc8:	091b      	lsreq	r3, r3, #4
 800bcca:	3004      	addeq	r0, #4
 800bccc:	0799      	lsls	r1, r3, #30
 800bcce:	bf04      	itt	eq
 800bcd0:	089b      	lsreq	r3, r3, #2
 800bcd2:	3002      	addeq	r0, #2
 800bcd4:	07d9      	lsls	r1, r3, #31
 800bcd6:	d403      	bmi.n	800bce0 <__lo0bits+0x4e>
 800bcd8:	085b      	lsrs	r3, r3, #1
 800bcda:	f100 0001 	add.w	r0, r0, #1
 800bcde:	d003      	beq.n	800bce8 <__lo0bits+0x56>
 800bce0:	6013      	str	r3, [r2, #0]
 800bce2:	4770      	bx	lr
 800bce4:	2000      	movs	r0, #0
 800bce6:	4770      	bx	lr
 800bce8:	2020      	movs	r0, #32
 800bcea:	4770      	bx	lr

0800bcec <__i2b>:
 800bcec:	b510      	push	{r4, lr}
 800bcee:	460c      	mov	r4, r1
 800bcf0:	2101      	movs	r1, #1
 800bcf2:	f7ff ff07 	bl	800bb04 <_Balloc>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	b928      	cbnz	r0, 800bd06 <__i2b+0x1a>
 800bcfa:	f240 1145 	movw	r1, #325	@ 0x145
 800bcfe:	4b04      	ldr	r3, [pc, #16]	@ (800bd10 <__i2b+0x24>)
 800bd00:	4804      	ldr	r0, [pc, #16]	@ (800bd14 <__i2b+0x28>)
 800bd02:	f000 fcb7 	bl	800c674 <__assert_func>
 800bd06:	2301      	movs	r3, #1
 800bd08:	6144      	str	r4, [r0, #20]
 800bd0a:	6103      	str	r3, [r0, #16]
 800bd0c:	bd10      	pop	{r4, pc}
 800bd0e:	bf00      	nop
 800bd10:	0800ceda 	.word	0x0800ceda
 800bd14:	0800ceeb 	.word	0x0800ceeb

0800bd18 <__multiply>:
 800bd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1c:	4614      	mov	r4, r2
 800bd1e:	690a      	ldr	r2, [r1, #16]
 800bd20:	6923      	ldr	r3, [r4, #16]
 800bd22:	460f      	mov	r7, r1
 800bd24:	429a      	cmp	r2, r3
 800bd26:	bfa2      	ittt	ge
 800bd28:	4623      	movge	r3, r4
 800bd2a:	460c      	movge	r4, r1
 800bd2c:	461f      	movge	r7, r3
 800bd2e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800bd32:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800bd36:	68a3      	ldr	r3, [r4, #8]
 800bd38:	6861      	ldr	r1, [r4, #4]
 800bd3a:	eb0a 0609 	add.w	r6, sl, r9
 800bd3e:	42b3      	cmp	r3, r6
 800bd40:	b085      	sub	sp, #20
 800bd42:	bfb8      	it	lt
 800bd44:	3101      	addlt	r1, #1
 800bd46:	f7ff fedd 	bl	800bb04 <_Balloc>
 800bd4a:	b930      	cbnz	r0, 800bd5a <__multiply+0x42>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bd52:	4b43      	ldr	r3, [pc, #268]	@ (800be60 <__multiply+0x148>)
 800bd54:	4843      	ldr	r0, [pc, #268]	@ (800be64 <__multiply+0x14c>)
 800bd56:	f000 fc8d 	bl	800c674 <__assert_func>
 800bd5a:	f100 0514 	add.w	r5, r0, #20
 800bd5e:	462b      	mov	r3, r5
 800bd60:	2200      	movs	r2, #0
 800bd62:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd66:	4543      	cmp	r3, r8
 800bd68:	d321      	bcc.n	800bdae <__multiply+0x96>
 800bd6a:	f107 0114 	add.w	r1, r7, #20
 800bd6e:	f104 0214 	add.w	r2, r4, #20
 800bd72:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800bd76:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800bd7a:	9302      	str	r3, [sp, #8]
 800bd7c:	1b13      	subs	r3, r2, r4
 800bd7e:	3b15      	subs	r3, #21
 800bd80:	f023 0303 	bic.w	r3, r3, #3
 800bd84:	3304      	adds	r3, #4
 800bd86:	f104 0715 	add.w	r7, r4, #21
 800bd8a:	42ba      	cmp	r2, r7
 800bd8c:	bf38      	it	cc
 800bd8e:	2304      	movcc	r3, #4
 800bd90:	9301      	str	r3, [sp, #4]
 800bd92:	9b02      	ldr	r3, [sp, #8]
 800bd94:	9103      	str	r1, [sp, #12]
 800bd96:	428b      	cmp	r3, r1
 800bd98:	d80c      	bhi.n	800bdb4 <__multiply+0x9c>
 800bd9a:	2e00      	cmp	r6, #0
 800bd9c:	dd03      	ble.n	800bda6 <__multiply+0x8e>
 800bd9e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d05a      	beq.n	800be5c <__multiply+0x144>
 800bda6:	6106      	str	r6, [r0, #16]
 800bda8:	b005      	add	sp, #20
 800bdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdae:	f843 2b04 	str.w	r2, [r3], #4
 800bdb2:	e7d8      	b.n	800bd66 <__multiply+0x4e>
 800bdb4:	f8b1 a000 	ldrh.w	sl, [r1]
 800bdb8:	f1ba 0f00 	cmp.w	sl, #0
 800bdbc:	d023      	beq.n	800be06 <__multiply+0xee>
 800bdbe:	46a9      	mov	r9, r5
 800bdc0:	f04f 0c00 	mov.w	ip, #0
 800bdc4:	f104 0e14 	add.w	lr, r4, #20
 800bdc8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bdcc:	f8d9 3000 	ldr.w	r3, [r9]
 800bdd0:	fa1f fb87 	uxth.w	fp, r7
 800bdd4:	b29b      	uxth	r3, r3
 800bdd6:	fb0a 330b 	mla	r3, sl, fp, r3
 800bdda:	4463      	add	r3, ip
 800bddc:	f8d9 c000 	ldr.w	ip, [r9]
 800bde0:	0c3f      	lsrs	r7, r7, #16
 800bde2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bde6:	fb0a c707 	mla	r7, sl, r7, ip
 800bdea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800bdee:	b29b      	uxth	r3, r3
 800bdf0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bdf4:	4572      	cmp	r2, lr
 800bdf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bdfa:	f849 3b04 	str.w	r3, [r9], #4
 800bdfe:	d8e3      	bhi.n	800bdc8 <__multiply+0xb0>
 800be00:	9b01      	ldr	r3, [sp, #4]
 800be02:	f845 c003 	str.w	ip, [r5, r3]
 800be06:	9b03      	ldr	r3, [sp, #12]
 800be08:	3104      	adds	r1, #4
 800be0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800be0e:	f1b9 0f00 	cmp.w	r9, #0
 800be12:	d021      	beq.n	800be58 <__multiply+0x140>
 800be14:	46ae      	mov	lr, r5
 800be16:	f04f 0a00 	mov.w	sl, #0
 800be1a:	682b      	ldr	r3, [r5, #0]
 800be1c:	f104 0c14 	add.w	ip, r4, #20
 800be20:	f8bc b000 	ldrh.w	fp, [ip]
 800be24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800be28:	b29b      	uxth	r3, r3
 800be2a:	fb09 770b 	mla	r7, r9, fp, r7
 800be2e:	4457      	add	r7, sl
 800be30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800be34:	f84e 3b04 	str.w	r3, [lr], #4
 800be38:	f85c 3b04 	ldr.w	r3, [ip], #4
 800be3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be40:	f8be 3000 	ldrh.w	r3, [lr]
 800be44:	4562      	cmp	r2, ip
 800be46:	fb09 330a 	mla	r3, r9, sl, r3
 800be4a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800be4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800be52:	d8e5      	bhi.n	800be20 <__multiply+0x108>
 800be54:	9f01      	ldr	r7, [sp, #4]
 800be56:	51eb      	str	r3, [r5, r7]
 800be58:	3504      	adds	r5, #4
 800be5a:	e79a      	b.n	800bd92 <__multiply+0x7a>
 800be5c:	3e01      	subs	r6, #1
 800be5e:	e79c      	b.n	800bd9a <__multiply+0x82>
 800be60:	0800ceda 	.word	0x0800ceda
 800be64:	0800ceeb 	.word	0x0800ceeb

0800be68 <__pow5mult>:
 800be68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be6c:	4615      	mov	r5, r2
 800be6e:	f012 0203 	ands.w	r2, r2, #3
 800be72:	4607      	mov	r7, r0
 800be74:	460e      	mov	r6, r1
 800be76:	d007      	beq.n	800be88 <__pow5mult+0x20>
 800be78:	4c25      	ldr	r4, [pc, #148]	@ (800bf10 <__pow5mult+0xa8>)
 800be7a:	3a01      	subs	r2, #1
 800be7c:	2300      	movs	r3, #0
 800be7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be82:	f7ff fea1 	bl	800bbc8 <__multadd>
 800be86:	4606      	mov	r6, r0
 800be88:	10ad      	asrs	r5, r5, #2
 800be8a:	d03d      	beq.n	800bf08 <__pow5mult+0xa0>
 800be8c:	69fc      	ldr	r4, [r7, #28]
 800be8e:	b97c      	cbnz	r4, 800beb0 <__pow5mult+0x48>
 800be90:	2010      	movs	r0, #16
 800be92:	f7ff fd81 	bl	800b998 <malloc>
 800be96:	4602      	mov	r2, r0
 800be98:	61f8      	str	r0, [r7, #28]
 800be9a:	b928      	cbnz	r0, 800bea8 <__pow5mult+0x40>
 800be9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bea0:	4b1c      	ldr	r3, [pc, #112]	@ (800bf14 <__pow5mult+0xac>)
 800bea2:	481d      	ldr	r0, [pc, #116]	@ (800bf18 <__pow5mult+0xb0>)
 800bea4:	f000 fbe6 	bl	800c674 <__assert_func>
 800bea8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800beac:	6004      	str	r4, [r0, #0]
 800beae:	60c4      	str	r4, [r0, #12]
 800beb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800beb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800beb8:	b94c      	cbnz	r4, 800bece <__pow5mult+0x66>
 800beba:	f240 2171 	movw	r1, #625	@ 0x271
 800bebe:	4638      	mov	r0, r7
 800bec0:	f7ff ff14 	bl	800bcec <__i2b>
 800bec4:	2300      	movs	r3, #0
 800bec6:	4604      	mov	r4, r0
 800bec8:	f8c8 0008 	str.w	r0, [r8, #8]
 800becc:	6003      	str	r3, [r0, #0]
 800bece:	f04f 0900 	mov.w	r9, #0
 800bed2:	07eb      	lsls	r3, r5, #31
 800bed4:	d50a      	bpl.n	800beec <__pow5mult+0x84>
 800bed6:	4631      	mov	r1, r6
 800bed8:	4622      	mov	r2, r4
 800beda:	4638      	mov	r0, r7
 800bedc:	f7ff ff1c 	bl	800bd18 <__multiply>
 800bee0:	4680      	mov	r8, r0
 800bee2:	4631      	mov	r1, r6
 800bee4:	4638      	mov	r0, r7
 800bee6:	f7ff fe4d 	bl	800bb84 <_Bfree>
 800beea:	4646      	mov	r6, r8
 800beec:	106d      	asrs	r5, r5, #1
 800beee:	d00b      	beq.n	800bf08 <__pow5mult+0xa0>
 800bef0:	6820      	ldr	r0, [r4, #0]
 800bef2:	b938      	cbnz	r0, 800bf04 <__pow5mult+0x9c>
 800bef4:	4622      	mov	r2, r4
 800bef6:	4621      	mov	r1, r4
 800bef8:	4638      	mov	r0, r7
 800befa:	f7ff ff0d 	bl	800bd18 <__multiply>
 800befe:	6020      	str	r0, [r4, #0]
 800bf00:	f8c0 9000 	str.w	r9, [r0]
 800bf04:	4604      	mov	r4, r0
 800bf06:	e7e4      	b.n	800bed2 <__pow5mult+0x6a>
 800bf08:	4630      	mov	r0, r6
 800bf0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf0e:	bf00      	nop
 800bf10:	0800cf44 	.word	0x0800cf44
 800bf14:	0800ce6b 	.word	0x0800ce6b
 800bf18:	0800ceeb 	.word	0x0800ceeb

0800bf1c <__lshift>:
 800bf1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf20:	460c      	mov	r4, r1
 800bf22:	4607      	mov	r7, r0
 800bf24:	4691      	mov	r9, r2
 800bf26:	6923      	ldr	r3, [r4, #16]
 800bf28:	6849      	ldr	r1, [r1, #4]
 800bf2a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf2e:	68a3      	ldr	r3, [r4, #8]
 800bf30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf34:	f108 0601 	add.w	r6, r8, #1
 800bf38:	42b3      	cmp	r3, r6
 800bf3a:	db0b      	blt.n	800bf54 <__lshift+0x38>
 800bf3c:	4638      	mov	r0, r7
 800bf3e:	f7ff fde1 	bl	800bb04 <_Balloc>
 800bf42:	4605      	mov	r5, r0
 800bf44:	b948      	cbnz	r0, 800bf5a <__lshift+0x3e>
 800bf46:	4602      	mov	r2, r0
 800bf48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bf4c:	4b27      	ldr	r3, [pc, #156]	@ (800bfec <__lshift+0xd0>)
 800bf4e:	4828      	ldr	r0, [pc, #160]	@ (800bff0 <__lshift+0xd4>)
 800bf50:	f000 fb90 	bl	800c674 <__assert_func>
 800bf54:	3101      	adds	r1, #1
 800bf56:	005b      	lsls	r3, r3, #1
 800bf58:	e7ee      	b.n	800bf38 <__lshift+0x1c>
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	f100 0114 	add.w	r1, r0, #20
 800bf60:	f100 0210 	add.w	r2, r0, #16
 800bf64:	4618      	mov	r0, r3
 800bf66:	4553      	cmp	r3, sl
 800bf68:	db33      	blt.n	800bfd2 <__lshift+0xb6>
 800bf6a:	6920      	ldr	r0, [r4, #16]
 800bf6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf70:	f104 0314 	add.w	r3, r4, #20
 800bf74:	f019 091f 	ands.w	r9, r9, #31
 800bf78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf80:	d02b      	beq.n	800bfda <__lshift+0xbe>
 800bf82:	468a      	mov	sl, r1
 800bf84:	2200      	movs	r2, #0
 800bf86:	f1c9 0e20 	rsb	lr, r9, #32
 800bf8a:	6818      	ldr	r0, [r3, #0]
 800bf8c:	fa00 f009 	lsl.w	r0, r0, r9
 800bf90:	4310      	orrs	r0, r2
 800bf92:	f84a 0b04 	str.w	r0, [sl], #4
 800bf96:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf9a:	459c      	cmp	ip, r3
 800bf9c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bfa0:	d8f3      	bhi.n	800bf8a <__lshift+0x6e>
 800bfa2:	ebac 0304 	sub.w	r3, ip, r4
 800bfa6:	3b15      	subs	r3, #21
 800bfa8:	f023 0303 	bic.w	r3, r3, #3
 800bfac:	3304      	adds	r3, #4
 800bfae:	f104 0015 	add.w	r0, r4, #21
 800bfb2:	4584      	cmp	ip, r0
 800bfb4:	bf38      	it	cc
 800bfb6:	2304      	movcc	r3, #4
 800bfb8:	50ca      	str	r2, [r1, r3]
 800bfba:	b10a      	cbz	r2, 800bfc0 <__lshift+0xa4>
 800bfbc:	f108 0602 	add.w	r6, r8, #2
 800bfc0:	3e01      	subs	r6, #1
 800bfc2:	4638      	mov	r0, r7
 800bfc4:	4621      	mov	r1, r4
 800bfc6:	612e      	str	r6, [r5, #16]
 800bfc8:	f7ff fddc 	bl	800bb84 <_Bfree>
 800bfcc:	4628      	mov	r0, r5
 800bfce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfd2:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	e7c5      	b.n	800bf66 <__lshift+0x4a>
 800bfda:	3904      	subs	r1, #4
 800bfdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfe0:	459c      	cmp	ip, r3
 800bfe2:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfe6:	d8f9      	bhi.n	800bfdc <__lshift+0xc0>
 800bfe8:	e7ea      	b.n	800bfc0 <__lshift+0xa4>
 800bfea:	bf00      	nop
 800bfec:	0800ceda 	.word	0x0800ceda
 800bff0:	0800ceeb 	.word	0x0800ceeb

0800bff4 <__mcmp>:
 800bff4:	4603      	mov	r3, r0
 800bff6:	690a      	ldr	r2, [r1, #16]
 800bff8:	6900      	ldr	r0, [r0, #16]
 800bffa:	b530      	push	{r4, r5, lr}
 800bffc:	1a80      	subs	r0, r0, r2
 800bffe:	d10e      	bne.n	800c01e <__mcmp+0x2a>
 800c000:	3314      	adds	r3, #20
 800c002:	3114      	adds	r1, #20
 800c004:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c008:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c00c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c010:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c014:	4295      	cmp	r5, r2
 800c016:	d003      	beq.n	800c020 <__mcmp+0x2c>
 800c018:	d205      	bcs.n	800c026 <__mcmp+0x32>
 800c01a:	f04f 30ff 	mov.w	r0, #4294967295
 800c01e:	bd30      	pop	{r4, r5, pc}
 800c020:	42a3      	cmp	r3, r4
 800c022:	d3f3      	bcc.n	800c00c <__mcmp+0x18>
 800c024:	e7fb      	b.n	800c01e <__mcmp+0x2a>
 800c026:	2001      	movs	r0, #1
 800c028:	e7f9      	b.n	800c01e <__mcmp+0x2a>
	...

0800c02c <__mdiff>:
 800c02c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c030:	4689      	mov	r9, r1
 800c032:	4606      	mov	r6, r0
 800c034:	4611      	mov	r1, r2
 800c036:	4648      	mov	r0, r9
 800c038:	4614      	mov	r4, r2
 800c03a:	f7ff ffdb 	bl	800bff4 <__mcmp>
 800c03e:	1e05      	subs	r5, r0, #0
 800c040:	d112      	bne.n	800c068 <__mdiff+0x3c>
 800c042:	4629      	mov	r1, r5
 800c044:	4630      	mov	r0, r6
 800c046:	f7ff fd5d 	bl	800bb04 <_Balloc>
 800c04a:	4602      	mov	r2, r0
 800c04c:	b928      	cbnz	r0, 800c05a <__mdiff+0x2e>
 800c04e:	f240 2137 	movw	r1, #567	@ 0x237
 800c052:	4b3e      	ldr	r3, [pc, #248]	@ (800c14c <__mdiff+0x120>)
 800c054:	483e      	ldr	r0, [pc, #248]	@ (800c150 <__mdiff+0x124>)
 800c056:	f000 fb0d 	bl	800c674 <__assert_func>
 800c05a:	2301      	movs	r3, #1
 800c05c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c060:	4610      	mov	r0, r2
 800c062:	b003      	add	sp, #12
 800c064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c068:	bfbc      	itt	lt
 800c06a:	464b      	movlt	r3, r9
 800c06c:	46a1      	movlt	r9, r4
 800c06e:	4630      	mov	r0, r6
 800c070:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c074:	bfba      	itte	lt
 800c076:	461c      	movlt	r4, r3
 800c078:	2501      	movlt	r5, #1
 800c07a:	2500      	movge	r5, #0
 800c07c:	f7ff fd42 	bl	800bb04 <_Balloc>
 800c080:	4602      	mov	r2, r0
 800c082:	b918      	cbnz	r0, 800c08c <__mdiff+0x60>
 800c084:	f240 2145 	movw	r1, #581	@ 0x245
 800c088:	4b30      	ldr	r3, [pc, #192]	@ (800c14c <__mdiff+0x120>)
 800c08a:	e7e3      	b.n	800c054 <__mdiff+0x28>
 800c08c:	f100 0b14 	add.w	fp, r0, #20
 800c090:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c094:	f109 0310 	add.w	r3, r9, #16
 800c098:	60c5      	str	r5, [r0, #12]
 800c09a:	f04f 0c00 	mov.w	ip, #0
 800c09e:	f109 0514 	add.w	r5, r9, #20
 800c0a2:	46d9      	mov	r9, fp
 800c0a4:	6926      	ldr	r6, [r4, #16]
 800c0a6:	f104 0e14 	add.w	lr, r4, #20
 800c0aa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c0ae:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c0b2:	9301      	str	r3, [sp, #4]
 800c0b4:	9b01      	ldr	r3, [sp, #4]
 800c0b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c0ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c0be:	b281      	uxth	r1, r0
 800c0c0:	9301      	str	r3, [sp, #4]
 800c0c2:	fa1f f38a 	uxth.w	r3, sl
 800c0c6:	1a5b      	subs	r3, r3, r1
 800c0c8:	0c00      	lsrs	r0, r0, #16
 800c0ca:	4463      	add	r3, ip
 800c0cc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c0d0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c0da:	4576      	cmp	r6, lr
 800c0dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c0e0:	f849 3b04 	str.w	r3, [r9], #4
 800c0e4:	d8e6      	bhi.n	800c0b4 <__mdiff+0x88>
 800c0e6:	1b33      	subs	r3, r6, r4
 800c0e8:	3b15      	subs	r3, #21
 800c0ea:	f023 0303 	bic.w	r3, r3, #3
 800c0ee:	3415      	adds	r4, #21
 800c0f0:	3304      	adds	r3, #4
 800c0f2:	42a6      	cmp	r6, r4
 800c0f4:	bf38      	it	cc
 800c0f6:	2304      	movcc	r3, #4
 800c0f8:	441d      	add	r5, r3
 800c0fa:	445b      	add	r3, fp
 800c0fc:	461e      	mov	r6, r3
 800c0fe:	462c      	mov	r4, r5
 800c100:	4544      	cmp	r4, r8
 800c102:	d30e      	bcc.n	800c122 <__mdiff+0xf6>
 800c104:	f108 0103 	add.w	r1, r8, #3
 800c108:	1b49      	subs	r1, r1, r5
 800c10a:	f021 0103 	bic.w	r1, r1, #3
 800c10e:	3d03      	subs	r5, #3
 800c110:	45a8      	cmp	r8, r5
 800c112:	bf38      	it	cc
 800c114:	2100      	movcc	r1, #0
 800c116:	440b      	add	r3, r1
 800c118:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c11c:	b199      	cbz	r1, 800c146 <__mdiff+0x11a>
 800c11e:	6117      	str	r7, [r2, #16]
 800c120:	e79e      	b.n	800c060 <__mdiff+0x34>
 800c122:	46e6      	mov	lr, ip
 800c124:	f854 1b04 	ldr.w	r1, [r4], #4
 800c128:	fa1f fc81 	uxth.w	ip, r1
 800c12c:	44f4      	add	ip, lr
 800c12e:	0c08      	lsrs	r0, r1, #16
 800c130:	4471      	add	r1, lr
 800c132:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c136:	b289      	uxth	r1, r1
 800c138:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c13c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c140:	f846 1b04 	str.w	r1, [r6], #4
 800c144:	e7dc      	b.n	800c100 <__mdiff+0xd4>
 800c146:	3f01      	subs	r7, #1
 800c148:	e7e6      	b.n	800c118 <__mdiff+0xec>
 800c14a:	bf00      	nop
 800c14c:	0800ceda 	.word	0x0800ceda
 800c150:	0800ceeb 	.word	0x0800ceeb

0800c154 <__d2b>:
 800c154:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c158:	2101      	movs	r1, #1
 800c15a:	4690      	mov	r8, r2
 800c15c:	4699      	mov	r9, r3
 800c15e:	9e08      	ldr	r6, [sp, #32]
 800c160:	f7ff fcd0 	bl	800bb04 <_Balloc>
 800c164:	4604      	mov	r4, r0
 800c166:	b930      	cbnz	r0, 800c176 <__d2b+0x22>
 800c168:	4602      	mov	r2, r0
 800c16a:	f240 310f 	movw	r1, #783	@ 0x30f
 800c16e:	4b23      	ldr	r3, [pc, #140]	@ (800c1fc <__d2b+0xa8>)
 800c170:	4823      	ldr	r0, [pc, #140]	@ (800c200 <__d2b+0xac>)
 800c172:	f000 fa7f 	bl	800c674 <__assert_func>
 800c176:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c17a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c17e:	b10d      	cbz	r5, 800c184 <__d2b+0x30>
 800c180:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c184:	9301      	str	r3, [sp, #4]
 800c186:	f1b8 0300 	subs.w	r3, r8, #0
 800c18a:	d024      	beq.n	800c1d6 <__d2b+0x82>
 800c18c:	4668      	mov	r0, sp
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	f7ff fd7f 	bl	800bc92 <__lo0bits>
 800c194:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c198:	b1d8      	cbz	r0, 800c1d2 <__d2b+0x7e>
 800c19a:	f1c0 0320 	rsb	r3, r0, #32
 800c19e:	fa02 f303 	lsl.w	r3, r2, r3
 800c1a2:	430b      	orrs	r3, r1
 800c1a4:	40c2      	lsrs	r2, r0
 800c1a6:	6163      	str	r3, [r4, #20]
 800c1a8:	9201      	str	r2, [sp, #4]
 800c1aa:	9b01      	ldr	r3, [sp, #4]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	bf0c      	ite	eq
 800c1b0:	2201      	moveq	r2, #1
 800c1b2:	2202      	movne	r2, #2
 800c1b4:	61a3      	str	r3, [r4, #24]
 800c1b6:	6122      	str	r2, [r4, #16]
 800c1b8:	b1ad      	cbz	r5, 800c1e6 <__d2b+0x92>
 800c1ba:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c1be:	4405      	add	r5, r0
 800c1c0:	6035      	str	r5, [r6, #0]
 800c1c2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c1c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1c8:	6018      	str	r0, [r3, #0]
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	b002      	add	sp, #8
 800c1ce:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c1d2:	6161      	str	r1, [r4, #20]
 800c1d4:	e7e9      	b.n	800c1aa <__d2b+0x56>
 800c1d6:	a801      	add	r0, sp, #4
 800c1d8:	f7ff fd5b 	bl	800bc92 <__lo0bits>
 800c1dc:	9b01      	ldr	r3, [sp, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	6163      	str	r3, [r4, #20]
 800c1e2:	3020      	adds	r0, #32
 800c1e4:	e7e7      	b.n	800c1b6 <__d2b+0x62>
 800c1e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c1ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c1ee:	6030      	str	r0, [r6, #0]
 800c1f0:	6918      	ldr	r0, [r3, #16]
 800c1f2:	f7ff fd2f 	bl	800bc54 <__hi0bits>
 800c1f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c1fa:	e7e4      	b.n	800c1c6 <__d2b+0x72>
 800c1fc:	0800ceda 	.word	0x0800ceda
 800c200:	0800ceeb 	.word	0x0800ceeb

0800c204 <__ssputs_r>:
 800c204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c208:	461f      	mov	r7, r3
 800c20a:	688e      	ldr	r6, [r1, #8]
 800c20c:	4682      	mov	sl, r0
 800c20e:	42be      	cmp	r6, r7
 800c210:	460c      	mov	r4, r1
 800c212:	4690      	mov	r8, r2
 800c214:	680b      	ldr	r3, [r1, #0]
 800c216:	d82d      	bhi.n	800c274 <__ssputs_r+0x70>
 800c218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c21c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c220:	d026      	beq.n	800c270 <__ssputs_r+0x6c>
 800c222:	6965      	ldr	r5, [r4, #20]
 800c224:	6909      	ldr	r1, [r1, #16]
 800c226:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c22a:	eba3 0901 	sub.w	r9, r3, r1
 800c22e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c232:	1c7b      	adds	r3, r7, #1
 800c234:	444b      	add	r3, r9
 800c236:	106d      	asrs	r5, r5, #1
 800c238:	429d      	cmp	r5, r3
 800c23a:	bf38      	it	cc
 800c23c:	461d      	movcc	r5, r3
 800c23e:	0553      	lsls	r3, r2, #21
 800c240:	d527      	bpl.n	800c292 <__ssputs_r+0x8e>
 800c242:	4629      	mov	r1, r5
 800c244:	f7ff fbd2 	bl	800b9ec <_malloc_r>
 800c248:	4606      	mov	r6, r0
 800c24a:	b360      	cbz	r0, 800c2a6 <__ssputs_r+0xa2>
 800c24c:	464a      	mov	r2, r9
 800c24e:	6921      	ldr	r1, [r4, #16]
 800c250:	f000 fa02 	bl	800c658 <memcpy>
 800c254:	89a3      	ldrh	r3, [r4, #12]
 800c256:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c25a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c25e:	81a3      	strh	r3, [r4, #12]
 800c260:	6126      	str	r6, [r4, #16]
 800c262:	444e      	add	r6, r9
 800c264:	6026      	str	r6, [r4, #0]
 800c266:	463e      	mov	r6, r7
 800c268:	6165      	str	r5, [r4, #20]
 800c26a:	eba5 0509 	sub.w	r5, r5, r9
 800c26e:	60a5      	str	r5, [r4, #8]
 800c270:	42be      	cmp	r6, r7
 800c272:	d900      	bls.n	800c276 <__ssputs_r+0x72>
 800c274:	463e      	mov	r6, r7
 800c276:	4632      	mov	r2, r6
 800c278:	4641      	mov	r1, r8
 800c27a:	6820      	ldr	r0, [r4, #0]
 800c27c:	f000 f9c2 	bl	800c604 <memmove>
 800c280:	2000      	movs	r0, #0
 800c282:	68a3      	ldr	r3, [r4, #8]
 800c284:	1b9b      	subs	r3, r3, r6
 800c286:	60a3      	str	r3, [r4, #8]
 800c288:	6823      	ldr	r3, [r4, #0]
 800c28a:	4433      	add	r3, r6
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c292:	462a      	mov	r2, r5
 800c294:	f000 fa32 	bl	800c6fc <_realloc_r>
 800c298:	4606      	mov	r6, r0
 800c29a:	2800      	cmp	r0, #0
 800c29c:	d1e0      	bne.n	800c260 <__ssputs_r+0x5c>
 800c29e:	4650      	mov	r0, sl
 800c2a0:	6921      	ldr	r1, [r4, #16]
 800c2a2:	f7ff fb31 	bl	800b908 <_free_r>
 800c2a6:	230c      	movs	r3, #12
 800c2a8:	f8ca 3000 	str.w	r3, [sl]
 800c2ac:	89a3      	ldrh	r3, [r4, #12]
 800c2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2b6:	81a3      	strh	r3, [r4, #12]
 800c2b8:	e7e9      	b.n	800c28e <__ssputs_r+0x8a>
	...

0800c2bc <_svfiprintf_r>:
 800c2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2c0:	4698      	mov	r8, r3
 800c2c2:	898b      	ldrh	r3, [r1, #12]
 800c2c4:	4607      	mov	r7, r0
 800c2c6:	061b      	lsls	r3, r3, #24
 800c2c8:	460d      	mov	r5, r1
 800c2ca:	4614      	mov	r4, r2
 800c2cc:	b09d      	sub	sp, #116	@ 0x74
 800c2ce:	d510      	bpl.n	800c2f2 <_svfiprintf_r+0x36>
 800c2d0:	690b      	ldr	r3, [r1, #16]
 800c2d2:	b973      	cbnz	r3, 800c2f2 <_svfiprintf_r+0x36>
 800c2d4:	2140      	movs	r1, #64	@ 0x40
 800c2d6:	f7ff fb89 	bl	800b9ec <_malloc_r>
 800c2da:	6028      	str	r0, [r5, #0]
 800c2dc:	6128      	str	r0, [r5, #16]
 800c2de:	b930      	cbnz	r0, 800c2ee <_svfiprintf_r+0x32>
 800c2e0:	230c      	movs	r3, #12
 800c2e2:	603b      	str	r3, [r7, #0]
 800c2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e8:	b01d      	add	sp, #116	@ 0x74
 800c2ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ee:	2340      	movs	r3, #64	@ 0x40
 800c2f0:	616b      	str	r3, [r5, #20]
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2f6:	2320      	movs	r3, #32
 800c2f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2fc:	2330      	movs	r3, #48	@ 0x30
 800c2fe:	f04f 0901 	mov.w	r9, #1
 800c302:	f8cd 800c 	str.w	r8, [sp, #12]
 800c306:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c4a0 <_svfiprintf_r+0x1e4>
 800c30a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c30e:	4623      	mov	r3, r4
 800c310:	469a      	mov	sl, r3
 800c312:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c316:	b10a      	cbz	r2, 800c31c <_svfiprintf_r+0x60>
 800c318:	2a25      	cmp	r2, #37	@ 0x25
 800c31a:	d1f9      	bne.n	800c310 <_svfiprintf_r+0x54>
 800c31c:	ebba 0b04 	subs.w	fp, sl, r4
 800c320:	d00b      	beq.n	800c33a <_svfiprintf_r+0x7e>
 800c322:	465b      	mov	r3, fp
 800c324:	4622      	mov	r2, r4
 800c326:	4629      	mov	r1, r5
 800c328:	4638      	mov	r0, r7
 800c32a:	f7ff ff6b 	bl	800c204 <__ssputs_r>
 800c32e:	3001      	adds	r0, #1
 800c330:	f000 80a7 	beq.w	800c482 <_svfiprintf_r+0x1c6>
 800c334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c336:	445a      	add	r2, fp
 800c338:	9209      	str	r2, [sp, #36]	@ 0x24
 800c33a:	f89a 3000 	ldrb.w	r3, [sl]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f000 809f 	beq.w	800c482 <_svfiprintf_r+0x1c6>
 800c344:	2300      	movs	r3, #0
 800c346:	f04f 32ff 	mov.w	r2, #4294967295
 800c34a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c34e:	f10a 0a01 	add.w	sl, sl, #1
 800c352:	9304      	str	r3, [sp, #16]
 800c354:	9307      	str	r3, [sp, #28]
 800c356:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c35a:	931a      	str	r3, [sp, #104]	@ 0x68
 800c35c:	4654      	mov	r4, sl
 800c35e:	2205      	movs	r2, #5
 800c360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c364:	484e      	ldr	r0, [pc, #312]	@ (800c4a0 <_svfiprintf_r+0x1e4>)
 800c366:	f7fe fc6e 	bl	800ac46 <memchr>
 800c36a:	9a04      	ldr	r2, [sp, #16]
 800c36c:	b9d8      	cbnz	r0, 800c3a6 <_svfiprintf_r+0xea>
 800c36e:	06d0      	lsls	r0, r2, #27
 800c370:	bf44      	itt	mi
 800c372:	2320      	movmi	r3, #32
 800c374:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c378:	0711      	lsls	r1, r2, #28
 800c37a:	bf44      	itt	mi
 800c37c:	232b      	movmi	r3, #43	@ 0x2b
 800c37e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c382:	f89a 3000 	ldrb.w	r3, [sl]
 800c386:	2b2a      	cmp	r3, #42	@ 0x2a
 800c388:	d015      	beq.n	800c3b6 <_svfiprintf_r+0xfa>
 800c38a:	4654      	mov	r4, sl
 800c38c:	2000      	movs	r0, #0
 800c38e:	f04f 0c0a 	mov.w	ip, #10
 800c392:	9a07      	ldr	r2, [sp, #28]
 800c394:	4621      	mov	r1, r4
 800c396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c39a:	3b30      	subs	r3, #48	@ 0x30
 800c39c:	2b09      	cmp	r3, #9
 800c39e:	d94b      	bls.n	800c438 <_svfiprintf_r+0x17c>
 800c3a0:	b1b0      	cbz	r0, 800c3d0 <_svfiprintf_r+0x114>
 800c3a2:	9207      	str	r2, [sp, #28]
 800c3a4:	e014      	b.n	800c3d0 <_svfiprintf_r+0x114>
 800c3a6:	eba0 0308 	sub.w	r3, r0, r8
 800c3aa:	fa09 f303 	lsl.w	r3, r9, r3
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	46a2      	mov	sl, r4
 800c3b2:	9304      	str	r3, [sp, #16]
 800c3b4:	e7d2      	b.n	800c35c <_svfiprintf_r+0xa0>
 800c3b6:	9b03      	ldr	r3, [sp, #12]
 800c3b8:	1d19      	adds	r1, r3, #4
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	9103      	str	r1, [sp, #12]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	bfbb      	ittet	lt
 800c3c2:	425b      	neglt	r3, r3
 800c3c4:	f042 0202 	orrlt.w	r2, r2, #2
 800c3c8:	9307      	strge	r3, [sp, #28]
 800c3ca:	9307      	strlt	r3, [sp, #28]
 800c3cc:	bfb8      	it	lt
 800c3ce:	9204      	strlt	r2, [sp, #16]
 800c3d0:	7823      	ldrb	r3, [r4, #0]
 800c3d2:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3d4:	d10a      	bne.n	800c3ec <_svfiprintf_r+0x130>
 800c3d6:	7863      	ldrb	r3, [r4, #1]
 800c3d8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3da:	d132      	bne.n	800c442 <_svfiprintf_r+0x186>
 800c3dc:	9b03      	ldr	r3, [sp, #12]
 800c3de:	3402      	adds	r4, #2
 800c3e0:	1d1a      	adds	r2, r3, #4
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	9203      	str	r2, [sp, #12]
 800c3e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3ea:	9305      	str	r3, [sp, #20]
 800c3ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c4a4 <_svfiprintf_r+0x1e8>
 800c3f0:	2203      	movs	r2, #3
 800c3f2:	4650      	mov	r0, sl
 800c3f4:	7821      	ldrb	r1, [r4, #0]
 800c3f6:	f7fe fc26 	bl	800ac46 <memchr>
 800c3fa:	b138      	cbz	r0, 800c40c <_svfiprintf_r+0x150>
 800c3fc:	2240      	movs	r2, #64	@ 0x40
 800c3fe:	9b04      	ldr	r3, [sp, #16]
 800c400:	eba0 000a 	sub.w	r0, r0, sl
 800c404:	4082      	lsls	r2, r0
 800c406:	4313      	orrs	r3, r2
 800c408:	3401      	adds	r4, #1
 800c40a:	9304      	str	r3, [sp, #16]
 800c40c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c410:	2206      	movs	r2, #6
 800c412:	4825      	ldr	r0, [pc, #148]	@ (800c4a8 <_svfiprintf_r+0x1ec>)
 800c414:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c418:	f7fe fc15 	bl	800ac46 <memchr>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d036      	beq.n	800c48e <_svfiprintf_r+0x1d2>
 800c420:	4b22      	ldr	r3, [pc, #136]	@ (800c4ac <_svfiprintf_r+0x1f0>)
 800c422:	bb1b      	cbnz	r3, 800c46c <_svfiprintf_r+0x1b0>
 800c424:	9b03      	ldr	r3, [sp, #12]
 800c426:	3307      	adds	r3, #7
 800c428:	f023 0307 	bic.w	r3, r3, #7
 800c42c:	3308      	adds	r3, #8
 800c42e:	9303      	str	r3, [sp, #12]
 800c430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c432:	4433      	add	r3, r6
 800c434:	9309      	str	r3, [sp, #36]	@ 0x24
 800c436:	e76a      	b.n	800c30e <_svfiprintf_r+0x52>
 800c438:	460c      	mov	r4, r1
 800c43a:	2001      	movs	r0, #1
 800c43c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c440:	e7a8      	b.n	800c394 <_svfiprintf_r+0xd8>
 800c442:	2300      	movs	r3, #0
 800c444:	f04f 0c0a 	mov.w	ip, #10
 800c448:	4619      	mov	r1, r3
 800c44a:	3401      	adds	r4, #1
 800c44c:	9305      	str	r3, [sp, #20]
 800c44e:	4620      	mov	r0, r4
 800c450:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c454:	3a30      	subs	r2, #48	@ 0x30
 800c456:	2a09      	cmp	r2, #9
 800c458:	d903      	bls.n	800c462 <_svfiprintf_r+0x1a6>
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d0c6      	beq.n	800c3ec <_svfiprintf_r+0x130>
 800c45e:	9105      	str	r1, [sp, #20]
 800c460:	e7c4      	b.n	800c3ec <_svfiprintf_r+0x130>
 800c462:	4604      	mov	r4, r0
 800c464:	2301      	movs	r3, #1
 800c466:	fb0c 2101 	mla	r1, ip, r1, r2
 800c46a:	e7f0      	b.n	800c44e <_svfiprintf_r+0x192>
 800c46c:	ab03      	add	r3, sp, #12
 800c46e:	9300      	str	r3, [sp, #0]
 800c470:	462a      	mov	r2, r5
 800c472:	4638      	mov	r0, r7
 800c474:	4b0e      	ldr	r3, [pc, #56]	@ (800c4b0 <_svfiprintf_r+0x1f4>)
 800c476:	a904      	add	r1, sp, #16
 800c478:	f7fd fe82 	bl	800a180 <_printf_float>
 800c47c:	1c42      	adds	r2, r0, #1
 800c47e:	4606      	mov	r6, r0
 800c480:	d1d6      	bne.n	800c430 <_svfiprintf_r+0x174>
 800c482:	89ab      	ldrh	r3, [r5, #12]
 800c484:	065b      	lsls	r3, r3, #25
 800c486:	f53f af2d 	bmi.w	800c2e4 <_svfiprintf_r+0x28>
 800c48a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c48c:	e72c      	b.n	800c2e8 <_svfiprintf_r+0x2c>
 800c48e:	ab03      	add	r3, sp, #12
 800c490:	9300      	str	r3, [sp, #0]
 800c492:	462a      	mov	r2, r5
 800c494:	4638      	mov	r0, r7
 800c496:	4b06      	ldr	r3, [pc, #24]	@ (800c4b0 <_svfiprintf_r+0x1f4>)
 800c498:	a904      	add	r1, sp, #16
 800c49a:	f7fe f90f 	bl	800a6bc <_printf_i>
 800c49e:	e7ed      	b.n	800c47c <_svfiprintf_r+0x1c0>
 800c4a0:	0800d040 	.word	0x0800d040
 800c4a4:	0800d046 	.word	0x0800d046
 800c4a8:	0800d04a 	.word	0x0800d04a
 800c4ac:	0800a181 	.word	0x0800a181
 800c4b0:	0800c205 	.word	0x0800c205

0800c4b4 <__sflush_r>:
 800c4b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4ba:	0716      	lsls	r6, r2, #28
 800c4bc:	4605      	mov	r5, r0
 800c4be:	460c      	mov	r4, r1
 800c4c0:	d454      	bmi.n	800c56c <__sflush_r+0xb8>
 800c4c2:	684b      	ldr	r3, [r1, #4]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	dc02      	bgt.n	800c4ce <__sflush_r+0x1a>
 800c4c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	dd48      	ble.n	800c560 <__sflush_r+0xac>
 800c4ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4d0:	2e00      	cmp	r6, #0
 800c4d2:	d045      	beq.n	800c560 <__sflush_r+0xac>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c4da:	682f      	ldr	r7, [r5, #0]
 800c4dc:	6a21      	ldr	r1, [r4, #32]
 800c4de:	602b      	str	r3, [r5, #0]
 800c4e0:	d030      	beq.n	800c544 <__sflush_r+0x90>
 800c4e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	0759      	lsls	r1, r3, #29
 800c4e8:	d505      	bpl.n	800c4f6 <__sflush_r+0x42>
 800c4ea:	6863      	ldr	r3, [r4, #4]
 800c4ec:	1ad2      	subs	r2, r2, r3
 800c4ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c4f0:	b10b      	cbz	r3, 800c4f6 <__sflush_r+0x42>
 800c4f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c4f4:	1ad2      	subs	r2, r2, r3
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	4628      	mov	r0, r5
 800c4fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c4fc:	6a21      	ldr	r1, [r4, #32]
 800c4fe:	47b0      	blx	r6
 800c500:	1c43      	adds	r3, r0, #1
 800c502:	89a3      	ldrh	r3, [r4, #12]
 800c504:	d106      	bne.n	800c514 <__sflush_r+0x60>
 800c506:	6829      	ldr	r1, [r5, #0]
 800c508:	291d      	cmp	r1, #29
 800c50a:	d82b      	bhi.n	800c564 <__sflush_r+0xb0>
 800c50c:	4a28      	ldr	r2, [pc, #160]	@ (800c5b0 <__sflush_r+0xfc>)
 800c50e:	410a      	asrs	r2, r1
 800c510:	07d6      	lsls	r6, r2, #31
 800c512:	d427      	bmi.n	800c564 <__sflush_r+0xb0>
 800c514:	2200      	movs	r2, #0
 800c516:	6062      	str	r2, [r4, #4]
 800c518:	6922      	ldr	r2, [r4, #16]
 800c51a:	04d9      	lsls	r1, r3, #19
 800c51c:	6022      	str	r2, [r4, #0]
 800c51e:	d504      	bpl.n	800c52a <__sflush_r+0x76>
 800c520:	1c42      	adds	r2, r0, #1
 800c522:	d101      	bne.n	800c528 <__sflush_r+0x74>
 800c524:	682b      	ldr	r3, [r5, #0]
 800c526:	b903      	cbnz	r3, 800c52a <__sflush_r+0x76>
 800c528:	6560      	str	r0, [r4, #84]	@ 0x54
 800c52a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c52c:	602f      	str	r7, [r5, #0]
 800c52e:	b1b9      	cbz	r1, 800c560 <__sflush_r+0xac>
 800c530:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c534:	4299      	cmp	r1, r3
 800c536:	d002      	beq.n	800c53e <__sflush_r+0x8a>
 800c538:	4628      	mov	r0, r5
 800c53a:	f7ff f9e5 	bl	800b908 <_free_r>
 800c53e:	2300      	movs	r3, #0
 800c540:	6363      	str	r3, [r4, #52]	@ 0x34
 800c542:	e00d      	b.n	800c560 <__sflush_r+0xac>
 800c544:	2301      	movs	r3, #1
 800c546:	4628      	mov	r0, r5
 800c548:	47b0      	blx	r6
 800c54a:	4602      	mov	r2, r0
 800c54c:	1c50      	adds	r0, r2, #1
 800c54e:	d1c9      	bne.n	800c4e4 <__sflush_r+0x30>
 800c550:	682b      	ldr	r3, [r5, #0]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d0c6      	beq.n	800c4e4 <__sflush_r+0x30>
 800c556:	2b1d      	cmp	r3, #29
 800c558:	d001      	beq.n	800c55e <__sflush_r+0xaa>
 800c55a:	2b16      	cmp	r3, #22
 800c55c:	d11d      	bne.n	800c59a <__sflush_r+0xe6>
 800c55e:	602f      	str	r7, [r5, #0]
 800c560:	2000      	movs	r0, #0
 800c562:	e021      	b.n	800c5a8 <__sflush_r+0xf4>
 800c564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c568:	b21b      	sxth	r3, r3
 800c56a:	e01a      	b.n	800c5a2 <__sflush_r+0xee>
 800c56c:	690f      	ldr	r7, [r1, #16]
 800c56e:	2f00      	cmp	r7, #0
 800c570:	d0f6      	beq.n	800c560 <__sflush_r+0xac>
 800c572:	0793      	lsls	r3, r2, #30
 800c574:	bf18      	it	ne
 800c576:	2300      	movne	r3, #0
 800c578:	680e      	ldr	r6, [r1, #0]
 800c57a:	bf08      	it	eq
 800c57c:	694b      	ldreq	r3, [r1, #20]
 800c57e:	1bf6      	subs	r6, r6, r7
 800c580:	600f      	str	r7, [r1, #0]
 800c582:	608b      	str	r3, [r1, #8]
 800c584:	2e00      	cmp	r6, #0
 800c586:	ddeb      	ble.n	800c560 <__sflush_r+0xac>
 800c588:	4633      	mov	r3, r6
 800c58a:	463a      	mov	r2, r7
 800c58c:	4628      	mov	r0, r5
 800c58e:	6a21      	ldr	r1, [r4, #32]
 800c590:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c594:	47e0      	blx	ip
 800c596:	2800      	cmp	r0, #0
 800c598:	dc07      	bgt.n	800c5aa <__sflush_r+0xf6>
 800c59a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c59e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a6:	81a3      	strh	r3, [r4, #12]
 800c5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5aa:	4407      	add	r7, r0
 800c5ac:	1a36      	subs	r6, r6, r0
 800c5ae:	e7e9      	b.n	800c584 <__sflush_r+0xd0>
 800c5b0:	dfbffffe 	.word	0xdfbffffe

0800c5b4 <_fflush_r>:
 800c5b4:	b538      	push	{r3, r4, r5, lr}
 800c5b6:	690b      	ldr	r3, [r1, #16]
 800c5b8:	4605      	mov	r5, r0
 800c5ba:	460c      	mov	r4, r1
 800c5bc:	b913      	cbnz	r3, 800c5c4 <_fflush_r+0x10>
 800c5be:	2500      	movs	r5, #0
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	bd38      	pop	{r3, r4, r5, pc}
 800c5c4:	b118      	cbz	r0, 800c5ce <_fflush_r+0x1a>
 800c5c6:	6a03      	ldr	r3, [r0, #32]
 800c5c8:	b90b      	cbnz	r3, 800c5ce <_fflush_r+0x1a>
 800c5ca:	f7fe fa23 	bl	800aa14 <__sinit>
 800c5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d0f3      	beq.n	800c5be <_fflush_r+0xa>
 800c5d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c5d8:	07d0      	lsls	r0, r2, #31
 800c5da:	d404      	bmi.n	800c5e6 <_fflush_r+0x32>
 800c5dc:	0599      	lsls	r1, r3, #22
 800c5de:	d402      	bmi.n	800c5e6 <_fflush_r+0x32>
 800c5e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5e2:	f7fe fb2e 	bl	800ac42 <__retarget_lock_acquire_recursive>
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	4621      	mov	r1, r4
 800c5ea:	f7ff ff63 	bl	800c4b4 <__sflush_r>
 800c5ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c5f0:	4605      	mov	r5, r0
 800c5f2:	07da      	lsls	r2, r3, #31
 800c5f4:	d4e4      	bmi.n	800c5c0 <_fflush_r+0xc>
 800c5f6:	89a3      	ldrh	r3, [r4, #12]
 800c5f8:	059b      	lsls	r3, r3, #22
 800c5fa:	d4e1      	bmi.n	800c5c0 <_fflush_r+0xc>
 800c5fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c5fe:	f7fe fb21 	bl	800ac44 <__retarget_lock_release_recursive>
 800c602:	e7dd      	b.n	800c5c0 <_fflush_r+0xc>

0800c604 <memmove>:
 800c604:	4288      	cmp	r0, r1
 800c606:	b510      	push	{r4, lr}
 800c608:	eb01 0402 	add.w	r4, r1, r2
 800c60c:	d902      	bls.n	800c614 <memmove+0x10>
 800c60e:	4284      	cmp	r4, r0
 800c610:	4623      	mov	r3, r4
 800c612:	d807      	bhi.n	800c624 <memmove+0x20>
 800c614:	1e43      	subs	r3, r0, #1
 800c616:	42a1      	cmp	r1, r4
 800c618:	d008      	beq.n	800c62c <memmove+0x28>
 800c61a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c61e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c622:	e7f8      	b.n	800c616 <memmove+0x12>
 800c624:	4601      	mov	r1, r0
 800c626:	4402      	add	r2, r0
 800c628:	428a      	cmp	r2, r1
 800c62a:	d100      	bne.n	800c62e <memmove+0x2a>
 800c62c:	bd10      	pop	{r4, pc}
 800c62e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c632:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c636:	e7f7      	b.n	800c628 <memmove+0x24>

0800c638 <_sbrk_r>:
 800c638:	b538      	push	{r3, r4, r5, lr}
 800c63a:	2300      	movs	r3, #0
 800c63c:	4d05      	ldr	r5, [pc, #20]	@ (800c654 <_sbrk_r+0x1c>)
 800c63e:	4604      	mov	r4, r0
 800c640:	4608      	mov	r0, r1
 800c642:	602b      	str	r3, [r5, #0]
 800c644:	f7f5 fa14 	bl	8001a70 <_sbrk>
 800c648:	1c43      	adds	r3, r0, #1
 800c64a:	d102      	bne.n	800c652 <_sbrk_r+0x1a>
 800c64c:	682b      	ldr	r3, [r5, #0]
 800c64e:	b103      	cbz	r3, 800c652 <_sbrk_r+0x1a>
 800c650:	6023      	str	r3, [r4, #0]
 800c652:	bd38      	pop	{r3, r4, r5, pc}
 800c654:	200017fc 	.word	0x200017fc

0800c658 <memcpy>:
 800c658:	440a      	add	r2, r1
 800c65a:	4291      	cmp	r1, r2
 800c65c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c660:	d100      	bne.n	800c664 <memcpy+0xc>
 800c662:	4770      	bx	lr
 800c664:	b510      	push	{r4, lr}
 800c666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c66a:	4291      	cmp	r1, r2
 800c66c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c670:	d1f9      	bne.n	800c666 <memcpy+0xe>
 800c672:	bd10      	pop	{r4, pc}

0800c674 <__assert_func>:
 800c674:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c676:	4614      	mov	r4, r2
 800c678:	461a      	mov	r2, r3
 800c67a:	4b09      	ldr	r3, [pc, #36]	@ (800c6a0 <__assert_func+0x2c>)
 800c67c:	4605      	mov	r5, r0
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	68d8      	ldr	r0, [r3, #12]
 800c682:	b954      	cbnz	r4, 800c69a <__assert_func+0x26>
 800c684:	4b07      	ldr	r3, [pc, #28]	@ (800c6a4 <__assert_func+0x30>)
 800c686:	461c      	mov	r4, r3
 800c688:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c68c:	9100      	str	r1, [sp, #0]
 800c68e:	462b      	mov	r3, r5
 800c690:	4905      	ldr	r1, [pc, #20]	@ (800c6a8 <__assert_func+0x34>)
 800c692:	f000 f86f 	bl	800c774 <fiprintf>
 800c696:	f000 f87f 	bl	800c798 <abort>
 800c69a:	4b04      	ldr	r3, [pc, #16]	@ (800c6ac <__assert_func+0x38>)
 800c69c:	e7f4      	b.n	800c688 <__assert_func+0x14>
 800c69e:	bf00      	nop
 800c6a0:	2000019c 	.word	0x2000019c
 800c6a4:	0800d096 	.word	0x0800d096
 800c6a8:	0800d068 	.word	0x0800d068
 800c6ac:	0800d05b 	.word	0x0800d05b

0800c6b0 <_calloc_r>:
 800c6b0:	b570      	push	{r4, r5, r6, lr}
 800c6b2:	fba1 5402 	umull	r5, r4, r1, r2
 800c6b6:	b93c      	cbnz	r4, 800c6c8 <_calloc_r+0x18>
 800c6b8:	4629      	mov	r1, r5
 800c6ba:	f7ff f997 	bl	800b9ec <_malloc_r>
 800c6be:	4606      	mov	r6, r0
 800c6c0:	b928      	cbnz	r0, 800c6ce <_calloc_r+0x1e>
 800c6c2:	2600      	movs	r6, #0
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	bd70      	pop	{r4, r5, r6, pc}
 800c6c8:	220c      	movs	r2, #12
 800c6ca:	6002      	str	r2, [r0, #0]
 800c6cc:	e7f9      	b.n	800c6c2 <_calloc_r+0x12>
 800c6ce:	462a      	mov	r2, r5
 800c6d0:	4621      	mov	r1, r4
 800c6d2:	f7fe fa38 	bl	800ab46 <memset>
 800c6d6:	e7f5      	b.n	800c6c4 <_calloc_r+0x14>

0800c6d8 <__ascii_mbtowc>:
 800c6d8:	b082      	sub	sp, #8
 800c6da:	b901      	cbnz	r1, 800c6de <__ascii_mbtowc+0x6>
 800c6dc:	a901      	add	r1, sp, #4
 800c6de:	b142      	cbz	r2, 800c6f2 <__ascii_mbtowc+0x1a>
 800c6e0:	b14b      	cbz	r3, 800c6f6 <__ascii_mbtowc+0x1e>
 800c6e2:	7813      	ldrb	r3, [r2, #0]
 800c6e4:	600b      	str	r3, [r1, #0]
 800c6e6:	7812      	ldrb	r2, [r2, #0]
 800c6e8:	1e10      	subs	r0, r2, #0
 800c6ea:	bf18      	it	ne
 800c6ec:	2001      	movne	r0, #1
 800c6ee:	b002      	add	sp, #8
 800c6f0:	4770      	bx	lr
 800c6f2:	4610      	mov	r0, r2
 800c6f4:	e7fb      	b.n	800c6ee <__ascii_mbtowc+0x16>
 800c6f6:	f06f 0001 	mvn.w	r0, #1
 800c6fa:	e7f8      	b.n	800c6ee <__ascii_mbtowc+0x16>

0800c6fc <_realloc_r>:
 800c6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c700:	4680      	mov	r8, r0
 800c702:	4615      	mov	r5, r2
 800c704:	460c      	mov	r4, r1
 800c706:	b921      	cbnz	r1, 800c712 <_realloc_r+0x16>
 800c708:	4611      	mov	r1, r2
 800c70a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c70e:	f7ff b96d 	b.w	800b9ec <_malloc_r>
 800c712:	b92a      	cbnz	r2, 800c720 <_realloc_r+0x24>
 800c714:	f7ff f8f8 	bl	800b908 <_free_r>
 800c718:	2400      	movs	r4, #0
 800c71a:	4620      	mov	r0, r4
 800c71c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c720:	f000 f841 	bl	800c7a6 <_malloc_usable_size_r>
 800c724:	4285      	cmp	r5, r0
 800c726:	4606      	mov	r6, r0
 800c728:	d802      	bhi.n	800c730 <_realloc_r+0x34>
 800c72a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c72e:	d8f4      	bhi.n	800c71a <_realloc_r+0x1e>
 800c730:	4629      	mov	r1, r5
 800c732:	4640      	mov	r0, r8
 800c734:	f7ff f95a 	bl	800b9ec <_malloc_r>
 800c738:	4607      	mov	r7, r0
 800c73a:	2800      	cmp	r0, #0
 800c73c:	d0ec      	beq.n	800c718 <_realloc_r+0x1c>
 800c73e:	42b5      	cmp	r5, r6
 800c740:	462a      	mov	r2, r5
 800c742:	4621      	mov	r1, r4
 800c744:	bf28      	it	cs
 800c746:	4632      	movcs	r2, r6
 800c748:	f7ff ff86 	bl	800c658 <memcpy>
 800c74c:	4621      	mov	r1, r4
 800c74e:	4640      	mov	r0, r8
 800c750:	f7ff f8da 	bl	800b908 <_free_r>
 800c754:	463c      	mov	r4, r7
 800c756:	e7e0      	b.n	800c71a <_realloc_r+0x1e>

0800c758 <__ascii_wctomb>:
 800c758:	4603      	mov	r3, r0
 800c75a:	4608      	mov	r0, r1
 800c75c:	b141      	cbz	r1, 800c770 <__ascii_wctomb+0x18>
 800c75e:	2aff      	cmp	r2, #255	@ 0xff
 800c760:	d904      	bls.n	800c76c <__ascii_wctomb+0x14>
 800c762:	228a      	movs	r2, #138	@ 0x8a
 800c764:	f04f 30ff 	mov.w	r0, #4294967295
 800c768:	601a      	str	r2, [r3, #0]
 800c76a:	4770      	bx	lr
 800c76c:	2001      	movs	r0, #1
 800c76e:	700a      	strb	r2, [r1, #0]
 800c770:	4770      	bx	lr
	...

0800c774 <fiprintf>:
 800c774:	b40e      	push	{r1, r2, r3}
 800c776:	b503      	push	{r0, r1, lr}
 800c778:	4601      	mov	r1, r0
 800c77a:	ab03      	add	r3, sp, #12
 800c77c:	4805      	ldr	r0, [pc, #20]	@ (800c794 <fiprintf+0x20>)
 800c77e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c782:	6800      	ldr	r0, [r0, #0]
 800c784:	9301      	str	r3, [sp, #4]
 800c786:	f000 f83d 	bl	800c804 <_vfiprintf_r>
 800c78a:	b002      	add	sp, #8
 800c78c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c790:	b003      	add	sp, #12
 800c792:	4770      	bx	lr
 800c794:	2000019c 	.word	0x2000019c

0800c798 <abort>:
 800c798:	2006      	movs	r0, #6
 800c79a:	b508      	push	{r3, lr}
 800c79c:	f000 fa06 	bl	800cbac <raise>
 800c7a0:	2001      	movs	r0, #1
 800c7a2:	f7f5 f8f0 	bl	8001986 <_exit>

0800c7a6 <_malloc_usable_size_r>:
 800c7a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7aa:	1f18      	subs	r0, r3, #4
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	bfbc      	itt	lt
 800c7b0:	580b      	ldrlt	r3, [r1, r0]
 800c7b2:	18c0      	addlt	r0, r0, r3
 800c7b4:	4770      	bx	lr

0800c7b6 <__sfputc_r>:
 800c7b6:	6893      	ldr	r3, [r2, #8]
 800c7b8:	b410      	push	{r4}
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	6093      	str	r3, [r2, #8]
 800c7c0:	da07      	bge.n	800c7d2 <__sfputc_r+0x1c>
 800c7c2:	6994      	ldr	r4, [r2, #24]
 800c7c4:	42a3      	cmp	r3, r4
 800c7c6:	db01      	blt.n	800c7cc <__sfputc_r+0x16>
 800c7c8:	290a      	cmp	r1, #10
 800c7ca:	d102      	bne.n	800c7d2 <__sfputc_r+0x1c>
 800c7cc:	bc10      	pop	{r4}
 800c7ce:	f000 b931 	b.w	800ca34 <__swbuf_r>
 800c7d2:	6813      	ldr	r3, [r2, #0]
 800c7d4:	1c58      	adds	r0, r3, #1
 800c7d6:	6010      	str	r0, [r2, #0]
 800c7d8:	7019      	strb	r1, [r3, #0]
 800c7da:	4608      	mov	r0, r1
 800c7dc:	bc10      	pop	{r4}
 800c7de:	4770      	bx	lr

0800c7e0 <__sfputs_r>:
 800c7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	460f      	mov	r7, r1
 800c7e6:	4614      	mov	r4, r2
 800c7e8:	18d5      	adds	r5, r2, r3
 800c7ea:	42ac      	cmp	r4, r5
 800c7ec:	d101      	bne.n	800c7f2 <__sfputs_r+0x12>
 800c7ee:	2000      	movs	r0, #0
 800c7f0:	e007      	b.n	800c802 <__sfputs_r+0x22>
 800c7f2:	463a      	mov	r2, r7
 800c7f4:	4630      	mov	r0, r6
 800c7f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7fa:	f7ff ffdc 	bl	800c7b6 <__sfputc_r>
 800c7fe:	1c43      	adds	r3, r0, #1
 800c800:	d1f3      	bne.n	800c7ea <__sfputs_r+0xa>
 800c802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c804 <_vfiprintf_r>:
 800c804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c808:	460d      	mov	r5, r1
 800c80a:	4614      	mov	r4, r2
 800c80c:	4698      	mov	r8, r3
 800c80e:	4606      	mov	r6, r0
 800c810:	b09d      	sub	sp, #116	@ 0x74
 800c812:	b118      	cbz	r0, 800c81c <_vfiprintf_r+0x18>
 800c814:	6a03      	ldr	r3, [r0, #32]
 800c816:	b90b      	cbnz	r3, 800c81c <_vfiprintf_r+0x18>
 800c818:	f7fe f8fc 	bl	800aa14 <__sinit>
 800c81c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c81e:	07d9      	lsls	r1, r3, #31
 800c820:	d405      	bmi.n	800c82e <_vfiprintf_r+0x2a>
 800c822:	89ab      	ldrh	r3, [r5, #12]
 800c824:	059a      	lsls	r2, r3, #22
 800c826:	d402      	bmi.n	800c82e <_vfiprintf_r+0x2a>
 800c828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c82a:	f7fe fa0a 	bl	800ac42 <__retarget_lock_acquire_recursive>
 800c82e:	89ab      	ldrh	r3, [r5, #12]
 800c830:	071b      	lsls	r3, r3, #28
 800c832:	d501      	bpl.n	800c838 <_vfiprintf_r+0x34>
 800c834:	692b      	ldr	r3, [r5, #16]
 800c836:	b99b      	cbnz	r3, 800c860 <_vfiprintf_r+0x5c>
 800c838:	4629      	mov	r1, r5
 800c83a:	4630      	mov	r0, r6
 800c83c:	f000 f938 	bl	800cab0 <__swsetup_r>
 800c840:	b170      	cbz	r0, 800c860 <_vfiprintf_r+0x5c>
 800c842:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c844:	07dc      	lsls	r4, r3, #31
 800c846:	d504      	bpl.n	800c852 <_vfiprintf_r+0x4e>
 800c848:	f04f 30ff 	mov.w	r0, #4294967295
 800c84c:	b01d      	add	sp, #116	@ 0x74
 800c84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c852:	89ab      	ldrh	r3, [r5, #12]
 800c854:	0598      	lsls	r0, r3, #22
 800c856:	d4f7      	bmi.n	800c848 <_vfiprintf_r+0x44>
 800c858:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c85a:	f7fe f9f3 	bl	800ac44 <__retarget_lock_release_recursive>
 800c85e:	e7f3      	b.n	800c848 <_vfiprintf_r+0x44>
 800c860:	2300      	movs	r3, #0
 800c862:	9309      	str	r3, [sp, #36]	@ 0x24
 800c864:	2320      	movs	r3, #32
 800c866:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c86a:	2330      	movs	r3, #48	@ 0x30
 800c86c:	f04f 0901 	mov.w	r9, #1
 800c870:	f8cd 800c 	str.w	r8, [sp, #12]
 800c874:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ca20 <_vfiprintf_r+0x21c>
 800c878:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c87c:	4623      	mov	r3, r4
 800c87e:	469a      	mov	sl, r3
 800c880:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c884:	b10a      	cbz	r2, 800c88a <_vfiprintf_r+0x86>
 800c886:	2a25      	cmp	r2, #37	@ 0x25
 800c888:	d1f9      	bne.n	800c87e <_vfiprintf_r+0x7a>
 800c88a:	ebba 0b04 	subs.w	fp, sl, r4
 800c88e:	d00b      	beq.n	800c8a8 <_vfiprintf_r+0xa4>
 800c890:	465b      	mov	r3, fp
 800c892:	4622      	mov	r2, r4
 800c894:	4629      	mov	r1, r5
 800c896:	4630      	mov	r0, r6
 800c898:	f7ff ffa2 	bl	800c7e0 <__sfputs_r>
 800c89c:	3001      	adds	r0, #1
 800c89e:	f000 80a7 	beq.w	800c9f0 <_vfiprintf_r+0x1ec>
 800c8a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8a4:	445a      	add	r2, fp
 800c8a6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f000 809f 	beq.w	800c9f0 <_vfiprintf_r+0x1ec>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8bc:	f10a 0a01 	add.w	sl, sl, #1
 800c8c0:	9304      	str	r3, [sp, #16]
 800c8c2:	9307      	str	r3, [sp, #28]
 800c8c4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c8c8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c8ca:	4654      	mov	r4, sl
 800c8cc:	2205      	movs	r2, #5
 800c8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8d2:	4853      	ldr	r0, [pc, #332]	@ (800ca20 <_vfiprintf_r+0x21c>)
 800c8d4:	f7fe f9b7 	bl	800ac46 <memchr>
 800c8d8:	9a04      	ldr	r2, [sp, #16]
 800c8da:	b9d8      	cbnz	r0, 800c914 <_vfiprintf_r+0x110>
 800c8dc:	06d1      	lsls	r1, r2, #27
 800c8de:	bf44      	itt	mi
 800c8e0:	2320      	movmi	r3, #32
 800c8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8e6:	0713      	lsls	r3, r2, #28
 800c8e8:	bf44      	itt	mi
 800c8ea:	232b      	movmi	r3, #43	@ 0x2b
 800c8ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c8f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8f4:	2b2a      	cmp	r3, #42	@ 0x2a
 800c8f6:	d015      	beq.n	800c924 <_vfiprintf_r+0x120>
 800c8f8:	4654      	mov	r4, sl
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	f04f 0c0a 	mov.w	ip, #10
 800c900:	9a07      	ldr	r2, [sp, #28]
 800c902:	4621      	mov	r1, r4
 800c904:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c908:	3b30      	subs	r3, #48	@ 0x30
 800c90a:	2b09      	cmp	r3, #9
 800c90c:	d94b      	bls.n	800c9a6 <_vfiprintf_r+0x1a2>
 800c90e:	b1b0      	cbz	r0, 800c93e <_vfiprintf_r+0x13a>
 800c910:	9207      	str	r2, [sp, #28]
 800c912:	e014      	b.n	800c93e <_vfiprintf_r+0x13a>
 800c914:	eba0 0308 	sub.w	r3, r0, r8
 800c918:	fa09 f303 	lsl.w	r3, r9, r3
 800c91c:	4313      	orrs	r3, r2
 800c91e:	46a2      	mov	sl, r4
 800c920:	9304      	str	r3, [sp, #16]
 800c922:	e7d2      	b.n	800c8ca <_vfiprintf_r+0xc6>
 800c924:	9b03      	ldr	r3, [sp, #12]
 800c926:	1d19      	adds	r1, r3, #4
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	9103      	str	r1, [sp, #12]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	bfbb      	ittet	lt
 800c930:	425b      	neglt	r3, r3
 800c932:	f042 0202 	orrlt.w	r2, r2, #2
 800c936:	9307      	strge	r3, [sp, #28]
 800c938:	9307      	strlt	r3, [sp, #28]
 800c93a:	bfb8      	it	lt
 800c93c:	9204      	strlt	r2, [sp, #16]
 800c93e:	7823      	ldrb	r3, [r4, #0]
 800c940:	2b2e      	cmp	r3, #46	@ 0x2e
 800c942:	d10a      	bne.n	800c95a <_vfiprintf_r+0x156>
 800c944:	7863      	ldrb	r3, [r4, #1]
 800c946:	2b2a      	cmp	r3, #42	@ 0x2a
 800c948:	d132      	bne.n	800c9b0 <_vfiprintf_r+0x1ac>
 800c94a:	9b03      	ldr	r3, [sp, #12]
 800c94c:	3402      	adds	r4, #2
 800c94e:	1d1a      	adds	r2, r3, #4
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	9203      	str	r2, [sp, #12]
 800c954:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c958:	9305      	str	r3, [sp, #20]
 800c95a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ca24 <_vfiprintf_r+0x220>
 800c95e:	2203      	movs	r2, #3
 800c960:	4650      	mov	r0, sl
 800c962:	7821      	ldrb	r1, [r4, #0]
 800c964:	f7fe f96f 	bl	800ac46 <memchr>
 800c968:	b138      	cbz	r0, 800c97a <_vfiprintf_r+0x176>
 800c96a:	2240      	movs	r2, #64	@ 0x40
 800c96c:	9b04      	ldr	r3, [sp, #16]
 800c96e:	eba0 000a 	sub.w	r0, r0, sl
 800c972:	4082      	lsls	r2, r0
 800c974:	4313      	orrs	r3, r2
 800c976:	3401      	adds	r4, #1
 800c978:	9304      	str	r3, [sp, #16]
 800c97a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c97e:	2206      	movs	r2, #6
 800c980:	4829      	ldr	r0, [pc, #164]	@ (800ca28 <_vfiprintf_r+0x224>)
 800c982:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c986:	f7fe f95e 	bl	800ac46 <memchr>
 800c98a:	2800      	cmp	r0, #0
 800c98c:	d03f      	beq.n	800ca0e <_vfiprintf_r+0x20a>
 800c98e:	4b27      	ldr	r3, [pc, #156]	@ (800ca2c <_vfiprintf_r+0x228>)
 800c990:	bb1b      	cbnz	r3, 800c9da <_vfiprintf_r+0x1d6>
 800c992:	9b03      	ldr	r3, [sp, #12]
 800c994:	3307      	adds	r3, #7
 800c996:	f023 0307 	bic.w	r3, r3, #7
 800c99a:	3308      	adds	r3, #8
 800c99c:	9303      	str	r3, [sp, #12]
 800c99e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9a0:	443b      	add	r3, r7
 800c9a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9a4:	e76a      	b.n	800c87c <_vfiprintf_r+0x78>
 800c9a6:	460c      	mov	r4, r1
 800c9a8:	2001      	movs	r0, #1
 800c9aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9ae:	e7a8      	b.n	800c902 <_vfiprintf_r+0xfe>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	f04f 0c0a 	mov.w	ip, #10
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	3401      	adds	r4, #1
 800c9ba:	9305      	str	r3, [sp, #20]
 800c9bc:	4620      	mov	r0, r4
 800c9be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9c2:	3a30      	subs	r2, #48	@ 0x30
 800c9c4:	2a09      	cmp	r2, #9
 800c9c6:	d903      	bls.n	800c9d0 <_vfiprintf_r+0x1cc>
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d0c6      	beq.n	800c95a <_vfiprintf_r+0x156>
 800c9cc:	9105      	str	r1, [sp, #20]
 800c9ce:	e7c4      	b.n	800c95a <_vfiprintf_r+0x156>
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9d8:	e7f0      	b.n	800c9bc <_vfiprintf_r+0x1b8>
 800c9da:	ab03      	add	r3, sp, #12
 800c9dc:	9300      	str	r3, [sp, #0]
 800c9de:	462a      	mov	r2, r5
 800c9e0:	4630      	mov	r0, r6
 800c9e2:	4b13      	ldr	r3, [pc, #76]	@ (800ca30 <_vfiprintf_r+0x22c>)
 800c9e4:	a904      	add	r1, sp, #16
 800c9e6:	f7fd fbcb 	bl	800a180 <_printf_float>
 800c9ea:	4607      	mov	r7, r0
 800c9ec:	1c78      	adds	r0, r7, #1
 800c9ee:	d1d6      	bne.n	800c99e <_vfiprintf_r+0x19a>
 800c9f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c9f2:	07d9      	lsls	r1, r3, #31
 800c9f4:	d405      	bmi.n	800ca02 <_vfiprintf_r+0x1fe>
 800c9f6:	89ab      	ldrh	r3, [r5, #12]
 800c9f8:	059a      	lsls	r2, r3, #22
 800c9fa:	d402      	bmi.n	800ca02 <_vfiprintf_r+0x1fe>
 800c9fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c9fe:	f7fe f921 	bl	800ac44 <__retarget_lock_release_recursive>
 800ca02:	89ab      	ldrh	r3, [r5, #12]
 800ca04:	065b      	lsls	r3, r3, #25
 800ca06:	f53f af1f 	bmi.w	800c848 <_vfiprintf_r+0x44>
 800ca0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca0c:	e71e      	b.n	800c84c <_vfiprintf_r+0x48>
 800ca0e:	ab03      	add	r3, sp, #12
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	462a      	mov	r2, r5
 800ca14:	4630      	mov	r0, r6
 800ca16:	4b06      	ldr	r3, [pc, #24]	@ (800ca30 <_vfiprintf_r+0x22c>)
 800ca18:	a904      	add	r1, sp, #16
 800ca1a:	f7fd fe4f 	bl	800a6bc <_printf_i>
 800ca1e:	e7e4      	b.n	800c9ea <_vfiprintf_r+0x1e6>
 800ca20:	0800d040 	.word	0x0800d040
 800ca24:	0800d046 	.word	0x0800d046
 800ca28:	0800d04a 	.word	0x0800d04a
 800ca2c:	0800a181 	.word	0x0800a181
 800ca30:	0800c7e1 	.word	0x0800c7e1

0800ca34 <__swbuf_r>:
 800ca34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca36:	460e      	mov	r6, r1
 800ca38:	4614      	mov	r4, r2
 800ca3a:	4605      	mov	r5, r0
 800ca3c:	b118      	cbz	r0, 800ca46 <__swbuf_r+0x12>
 800ca3e:	6a03      	ldr	r3, [r0, #32]
 800ca40:	b90b      	cbnz	r3, 800ca46 <__swbuf_r+0x12>
 800ca42:	f7fd ffe7 	bl	800aa14 <__sinit>
 800ca46:	69a3      	ldr	r3, [r4, #24]
 800ca48:	60a3      	str	r3, [r4, #8]
 800ca4a:	89a3      	ldrh	r3, [r4, #12]
 800ca4c:	071a      	lsls	r2, r3, #28
 800ca4e:	d501      	bpl.n	800ca54 <__swbuf_r+0x20>
 800ca50:	6923      	ldr	r3, [r4, #16]
 800ca52:	b943      	cbnz	r3, 800ca66 <__swbuf_r+0x32>
 800ca54:	4621      	mov	r1, r4
 800ca56:	4628      	mov	r0, r5
 800ca58:	f000 f82a 	bl	800cab0 <__swsetup_r>
 800ca5c:	b118      	cbz	r0, 800ca66 <__swbuf_r+0x32>
 800ca5e:	f04f 37ff 	mov.w	r7, #4294967295
 800ca62:	4638      	mov	r0, r7
 800ca64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca66:	6823      	ldr	r3, [r4, #0]
 800ca68:	6922      	ldr	r2, [r4, #16]
 800ca6a:	b2f6      	uxtb	r6, r6
 800ca6c:	1a98      	subs	r0, r3, r2
 800ca6e:	6963      	ldr	r3, [r4, #20]
 800ca70:	4637      	mov	r7, r6
 800ca72:	4283      	cmp	r3, r0
 800ca74:	dc05      	bgt.n	800ca82 <__swbuf_r+0x4e>
 800ca76:	4621      	mov	r1, r4
 800ca78:	4628      	mov	r0, r5
 800ca7a:	f7ff fd9b 	bl	800c5b4 <_fflush_r>
 800ca7e:	2800      	cmp	r0, #0
 800ca80:	d1ed      	bne.n	800ca5e <__swbuf_r+0x2a>
 800ca82:	68a3      	ldr	r3, [r4, #8]
 800ca84:	3b01      	subs	r3, #1
 800ca86:	60a3      	str	r3, [r4, #8]
 800ca88:	6823      	ldr	r3, [r4, #0]
 800ca8a:	1c5a      	adds	r2, r3, #1
 800ca8c:	6022      	str	r2, [r4, #0]
 800ca8e:	701e      	strb	r6, [r3, #0]
 800ca90:	6962      	ldr	r2, [r4, #20]
 800ca92:	1c43      	adds	r3, r0, #1
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d004      	beq.n	800caa2 <__swbuf_r+0x6e>
 800ca98:	89a3      	ldrh	r3, [r4, #12]
 800ca9a:	07db      	lsls	r3, r3, #31
 800ca9c:	d5e1      	bpl.n	800ca62 <__swbuf_r+0x2e>
 800ca9e:	2e0a      	cmp	r6, #10
 800caa0:	d1df      	bne.n	800ca62 <__swbuf_r+0x2e>
 800caa2:	4621      	mov	r1, r4
 800caa4:	4628      	mov	r0, r5
 800caa6:	f7ff fd85 	bl	800c5b4 <_fflush_r>
 800caaa:	2800      	cmp	r0, #0
 800caac:	d0d9      	beq.n	800ca62 <__swbuf_r+0x2e>
 800caae:	e7d6      	b.n	800ca5e <__swbuf_r+0x2a>

0800cab0 <__swsetup_r>:
 800cab0:	b538      	push	{r3, r4, r5, lr}
 800cab2:	4b29      	ldr	r3, [pc, #164]	@ (800cb58 <__swsetup_r+0xa8>)
 800cab4:	4605      	mov	r5, r0
 800cab6:	6818      	ldr	r0, [r3, #0]
 800cab8:	460c      	mov	r4, r1
 800caba:	b118      	cbz	r0, 800cac4 <__swsetup_r+0x14>
 800cabc:	6a03      	ldr	r3, [r0, #32]
 800cabe:	b90b      	cbnz	r3, 800cac4 <__swsetup_r+0x14>
 800cac0:	f7fd ffa8 	bl	800aa14 <__sinit>
 800cac4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cac8:	0719      	lsls	r1, r3, #28
 800caca:	d422      	bmi.n	800cb12 <__swsetup_r+0x62>
 800cacc:	06da      	lsls	r2, r3, #27
 800cace:	d407      	bmi.n	800cae0 <__swsetup_r+0x30>
 800cad0:	2209      	movs	r2, #9
 800cad2:	602a      	str	r2, [r5, #0]
 800cad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cad8:	f04f 30ff 	mov.w	r0, #4294967295
 800cadc:	81a3      	strh	r3, [r4, #12]
 800cade:	e033      	b.n	800cb48 <__swsetup_r+0x98>
 800cae0:	0758      	lsls	r0, r3, #29
 800cae2:	d512      	bpl.n	800cb0a <__swsetup_r+0x5a>
 800cae4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cae6:	b141      	cbz	r1, 800cafa <__swsetup_r+0x4a>
 800cae8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800caec:	4299      	cmp	r1, r3
 800caee:	d002      	beq.n	800caf6 <__swsetup_r+0x46>
 800caf0:	4628      	mov	r0, r5
 800caf2:	f7fe ff09 	bl	800b908 <_free_r>
 800caf6:	2300      	movs	r3, #0
 800caf8:	6363      	str	r3, [r4, #52]	@ 0x34
 800cafa:	89a3      	ldrh	r3, [r4, #12]
 800cafc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cb00:	81a3      	strh	r3, [r4, #12]
 800cb02:	2300      	movs	r3, #0
 800cb04:	6063      	str	r3, [r4, #4]
 800cb06:	6923      	ldr	r3, [r4, #16]
 800cb08:	6023      	str	r3, [r4, #0]
 800cb0a:	89a3      	ldrh	r3, [r4, #12]
 800cb0c:	f043 0308 	orr.w	r3, r3, #8
 800cb10:	81a3      	strh	r3, [r4, #12]
 800cb12:	6923      	ldr	r3, [r4, #16]
 800cb14:	b94b      	cbnz	r3, 800cb2a <__swsetup_r+0x7a>
 800cb16:	89a3      	ldrh	r3, [r4, #12]
 800cb18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cb1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb20:	d003      	beq.n	800cb2a <__swsetup_r+0x7a>
 800cb22:	4621      	mov	r1, r4
 800cb24:	4628      	mov	r0, r5
 800cb26:	f000 f882 	bl	800cc2e <__smakebuf_r>
 800cb2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb2e:	f013 0201 	ands.w	r2, r3, #1
 800cb32:	d00a      	beq.n	800cb4a <__swsetup_r+0x9a>
 800cb34:	2200      	movs	r2, #0
 800cb36:	60a2      	str	r2, [r4, #8]
 800cb38:	6962      	ldr	r2, [r4, #20]
 800cb3a:	4252      	negs	r2, r2
 800cb3c:	61a2      	str	r2, [r4, #24]
 800cb3e:	6922      	ldr	r2, [r4, #16]
 800cb40:	b942      	cbnz	r2, 800cb54 <__swsetup_r+0xa4>
 800cb42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cb46:	d1c5      	bne.n	800cad4 <__swsetup_r+0x24>
 800cb48:	bd38      	pop	{r3, r4, r5, pc}
 800cb4a:	0799      	lsls	r1, r3, #30
 800cb4c:	bf58      	it	pl
 800cb4e:	6962      	ldrpl	r2, [r4, #20]
 800cb50:	60a2      	str	r2, [r4, #8]
 800cb52:	e7f4      	b.n	800cb3e <__swsetup_r+0x8e>
 800cb54:	2000      	movs	r0, #0
 800cb56:	e7f7      	b.n	800cb48 <__swsetup_r+0x98>
 800cb58:	2000019c 	.word	0x2000019c

0800cb5c <_raise_r>:
 800cb5c:	291f      	cmp	r1, #31
 800cb5e:	b538      	push	{r3, r4, r5, lr}
 800cb60:	4605      	mov	r5, r0
 800cb62:	460c      	mov	r4, r1
 800cb64:	d904      	bls.n	800cb70 <_raise_r+0x14>
 800cb66:	2316      	movs	r3, #22
 800cb68:	6003      	str	r3, [r0, #0]
 800cb6a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb6e:	bd38      	pop	{r3, r4, r5, pc}
 800cb70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cb72:	b112      	cbz	r2, 800cb7a <_raise_r+0x1e>
 800cb74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb78:	b94b      	cbnz	r3, 800cb8e <_raise_r+0x32>
 800cb7a:	4628      	mov	r0, r5
 800cb7c:	f000 f830 	bl	800cbe0 <_getpid_r>
 800cb80:	4622      	mov	r2, r4
 800cb82:	4601      	mov	r1, r0
 800cb84:	4628      	mov	r0, r5
 800cb86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb8a:	f000 b817 	b.w	800cbbc <_kill_r>
 800cb8e:	2b01      	cmp	r3, #1
 800cb90:	d00a      	beq.n	800cba8 <_raise_r+0x4c>
 800cb92:	1c59      	adds	r1, r3, #1
 800cb94:	d103      	bne.n	800cb9e <_raise_r+0x42>
 800cb96:	2316      	movs	r3, #22
 800cb98:	6003      	str	r3, [r0, #0]
 800cb9a:	2001      	movs	r0, #1
 800cb9c:	e7e7      	b.n	800cb6e <_raise_r+0x12>
 800cb9e:	2100      	movs	r1, #0
 800cba0:	4620      	mov	r0, r4
 800cba2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cba6:	4798      	blx	r3
 800cba8:	2000      	movs	r0, #0
 800cbaa:	e7e0      	b.n	800cb6e <_raise_r+0x12>

0800cbac <raise>:
 800cbac:	4b02      	ldr	r3, [pc, #8]	@ (800cbb8 <raise+0xc>)
 800cbae:	4601      	mov	r1, r0
 800cbb0:	6818      	ldr	r0, [r3, #0]
 800cbb2:	f7ff bfd3 	b.w	800cb5c <_raise_r>
 800cbb6:	bf00      	nop
 800cbb8:	2000019c 	.word	0x2000019c

0800cbbc <_kill_r>:
 800cbbc:	b538      	push	{r3, r4, r5, lr}
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	4d06      	ldr	r5, [pc, #24]	@ (800cbdc <_kill_r+0x20>)
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	4608      	mov	r0, r1
 800cbc6:	4611      	mov	r1, r2
 800cbc8:	602b      	str	r3, [r5, #0]
 800cbca:	f7f4 fecc 	bl	8001966 <_kill>
 800cbce:	1c43      	adds	r3, r0, #1
 800cbd0:	d102      	bne.n	800cbd8 <_kill_r+0x1c>
 800cbd2:	682b      	ldr	r3, [r5, #0]
 800cbd4:	b103      	cbz	r3, 800cbd8 <_kill_r+0x1c>
 800cbd6:	6023      	str	r3, [r4, #0]
 800cbd8:	bd38      	pop	{r3, r4, r5, pc}
 800cbda:	bf00      	nop
 800cbdc:	200017fc 	.word	0x200017fc

0800cbe0 <_getpid_r>:
 800cbe0:	f7f4 beba 	b.w	8001958 <_getpid>

0800cbe4 <__swhatbuf_r>:
 800cbe4:	b570      	push	{r4, r5, r6, lr}
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbec:	4615      	mov	r5, r2
 800cbee:	2900      	cmp	r1, #0
 800cbf0:	461e      	mov	r6, r3
 800cbf2:	b096      	sub	sp, #88	@ 0x58
 800cbf4:	da0c      	bge.n	800cc10 <__swhatbuf_r+0x2c>
 800cbf6:	89a3      	ldrh	r3, [r4, #12]
 800cbf8:	2100      	movs	r1, #0
 800cbfa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cbfe:	bf14      	ite	ne
 800cc00:	2340      	movne	r3, #64	@ 0x40
 800cc02:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cc06:	2000      	movs	r0, #0
 800cc08:	6031      	str	r1, [r6, #0]
 800cc0a:	602b      	str	r3, [r5, #0]
 800cc0c:	b016      	add	sp, #88	@ 0x58
 800cc0e:	bd70      	pop	{r4, r5, r6, pc}
 800cc10:	466a      	mov	r2, sp
 800cc12:	f000 f849 	bl	800cca8 <_fstat_r>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	dbed      	blt.n	800cbf6 <__swhatbuf_r+0x12>
 800cc1a:	9901      	ldr	r1, [sp, #4]
 800cc1c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cc20:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cc24:	4259      	negs	r1, r3
 800cc26:	4159      	adcs	r1, r3
 800cc28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cc2c:	e7eb      	b.n	800cc06 <__swhatbuf_r+0x22>

0800cc2e <__smakebuf_r>:
 800cc2e:	898b      	ldrh	r3, [r1, #12]
 800cc30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc32:	079d      	lsls	r5, r3, #30
 800cc34:	4606      	mov	r6, r0
 800cc36:	460c      	mov	r4, r1
 800cc38:	d507      	bpl.n	800cc4a <__smakebuf_r+0x1c>
 800cc3a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cc3e:	6023      	str	r3, [r4, #0]
 800cc40:	6123      	str	r3, [r4, #16]
 800cc42:	2301      	movs	r3, #1
 800cc44:	6163      	str	r3, [r4, #20]
 800cc46:	b003      	add	sp, #12
 800cc48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc4a:	466a      	mov	r2, sp
 800cc4c:	ab01      	add	r3, sp, #4
 800cc4e:	f7ff ffc9 	bl	800cbe4 <__swhatbuf_r>
 800cc52:	9f00      	ldr	r7, [sp, #0]
 800cc54:	4605      	mov	r5, r0
 800cc56:	4639      	mov	r1, r7
 800cc58:	4630      	mov	r0, r6
 800cc5a:	f7fe fec7 	bl	800b9ec <_malloc_r>
 800cc5e:	b948      	cbnz	r0, 800cc74 <__smakebuf_r+0x46>
 800cc60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc64:	059a      	lsls	r2, r3, #22
 800cc66:	d4ee      	bmi.n	800cc46 <__smakebuf_r+0x18>
 800cc68:	f023 0303 	bic.w	r3, r3, #3
 800cc6c:	f043 0302 	orr.w	r3, r3, #2
 800cc70:	81a3      	strh	r3, [r4, #12]
 800cc72:	e7e2      	b.n	800cc3a <__smakebuf_r+0xc>
 800cc74:	89a3      	ldrh	r3, [r4, #12]
 800cc76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cc7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc7e:	81a3      	strh	r3, [r4, #12]
 800cc80:	9b01      	ldr	r3, [sp, #4]
 800cc82:	6020      	str	r0, [r4, #0]
 800cc84:	b15b      	cbz	r3, 800cc9e <__smakebuf_r+0x70>
 800cc86:	4630      	mov	r0, r6
 800cc88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc8c:	f000 f81e 	bl	800cccc <_isatty_r>
 800cc90:	b128      	cbz	r0, 800cc9e <__smakebuf_r+0x70>
 800cc92:	89a3      	ldrh	r3, [r4, #12]
 800cc94:	f023 0303 	bic.w	r3, r3, #3
 800cc98:	f043 0301 	orr.w	r3, r3, #1
 800cc9c:	81a3      	strh	r3, [r4, #12]
 800cc9e:	89a3      	ldrh	r3, [r4, #12]
 800cca0:	431d      	orrs	r5, r3
 800cca2:	81a5      	strh	r5, [r4, #12]
 800cca4:	e7cf      	b.n	800cc46 <__smakebuf_r+0x18>
	...

0800cca8 <_fstat_r>:
 800cca8:	b538      	push	{r3, r4, r5, lr}
 800ccaa:	2300      	movs	r3, #0
 800ccac:	4d06      	ldr	r5, [pc, #24]	@ (800ccc8 <_fstat_r+0x20>)
 800ccae:	4604      	mov	r4, r0
 800ccb0:	4608      	mov	r0, r1
 800ccb2:	4611      	mov	r1, r2
 800ccb4:	602b      	str	r3, [r5, #0]
 800ccb6:	f7f4 feb5 	bl	8001a24 <_fstat>
 800ccba:	1c43      	adds	r3, r0, #1
 800ccbc:	d102      	bne.n	800ccc4 <_fstat_r+0x1c>
 800ccbe:	682b      	ldr	r3, [r5, #0]
 800ccc0:	b103      	cbz	r3, 800ccc4 <_fstat_r+0x1c>
 800ccc2:	6023      	str	r3, [r4, #0]
 800ccc4:	bd38      	pop	{r3, r4, r5, pc}
 800ccc6:	bf00      	nop
 800ccc8:	200017fc 	.word	0x200017fc

0800cccc <_isatty_r>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	2300      	movs	r3, #0
 800ccd0:	4d05      	ldr	r5, [pc, #20]	@ (800cce8 <_isatty_r+0x1c>)
 800ccd2:	4604      	mov	r4, r0
 800ccd4:	4608      	mov	r0, r1
 800ccd6:	602b      	str	r3, [r5, #0]
 800ccd8:	f7f4 feb3 	bl	8001a42 <_isatty>
 800ccdc:	1c43      	adds	r3, r0, #1
 800ccde:	d102      	bne.n	800cce6 <_isatty_r+0x1a>
 800cce0:	682b      	ldr	r3, [r5, #0]
 800cce2:	b103      	cbz	r3, 800cce6 <_isatty_r+0x1a>
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	bd38      	pop	{r3, r4, r5, pc}
 800cce8:	200017fc 	.word	0x200017fc

0800ccec <_init>:
 800ccec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccee:	bf00      	nop
 800ccf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccf2:	bc08      	pop	{r3}
 800ccf4:	469e      	mov	lr, r3
 800ccf6:	4770      	bx	lr

0800ccf8 <_fini>:
 800ccf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccfa:	bf00      	nop
 800ccfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccfe:	bc08      	pop	{r3}
 800cd00:	469e      	mov	lr, r3
 800cd02:	4770      	bx	lr
